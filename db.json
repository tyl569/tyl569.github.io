{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/robots.txt","path":"robots.txt","modified":0,"renderable":1},{"_id":"themes/next/source/404.md","path":"404.md","modified":0,"renderable":1},{"_id":"themes/next/source/animate/index.html","path":"animate/index.html","modified":0,"renderable":1},{"_id":"themes/next/source/animate/style.css","path":"animate/style.css","modified":0,"renderable":1},{"_id":"themes/next/source/docs/index.md","path":"docs/index.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/troubleshooting.md","path":"docs/troubleshooting.md","modified":0,"renderable":1},{"_id":"themes/next/source/highlight/index.html","path":"highlight/index.html","modified":0,"renderable":1},{"_id":"themes/next/source/highlight/unavailable.js","path":"highlight/unavailable.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/add-this-id.png","path":"images/add-this-id.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia-1.png","path":"images/algolia-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia-2.png","path":"images/algolia-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia-3.png","path":"images/algolia-3.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia-4.png","path":"images/algolia-4.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia-5.png","path":"images/algolia-5.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/analytics-baidu-id.png","path":"images/analytics-baidu-id.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/baidu.png","path":"images/baidu.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cn.png","path":"images/cn.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/default.svg","path":"images/default.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/en.png","path":"images/en.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/firebase.png","path":"images/firebase.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/group-picture-1.png","path":"images/group-picture-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/group-picture-2.png","path":"images/group-picture-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/next-default-scheme.png","path":"images/next-default-scheme.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/next-schemes-dark.png","path":"images/next-schemes-dark.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/next-schemes.png","path":"images/next-schemes.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/next.svg","path":"images/next.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/ru.png","path":"images/ru.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/tomorrow-night-blue.svg","path":"images/tomorrow-night-blue.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/tomorrow-night-bright.svg","path":"images/tomorrow-night-bright.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/tomorrow-night-eighties.svg","path":"images/tomorrow-night-eighties.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/tomorrow.svg","path":"images/tomorrow.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/tomorrow-night.svg","path":"images/tomorrow-night.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/valine-1.png","path":"images/valine-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/valine-2.png","path":"images/valine-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/plugins/index.md","path":"plugins/index.md","modified":0,"renderable":1},{"_id":"themes/next/source/animate/images/ddown.png","path":"animate/images/ddown.png","modified":0,"renderable":1},{"_id":"themes/next/source/animate/images/ddown.svg","path":"animate/images/ddown.svg","modified":0,"renderable":1},{"_id":"themes/next/source/docs/advanced-settings/custom-files.md","path":"docs/advanced-settings/custom-files.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/advanced-settings/front-matter.md","path":"docs/advanced-settings/front-matter.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/advanced-settings/index.md","path":"docs/advanced-settings/index.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/advanced-settings/injects.md","path":"docs/advanced-settings/injects.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/advanced-settings/vendors.md","path":"docs/advanced-settings/vendors.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/getting-started/configuration.md","path":"docs/getting-started/configuration.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/getting-started/deployment.md","path":"docs/getting-started/deployment.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/getting-started/index.md","path":"docs/getting-started/index.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/getting-started/installation.md","path":"docs/getting-started/installation.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/getting-started/upgrade.md","path":"docs/getting-started/upgrade.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/button.md","path":"docs/tag-plugins/button.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/caniuse.md","path":"docs/tag-plugins/caniuse.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/group-pictures.md","path":"docs/tag-plugins/group-pictures.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/index.md","path":"docs/tag-plugins/index.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/label.md","path":"docs/tag-plugins/label.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/link-grid.md","path":"docs/tag-plugins/link-grid.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/mermaid.md","path":"docs/tag-plugins/mermaid.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/note.md","path":"docs/tag-plugins/note.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/pdf.md","path":"docs/tag-plugins/pdf.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/tag-plugins/tabs.md","path":"docs/tag-plugins/tabs.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/custom-pages.md","path":"docs/theme-settings/custom-pages.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/footer.md","path":"docs/theme-settings/footer.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/index.md","path":"docs/theme-settings/index.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/internationalization.md","path":"docs/theme-settings/internationalization.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/miscellaneous.md","path":"docs/theme-settings/miscellaneous.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/posts.md","path":"docs/theme-settings/posts.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/seo.md","path":"docs/theme-settings/seo.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/theme-settings/sidebar.md","path":"docs/theme-settings/sidebar.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/chat-services.md","path":"docs/third-party-services/chat-services.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/comments.md","path":"docs/third-party-services/comments.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/external-libraries.md","path":"docs/third-party-services/external-libraries.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/index.md","path":"docs/third-party-services/index.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/math-equations.md","path":"docs/third-party-services/math-equations.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/search-services.md","path":"docs/third-party-services/search-services.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/post-widgets.md","path":"docs/third-party-services/post-widgets.md","modified":0,"renderable":1},{"_id":"themes/next/source/docs/third-party-services/statistics-and-analytics.md","path":"docs/third-party-services/statistics-and-analytics.md","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/【以太坊】创建以太坊钱包（mist）.md","hash":"c2f445a5f2d2cb8e7b70fed0c1134ff667ffad09","modified":1647129178693},{"_id":"source/_posts/aliyun-mq.md","hash":"8d80995ca999939c477eee049b838d21024f019b","modified":1647134008630},{"_id":"source/_posts/approve-transfer.md","hash":"e0f1a41b95d44dc8d2d2fe118fb501e124144b9c","modified":1647129178880},{"_id":"source/_posts/awk.md","hash":"a67df22a327e29c720de822c555e3a80fec33643","modified":1647134232409},{"_id":"source/_posts/bash-lean-1.md","hash":"af8e0a46bb96bb8165494c103320bcc62f018f9b","modified":1647129178656},{"_id":"source/_posts/brew-update-error1.md","hash":"e4b6ebb95e529089e69ee9e47d406f0349eaede8","modified":1647129178871},{"_id":"source/_posts/code-to-lose-weight.md","hash":"cfbbf71a5d2314a785931154ef175b21fdffa362","modified":1647134232528},{"_id":"source/_posts/contract-eth.md","hash":"a09d6dcfb01115eaad057ae6aaf16a35b1f354b3","modified":1647134322687},{"_id":"source/_posts/curlopt-timeout-ms.md","hash":"c20aa936d3ee055e7fc3f7c071a5e0f94e83c303","modified":1647129178659},{"_id":"source/_posts/curl-https-502.md","hash":"275d6872a00cc710b686d8c769a31253cb3cf3bc","modified":1647129178758},{"_id":"source/_posts/docker-libnetwork.md","hash":"f445519531362a13c2fc24859b99fca9e8a441fb","modified":1647134232409},{"_id":"source/_posts/ascii-unicode-utf-8.md","hash":"7c2b49477a82091c5501281c7158be607c9b5d10","modified":1647129178853},{"_id":"source/_posts/debug-php7.md","hash":"30b6ce973b9197fe45d54b0e18d50f4829163927","modified":1647134232527},{"_id":"source/_posts/docker-cgroups.md","hash":"9382ec3a3cf69f4f20df0bbf030b9269de1ee3c3","modified":1647134232409},{"_id":"source/_posts/docker-golang.md","hash":"e645f4f9cd69e361e2b93d64c3ec4c3a0c8ae4a9","modified":1647129178790},{"_id":"source/_posts/docker-link.md","hash":"08ad48dee997e9798f353312b6a1f00929c11f24","modified":1647134232611},{"_id":"source/_posts/docker-lnmp-2.md","hash":"fceb5851924df98f593acd751d3ab9f0f3e1c570","modified":1647134009485},{"_id":"source/_posts/docker-lnmp.md","hash":"a3bec5bfadb792b2ca3402a9d29ac90b6a3fa780","modified":1647129178729},{"_id":"source/_posts/docker-namespace.md","hash":"ec4562f439a7b08fe574c5948398e902e3fb5ce7","modified":1647134232409},{"_id":"source/_posts/docker-safe-and-config.md","hash":"8e01424876667d79e20801fee6289e1677315321","modified":1647134232409},{"_id":"source/_posts/docker版本mysql5-7及以上版本-only-full-group-by报错的解决方法.md","hash":"1e8ed8af44cbbb5d5f901c935df4d66a7af77ca6","modified":1647129535222},{"_id":"source/_posts/docker-unionfs.md","hash":"cdd8299fe20d8cdee63416e35617659f6f00b672","modified":1647134232611},{"_id":"source/_posts/empty-and-count.md","hash":"27cbe1e13cbedf887e7a8c18b4060f5e51fb1b4a","modified":1647129178861},{"_id":"source/_posts/eth-2.md","hash":"38a24ed43a78643b1effe54f9660459c86a13118","modified":1647129178743},{"_id":"source/_posts/download-weibo-video.md","hash":"1e30b4578d8fa33a6645f34fd294cf076896efef","modified":1647134232527},{"_id":"source/_posts/git-push-error.md","hash":"3b848a6ae77ac771c1afcc4244da27348699cb73","modified":1647129178663},{"_id":"source/_posts/eth-contract-demo.md","hash":"888f96c7c75b45d332555b1b5fb42acc94aa3f53","modified":1647134322687},{"_id":"source/_posts/eth.md","hash":"120f693c50d5188ee37d46f61bbfaf595f428851","modified":1647134232505},{"_id":"source/_posts/git-branch.md","hash":"03ca7e248a6a7e169c57ce999cb0e8ddbe442536","modified":1647134008630},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1647128666215},{"_id":"source/_posts/greedy.md","hash":"c53bbc747f12eb780f2663215fe4b3aced3f6aa3","modified":1647129178838},{"_id":"source/_posts/git-ssh-https.md","hash":"0ae5da1466224673f7257f5afa23e8689a690dd4","modified":1647129178713},{"_id":"source/_posts/interview-phpers.md","hash":"ebdea2b98394df9e1422b7fb9fdbdb424b451ca8","modified":1647134232526},{"_id":"source/_posts/install-abigen.md","hash":"66b565cdfd3d148578e57b0c48bf1b9218a673a2","modified":1647134322687},{"_id":"source/_posts/linux-add-user-group.md","hash":"cfa6e999a3880e71b9ea0690c2e5d68d765cc6ac","modified":1647129178668},{"_id":"source/_posts/limit-req-limit-conn.md","hash":"a6a5a5c5e80e4921065d0c78976573b1d1b14937","modified":1647134232611},{"_id":"source/_posts/linux-hang-up.md","hash":"6b6c7482e4f30fc8c0ff6dcaa3b46cb5eea34b2b","modified":1647134008630},{"_id":"source/_posts/linux-alias.md","hash":"bb5978688c42f47b278b1433d2fc5d968699bba2","modified":1647129178670},{"_id":"source/_posts/linux-install-supervisor.md","hash":"c72f48c4499ed13ac02d3042d398b71f0b64024c","modified":1647134008630},{"_id":"source/_posts/linux-php-const.md","hash":"44408c94a0b0d591d9be34d749cf5c8473c4dcb4","modified":1647134232611},{"_id":"source/_posts/linux-ulimit-warning.md","hash":"d5d475befa6128ccf5b51afe2e608f29ef08de7e","modified":1647129178841},{"_id":"source/_posts/linux之统计ip排行.md","hash":"ca3dcb010c144f7d28d38d6efbc12bd85dd2f79e","modified":1647134232410},{"_id":"source/_posts/mysql-generated-columns.md","hash":"62d00879690b918408b11076337dab2c04b111e8","modified":1647129178820},{"_id":"source/_posts/mac-phpbrew.md","hash":"eb79bec8cf3affeb7ca989ff7c146c4d118bc5d6","modified":1647129178868},{"_id":"source/_posts/make-php-error.md","hash":"655d90e8042d4b69247da62958f59bfc7c4bd7cb","modified":1647129178856},{"_id":"source/_posts/mysql-index.md","hash":"f87d7eda4830007f06e89335937aeaebde18a266","modified":1647134232611},{"_id":"source/_posts/mysql-transaction.md","hash":"e39976a59b1003b8f9d8fcf1fd0cb6d277eba2bc","modified":1647134008630},{"_id":"source/_posts/mysqldump-excel.md","hash":"61b5dddb973e0465ba759edfc923e6ebb4ea1035","modified":1647134232517},{"_id":"source/_posts/nginx-limit-rate.md","hash":"937fbe8f824858d901c2b01827a5280a9d11c440","modified":1647134232611},{"_id":"source/_posts/nginx-tcp-proxy.md","hash":"a48129325fa8e825eb0a00598bfa1ebf902eab51","modified":1647129178722},{"_id":"source/_posts/nodejs-error-cant-set-headers-after-they-are-sent.md","hash":"01aa70e1a0af57078ac821a8260ee53714885875","modified":1647129178682},{"_id":"source/_posts/nodejs-pm2.md","hash":"05b9ded5ba8faa85531fa60db2c2c0b7639a95a5","modified":1647129178679},{"_id":"source/_posts/nohup.md","hash":"5879f9e6fe265b6923428f7d85dc84279066aa5a","modified":1647129178850},{"_id":"source/_posts/nodejs-lang.md","hash":"ab157e1abc3fb5cd4298cfac6a2c18554e964a95","modified":1647129178677},{"_id":"source/_posts/php-7-hello-world.md","hash":"84363bf6b0316866d998498e312d77f4da071eba","modified":1647129178684},{"_id":"source/_posts/php-apollo-config-center.md","hash":"dc142d123a2c5efd83a8f64b101d3faaf1f9e36a","modified":1647134232526},{"_id":"source/_posts/php-adapter-mode.md","hash":"f8e9c8ff81fb29d9a4d1e7875cd682146a694a84","modified":1647134232526},{"_id":"source/_posts/php-array.md","hash":"60189368734f7317c26d44fb85f5b31f6ab0a462","modified":1647134322687},{"_id":"source/_posts/php-fastcgi-finish-request.md","hash":"b2f81345765a31520c8bd0908bfe30416da7c8bb","modified":1647129178709},{"_id":"source/_posts/php-curl-json.md","hash":"ea31ec78d265342d8350d449fff7ca1d56588e5b","modified":1647129178700},{"_id":"source/_posts/php-factory.md","hash":"48ef69f6ccb21389d5eaac4e57db4e846a07efa4","modified":1647134232537},{"_id":"source/_posts/php-lifetime.md","hash":"b8006da27caafe70627f0d3d1a2ab1a971c140ae","modified":1647134008630},{"_id":"source/_posts/php-float-double-precision.md","hash":"97034a823bdae3a90f861be929ea3317e679701b","modified":1647129178825},{"_id":"source/_posts/php-json-encode.md","hash":"b10570b3568f4a97b771064fdc1242c0bf8b6a86","modified":1647134232611},{"_id":"source/_posts/php-parse-post.md","hash":"30d30f22a0d32bbaa0e5665d0c3cf4fae3924835","modified":1647129178863},{"_id":"source/_posts/php-prototype-pattern.md","hash":"d6cb8a67c4a3a66223bcaa9ab713fac1021d9407","modified":1647134232493},{"_id":"source/_posts/php-rsa.md","hash":"a209c579a36b0c73e5c3a903c0f5f097316a58da","modified":1647129178706},{"_id":"source/_posts/php-sapi.md","hash":"3190b6335109ba5144ef8a25c0617946cc184d92","modified":1647134008630},{"_id":"source/_posts/php-utc2gmt.md","hash":"0223007d987c3f32305be061a9f5b166ba20d02e","modified":1647129178702},{"_id":"source/_posts/php-xml.md","hash":"caefb2a966064d3919d9fd33c0cdd968cf0a5fd8","modified":1647129178688},{"_id":"source/_posts/php7-function.md","hash":"fb61e40ccaf68e5df6abb34bbed84614a25671e7","modified":1647129178686},{"_id":"source/_posts/php7-copy-on-write.md","hash":"e607c6158acc5686083f055f72e39a911d9f606e","modified":1647134232611},{"_id":"source/_posts/php7-gc.md","hash":"fbba0748d50e0169a6dc0c20e38d2f7ac7e26c1e","modified":1647134232611},{"_id":"source/_posts/php7-refcount.md","hash":"212972f2b7a3dc7d9dd4bfc34c3409e9d4cb2433","modified":1647134232611},{"_id":"source/_posts/phpsource-hash.md","hash":"4a21ed54071f0331fadb9651d79b1153f6872e3f","modified":1647134232413},{"_id":"source/_posts/phpsource-cli.md","hash":"224ca60e03ae99311d5842fa176c8078ef74a0e6","modified":1647129178727},{"_id":"source/_posts/playing.md","hash":"8ab3142c57aa2102a48c3063533d56d64120bfb5","modified":1647134232611},{"_id":"source/_posts/phuket-travel.md","hash":"9faa82f641cf7fa153a8d63aa063f023dddc7c8c","modified":1647134232611},{"_id":"source/_posts/principle-of-diligence.md","hash":"dc52eae46069274e6a6c621979109d459f12c3e2","modified":1647129178804},{"_id":"source/_posts/reading-code-clean.md","hash":"3088076233d253fe3ed04ffd818a39b03b2ea133","modified":1647129178650},{"_id":"source/_posts/redis-hyperloglog.md","hash":"0063d655f317c08b924cbb40c2587a405c3725e0","modified":1647129178859},{"_id":"source/_posts/reading.md","hash":"c9d1a7945f6ae5f469562e03f064ae7caf1682a6","modified":1647129178784},{"_id":"source/_posts/regular.md","hash":"786849b403bc1d62d66f397fe098650ea04819b7","modified":1647129178644},{"_id":"source/_posts/solidity-keyword.md","hash":"51e13039d67825fb589baff1fa02892ba55a6768","modified":1647129178878},{"_id":"source/_posts/return.md","hash":"573c9f17a532075ff52421b36853868da6aece56","modified":1647134232611},{"_id":"source/_posts/sphinx-warning.md","hash":"b03fbce07f085df28c9b57427822c24af783df92","modified":1647134008630},{"_id":"source/_posts/structured-thinking.md","hash":"1a5c87f9fd2ca77554652dcaeb66f8b02bce5849","modified":1647134232611},{"_id":"source/_posts/ubuntu-version.md","hash":"508e7a0daf79b488f2293179cb3aebb956345d85","modified":1647129178716},{"_id":"source/_posts/thinking-1.md","hash":"dd06acbb073b8f4b1e9a3177792f2eef9c26fa2d","modified":1647129178653},{"_id":"source/_posts/ubuntu搭建lnmp环境.md","hash":"52b614fa50026cf22819299edb8f0735b5873642","modified":1647129178718},{"_id":"source/_posts/vscode-install-psr2.md","hash":"91407e04b64a3ab76fc11fab1a6a043e89a530fc","modified":1647134232528},{"_id":"source/_posts/当我们聊技术实力的时候，我们到底在聊什么.md","hash":"e4305791b6b9de299d38d28ab591fa664ceeeb81","modified":1647134232506},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1647128681181},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1647128681181},{"_id":"public/2022/03/13/hello-world/index.html","hash":"c0c9bb078bf71b12a027f329e93ff9e67c83ecb8","modified":1647129556460},{"_id":"public/2021/06/16/contract-eth/index.html","hash":"6501d0a5396ccb8bf5707884fbc01ededa5272b9","modified":1647140731049},{"_id":"public/2021/10/04/docker版本mysql5-7及以上版本-only-full-group-by报错的解决方法/index.html","hash":"e09e1cc5053cc16d6b5bbfb1c6a8d6abbc50b247","modified":1647140731049},{"_id":"public/2021/05/30/solidity-keyword/index.html","hash":"c5af9a10ad0572b1b6b8c7fb2bcf1611f1dfbad2","modified":1647140731049},{"_id":"public/2021/06/07/approve-transfer/index.html","hash":"123e50fa8890774cefdce1ce2af6fad326c93757","modified":1647140731049},{"_id":"public/2021/05/24/eth-contract-demo/index.html","hash":"fbb0831e1d3cf9e26cda03fa3be2805de309b4e2","modified":1647140731049},{"_id":"public/2021/05/19/install-abigen/index.html","hash":"36b411b00efca4e9e3bf41645229198773fe5d41","modified":1647140731049},{"_id":"public/2021/05/16/brew-update-error1/index.html","hash":"bc69bfa74d9299f396849289c3af166848454473","modified":1647140731049},{"_id":"public/2020/10/25/empty-and-count/index.html","hash":"5e81ce9b1d459894837ff5a0dd7d1faf747bf010","modified":1647140731049},{"_id":"public/2020/12/13/mac-phpbrew/index.html","hash":"77170e65b5d69550df7736d1f06e036a37bf390b","modified":1647140731049},{"_id":"public/2020/10/25/php-array/index.html","hash":"e9a698220a69750ef490694e7c4a2cf387181e0e","modified":1647140731049},{"_id":"public/2019/11/21/redis-hyperloglog/index.html","hash":"2d5cfab48d82f4cab3c2dcf0891bc4db5fa984db","modified":1647140731049},{"_id":"public/2019/11/11/make-php-error/index.html","hash":"98635009f0cd5f984fb1aa541923a005ebe65dbd","modified":1647140731049},{"_id":"public/2019/12/20/php-parse-post/index.html","hash":"8552a8f5a7eaec553f496d6808b3efc3231fb8b0","modified":1647140731049},{"_id":"public/2019/11/08/ascii-unicode-utf-8/index.html","hash":"fbd00c9ca07dbbc4c86e7cff9e6f76b600c5d536","modified":1647140731049},{"_id":"public/2019/11/03/nohup/index.html","hash":"c0f83ea2b919da116dc008aa9a86ccab166cc3e6","modified":1647140731049},{"_id":"public/2019/10/08/code-to-lose-weight/index.html","hash":"420dd07ae27e34a8a3d0fe0429e499b3a601b61b","modified":1647140731049},{"_id":"public/2019/09/30/linux-ulimit-warning/index.html","hash":"092cbe2d65a16c9373534b990115bd309d6298ab","modified":1647140731049},{"_id":"public/2019/09/30/greedy/index.html","hash":"8639b1b0da7b80cb426e22a76e290fd6ee43ce4d","modified":1647140731049},{"_id":"public/2019/09/26/structured-thinking/index.html","hash":"af758acf740574be5f376f1f756f56178f8f38da","modified":1647140731049},{"_id":"public/2019/09/20/return/index.html","hash":"607c6cdab11f1926baaa3839590ef9f68a57b9f0","modified":1647140731049},{"_id":"public/2019/09/15/playing/index.html","hash":"6fe8755d3eed7ddfb98006d96e4eb27148434a8e","modified":1647140731049},{"_id":"public/2019/09/11/phuket-travel/index.html","hash":"761dc33f5ed70dbf2e36e657cbd75844c0a3bfc1","modified":1647140731049},{"_id":"public/2019/09/06/php-float-double-precision/index.html","hash":"e5f975b8bd9607a9270e475220620abd8f0a2550","modified":1647140731049},{"_id":"public/2019/08/16/当我们聊技术实力的时候，我们到底在聊什么/index.html","hash":"8c260a0477a2519e4cf6d7bd87f32efc3938b4eb","modified":1647140731049},{"_id":"public/2019/08/14/mysql-generated-columns/index.html","hash":"ab3d62ccc8c5978d0e3ba6914f1edb74834ccf3e","modified":1647140731049},{"_id":"public/2019/06/06/linux之统计ip排行/index.html","hash":"219993e2a2410873010729741e47359a2aeaad23","modified":1647140731049},{"_id":"public/2019/02/24/debug-php7/index.html","hash":"fc0c3b45a1458fa788bee423ea148f005e7ebab1","modified":1647140731049},{"_id":"public/2018/10/02/docker-libnetwork/index.html","hash":"942887c2b52e06c2a5cdaeb489ef0400955110ff","modified":1647140731049},{"_id":"public/2018/10/27/php-apollo-config-center/index.html","hash":"508a9f386074878c8605cbdff4698e9f31a01d6e","modified":1647140731049},{"_id":"public/2018/09/27/principle-of-diligence/index.html","hash":"218286a749f440055042cfb7ee84c98d641d1c74","modified":1647140731049},{"_id":"public/2018/09/24/docker-safe-and-config/index.html","hash":"98fe948d0302107ec141c473ab5c8d2f51bd9612","modified":1647140731049},{"_id":"public/2018/09/17/docker-unionfs/index.html","hash":"c18d593ce4de60ae5d458990419beae7b4c82a8e","modified":1647140731049},{"_id":"public/2018/09/12/docker-cgroups/index.html","hash":"777753f2878bf38e60424f0ce6cc44a33197358b","modified":1647140731049},{"_id":"public/2018/09/10/docker-namespace/index.html","hash":"e84eea6d125f5fb72f4513d466fbc0f755b09be4","modified":1647140731049},{"_id":"public/2018/09/02/docker-golang/index.html","hash":"a63da6db96d1490872389605764a91d674ceae19","modified":1647140731049},{"_id":"public/2018/08/31/docker-link/index.html","hash":"1d308b002c83d9c7bc71c769466e406cba32da6f","modified":1647140731049},{"_id":"public/2018/08/25/reading/index.html","hash":"9273d06ab2fbd26ceef434133d550af32132a0f7","modified":1647140731049},{"_id":"public/2018/08/07/mysqldump-excel/index.html","hash":"930e3b2aa7657ffc5c05e56f8a49f3b985ee2d05","modified":1647140731049},{"_id":"public/2018/07/26/vscode-install-psr2/index.html","hash":"073d3f99b3b5afeccd3e0fe3ec9ed6f473de0424","modified":1647140731049},{"_id":"public/2018/07/05/php-json-encode/index.html","hash":"993e9ac120b7f22d0192edb479f3127d631aa066","modified":1647140731049},{"_id":"public/2018/04/13/mysql-index/index.html","hash":"00541fd903231b7ee0fb81ebc8a9df4e0f8cd113","modified":1647140731049},{"_id":"public/2018/04/08/awk/index.html","hash":"1a117cc1761f4262f21485ec5c507349bcb05e9d","modified":1647140731049},{"_id":"public/2018/03/23/interview-phpers/index.html","hash":"722e2d9dd77c57735e124dfcae86862043fe934c","modified":1647140731049},{"_id":"public/2018/03/09/php-adapter-mode/index.html","hash":"4b132542f311d8c80f233af475e475547c724f1f","modified":1647140731049},{"_id":"public/2018/03/07/linux-php-const/index.html","hash":"e32ad76b4e3a36daafacd97363809c2927991507","modified":1647140731049},{"_id":"public/2018/03/06/curl-https-502/index.html","hash":"9b58ec16a2a834bda9e66634c75204b37c932622","modified":1647140731049},{"_id":"public/2018/02/25/download-weibo-video/index.html","hash":"4e5808b0314d5b8985bd6ba0ba906b909ba0767d","modified":1647140731049},{"_id":"public/2018/02/21/php-prototype-pattern/index.html","hash":"05b4b8cd181b22281be928706d752724a9aaa789","modified":1647140731049},{"_id":"public/2018/02/21/php7-gc/index.html","hash":"8da05a7c516fefa3d1d75bd7c1eabc37038a4eb3","modified":1647140731049},{"_id":"public/2018/01/26/limit-req-limit-conn/index.html","hash":"67660a4dce4687e82e06fbf1b61a6197d9d14173","modified":1647140731049},{"_id":"public/2018/01/25/nginx-limit-rate/index.html","hash":"aa3e6c8a0610b18456ecd396d0b14ed476dea72f","modified":1647140731049},{"_id":"public/2018/01/25/eth-2/index.html","hash":"c1dea237e7c7c3c23e2d706bc85e9ef1e25c14d8","modified":1647140731049},{"_id":"public/2018/01/23/eth/index.html","hash":"0040a4d3f9a1ce399d0a93c613e9ad69d0120251","modified":1647140731049},{"_id":"public/2018/01/21/php7-copy-on-write/index.html","hash":"46b58a6bdb2d2c6e7378f363bfe8f7f21c326e95","modified":1647140731049},{"_id":"public/2018/01/17/php7-refcount/index.html","hash":"2c848b1fc1e215823fbced94474d2545c09e7002","modified":1647140731049},{"_id":"public/2018/01/02/php-factory/index.html","hash":"d6d4defb7806bf798c1ae44bf8c387d60b863c1f","modified":1647140731049},{"_id":"public/2017/10/29/docker-lnmp/index.html","hash":"6946bd96bf91a53912fef0e6e8e289e6a7065440","modified":1647140731049},{"_id":"public/2017/09/26/phpsource-cli/index.html","hash":"1336ab2c86f75a9f04db1b4573fb75f494270556","modified":1647140731049},{"_id":"public/2017/11/01/docker-lnmp-2/index.html","hash":"9fd1152db89591c39bbbc0a993bc3ac0f287106b","modified":1647140731049},{"_id":"public/2017/09/20/phpsource-hash/index.html","hash":"95eb30afb8a70448272bbb74d164a5a765d144d9","modified":1647140731049},{"_id":"public/2017/09/08/nginx-tcp-proxy/index.html","hash":"018a7110f78b05d16a4fe208bc974ab2c238b0c3","modified":1647140731049},{"_id":"public/2017/08/24/ubuntu搭建lnmp环境/index.html","hash":"baa7f275af3adfac5f658140eb9f71b8e7683e8b","modified":1647140731049},{"_id":"public/2017/08/24/ubuntu-version/index.html","hash":"c934ff31c19b4920116b33982f41ad96801a6831","modified":1647140731049},{"_id":"public/2017/08/24/git-ssh-https/index.html","hash":"6c39976a3f5a3579dc086e90701077e9a130393c","modified":1647140731049},{"_id":"public/2017/08/24/sphinx-warning/index.html","hash":"37f9eda364c2bb280a2291427c9b1bc024adad89","modified":1647140731049},{"_id":"public/2017/08/24/php-fastcgi-finish-request/index.html","hash":"91cba9ac405dd2fd0b679858f7715b97a416e243","modified":1647140731049},{"_id":"public/2017/08/24/php-rsa/index.html","hash":"1e34fe860818c10971b455b5af30fda83f5a2714","modified":1647140731049},{"_id":"public/2017/08/24/php-utc2gmt/index.html","hash":"bf66f560109a4dca28cf8a56a92a17486d22ebbb","modified":1647140731049},{"_id":"public/2017/08/24/php-curl-json/index.html","hash":"e8cb4198ca4693afa47b88dac8a1f78653664bff","modified":1647140731049},{"_id":"public/2017/08/24/php-lifetime/index.html","hash":"9ba393ec2348130bba62376bb694bf3420ac71b9","modified":1647140731049},{"_id":"public/2017/08/24/php-sapi/index.html","hash":"9892b3244f9ef2c54fd0785003d0a95c0fc864ed","modified":1647140731049},{"_id":"public/2017/08/24/php-xml/index.html","hash":"47eaf5b160573c8fba00fd178a311e2a1136d9f8","modified":1647140731049},{"_id":"public/2017/08/24/php7-function/index.html","hash":"0a2dde49cf901a02471704c5a215ea180a89eda2","modified":1647140731049},{"_id":"public/2017/08/24/php-7-hello-world/index.html","hash":"dcf3912356f38b9ad3237607c6eca3cd66a96c70","modified":1647140731049},{"_id":"public/2017/08/24/nodejs-error-cant-set-headers-after-they-are-sent/index.html","hash":"e0289d6be85f122d8cbc6de2a06a2cfa4ac57d33","modified":1647140731049},{"_id":"public/2017/08/24/nodejs-pm2/index.html","hash":"c7b6755b4f5adcacf677268f910e4cf44eadb989","modified":1647140731049},{"_id":"public/2017/08/24/nodejs-lang/index.html","hash":"b38af663805a24b3f4e6178ee89abebef73c58b2","modified":1647140731049},{"_id":"public/2017/08/24/mysql-transaction/index.html","hash":"584ec06ef0c1c27afa1065099f4e5498fe149cf0","modified":1647140731049},{"_id":"public/2017/08/24/linux-hang-up/index.html","hash":"97bddd26516f29991b8b668cc6cff2a2680e0c09","modified":1647140731049},{"_id":"public/2017/08/24/linux-alias/index.html","hash":"84c9e58e9e250ba7bba5586d480668bf9e686530","modified":1647140731049},{"_id":"public/2017/08/24/linux-add-user-group/index.html","hash":"dd271a7b8ae0d984250c0c348dc8248e027db4f1","modified":1647140731049},{"_id":"public/2017/08/24/linux-install-supervisor/index.html","hash":"ad506f92a66a420430d5be43e1c02636c0ae67ed","modified":1647140731049},{"_id":"public/2017/08/24/git-push-error/index.html","hash":"d9fdf656d81502622116ec55eaebeb6eeb69abca","modified":1647140731049},{"_id":"public/2017/08/24/git-branch/index.html","hash":"7b2be0d78e09ad18c6a8b5ffb1b4f2bca76fc76d","modified":1647140731049},{"_id":"public/2017/08/24/curlopt-timeout-ms/index.html","hash":"e29c4f2b3c479edbcdeef488757c3d4aa215ba12","modified":1647140731049},{"_id":"public/2017/08/24/bash-lean-1/index.html","hash":"275ac741b38dfb894e1ed7be5c46f338560a9f25","modified":1647140731049},{"_id":"public/2017/08/24/thinking-1/index.html","hash":"7cf9cc661d522f19cdc40f078320490488cbc135","modified":1647140731049},{"_id":"public/2017/08/24/reading-code-clean/index.html","hash":"980d28e2be5935d7242cdca1a379675fa774727e","modified":1647140731049},{"_id":"public/2017/08/24/aliyun-mq/index.html","hash":"59a885b98cf87bb0081d8bf2c74524965ba8e93f","modified":1647140731049},{"_id":"public/2017/08/24/regular/index.html","hash":"d41b1d8a6f5b4a5d763566f25609bbd4a676b53d","modified":1647140731049},{"_id":"public/archives/page/2/index.html","hash":"125c83211a11f991fa9b1ce7dfac1cc24202c789","modified":1647140731049},{"_id":"public/archives/index.html","hash":"ecbaed6cbe3a31a1d1e65de170b16e094d9e661c","modified":1647140731049},{"_id":"public/archives/page/3/index.html","hash":"0dbf0d9fec91dcddd32ee85e688933a2e601c1c8","modified":1647140731049},{"_id":"public/archives/page/4/index.html","hash":"1605b653e015d48ba01f1c6250e34970586e487f","modified":1647140731049},{"_id":"public/archives/page/5/index.html","hash":"a2276508b297e4e55b6da04b2e9a3a7b3714a32e","modified":1647140731049},{"_id":"public/archives/page/6/index.html","hash":"91c2e45af07c4eab24bb12b990d3736cd4b42369","modified":1647140731049},{"_id":"public/archives/page/7/index.html","hash":"989d1952a43d391c6898a40c6ac8e8767a0f7e75","modified":1647140731049},{"_id":"public/archives/page/8/index.html","hash":"6dfba9a5291c11c7e8d6a53469e32bb01d7c2a80","modified":1647140731049},{"_id":"public/archives/page/9/index.html","hash":"f44f559ba2a1d971e51e5ac4454ce223c5867eaa","modified":1647140731049},{"_id":"public/archives/page/10/index.html","hash":"8c6568fb5dab6c9b747df5b1014ab7892ab11149","modified":1647129556460},{"_id":"public/archives/2017/index.html","hash":"d67488e9f3771147c70d3dd4892a691d405fa5db","modified":1647140731049},{"_id":"public/archives/2017/page/2/index.html","hash":"bffe621569df0e2b63459f4f84f41b5f54ca1754","modified":1647140731049},{"_id":"public/archives/2017/page/3/index.html","hash":"2e6555bc3974ca7a74212c18cb2e414b60e2e4e0","modified":1647140731049},{"_id":"public/archives/2017/page/4/index.html","hash":"e693d14f6e334ba1fdac544f8d5d16f5577a1572","modified":1647140731049},{"_id":"public/archives/2017/08/index.html","hash":"442be73ca815b1dfd4f06ab63393e333815c8e17","modified":1647140731049},{"_id":"public/archives/2017/08/page/3/index.html","hash":"d39000be3913419f5342f83010b961106859c00b","modified":1647140731049},{"_id":"public/archives/2017/08/page/2/index.html","hash":"677bdee310872f4ddb5db33aa169926b39162742","modified":1647140731049},{"_id":"public/archives/2017/09/index.html","hash":"8966f12b0cdf591af836942a20f1c62ddf3c7a48","modified":1647140731049},{"_id":"public/archives/2017/10/index.html","hash":"03640cbf86ca5c86d61db7d03db7c4764f162c95","modified":1647140731049},{"_id":"public/archives/2017/11/index.html","hash":"326313202a167fe2807e650c74dcea294d569e15","modified":1647140731049},{"_id":"public/archives/2018/index.html","hash":"4b97ad2365b3353253bb6e3a8deb0b917299e9f1","modified":1647140731049},{"_id":"public/archives/2018/page/3/index.html","hash":"9d095e79f687ad6955293cbce5e5d57c61a4492d","modified":1647140731049},{"_id":"public/archives/2018/page/2/index.html","hash":"dcc1fd6f1ad33c77d821a47e073fde649572537e","modified":1647140731049},{"_id":"public/archives/2018/01/index.html","hash":"4b1e1a9f27340ffe4e13e74ad122d77c6b93534a","modified":1647140731049},{"_id":"public/archives/2018/02/index.html","hash":"aa9baa9fb8eaf93e7c77d7f16d5cc39a0c4f2d4d","modified":1647140731049},{"_id":"public/archives/2018/03/index.html","hash":"f82eed621f01323306178bee5879398f71b08a71","modified":1647140731049},{"_id":"public/archives/2018/07/index.html","hash":"c603359473dfca0bf311c67aff1987651801278b","modified":1647140731049},{"_id":"public/archives/2018/04/index.html","hash":"f80ee1d6327bde7704732e401acc0214222b7b37","modified":1647140731049},{"_id":"public/archives/2018/08/index.html","hash":"558f6adde9069ac3bc0b7328c1b09fdc0ee530e4","modified":1647140731049},{"_id":"public/archives/2018/09/index.html","hash":"5bc6e12b20f1d73df197e178c9d9941c87018f3c","modified":1647140731049},{"_id":"public/archives/2018/10/index.html","hash":"93e0a1a8f129ec915b6f9db8e11131234fc82b19","modified":1647140731049},{"_id":"public/archives/2019/page/2/index.html","hash":"f74e3b68bb6fc7847b8463712e593752816999cc","modified":1647140731049},{"_id":"public/archives/2019/index.html","hash":"d004139faf60b04976a5628a7ec7111f655dea68","modified":1647140731049},{"_id":"public/archives/2019/02/index.html","hash":"b2284fd76b44cad9384a60235a71addf4a471f5e","modified":1647140731049},{"_id":"public/archives/2019/06/index.html","hash":"aebf4922b9b7c79987ad0d4e092f8e5eb06121ab","modified":1647140731049},{"_id":"public/archives/2019/08/index.html","hash":"566cab670b436411bcf86c6637a26ccc7d69468a","modified":1647140731049},{"_id":"public/archives/2019/09/index.html","hash":"01e4cf074225c8e0289e6eae2bf8cca7c28a7605","modified":1647140731049},{"_id":"public/archives/2019/10/index.html","hash":"3e45b921d0e6c23d269d37b66b0fe6049028978f","modified":1647140731049},{"_id":"public/archives/2019/11/index.html","hash":"6f39200f27251028cb0844642417892ad3b34460","modified":1647140731049},{"_id":"public/archives/2019/12/index.html","hash":"968a75da2ea6fc3f89e6a73bbfd3e2846d3135a9","modified":1647140731049},{"_id":"public/archives/2020/index.html","hash":"4b830227df35bb692c55ef6ecaf4bcfc5d91fda6","modified":1647140731049},{"_id":"public/archives/2020/10/index.html","hash":"d11d7680fd9ad254429c8a96a7465157a0243bd0","modified":1647140731049},{"_id":"public/archives/2021/index.html","hash":"873d431345f3a4f2a5e46381526703d0ef78e4ee","modified":1647140731049},{"_id":"public/archives/2020/12/index.html","hash":"2a22f4319bdc0a5a3798d15e5d2d8ebb5bdbc5bf","modified":1647140731049},{"_id":"public/archives/2021/05/index.html","hash":"6eff9af3a0f7121f426d804755febbf7b5e4e671","modified":1647140731049},{"_id":"public/archives/2021/06/index.html","hash":"53600e37edd43753da4b1946dad79f5e691e4858","modified":1647140731049},{"_id":"public/archives/2021/10/index.html","hash":"66cdf3251d65cee045593779307e3f6f5414d04e","modified":1647140731049},{"_id":"public/archives/2022/index.html","hash":"c3c7ea35184cf8cc2e247515e5b307935dd4624e","modified":1647129556460},{"_id":"public/archives/2022/03/index.html","hash":"ef31e18f012370ebc3d1ba8972947387da973163","modified":1647129556460},{"_id":"public/categories/以太坊/index.html","hash":"fc91f2c17331c6d6887dbc77f9e2480bfd126f23","modified":1647140731049},{"_id":"public/categories/Linux/index.html","hash":"58f27d1b2a58108a78ef3809c60f35c98d6ab457","modified":1647140731049},{"_id":"public/categories/Linux/page/2/index.html","hash":"70ec73a327d8a77bba32e11c66af1d3adef8250e","modified":1647140731049},{"_id":"public/categories/Linux/page/3/index.html","hash":"d81ebf4d8e242fe8d09a415973dbc9d4ec751c63","modified":1647140731049},{"_id":"public/categories/PHP/index.html","hash":"e7c4cecd49aac5d922d916550289382ca2605f71","modified":1647140731049},{"_id":"public/categories/Linux/page/4/index.html","hash":"ffa1a5360dc0a4890035477e0ce1ede800ea5824","modified":1647140731049},{"_id":"public/categories/PHP/page/2/index.html","hash":"96eea0040edd23416f17d32be25ca4dadd00f399","modified":1647140731049},{"_id":"public/categories/PHP/page/3/index.html","hash":"fb82fcd7da9ad0707d51b8cd4a96139454264246","modified":1647140731049},{"_id":"public/categories/Git/index.html","hash":"00cb651b95f3c8a2f7fec00ec8791f07f76f09bf","modified":1647140731049},{"_id":"public/categories/Nginx/index.html","hash":"7c6ca77da4192436c51496670fe6782057467350","modified":1647140731049},{"_id":"public/categories/Life/index.html","hash":"9399e708735b483310327706bc6bd9e28861be74","modified":1647140731049},{"_id":"public/categories/算法/index.html","hash":"98780d8206fbd83a75488ce5bba53e93f07b41e2","modified":1647140731049},{"_id":"public/categories/Docker/index.html","hash":"e5174532cd1004de82519389e3ed6a3c58d3bb6a","modified":1647140731049},{"_id":"public/categories/Docker/page/2/index.html","hash":"52f5fb97770361b7df1cb35a9fc47a9be64a51f0","modified":1647140731049},{"_id":"public/categories/PHP源码/index.html","hash":"f8c4bcb11b977ed13fcda38893112d1064a87720","modified":1647140731049},{"_id":"public/categories/PHP源码/page/2/index.html","hash":"41ec54d7aeff53d8d499cbb464f0905eb25a4103","modified":1647140731049},{"_id":"public/categories/自我反思/index.html","hash":"30c250a02ae8bf4468280ab35f926a9cc3bb430d","modified":1647140731049},{"_id":"public/categories/Go/index.html","hash":"4dd359247598f68e92e03c04e3899d10d627a742","modified":1647140731049},{"_id":"public/categories/Mysql/index.html","hash":"2c2cd4d3fb51da6caf64b5c74bc50e607717b71d","modified":1647140731049},{"_id":"public/categories/Nodejs/index.html","hash":"efd4f50d37f63b7a7a7b7c7448c1165c1a9904c4","modified":1647140731049},{"_id":"public/categories/PHP设计模式/index.html","hash":"3e250e56796be6e46c0da8c1cb04177f784b90dd","modified":1647140731049},{"_id":"public/index.html","hash":"e1dba8e3a05cf09efcf19da1d267647a6a54ad38","modified":1647140731049},{"_id":"public/page/2/index.html","hash":"92f4eb5ca34a847c06448b780e3113833d3ffb6b","modified":1647140731049},{"_id":"public/page/3/index.html","hash":"63d30d52787ff7616daf7c708d8433273e3e3989","modified":1647140731049},{"_id":"public/page/4/index.html","hash":"024f2ccd8fafb5eb706619611ee81466efc74f04","modified":1647140731049},{"_id":"public/page/5/index.html","hash":"f639782f564635069b1100f93b35d1c1ef312f20","modified":1647140731049},{"_id":"public/page/6/index.html","hash":"921f0b1929557595828e95f830f6b85db27bc848","modified":1647140731049},{"_id":"public/page/7/index.html","hash":"46b303bc0a3acd5bed781cf0331ad5f3146d54f8","modified":1647140731049},{"_id":"public/page/8/index.html","hash":"04d9a243e688b2ecd5b4efa4731f4408f2060888","modified":1647140731049},{"_id":"public/page/9/index.html","hash":"825c708310844bbb45bc5231fd525af6645a6a63","modified":1647140731049},{"_id":"public/page/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/tags/blockchain/index.html","hash":"cedb6391d77f47d46979dba191da716bcaf018be","modified":1647140731049},{"_id":"public/tags/以太坊/index.html","hash":"e754ceb0be0d5b2a47bff55b397cc31319c95c2e","modified":1647140731049},{"_id":"public/tags/区块链/index.html","hash":"39494ec590e2d38b52c848e016d62f15b3e5d54b","modified":1647140731049},{"_id":"public/tags/私有链/index.html","hash":"20e7f36031582427e8ea9cff86be70de6b91e66d","modified":1647140731049},{"_id":"public/tags/比特币/index.html","hash":"da10bd8656a7f82706d53665d4250a9c9012a5b5","modified":1647140731049},{"_id":"public/tags/token/index.html","hash":"56b7a9b7f9bbaf4decc5fd420002bf7b6dcd5971","modified":1647140731049},{"_id":"public/tags/智能合约/index.html","hash":"8e0239f01b4d81c573133235b7afd52fda37d83c","modified":1647140731049},{"_id":"public/tags/ascii/index.html","hash":"e699b4408bfbb2c011bf7cde635cfb8985544a70","modified":1647140731049},{"_id":"public/tags/unicode/index.html","hash":"83e4bd10d74300e459d4025cbf0fb3a16fb6ff52","modified":1647140731049},{"_id":"public/tags/utf-8/index.html","hash":"31d61b9876a5c95982d813bb498bc537b9bdbc4b","modified":1647140731049},{"_id":"public/tags/编码/index.html","hash":"0dbe47fbb900d752928c6832fc5ee71fe8158200","modified":1647140731049},{"_id":"public/tags/Linux/index.html","hash":"54802df2bcca37c30cf7cd77dfc85ce9abb5d88d","modified":1647140731049},{"_id":"public/tags/健康/index.html","hash":"7c7f09a7cac9ed607f951df76e89867302541d5f","modified":1647140731049},{"_id":"public/tags/健身/index.html","hash":"949ea45e22f93e8c73a11f0c6717313857742778","modified":1647140731049},{"_id":"public/tags/减肥/index.html","hash":"5b124b50cd2bc73f7bcd2836eab1a712679104cd","modified":1647140731049},{"_id":"public/tags/PHP/index.html","hash":"cec7b05ef0bdf4767df0e85b2efa42e18b84ded1","modified":1647140731049},{"_id":"public/tags/PHP/page/2/index.html","hash":"ff0d49576bb84fbb2867506f80d53b0b411f4661","modified":1647140731049},{"_id":"public/tags/PHP7/index.html","hash":"2cc6546892300607b7790628114a91bab843391d","modified":1647140731049},{"_id":"public/tags/PHP源码/index.html","hash":"fa4a70782eb833df72c9391eaf0883e1f0af6061","modified":1647140731049},{"_id":"public/tags/docker/index.html","hash":"d618b7bf15c309dca88c68dfd84857da82afbd10","modified":1647140731049},{"_id":"public/tags/docker-network/index.html","hash":"66ef158eba9385779f654664ed972eeeab974b1a","modified":1647140731049},{"_id":"public/tags/容器/index.html","hash":"ada5145a571874de8eef4a5b4cf95366d17fabfc","modified":1647140731049},{"_id":"public/tags/libnetwork/index.html","hash":"404bb63a39f7542eb7463c1a11254bf28a76cca0","modified":1647140731049},{"_id":"public/tags/docker安全/index.html","hash":"9f2f4cec969ced3289125bed8f8637e9e817cc65","modified":1647140731049},{"_id":"public/tags/MySQL/index.html","hash":"c813fcd007538be5f354682c64c321f434f7f068","modified":1647140731049},{"_id":"public/tags/算法/index.html","hash":"b64112804cae31f74291794ead555eaa6de13d14","modified":1647140731049},{"_id":"public/tags/贪心算法/index.html","hash":"22f95ddc2b17c7f1402bc958acb2da8ba0fcc325","modified":1647140731049},{"_id":"public/tags/面试/index.html","hash":"73bb481b7f01c8850c634f2d9995d9af35068c24","modified":1647140731049},{"_id":"public/tags/http/index.html","hash":"a5028d3d282de83b9c1a3e4f288ebb08dbdbb692","modified":1647140731049},{"_id":"public/tags/nginx/index.html","hash":"76477bb7b556892591aba0307cbd6de90d259116","modified":1647140731049},{"_id":"public/tags/tcp/index.html","hash":"728532c2a992cb9fef3ce923a25d5cdac4b5d0e6","modified":1647140731049},{"_id":"public/tags/cli/index.html","hash":"c5bb3dba8b62c3525a1bc61cb2f96649915de265","modified":1647140731049},{"_id":"public/tags/shell/index.html","hash":"61e5d2521aea08bc3b066fe775b84eceaa73a78f","modified":1647140731049},{"_id":"public/tags/ulimit/index.html","hash":"153ffd42ea3d344197e42d259413008e98e5afa7","modified":1647140731049},{"_id":"public/tags/brew/index.html","hash":"cbb59c6e677a8ff185d37c4f46a1c2cff2bca50e","modified":1647140731049},{"_id":"public/tags/Mac/index.html","hash":"5f657804e3be9fca7f4432ee0bebfba04cbe5297","modified":1647140731049},{"_id":"public/tags/PHP设计模式/index.html","hash":"27502cf91b69526c173b4a6101728dd28b08e96d","modified":1647140731049},{"_id":"public/tags/Apollo/index.html","hash":"92bdf4ee5434c2eeda7b1db98ecc5383b13c30db","modified":1647140731049},{"_id":"public/tags/devops/index.html","hash":"a79766eb603cf3d31974ae0ba9dc2c18654ddf11","modified":1647140731049},{"_id":"public/tags/微服务/index.html","hash":"6efd6d17745a6ac0876df3fd788380f464c6e367","modified":1647140731049},{"_id":"public/tags/json/index.html","hash":"6fb9fc688044c4e529ccd5dfb9d5d945f98d2fe7","modified":1647140731049},{"_id":"public/tags/PHP精度/index.html","hash":"58b891e9ae7370acb01684b49af6f7aa69e677b6","modified":1647140731049},{"_id":"public/tags/PHP原型模式/index.html","hash":"e84bf1d8961a3e8e9a3e776a2f66e2e2c95e2c5b","modified":1647140731049},{"_id":"public/tags/内存/index.html","hash":"8642e2fce905c7832558fb8be035ba945225843e","modified":1647140731049},{"_id":"public/tags/PHP7垃圾回收/index.html","hash":"b279fda172e125d07bd7d4ae80ac748aeb360e29","modified":1647140731049},{"_id":"public/tags/出国游/index.html","hash":"878bb2a5abd0a5b29001bf11a3361ccc9f0e557f","modified":1647140731049},{"_id":"public/tags/团建/index.html","hash":"674b5642eb04297ad0dbd2671e1b169f908f95b9","modified":1647140731049},{"_id":"public/tags/普吉岛/index.html","hash":"e6bc70000522e11d54675ae6b3c877b7aa26904e","modified":1647140731049},{"_id":"public/tags/泰国/index.html","hash":"694b313053f8c29e8e2db73374af7121b159194d","modified":1647140731049},{"_id":"public/tags/成长进阶/index.html","hash":"06c549794f168fc31b2f7a8a650e780884facc5a","modified":1647140731049},{"_id":"public/tags/程序员/index.html","hash":"aaf8dfa9e2d26cd91be6fa798aeeea700909a8d8","modified":1647140731049},{"_id":"public/tags/HyperLogLog/index.html","hash":"49d420c44139316da5a63e2a15259d92bdd0626d","modified":1647140731049},{"_id":"public/tags/Redis/index.html","hash":"edc4467494b8d0ac5e2e97a748fcb4e5c7ad30b8","modified":1647140731049},{"_id":"public/tags/统计/index.html","hash":"f7ec780145f12aa3546b308556c231721651e0b8","modified":1647140731049},{"_id":"public/tags/自我表达/index.html","hash":"767b1cad5543de650bbf91de182f8c50b4a2d2fd","modified":1647140731049},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1647129556460},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1647129556460},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1647129556460},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1647129556460},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1647129556460},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1647129556460},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1647129556460},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1647129556460},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1647129556460},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1647129556460},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1647129556460},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1647129556460},{"_id":"themes/next/.markdownlint.json","hash":"0942be51e552c68dc19ec3d2fbb1bbb2a2e9586f","modified":1647140127441},{"_id":"themes/next/README.md","hash":"dac8b9af8c4092865d5ba562ef2746e3f324b28b","modified":1647140127442},{"_id":"themes/next/package.json","hash":"d5884fbe99854349a9475c8cf5523e1d895e4403","modified":1647140127445},{"_id":"themes/next/_config.yml","hash":"864e3f2b9c877237f416c470a679bb605f06581b","modified":1647140127443},{"_id":"themes/next/deploy.sh","hash":"e37b21b643e7543b6f0de100e9f451d3b1060a79","modified":1647140127443},{"_id":"themes/next/.gitignore","hash":"02a48f693f7bd4ed44dff288163f5b375ee94d81","modified":1647140127441},{"_id":"themes/next/lib/update.js","hash":"72cab0ae9502beaaf84110cf792ffaf8bf7dbaf4","modified":1647140127444},{"_id":"themes/next/scripts/index.js","hash":"ad22cb479eab9b56b2b4b0693ce3be74f2424989","modified":1647140127445},{"_id":"themes/next/netlify.toml","hash":"30d05cfe4e3bce1e7b6b120d488d01d32d54e294","modified":1647140127444},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1647140127445},{"_id":"themes/next/_config.next.yml","hash":"124d044c7fea3489f40a7db0f439a66e28ae375c","modified":1647140127442},{"_id":"themes/next/source/404.md","hash":"b1e4a86b2de4b3bed9a4f60be954b27b0e242233","modified":1647140127446},{"_id":"themes/next/source/robots.txt","hash":"d8d4e537fbe8b5596b7ccb406a5b59efdf4b7d1d","modified":1647140127515},{"_id":"themes/next/source/_data/footer.njk","hash":"4e927ad116a73d8da3fa99c516dc11b965e1f3e3","modified":1647140127446},{"_id":"themes/next/source/_data/languages.yml","hash":"fb0f1d5ce4dd11c16589eac3e070d498d8a9b622","modified":1647140127447},{"_id":"themes/next/source/_data/variables.styl","hash":"f3345c5b6f0db2ffdd36368b2065adce97a5f0bc","modified":1647140127448},{"_id":"themes/next/source/_data/styles.styl","hash":"4e6eb5dd865dcda3da53db594d2ea9bb213df9ca","modified":1647140127447},{"_id":"themes/next/source/_data/sidebar.njk","hash":"71cce5b6f89cf69474938fc9755f927b508c521e","modified":1647140127447},{"_id":"themes/next/source/animate/index.html","hash":"dad7fa3c0e2ea981f5e8c9d256792d58f815e7d8","modified":1647140127468},{"_id":"themes/next/source/animate/style.css","hash":"87f3d36c0c430d39b60c95b47089f1da6880b2c3","modified":1647140127469},{"_id":"themes/next/source/docs/index.md","hash":"c872a66053abb5a2c9fee452d455fbf5ac774f28","modified":1647140127473},{"_id":"themes/next/source/_posts/hexo-theme-next.md","hash":"cc572b4321ea07250fa639b214d1092d3c9711dc","modified":1647140127448},{"_id":"themes/next/source/docs/troubleshooting.md","hash":"578fb47ce634ce4f78fc657a1bce96c880fc7722","modified":1647140127483},{"_id":"themes/next/source/_posts/next-6-0-0-released.md","hash":"b2e470ada19acd55b06ff91d948dac85c89e2f45","modified":1647140127448},{"_id":"themes/next/source/_posts/next-6-0-3-released.md","hash":"6fb83fa17fa0bebc63aff74531d9ef53968289b3","modified":1647140127450},{"_id":"themes/next/source/_posts/next-6-0-1-released.md","hash":"76d2ef6f3e76c7968a0456d83fed000ab401f2d8","modified":1647140127449},{"_id":"themes/next/source/_posts/next-6-0-2-released.md","hash":"ea88c457431159e261c4ab850024398c28ffb559","modified":1647140127449},{"_id":"themes/next/source/_posts/next-6-0-5-released.md","hash":"68a2d2548e9c4d3c3dd5020137609d6c457b13d2","modified":1647140127451},{"_id":"themes/next/source/_posts/next-6-0-6-released.md","hash":"520fca5cfdbcd51dec75d3b4a3452e19d3c871c9","modified":1647140127451},{"_id":"themes/next/source/_posts/next-6-0-4-released.md","hash":"b4af71c3cf03dc3430490b693a81858b364b1dd0","modified":1647140127450},{"_id":"themes/next/source/_posts/next-6-1-0-released.md","hash":"a60eed82ce322849bf413a09c4cb114620a589e1","modified":1647140127452},{"_id":"themes/next/source/_posts/next-6-2-0-released.md","hash":"98b83fb43d3b5fb1e2f1f6c7e1fcab272f1421b7","modified":1647140127452},{"_id":"themes/next/source/_posts/next-6-4-0-released.md","hash":"16c38435f53bcacb017ab858cc39176829e28b92","modified":1647140127453},{"_id":"themes/next/source/_posts/next-6-3-0-released.md","hash":"a27d492b00610882859374e47d9701f562bfe1a7","modified":1647140127453},{"_id":"themes/next/source/_posts/next-6-4-1-released.md","hash":"e1002b35fb99006dd7e1dfdf779a2520537fc064","modified":1647140127453},{"_id":"themes/next/source/_posts/next-6-4-2-released.md","hash":"7c423613af0637db13301f0aa098593558740020","modified":1647140127453},{"_id":"themes/next/source/_posts/next-6-5-0-released.md","hash":"296de1370fdd8f7dc2d9a16ffa2eb8d9bcf6231e","modified":1647140127454},{"_id":"themes/next/source/_posts/next-6-7-0-released.md","hash":"19a1763be6ae11102a2aa388e5a0b49f67c7330a","modified":1647140127455},{"_id":"themes/next/source/_posts/next-7-0-0-released.md","hash":"9814eb5bae2ed2c637f412b13dfd8276b222172d","modified":1647140127455},{"_id":"themes/next/source/_posts/next-7-0-1-released.md","hash":"a646dcce01f2803ce4383b7607b5ae23daa34da2","modified":1647140127455},{"_id":"themes/next/source/_posts/next-7-1-0-released.md","hash":"a558ebd5a4aa4479b69276bb46e8a92695ec1f27","modified":1647140127455},{"_id":"themes/next/source/_posts/next-7-1-1-released.md","hash":"e27195e9ad5f9fe3261542ea546ef39cc6263e12","modified":1647140127456},{"_id":"themes/next/source/_posts/next-7-1-2-released.md","hash":"d9b5d7ed99c262b66d9577c50db755f2b0b5cb64","modified":1647140127456},{"_id":"themes/next/source/_posts/next-7-2-0-released.md","hash":"8954551443e33fdc0ba4417e5aaf8ea8f5d2ef8b","modified":1647140127456},{"_id":"themes/next/source/_posts/next-6-6-0-released.md","hash":"0fd83de9c1df4385c4c9ce3cacc87035eb055986","modified":1647140127454},{"_id":"themes/next/source/_posts/next-7-3-0-released.md","hash":"b9c43313b5b67a680ed8a584b7dc0be3c20007a5","modified":1647140127457},{"_id":"themes/next/source/_posts/next-7-4-0-released.md","hash":"af06c1d59f35a3647b0d2a31f4cfea322262ab62","modified":1647140127457},{"_id":"themes/next/source/_posts/next-7-4-1-released.md","hash":"e2d0eb3d7e91adfb582c7b6c5d45796a31f8e7da","modified":1647140127457},{"_id":"themes/next/source/_posts/next-7-4-2-released.md","hash":"eb9fe16f40432bcbca1e06ee794b3a2245827271","modified":1647140127458},{"_id":"themes/next/source/_posts/next-7-5-0-released.md","hash":"029e7ef51a7c47a4c942298138a024e89e72f22b","modified":1647140127458},{"_id":"themes/next/source/_posts/next-7-6-0-released.md","hash":"ae4a2a68f9e350bbbd25f7a19abeebc9ff1d1670","modified":1647140127458},{"_id":"themes/next/source/_posts/next-7-7-0-released.md","hash":"bf55fa2f535a017b49d0a58b5ad8fe02c5914957","modified":1647140127459},{"_id":"themes/next/lib/highlight.js","hash":"638db79a4f7140afac052755c91ab681021fc404","modified":1647140127443},{"_id":"themes/next/source/_posts/next-7-7-1-released.md","hash":"8ad9102ea3e66a6ea9141e21d619c3801a5c5ed7","modified":1647140127459},{"_id":"themes/next/source/_posts/next-7-8-0-released.md","hash":"03851919320e01bfe6e20f8ec7e2937b7306465d","modified":1647140127459},{"_id":"themes/next/source/_posts/next-8-0-0-rc-1-released.md","hash":"2dc39fe135629aa695a9358ea1c0a9e81711307c","modified":1647140127460},{"_id":"themes/next/source/_posts/next-8-0-0-rc-2-released.md","hash":"6ca233718797b1972716eb06d76b6a0690b12607","modified":1647140127460},{"_id":"themes/next/source/_posts/next-8-0-0-rc-3-released.md","hash":"aa0ea9fc7e568365695586381ce3c059ac0b9368","modified":1647140127460},{"_id":"themes/next/source/_posts/next-8-0-0-rc-5-released.md","hash":"91f9a3d5cbc61c6192cf120783b2f67c61313d23","modified":1647140127461},{"_id":"themes/next/source/_posts/next-8-0-0-rc-4-released.md","hash":"7d83cdcdfa85cbeda4ee220d1467ac20173fd26e","modified":1647140127460},{"_id":"themes/next/source/_posts/next-8-0-0-released.md","hash":"6b44f1f8be45cd6d7222891da4f6f6777e5101ce","modified":1647140127461},{"_id":"themes/next/source/_posts/next-8-0-1-released.md","hash":"188c2fbd660d700eef0a158128ed7093347c46ec","modified":1647140127461},{"_id":"themes/next/source/_posts/next-8-0-2-released.md","hash":"34f4a63e81b76a49454e194df91a5f6586ceab67","modified":1647140127462},{"_id":"themes/next/source/_posts/next-8-10-1-released.md","hash":"c592e7441a01eb51fa13489f26ef722a132b4aa6","modified":1647140127462},{"_id":"themes/next/source/_posts/next-8-1-0-released.md","hash":"c4f641151aebe9fa6c6f8f2c5601e6c85a6c81f8","modified":1647140127462},{"_id":"themes/next/source/_posts/next-8-10-0-released.md","hash":"5ab443d221cdb588d89a5629600a2227b408d236","modified":1647140127462},{"_id":"themes/next/source/_posts/next-8-2-1-released.md","hash":"f76fb80cb129fdb35a31a40eade4752aa1bcce25","modified":1647140127463},{"_id":"themes/next/source/_posts/next-8-2-2-released.md","hash":"4947359bb55a18cc6a797aa8168c50a6391ab15d","modified":1647140127463},{"_id":"themes/next/source/_posts/next-8-2-0-released.md","hash":"fea073987c318b2b945b5a90f10270adb7811258","modified":1647140127463},{"_id":"themes/next/source/_posts/next-8-3-0-released.md","hash":"2e1b2e0e6bf2f2e619f698856d364f3684a42632","modified":1647140127463},{"_id":"themes/next/source/_posts/next-8-5-0-released.md","hash":"d0408869dd7d4cc19320ee6e76c4fa8f5a5b9fc8","modified":1647140127464},{"_id":"themes/next/source/_posts/next-8-6-1-released.md","hash":"5dfd1038375195e60592feb17d9d57eedde59e74","modified":1647140127465},{"_id":"themes/next/source/_posts/next-8-4-0-released.md","hash":"9ac098a8c59e082f2e174c8e131e2b9290c8d386","modified":1647140127464},{"_id":"themes/next/source/_posts/next-8-6-0-released.md","hash":"07b738905c3efc9883005e49e49e2cfcca43ede7","modified":1647140127464},{"_id":"themes/next/source/_posts/next-8-7-1-released.md","hash":"788b4fab54e894f2ce75515cff6e44bab43be20c","modified":1647140127465},{"_id":"themes/next/source/_posts/next-8-7-0-released.md","hash":"c42e251817d45647fd28eb29534824381ab58e42","modified":1647140127465},{"_id":"themes/next/source/_posts/next-8-8-1-released.md","hash":"68ad825f4dde31232ab875307f9b1eed2dea4332","modified":1647140127466},{"_id":"themes/next/source/_posts/next-8-8-0-released.md","hash":"f50f4063c6322cefba4cf3ddc577e02ea381d2b2","modified":1647140127466},{"_id":"themes/next/source/_posts/next-8-8-2-released.md","hash":"ebf5103fd9a9f20ada8b79399f826208065f3abc","modified":1647140127466},{"_id":"themes/next/source/_posts/next-8-9-0-released.md","hash":"4ebecd539685a8847333e14227256494f2736de7","modified":1647140127467},{"_id":"themes/next/source/_posts/next-v7-introduced.md","hash":"2463c56ecea631c1521f2422e477190557021e85","modified":1647140127467},{"_id":"themes/next/source/highlight/index.html","hash":"8ab02740a52411ba3378ab4e78f1912c16c1dc49","modified":1647140127484},{"_id":"themes/next/source/highlight/unavailable.js","hash":"0f2559e80fe0ba13fa881fb423254dd2df3819c7","modified":1647140127485},{"_id":"themes/next/source/images/analytics-baidu-id.png","hash":"a82899ed2ab35e20702d9ee87091ef090df6724c","modified":1647140127497},{"_id":"themes/next/source/images/cn.png","hash":"bac3c5de55b2510abba8b8a82994aa12a6316f84","modified":1647140127499},{"_id":"themes/next/source/images/en.png","hash":"21ecc9f76b99713f26b58f065f6789911a1fd89a","modified":1647140127499},{"_id":"themes/next/source/images/default.svg","hash":"135127ce2dc6630be86dfcb5ece8ff3abeb66190","modified":1647140127499},{"_id":"themes/next/source/_posts/next-7-7-2-released.md","hash":"5f2ac9e55a3bacc839b7eeeb594f4fdfb625affc","modified":1647140127459},{"_id":"themes/next/source/images/group-picture-1.png","hash":"3df21ca1b80eb3a36352fc38f056367a65eebebd","modified":1647140127502},{"_id":"themes/next/source/images/group-picture-2.png","hash":"88e7cea11eb9e5d1b2c6be4b0c4e9522386608a3","modified":1647140127503},{"_id":"themes/next/source/images/ru.png","hash":"5cb727e5865e96766715726940dc45072eb79998","modified":1647140127511},{"_id":"themes/next/source/images/next.svg","hash":"59624bca34866b55c815b5c1519d90abdb14d357","modified":1647140127511},{"_id":"themes/next/source/images/tomorrow-night-bright.svg","hash":"e7ce7a2044a045204590248394ee72c739ebacac","modified":1647140127512},{"_id":"themes/next/source/images/tomorrow-night-blue.svg","hash":"7045958b67701728157770dae012f8db595693c0","modified":1647140127511},{"_id":"themes/next/source/images/tomorrow-night-eighties.svg","hash":"4e680e154d6b653c6b93f8623e59be1105076c44","modified":1647140127512},{"_id":"themes/next/source/images/tomorrow.svg","hash":"fe67e4a58ce03139c11927f35f4286c7090cf02f","modified":1647140127513},{"_id":"themes/next/source/images/tomorrow-night.svg","hash":"489a228dee35710b2df91b9d6045663feff33ff8","modified":1647140127512},{"_id":"themes/next/source/images/valine-1.png","hash":"f7c2784292ec034b8a88802ec6134e8721c745b0","modified":1647140127513},{"_id":"themes/next/source/plugins/index.md","hash":"70087cee8ee75488d6f5b363fa03dade101a0205","modified":1647140127514},{"_id":"themes/next/source/animate/images/ddown.png","hash":"389db55fd3b9bf7ce59c3ee651c7a290db1a3a29","modified":1647140127468},{"_id":"themes/next/source/images/valine-2.png","hash":"54c4a6347182bc061eacf1804fdadd902c8d7054","modified":1647140127514},{"_id":"themes/next/source/animate/images/ddown.svg","hash":"23077fcb18d7314f3cdd0b417fafc0dd58313f79","modified":1647140127468},{"_id":"themes/next/source/docs/advanced-settings/custom-files.md","hash":"926c7b5f4a5c443fc759b091717761f9ee18c6c2","modified":1647140127470},{"_id":"themes/next/source/docs/advanced-settings/front-matter.md","hash":"72e5f22407daa6971306b4744a16dbece9302af1","modified":1647140127470},{"_id":"themes/next/source/docs/advanced-settings/index.md","hash":"a25d9e3316beaff3cca2b433dfefe52ef517a4f5","modified":1647140127471},{"_id":"themes/next/source/docs/advanced-settings/injects.md","hash":"5df5903c54e9e55d25d34f92c97c952877a710e2","modified":1647140127471},{"_id":"themes/next/source/docs/advanced-settings/vendors.md","hash":"f601a1255d17aae412246c6568e9079ab55a466b","modified":1647140127471},{"_id":"themes/next/source/docs/getting-started/configuration.md","hash":"a13cb768f434abf76093d03c72649dab3357c767","modified":1647140127472},{"_id":"themes/next/source/docs/getting-started/index.md","hash":"32e6997eb67edf586f445e8a47e5a8de1fb5482a","modified":1647140127472},{"_id":"themes/next/source/docs/getting-started/deployment.md","hash":"577635aa71f9e8efa6811978cf1654cf669dab51","modified":1647140127472},{"_id":"themes/next/source/docs/getting-started/installation.md","hash":"42a1cbb4537bafad0bd4771ed4c5f060b9231650","modified":1647140127473},{"_id":"themes/next/source/docs/getting-started/upgrade.md","hash":"e4ba03f2b119845bfd4cda4a8583c2c7a60b46cf","modified":1647140127473},{"_id":"themes/next/source/docs/tag-plugins/button.md","hash":"84d034b2e968d4d5a3a38a19a8bb6fb7f208d395","modified":1647140127474},{"_id":"themes/next/source/docs/tag-plugins/caniuse.md","hash":"4bd5648f791d7bb822b778cfc3c148cfd5770831","modified":1647140127474},{"_id":"themes/next/source/docs/tag-plugins/group-pictures.md","hash":"fd4c89c592fb168bdcef15f402b170b22403f81b","modified":1647140127474},{"_id":"themes/next/source/docs/tag-plugins/index.md","hash":"6989302b21e0d156a7ce4118a1e18dc43a5eb1ac","modified":1647140127475},{"_id":"themes/next/source/docs/tag-plugins/label.md","hash":"50695d4071b733dcb8bf4e87c1ad39477b7f753a","modified":1647140127475},{"_id":"themes/next/source/docs/tag-plugins/link-grid.md","hash":"eaa568845bd7359e922e192f794ce7997e9dcee1","modified":1647140127475},{"_id":"themes/next/source/docs/tag-plugins/mermaid.md","hash":"c5a053120ed48c1db98de44e2b49e26569f188d9","modified":1647140127475},{"_id":"themes/next/source/docs/tag-plugins/note.md","hash":"091ac17fa1a0d3169c3eea69b0eb686ca8998d3e","modified":1647140127476},{"_id":"themes/next/source/docs/tag-plugins/pdf.md","hash":"645f638673881f0d4c53ab69920d6e1db1ed6727","modified":1647140127476},{"_id":"themes/next/source/docs/tag-plugins/tabs.md","hash":"e236ced8aaef658ff40c03ca4963f6889f8dedd0","modified":1647140127476},{"_id":"themes/next/source/docs/theme-settings/custom-pages.md","hash":"dd780c13435726ae94b5d66e2fd00f6d1dc46cbd","modified":1647140127477},{"_id":"themes/next/source/docs/theme-settings/footer.md","hash":"1278dc16c1c825a9e7410846e70497e80caeb31b","modified":1647140127477},{"_id":"themes/next/source/docs/theme-settings/index.md","hash":"58e3ecf1dc9d86224137084401295f070d28fc6f","modified":1647140127478},{"_id":"themes/next/source/docs/theme-settings/internationalization.md","hash":"5bd98cc16e37adb00c50520c6bc80a30a4c731a5","modified":1647140127478},{"_id":"themes/next/source/docs/theme-settings/miscellaneous.md","hash":"33e029cdd6a5f174a99cc9837b3fa5a821affca4","modified":1647140127478},{"_id":"themes/next/source/docs/theme-settings/posts.md","hash":"48dbfbc2d48cc8945f68dbe1b04ac9ff728a7dbf","modified":1647140127479},{"_id":"themes/next/source/docs/third-party-services/comments.md","hash":"2f8a9dabb238de3f99ce40c697f3d2c72091816f","modified":1647140127480},{"_id":"themes/next/source/docs/theme-settings/seo.md","hash":"b5d881c201fd14a0258fd0f6610a6c349c1c2f8b","modified":1647140127479},{"_id":"themes/next/source/docs/theme-settings/sidebar.md","hash":"1e3aaa6d45c3a1345377ca7502aec4089c7f25a9","modified":1647140127479},{"_id":"themes/next/source/docs/third-party-services/external-libraries.md","hash":"f999fb12882003f936c0a5663e3ce792770d3a6e","modified":1647140127480},{"_id":"themes/next/source/docs/third-party-services/index.md","hash":"f824bd2ea656ef5138d11b5d9a1569edfcea4b80","modified":1647140127481},{"_id":"themes/next/source/docs/third-party-services/search-services.md","hash":"84fa092b0497aa3d2614c10d798379a1ce35895b","modified":1647140127482},{"_id":"themes/next/source/docs/third-party-services/post-widgets.md","hash":"ab8c57c8eec434a6dc67ff2e73dc1c922496e55c","modified":1647140127481},{"_id":"themes/next/source/docs/third-party-services/math-equations.md","hash":"dd4d12c732edaaf3ab1cf8c7ffc1ba0fc57ef745","modified":1647140127481},{"_id":"themes/next/source/docs/third-party-services/chat-services.md","hash":"095292fe46c6e504107fc851abb747250d266b6f","modified":1647140127480},{"_id":"themes/next/source/docs/third-party-services/statistics-and-analytics.md","hash":"b44da828ded7ed0b18ffa6f2c3b8124c45ffbe49","modified":1647140127482},{"_id":"themes/next/source/images/baidu.png","hash":"df158878206461fce7a42be815e2530209167fd6","modified":1647140127498},{"_id":"themes/next/source/images/next-default-scheme.png","hash":"62877dd6ae0a89aef4ef4745cd8aad254b4aa14a","modified":1647140127505},{"_id":"themes/next/source/images/add-this-id.png","hash":"6a989cc3f9bc5822e363f727a23b994fa0311c38","modified":1647140127487},{"_id":"themes/next/source/images/algolia-1.png","hash":"c3ed2d9f5dda3771215251533437094f3c9f940b","modified":1647140127489},{"_id":"themes/next/source/images/algolia-2.png","hash":"94c7fd10bf19a3d55065fc201e32f6f98cc49770","modified":1647140127491},{"_id":"themes/next/source/images/algolia-3.png","hash":"4d1ce8979cb97e3a824352ec2cac8eed002f9ef4","modified":1647140127493},{"_id":"themes/next/source/images/algolia-5.png","hash":"e4844c2656ac3eab39633123d22bb0e4d03ff8d1","modified":1647140127496},{"_id":"themes/next/source/images/algolia-4.png","hash":"90f68059dfd7fcd4c5db3a432cad122b92cf6e79","modified":1647140127494},{"_id":"themes/next/source/images/firebase.png","hash":"b2c3612d3b724b8355989baf41050914b6dc859b","modified":1647140127501},{"_id":"themes/next/source/images/next-schemes.png","hash":"c92afa29ac33c75f7e5b55bc79babaa4dd242dd8","modified":1647140127510},{"_id":"themes/next/source/images/next-schemes-dark.png","hash":"b52e914bb6d3b7d00c19bcf5ef95c49c83e9fbd8","modified":1647140127507},{"_id":"public/robots.txt","hash":"d8d4e537fbe8b5596b7ccb406a5b59efdf4b7d1d","modified":1647140169429},{"_id":"public/images/analytics-baidu-id.png","hash":"a82899ed2ab35e20702d9ee87091ef090df6724c","modified":1647140169429},{"_id":"public/images/cn.png","hash":"bac3c5de55b2510abba8b8a82994aa12a6316f84","modified":1647140169429},{"_id":"public/images/default.svg","hash":"135127ce2dc6630be86dfcb5ece8ff3abeb66190","modified":1647140169429},{"_id":"public/images/en.png","hash":"21ecc9f76b99713f26b58f065f6789911a1fd89a","modified":1647140169429},{"_id":"public/images/group-picture-1.png","hash":"3df21ca1b80eb3a36352fc38f056367a65eebebd","modified":1647140169429},{"_id":"public/images/group-picture-2.png","hash":"88e7cea11eb9e5d1b2c6be4b0c4e9522386608a3","modified":1647140169429},{"_id":"public/images/next.svg","hash":"59624bca34866b55c815b5c1519d90abdb14d357","modified":1647140169429},{"_id":"public/images/ru.png","hash":"5cb727e5865e96766715726940dc45072eb79998","modified":1647140169429},{"_id":"public/images/tomorrow-night-blue.svg","hash":"7045958b67701728157770dae012f8db595693c0","modified":1647140169429},{"_id":"public/images/tomorrow-night-bright.svg","hash":"e7ce7a2044a045204590248394ee72c739ebacac","modified":1647140169429},{"_id":"public/images/tomorrow-night-eighties.svg","hash":"4e680e154d6b653c6b93f8623e59be1105076c44","modified":1647140169429},{"_id":"public/images/tomorrow.svg","hash":"fe67e4a58ce03139c11927f35f4286c7090cf02f","modified":1647140169429},{"_id":"public/images/tomorrow-night.svg","hash":"489a228dee35710b2df91b9d6045663feff33ff8","modified":1647140169429},{"_id":"public/images/valine-1.png","hash":"f7c2784292ec034b8a88802ec6134e8721c745b0","modified":1647140169429},{"_id":"public/images/valine-2.png","hash":"54c4a6347182bc061eacf1804fdadd902c8d7054","modified":1647140169429},{"_id":"public/animate/images/ddown.png","hash":"389db55fd3b9bf7ce59c3ee651c7a290db1a3a29","modified":1647140169429},{"_id":"public/animate/images/ddown.svg","hash":"23077fcb18d7314f3cdd0b417fafc0dd58313f79","modified":1647140169429},{"_id":"public/images/baidu.png","hash":"df158878206461fce7a42be815e2530209167fd6","modified":1647140169429},{"_id":"public/images/next-default-scheme.png","hash":"62877dd6ae0a89aef4ef4745cd8aad254b4aa14a","modified":1647140169429},{"_id":"public/404.html","hash":"c533d516e09069856185431bb9129c411ffcb25c","modified":1647140169429},{"_id":"public/animate/index.html","hash":"dad7fa3c0e2ea981f5e8c9d256792d58f815e7d8","modified":1647140169429},{"_id":"public/animate/style.css","hash":"87f3d36c0c430d39b60c95b47089f1da6880b2c3","modified":1647140169429},{"_id":"public/docs/index.html","hash":"5d245e9b8034b876e8124e6f6885e8ed09a6865a","modified":1647140169429},{"_id":"public/highlight/index.html","hash":"8ab02740a52411ba3378ab4e78f1912c16c1dc49","modified":1647140169429},{"_id":"public/docs/troubleshooting.html","hash":"fd2fd35b7e8e7d32f787a2fb1906488fb95ce202","modified":1647140169429},{"_id":"public/highlight/unavailable.js","hash":"0f2559e80fe0ba13fa881fb423254dd2df3819c7","modified":1647140169429},{"_id":"public/plugins/index.html","hash":"b633e00a8c1d47da4ed8ae2e48391c9bb56dfc7a","modified":1647140169429},{"_id":"public/docs/advanced-settings/custom-files.html","hash":"467538eaa5fc998e7794248a798efb848e19c166","modified":1647140169429},{"_id":"public/docs/advanced-settings/front-matter.html","hash":"576c905ad1513cc386145ce95580bfb1f56638a9","modified":1647140169429},{"_id":"public/docs/advanced-settings/index.html","hash":"dc423e2b63b301faba6955d6d58c59eb3817c91a","modified":1647140169429},{"_id":"public/docs/advanced-settings/injects.html","hash":"4d370173c2e1ba5b2660e12d091ad4a12282d026","modified":1647140169429},{"_id":"public/docs/advanced-settings/vendors.html","hash":"01c0b19b01736eee3fb734e782533cc9f5cd6913","modified":1647140169429},{"_id":"public/docs/getting-started/configuration.html","hash":"f857f9144bddde18163e04656b04f915753e6f34","modified":1647140169429},{"_id":"public/docs/getting-started/deployment.html","hash":"63ab1d86dae36ed18471391308e955f83fa17ba4","modified":1647140169429},{"_id":"public/docs/getting-started/index.html","hash":"356759ccee0e2d5b4d741e6de08ef0fa1f4f51af","modified":1647140169429},{"_id":"public/docs/getting-started/installation.html","hash":"7aa2161b58bb97d70b51fb5acdd10154c0bcf45a","modified":1647140169429},{"_id":"public/docs/getting-started/upgrade.html","hash":"bfb5141e2b8adc1cad1401622450912e215bfa99","modified":1647140169429},{"_id":"public/docs/tag-plugins/button.html","hash":"f6744e7e32e477f8a0aff675840bdab83782920d","modified":1647140169429},{"_id":"public/docs/tag-plugins/caniuse.html","hash":"f0d547565dd5f6a3c8e341f2500a99c813e1fba9","modified":1647140169429},{"_id":"public/docs/tag-plugins/group-pictures.html","hash":"e61d6639189b524e2dc3530d3a58c74ee9b0317b","modified":1647140169429},{"_id":"public/docs/tag-plugins/index.html","hash":"17a8f2046e3b32b885f49a427644a64128f1f6af","modified":1647140169429},{"_id":"public/docs/tag-plugins/label.html","hash":"9592c77e60dcf453fa00e8258be2aed636aea493","modified":1647140169429},{"_id":"public/docs/tag-plugins/link-grid.html","hash":"4cc4776dfeebafd5bcba04bcfcecea784e6f3623","modified":1647140169429},{"_id":"public/docs/tag-plugins/mermaid.html","hash":"31fcf38f395ee4229ccbcaa581123b02a6cbe38b","modified":1647140169429},{"_id":"public/docs/tag-plugins/note.html","hash":"15239ba374e74d98abe29abacf49333082ea8d5d","modified":1647140169429},{"_id":"public/docs/tag-plugins/pdf.html","hash":"ef249f32f32a422348257b46fe7b2037683c2e72","modified":1647140169429},{"_id":"public/docs/theme-settings/custom-pages.html","hash":"9c684d65bfeb653f2e977d34731a2ac2cad38d2f","modified":1647140169429},{"_id":"public/docs/theme-settings/footer.html","hash":"697387f02e13cef68ab48615422eea0e3a724f72","modified":1647140169429},{"_id":"public/docs/theme-settings/index.html","hash":"2cd8667355d45ebfa6882859dab7dea9fc5aabd4","modified":1647140169429},{"_id":"public/docs/theme-settings/internationalization.html","hash":"eec8f9acb5ddd8cf48f0002dc803ccf3bed38d52","modified":1647140169429},{"_id":"public/docs/theme-settings/miscellaneous.html","hash":"d7d82ef8825f90f7dfe327d98bd06836526f68f9","modified":1647140169429},{"_id":"public/docs/theme-settings/posts.html","hash":"d9845e658e10d7e57450042feeb829ce13fa64f5","modified":1647140169429},{"_id":"public/docs/theme-settings/seo.html","hash":"85002091af81cb6fea5698750c49c3dd06312af8","modified":1647140169429},{"_id":"public/docs/theme-settings/sidebar.html","hash":"1bc087001f97a9b608f82ef4b6005f855d721de0","modified":1647140169429},{"_id":"public/docs/third-party-services/chat-services.html","hash":"2b4aace141aef69e6485aa7f06ec6ba98c2075b2","modified":1647140169429},{"_id":"public/docs/third-party-services/comments.html","hash":"cf996d7d85419dc27a91a0725124eaf51c52bcad","modified":1647140169429},{"_id":"public/docs/third-party-services/external-libraries.html","hash":"bb5263b5294ccad3185ecdd2edbfd78da5e6110d","modified":1647140169429},{"_id":"public/docs/third-party-services/index.html","hash":"9b317840ac907bd29b01cedddd75c63acf89437c","modified":1647140169429},{"_id":"public/docs/third-party-services/math-equations.html","hash":"39bf10fd5095c24f4d6d57e1de84a9716bc41252","modified":1647140169429},{"_id":"public/docs/third-party-services/search-services.html","hash":"745e6f703be3023b91b7465c3ff4cde50ea7e701","modified":1647140169429},{"_id":"public/docs/third-party-services/post-widgets.html","hash":"2d8e840c37fb4d4c2d1247dfb9758e706c64e61d","modified":1647140169429},{"_id":"public/docs/third-party-services/statistics-and-analytics.html","hash":"1112559aa9c07db72c19a76b1e01478bd733fff1","modified":1647140169429},{"_id":"public/docs/tag-plugins/tabs.html","hash":"14cdcde5b0b43f35000349245d2095472db8aa20","modified":1647140169429},{"_id":"public/images/add-this-id.png","hash":"6a989cc3f9bc5822e363f727a23b994fa0311c38","modified":1647140169429},{"_id":"public/images/algolia-1.png","hash":"c3ed2d9f5dda3771215251533437094f3c9f940b","modified":1647140169429},{"_id":"public/images/algolia-2.png","hash":"94c7fd10bf19a3d55065fc201e32f6f98cc49770","modified":1647140169429},{"_id":"public/images/algolia-3.png","hash":"4d1ce8979cb97e3a824352ec2cac8eed002f9ef4","modified":1647140169429},{"_id":"public/images/algolia-4.png","hash":"90f68059dfd7fcd4c5db3a432cad122b92cf6e79","modified":1647140169429},{"_id":"public/images/algolia-5.png","hash":"e4844c2656ac3eab39633123d22bb0e4d03ff8d1","modified":1647140169429},{"_id":"public/images/firebase.png","hash":"b2c3612d3b724b8355989baf41050914b6dc859b","modified":1647140169429},{"_id":"public/images/next-schemes.png","hash":"c92afa29ac33c75f7e5b55bc79babaa4dd242dd8","modified":1647140169429},{"_id":"public/images/next-schemes-dark.png","hash":"b52e914bb6d3b7d00c19bcf5ef95c49c83e9fbd8","modified":1647140169429},{"_id":"themes/next/public/404.html","hash":"77f244908ec2d4412e1955dd97c826a1411cd528","modified":1647140341218},{"_id":"themes/next/public/index.html","hash":"1c8fe901e4b1f170fc1beba9ae647b62a1532a2e","modified":1647140341222},{"_id":"themes/next/public/robots.txt","hash":"d8d4e537fbe8b5596b7ccb406a5b59efdf4b7d1d","modified":1647140341232},{"_id":"themes/next/public/animate/index.html","hash":"dad7fa3c0e2ea981f5e8c9d256792d58f815e7d8","modified":1647140341232},{"_id":"themes/next/public/animate/style.css","hash":"87f3d36c0c430d39b60c95b47089f1da6880b2c3","modified":1647140341222},{"_id":"themes/next/public/archives/index.html","hash":"12e5226dacd2eb766ef4b19f3d042bf2d12ddfc9","modified":1647140340486},{"_id":"themes/next/public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1647140341243},{"_id":"themes/next/public/css/main.css","hash":"8915e4bb910971b6e4a0a90501ed2287bdd30bf3","modified":1647140341252},{"_id":"themes/next/public/docs/index.html","hash":"2b76ca8e13085cb57e32d4370a8ddada4a6cbcac","modified":1647140340483},{"_id":"themes/next/public/docs/troubleshooting.html","hash":"addcc675a4c6a87b818908adffccef8cbb4417b0","modified":1647140341220},{"_id":"themes/next/public/hexo-theme-next/index.html","hash":"f484be784c26f99166c1cacadad52340ee5f43ae","modified":1647140340485},{"_id":"themes/next/public/highlight/index.html","hash":"8ab02740a52411ba3378ab4e78f1912c16c1dc49","modified":1647140341226},{"_id":"themes/next/public/highlight/unavailable.js","hash":"0f2559e80fe0ba13fa881fb423254dd2df3819c7","modified":1647140341232},{"_id":"themes/next/public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1647140341234},{"_id":"themes/next/public/images/analytics-baidu-id.png","hash":"a82899ed2ab35e20702d9ee87091ef090df6724c","modified":1647140341222},{"_id":"themes/next/public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1647140341233},{"_id":"themes/next/public/images/cn.png","hash":"bac3c5de55b2510abba8b8a82994aa12a6316f84","modified":1647140341233},{"_id":"themes/next/public/images/default.svg","hash":"135127ce2dc6630be86dfcb5ece8ff3abeb66190","modified":1647140341233},{"_id":"themes/next/public/images/en.png","hash":"21ecc9f76b99713f26b58f065f6789911a1fd89a","modified":1647140341233},{"_id":"themes/next/public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1647140341233},{"_id":"themes/next/public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1647140341234},{"_id":"themes/next/public/images/group-picture-1.png","hash":"3df21ca1b80eb3a36352fc38f056367a65eebebd","modified":1647140341233},{"_id":"themes/next/public/images/group-picture-2.png","hash":"88e7cea11eb9e5d1b2c6be4b0c4e9522386608a3","modified":1647140341233},{"_id":"themes/next/public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1647140341233},{"_id":"themes/next/public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1647140341235},{"_id":"themes/next/public/images/next.svg","hash":"59624bca34866b55c815b5c1519d90abdb14d357","modified":1647140341233},{"_id":"themes/next/public/images/ru.png","hash":"5cb727e5865e96766715726940dc45072eb79998","modified":1647140341233},{"_id":"themes/next/public/images/tomorrow-night-blue.svg","hash":"7045958b67701728157770dae012f8db595693c0","modified":1647140341233},{"_id":"themes/next/public/images/tomorrow-night-bright.svg","hash":"e7ce7a2044a045204590248394ee72c739ebacac","modified":1647140341233},{"_id":"themes/next/public/images/tomorrow-night-eighties.svg","hash":"4e680e154d6b653c6b93f8623e59be1105076c44","modified":1647140341233},{"_id":"themes/next/public/images/tomorrow-night.svg","hash":"489a228dee35710b2df91b9d6045663feff33ff8","modified":1647140341233},{"_id":"themes/next/public/images/tomorrow.svg","hash":"fe67e4a58ce03139c11927f35f4286c7090cf02f","modified":1647140341233},{"_id":"themes/next/public/images/valine-1.png","hash":"f7c2784292ec034b8a88802ec6134e8721c745b0","modified":1647140341233},{"_id":"themes/next/public/images/valine-2.png","hash":"54c4a6347182bc061eacf1804fdadd902c8d7054","modified":1647140341233},{"_id":"themes/next/public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1647140341251},{"_id":"themes/next/public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1647140341242},{"_id":"themes/next/public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1647140341251},{"_id":"themes/next/public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1647140341251},{"_id":"themes/next/public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1647140341251},{"_id":"themes/next/public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1647140341251},{"_id":"themes/next/public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1647140341252},{"_id":"themes/next/public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1647140341251},{"_id":"themes/next/public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1647140341251},{"_id":"themes/next/public/next-6-0-0-released/index.html","hash":"bdc5dbf80b7e33550dcd4018963872d3e8a4f642","modified":1647140340486},{"_id":"themes/next/public/next-6-0-1-released/index.html","hash":"d8459773135795be5ffe8db7bccc988c72eade0c","modified":1647140340486},{"_id":"themes/next/public/next-6-0-2-released/index.html","hash":"ee7ed567162b18c5ab2e8c04e3cee261aabf3b7a","modified":1647140340486},{"_id":"themes/next/public/next-6-0-3-released/index.html","hash":"5fd8b0d64a9a5e09405fd22454a881cb9eb1a711","modified":1647140340486},{"_id":"themes/next/public/next-6-0-4-released/index.html","hash":"c00881cb8456ae593b29bafd2433843f3e4a1979","modified":1647140340486},{"_id":"themes/next/public/next-6-0-5-released/index.html","hash":"0da185e9e2751e96f6261aacb978236c6bfe9036","modified":1647140340486},{"_id":"themes/next/public/next-6-0-6-released/index.html","hash":"28ee8f52fae613d1e6a8c67dca954ec5e29ea005","modified":1647140340486},{"_id":"themes/next/public/next-6-1-0-released/index.html","hash":"a057e91c8b3bf41160a528281ccab7be6b2b176f","modified":1647140340486},{"_id":"themes/next/public/next-6-2-0-released/index.html","hash":"e9c86465fc2a3fd53df8fd6cef33f44355c9011a","modified":1647140340486},{"_id":"themes/next/public/next-6-3-0-released/index.html","hash":"3e8366c824f8a6baaba64565f96d0edc175cc2cd","modified":1647140340486},{"_id":"themes/next/public/next-6-4-0-released/index.html","hash":"7c0f3416ebce9a3afd15e58e14b5c6472a82bcbb","modified":1647140340486},{"_id":"themes/next/public/next-6-4-1-released/index.html","hash":"ed926e0c11f69eafd5ab93ebd6ac21d4aa00352d","modified":1647140340486},{"_id":"themes/next/public/next-6-4-2-released/index.html","hash":"68d65ffd48e2321d038946e715faf51994a6e5da","modified":1647140340486},{"_id":"themes/next/public/next-6-5-0-released/index.html","hash":"2c66af5edb27d4f19af6d949470333475272630f","modified":1647140340486},{"_id":"themes/next/public/next-6-6-0-released/index.html","hash":"6e2c7649b49e6f82f8f727da79b3ee58bb3bf405","modified":1647140340486},{"_id":"themes/next/public/next-6-7-0-released/index.html","hash":"92655cc5aa43dac61ab55ae66d5fd014471357f1","modified":1647140340485},{"_id":"themes/next/public/next-7-0-0-released/index.html","hash":"c2d9d008458733e9bcafd07b4e323b460febdf3b","modified":1647140340485},{"_id":"themes/next/public/next-7-0-1-released/index.html","hash":"9022c94415f4b706d6f3c8e464ed04ffb571dffc","modified":1647140340485},{"_id":"themes/next/public/next-7-1-1-released/index.html","hash":"06646018189d391d6b6391d481e35ce358198642","modified":1647140340485},{"_id":"themes/next/public/next-7-1-0-released/index.html","hash":"fc274ca27fcbf6f6fcf228f7fd2d9bfdb7a3a3fd","modified":1647140340485},{"_id":"themes/next/public/next-7-2-0-released/index.html","hash":"36c0aa2daf0e104c1ee96862a58d91ca3e5b4e5c","modified":1647140340485},{"_id":"themes/next/public/next-7-1-2-released/index.html","hash":"e5074539e0103a7592812654427df169551509c8","modified":1647140340485},{"_id":"themes/next/public/next-7-3-0-released/index.html","hash":"5ec17da8e3764fa8bb1b6e7ca3c269311b80e01b","modified":1647140340485},{"_id":"themes/next/public/next-7-4-0-released/index.html","hash":"0ad8a7d30bba04968a986455e942eb84f4083d02","modified":1647140340485},{"_id":"themes/next/public/next-7-4-1-released/index.html","hash":"6a88fd13816ea4416dc2fd8671921047f75a312f","modified":1647140340485},{"_id":"themes/next/public/next-7-4-2-released/index.html","hash":"a5ef424670e7f4d83686729cac146bafbf1550a1","modified":1647140340485},{"_id":"themes/next/public/next-7-5-0-released/index.html","hash":"84a649795b2e142be553c164ac1c6e67b5601ba0","modified":1647140340485},{"_id":"themes/next/public/next-7-6-0-released/index.html","hash":"798f3e111fd6ea4ff12fd01152be65559d7e5e83","modified":1647140340485},{"_id":"themes/next/public/next-7-7-0-released/index.html","hash":"16224895a01a0d44a3907dc5ba7d3ac9924c54d3","modified":1647140340485},{"_id":"themes/next/public/next-7-7-1-released/index.html","hash":"dca8427b4abf4bd729938374abd5e27d9ea7fd13","modified":1647140340485},{"_id":"themes/next/public/next-7-7-2-released/index.html","hash":"e2b24d372bc388e13addf2b68e021ee62266b0d8","modified":1647140340485},{"_id":"themes/next/public/next-7-8-0-released/index.html","hash":"642f9ae792b101201845ee0b5ffaf0941972676a","modified":1647140340485},{"_id":"themes/next/public/next-8-0-0-rc-1-released/index.html","hash":"50fac2f421d78382b5f39034827a604aa2e2c58c","modified":1647140340484},{"_id":"themes/next/public/next-8-0-0-rc-2-released/index.html","hash":"8edc87bf273fe06411d79e152ec4265576eec49b","modified":1647140340484},{"_id":"themes/next/public/next-8-0-0-rc-3-released/index.html","hash":"936a754755b6cf7386a0a0ed1ca779c49774628b","modified":1647140340484},{"_id":"themes/next/public/next-8-0-0-rc-4-released/index.html","hash":"b223f9aed80e3c07a4cf82b39e4278fe1a987dff","modified":1647140340484},{"_id":"themes/next/public/next-8-0-0-rc-5-released/index.html","hash":"cf190beb00b899d3fe73df4eaa5587c10fe3bf00","modified":1647140340484},{"_id":"themes/next/public/next-8-0-0-released/index.html","hash":"791ee8a4a8afcd4a323811f09383fca21b26bd66","modified":1647140340484},{"_id":"themes/next/public/next-8-0-1-released/index.html","hash":"6056c7b6c4383ac12695c946bf3a0aa54d9fc924","modified":1647140340484},{"_id":"themes/next/public/next-8-0-2-released/index.html","hash":"087463f4b93371d8edc9108291a29303938254ba","modified":1647140340484},{"_id":"themes/next/public/next-8-1-0-released/index.html","hash":"bf6d5bdede7c35ac0350d3e01ddf08f2a92aa60b","modified":1647140340484},{"_id":"themes/next/public/next-8-10-0-released/index.html","hash":"cedf9ec170dc13ac762f999fb278670c9a165574","modified":1647140340483},{"_id":"themes/next/public/next-8-10-1-released/index.html","hash":"2759db738efcae2c30f86c975522b0b60278c837","modified":1647140340483},{"_id":"themes/next/public/next-8-2-0-released/index.html","hash":"aa70cdbcc9e588b2450021019c5efa4b486d0e9d","modified":1647140340484},{"_id":"themes/next/public/next-8-2-1-released/index.html","hash":"0264677ab4c65f09b6377954241a93bd35b5873e","modified":1647140340484},{"_id":"themes/next/public/next-8-2-2-released/index.html","hash":"db5dec164207e49de3a0257c07fa5f159cd9f786","modified":1647140340484},{"_id":"themes/next/public/next-8-3-0-released/index.html","hash":"79b8c15421c95c2e6552d13e7565182dfba3dfb2","modified":1647140340484},{"_id":"themes/next/public/next-8-4-0-released/index.html","hash":"05a2880034a8beb87a8d3819b6a6732d1c1ff8be","modified":1647140340484},{"_id":"themes/next/public/next-8-5-0-released/index.html","hash":"fef984b2186f63e7ec49ed90747675263a5fd929","modified":1647140340484},{"_id":"themes/next/public/next-8-6-0-released/index.html","hash":"5c62498d965d1eb899600788f45a26e0ed67619a","modified":1647140340484},{"_id":"themes/next/public/next-8-6-1-released/index.html","hash":"d067a45109715a90e21abbd1bea1b8c60fbbc683","modified":1647140340484},{"_id":"themes/next/public/next-8-7-0-released/index.html","hash":"750eb2c2d092d56829f818f143bbb167d327a1f2","modified":1647140340484},{"_id":"themes/next/public/next-8-7-1-released/index.html","hash":"adb90f00333b2d7121a366721e5b1c5a2f017f1d","modified":1647140340484},{"_id":"themes/next/public/next-8-8-0-released/index.html","hash":"81cdddd7a7439e29ebe142e68f73ebcecf29861d","modified":1647140340483},{"_id":"themes/next/public/next-8-8-1-released/index.html","hash":"73da197081a7572bdb4bede904649f505bc3f66c","modified":1647140340484},{"_id":"themes/next/public/next-8-8-2-released/index.html","hash":"bdc41daa4bb6c0ffed19277fe8b84ecba118655f","modified":1647140340487},{"_id":"themes/next/public/next-8-9-0-released/index.html","hash":"03badccd1ffd238b06f8e936c177cc898f2b0946","modified":1647140340487},{"_id":"themes/next/public/next-v7-introduced/index.html","hash":"efc00c1a9e09927fdf6e6f3e086d68950348406c","modified":1647140340485},{"_id":"themes/next/public/plugins/index.html","hash":"d40635e75e8100498821285283881423ad21a916","modified":1647140340483},{"_id":"themes/next/public/animate/images/ddown.png","hash":"389db55fd3b9bf7ce59c3ee651c7a290db1a3a29","modified":1647140341233},{"_id":"themes/next/public/animate/images/ddown.svg","hash":"23077fcb18d7314f3cdd0b417fafc0dd58313f79","modified":1647140341222},{"_id":"themes/next/public/archives/2018/index.html","hash":"f959208cda074240e1fb6cbc1f81bb1ca374cb63","modified":1647140340486},{"_id":"themes/next/public/archives/2019/index.html","hash":"64f5e4e4fe5b1bcbe9260f77c989a811ace6aff5","modified":1647140340486},{"_id":"themes/next/public/archives/2020/index.html","hash":"6852b3baba1a83dd8cdda6d98980229e5fd4574e","modified":1647140340486},{"_id":"themes/next/public/archives/2021/index.html","hash":"1a9237a2ab9b5ccf97c542feb9d2c7d21da0238e","modified":1647140340486},{"_id":"themes/next/public/archives/2022/index.html","hash":"299a0cdee534985d517af9eb68c00e6e85f3d5c0","modified":1647140341251},{"_id":"themes/next/public/docs/advanced-settings/custom-files.html","hash":"32d27e9f6d0aafc2812cf7eb6be992b082650c3b","modified":1647140340483},{"_id":"themes/next/public/docs/advanced-settings/front-matter.html","hash":"de4f077bd58d80c4594622409ec721bf5f29880a","modified":1647140341222},{"_id":"themes/next/public/docs/advanced-settings/index.html","hash":"0544073c7f9609fd33394b32c500639c0dea2f18","modified":1647140341223},{"_id":"themes/next/public/docs/advanced-settings/injects.html","hash":"4bf6c7abbb6a5f63850fbde1f850a4b53c675b2a","modified":1647140341219},{"_id":"themes/next/public/docs/advanced-settings/vendors.html","hash":"f7b4d2e961ff8b4fa6d45374a7a56c3139e40ccd","modified":1647140341221},{"_id":"themes/next/public/docs/getting-started/configuration.html","hash":"bfdc34c00791bd8a9ea5a9ac5f66c5bfe3a77405","modified":1647140340483},{"_id":"themes/next/public/docs/getting-started/deployment.html","hash":"a68f8ad42ac881b2dccd2aa6e992d65338c4e32d","modified":1647140341218},{"_id":"themes/next/public/docs/getting-started/index.html","hash":"4efa41807c5b8080be2b39495131dbfe3e30e55c","modified":1647140341218},{"_id":"themes/next/public/docs/getting-started/installation.html","hash":"5940cce7acc1e799af2ba83da73027c8cafb43c9","modified":1647140341218},{"_id":"themes/next/public/docs/getting-started/upgrade.html","hash":"16c1cebe2db981b5a512ce451345c227faffd2a0","modified":1647140341219},{"_id":"themes/next/public/docs/tag-plugins/button.html","hash":"21740a5a86b78272374836dbbc5062b8ed2141c0","modified":1647140340483},{"_id":"themes/next/public/docs/tag-plugins/caniuse.html","hash":"fb3376fb444a9d522223d9fd3a6b5a4b9604cce2","modified":1647140341221},{"_id":"themes/next/public/docs/tag-plugins/group-pictures.html","hash":"f6b5834b9a10cbeac781a60e49ff32bbffd2eb3e","modified":1647140341219},{"_id":"themes/next/public/docs/tag-plugins/index.html","hash":"d06b9773647c80d826ab7f893a75547e29b66b53","modified":1647140341219},{"_id":"themes/next/public/docs/tag-plugins/label.html","hash":"b05a195775af25d0500b7318374197d9f1bc2c8e","modified":1647140341219},{"_id":"themes/next/public/docs/tag-plugins/link-grid.html","hash":"36091d0543b9789f3100470f24996f6737977f54","modified":1647140341222},{"_id":"themes/next/public/docs/tag-plugins/mermaid.html","hash":"0b94e3f57bd7329e47a9b0370bc55d5c9675e28a","modified":1647140341220},{"_id":"themes/next/public/docs/tag-plugins/note.html","hash":"969b38f57962e6ba29d86f87d7e9c12aa5183f8f","modified":1647140341220},{"_id":"themes/next/public/docs/tag-plugins/pdf.html","hash":"c2ac17b2f0ccb45767db99ea6088acb83396b839","modified":1647140341220},{"_id":"themes/next/public/docs/theme-settings/custom-pages.html","hash":"fb5d7a2bc72c669f92ab5715fdee55f9f7e60573","modified":1647140340483},{"_id":"themes/next/public/docs/theme-settings/index.html","hash":"5bcc59ce62ea39d87051fab6aa5638f36e982ca8","modified":1647140341220},{"_id":"themes/next/public/docs/theme-settings/footer.html","hash":"d6fab7eded181c33fe736e72f6857e77bc4e7670","modified":1647140341220},{"_id":"themes/next/public/docs/theme-settings/internationalization.html","hash":"b4deec445c3b768cf14efc115aa2154182024e0e","modified":1647140341221},{"_id":"themes/next/public/docs/theme-settings/miscellaneous.html","hash":"6eee7f5956e2824e20e78267ae6b76dc09730361","modified":1647140341221},{"_id":"themes/next/public/docs/theme-settings/posts.html","hash":"6583922aed890bf1807c6af2630d97354b59db29","modified":1647140341221},{"_id":"themes/next/public/docs/theme-settings/seo.html","hash":"3c44b7a038f96b3295905c6e5ffc82fd70791b01","modified":1647140341221},{"_id":"themes/next/public/docs/theme-settings/sidebar.html","hash":"547963938b349e3730e01c984eba06c93bd9cdd0","modified":1647140341221},{"_id":"themes/next/public/docs/third-party-services/comments.html","hash":"07720fc63ca92b6806a29d085cf571ba1f934b19","modified":1647140341221},{"_id":"themes/next/public/docs/third-party-services/chat-services.html","hash":"c1846dbd35f2e90306cd850e0493b79ac6a1e338","modified":1647140340487},{"_id":"themes/next/public/docs/third-party-services/external-libraries.html","hash":"d9882ff90d250305275bfe19c66f6768b2269e7c","modified":1647140341221},{"_id":"themes/next/public/docs/third-party-services/index.html","hash":"dbfd937f29466eea8f123bc890708f07cfb60cd6","modified":1647140341221},{"_id":"themes/next/public/docs/third-party-services/math-equations.html","hash":"86e0c1dae92b13ad125b859a1d4b3d3a10154cf6","modified":1647140341221},{"_id":"themes/next/public/docs/third-party-services/post-widgets.html","hash":"5e61328fb41b7ff33a11a24e23c0972887e4337f","modified":1647140341221},{"_id":"themes/next/public/docs/third-party-services/search-services.html","hash":"4a6b2ac9c7da4ba0e9fed0d2b7e280e68284adab","modified":1647140341222},{"_id":"themes/next/public/docs/third-party-services/statistics-and-analytics.html","hash":"f892613f372a95e7ca7552e3ae2e37c2574ff3a8","modified":1647140341221},{"_id":"themes/next/public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1647140341242},{"_id":"themes/next/public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1647140341243},{"_id":"themes/next/public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1647140341252},{"_id":"themes/next/public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1647140341251},{"_id":"themes/next/public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1647140341251},{"_id":"themes/next/public/page/10/index.html","hash":"8759c0814250c4244344b35bdac0a996ca59cf43","modified":1647140341238},{"_id":"themes/next/public/page/11/index.html","hash":"427e9c3c28044a6c03389a80ae5f05e591b1c031","modified":1647140341238},{"_id":"themes/next/public/page/12/index.html","hash":"1a8fb7f34e5474c35ef3152315030363edc68da4","modified":1647140341240},{"_id":"themes/next/public/page/13/index.html","hash":"0f382262ee621de58d5ab1f7d454990e10e949a9","modified":1647140341238},{"_id":"themes/next/public/page/14/index.html","hash":"a8fa7270d61864121b839749585e7e198393cae7","modified":1647140341239},{"_id":"themes/next/public/page/2/index.html","hash":"29c2012246e0497f8279a847a7446fd9ab7d0df0","modified":1647140341233},{"_id":"themes/next/public/page/15/index.html","hash":"c7936fdb11e96cffce1333a40875adb80da7fb2a","modified":1647140341239},{"_id":"themes/next/public/page/3/index.html","hash":"861bc1c5632a2a07219b24db82c0eeb01de34e74","modified":1647140341238},{"_id":"themes/next/public/page/4/index.html","hash":"a4725a214b59f9def5d5e3510b48daad457f53ac","modified":1647140341237},{"_id":"themes/next/public/page/5/index.html","hash":"e20226b2399b62c75e1bd746ac0a4f53bcf1b1cc","modified":1647140341238},{"_id":"themes/next/public/page/7/index.html","hash":"dc95db060940e20734158e4ea8e87fd0aa84b64a","modified":1647140341239},{"_id":"themes/next/public/page/8/index.html","hash":"bd4a2579ae366fb5fef4f6fc032f0791f7f1c163","modified":1647140341238},{"_id":"themes/next/public/archives/2018/02/index.html","hash":"e21556746ca2b27ca68c7c3fd9d018c4308e1f33","modified":1647140341236},{"_id":"themes/next/public/archives/2018/01/index.html","hash":"c62bed45b73a56bc9415b58c837b3bfa90e49b7c","modified":1647140340486},{"_id":"themes/next/public/archives/2018/03/index.html","hash":"41a149320f90e2151dfd4ddab23b8796ed58da52","modified":1647140341236},{"_id":"themes/next/public/archives/2018/04/index.html","hash":"44005c346621b83f8e569a52e582bb2055cf5bc5","modified":1647140341237},{"_id":"themes/next/public/archives/2018/05/index.html","hash":"f989d69bce14510298ba49d51423d83cd6cf0bab","modified":1647140341237},{"_id":"themes/next/public/archives/2018/08/index.html","hash":"5c346cad11f5db326688a77a5a57d39d3701cfe6","modified":1647140341236},{"_id":"themes/next/public/archives/2018/09/index.html","hash":"db143a1aea2dc2cceb0bf5f7e12dc9207577d72b","modified":1647140341236},{"_id":"themes/next/public/archives/2018/10/index.html","hash":"88f103dac1be635ee24c24898bd7552362b4b314","modified":1647140341238},{"_id":"themes/next/public/archives/2018/11/index.html","hash":"09de8bd0ded690e916f0f3905b658332ca545ec4","modified":1647140341236},{"_id":"themes/next/public/archives/2018/12/index.html","hash":"d6cedf0ec2bfab5b39ddfb5ea22bf2acc1fc2efd","modified":1647140341237},{"_id":"themes/next/public/archives/2019/02/index.html","hash":"6a37ea5813d157cc16eab87996745889c30425c4","modified":1647140341236},{"_id":"themes/next/public/archives/2019/03/index.html","hash":"1af4191bb7dba6643ec73b2b5ea92f0ae9ee1ce0","modified":1647140341238},{"_id":"themes/next/public/archives/2019/04/index.html","hash":"a0e396fe619c544c79fa7425fe0cf94b55a03157","modified":1647140341236},{"_id":"themes/next/public/archives/2019/05/index.html","hash":"02bc45a8becc1b2ca55ae0c1c5671788ddef5e14","modified":1647140341236},{"_id":"themes/next/public/archives/2019/01/index.html","hash":"033a32f2ce85390bd74dce294f93e3596fe210c7","modified":1647140341236},{"_id":"themes/next/public/archives/2019/06/index.html","hash":"8eab8e92a5b97f5f65e045c9f3763004f203541b","modified":1647140341236},{"_id":"themes/next/public/archives/2019/07/index.html","hash":"4a033b6778a358adf3eb17401a7b9b71dd7521c6","modified":1647140341236},{"_id":"themes/next/public/archives/2019/08/index.html","hash":"05749bae4ad15675a41ec10a539d664908381c5b","modified":1647140341236},{"_id":"themes/next/public/archives/2019/09/index.html","hash":"ff632034fb2a011e712ae6e39b56c42647086617","modified":1647140341236},{"_id":"themes/next/public/archives/2019/10/index.html","hash":"fc93c51b277e14423dc55f7a8cec045044436ffb","modified":1647140341236},{"_id":"themes/next/public/archives/2019/11/index.html","hash":"3de87256687fb9a8d0bc7a97b227255283577d34","modified":1647140341236},{"_id":"themes/next/public/archives/2019/12/index.html","hash":"cd9b2457bb99fb79d7a31af5b6295ae8596ce670","modified":1647140341236},{"_id":"themes/next/public/archives/2020/03/index.html","hash":"9c232b7c583c3bd699a8cb31163fe4ec5951f1ad","modified":1647140341236},{"_id":"themes/next/public/archives/2020/02/index.html","hash":"c72dfc7d3e344f686e64ef07da81039088239149","modified":1647140341236},{"_id":"themes/next/public/archives/2020/04/index.html","hash":"31aa33515219d778a675b63bba9142549f4aaa62","modified":1647140341237},{"_id":"themes/next/public/archives/2020/01/index.html","hash":"a1fa18c9756c138acfec68fd65fc7ce393b2cd59","modified":1647140341236},{"_id":"themes/next/public/archives/2020/05/index.html","hash":"a35074fdba88b65ee711f65d2a70460209248718","modified":1647140341236},{"_id":"themes/next/public/archives/2020/06/index.html","hash":"dc5df30b28b60edeb7463bdb336d7e529bb1a558","modified":1647140341237},{"_id":"themes/next/public/archives/2020/07/index.html","hash":"09a63692f90a84a442873cc967c6dc6b2b5f3938","modified":1647140341236},{"_id":"themes/next/public/archives/2020/08/index.html","hash":"ffcbce41330a71394abfc264a7b1db68ea76a96b","modified":1647140341237},{"_id":"themes/next/public/archives/2020/09/index.html","hash":"b7e53af21c97c8a9a03e0462f78340ac552a9593","modified":1647140341237},{"_id":"themes/next/public/archives/2020/10/index.html","hash":"68a959406b32f75b39739c47a27a9622e1485de1","modified":1647140341237},{"_id":"themes/next/public/archives/2020/11/index.html","hash":"85438e3febea17dd8266166c4924d439aec8e14d","modified":1647140341237},{"_id":"themes/next/public/archives/2020/12/index.html","hash":"a29a8d5882dfd3849391a5099f0aa0660a6cca67","modified":1647140341240},{"_id":"themes/next/public/archives/2021/01/index.html","hash":"c9307f22fdff07fdf34aec7677017c4be624ec54","modified":1647140341242},{"_id":"themes/next/public/archives/2021/02/index.html","hash":"18eba0467a2387f7d7483e02fa83cff5f51177ae","modified":1647140341237},{"_id":"themes/next/public/archives/2021/04/index.html","hash":"467405a620fe2ff98af4b5f37524c3d29581990b","modified":1647140341237},{"_id":"themes/next/public/archives/2021/05/index.html","hash":"8651472ecfed90a216899d5ac9aad976d81a86c7","modified":1647140341237},{"_id":"themes/next/public/archives/2021/06/index.html","hash":"be4f877a3c1f00e6c0117be5fa48a03b9ad0334e","modified":1647140341237},{"_id":"themes/next/public/archives/2021/07/index.html","hash":"0c5bfd4065e8de51c43a1fdf1c5d7a256ac9a1bb","modified":1647140341238},{"_id":"themes/next/public/archives/2021/08/index.html","hash":"20e631930df9127421ca218282de037d54ac1364","modified":1647140341237},{"_id":"themes/next/public/archives/2021/09/index.html","hash":"7e9fefe77fa587006e42045cce9c30520917a335","modified":1647140341237},{"_id":"themes/next/public/archives/2021/10/index.html","hash":"bc1db839fe8aefd02638956bfb58d66652b2c16c","modified":1647140341237},{"_id":"themes/next/public/archives/2021/11/index.html","hash":"107e28ac4dbc8cabc23ed07693fdd071148fb259","modified":1647140341237},{"_id":"themes/next/public/archives/2021/12/index.html","hash":"5126662549d4b4b78a7353bcf40d22389ec1df54","modified":1647140341237},{"_id":"themes/next/public/archives/2022/01/index.html","hash":"e74ce7023e0af2d8aeb81fb60e389acac242dea0","modified":1647140341238},{"_id":"themes/next/public/archives/2022/02/index.html","hash":"8e9bb7cb6953763449c218d928148678f5f0a728","modified":1647140341239},{"_id":"themes/next/public/archives/2022/03/index.html","hash":"c6f5c45576fc347134ef08a67624f1fabc85a41f","modified":1647140341234},{"_id":"themes/next/public/archives/page/2/index.html","hash":"732bacfa2f23cee40abf0ed791897152a8f84d4c","modified":1647140341232},{"_id":"themes/next/public/archives/page/3/index.html","hash":"f67150699ce202b3e3bd9c0663b98f4f5c792573","modified":1647140341237},{"_id":"themes/next/public/archives/page/4/index.html","hash":"4e7e6f91ba5cae1c4379859947437dd5c70b820f","modified":1647140341237},{"_id":"themes/next/public/archives/page/5/index.html","hash":"ff4c45652659bde82f30d7444645ad8e2857ce6d","modified":1647140341238},{"_id":"themes/next/public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1647140341243},{"_id":"themes/next/public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1647140341251},{"_id":"themes/next/public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1647140341251},{"_id":"themes/next/public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1647140341251},{"_id":"themes/next/public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1647140341251},{"_id":"themes/next/public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1647140341251},{"_id":"themes/next/public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1647140341251},{"_id":"themes/next/public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1647140341251},{"_id":"themes/next/public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1647140341251},{"_id":"themes/next/public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1647140341252},{"_id":"themes/next/public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1647140341252},{"_id":"themes/next/public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1647140341252},{"_id":"themes/next/public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1647140341252},{"_id":"themes/next/public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1647140341252},{"_id":"themes/next/public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1647140341243},{"_id":"themes/next/public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1647140341253},{"_id":"themes/next/public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1647140341243},{"_id":"themes/next/public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1647140341243},{"_id":"themes/next/public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1647140341252},{"_id":"themes/next/public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1647140341243},{"_id":"themes/next/public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1647140341252},{"_id":"themes/next/public/archives/2019/page/2/index.html","hash":"9801f3a4a135dc44bcd7f5c526966be0196f9285","modified":1647140341232},{"_id":"themes/next/public/archives/2018/page/2/index.html","hash":"e0cb2e771c610dda29febc83a75ef920095f89aa","modified":1647140341232},{"_id":"themes/next/public/archives/2021/page/2/index.html","hash":"9f353eadac356af7c3707fd2eaea1fb12474f126","modified":1647140341232},{"_id":"themes/next/public/archives/2020/page/2/index.html","hash":"c76694d467af17e58c3028557beff9738f52acae","modified":1647140341232},{"_id":"themes/next/public/atom.xml","hash":"5bf16511abd776a8121c75b3d10998d6d48a725e","modified":1647140340483},{"_id":"themes/next/public/images/baidu.png","hash":"df158878206461fce7a42be815e2530209167fd6","modified":1647140341239},{"_id":"themes/next/public/images/next-default-scheme.png","hash":"62877dd6ae0a89aef4ef4745cd8aad254b4aa14a","modified":1647140341240},{"_id":"themes/next/public/docs/tag-plugins/tabs.html","hash":"9b2fdac6cf198a89d7bc31fcf602b08086abc514","modified":1647140341220},{"_id":"themes/next/public/page/6/index.html","hash":"e8cade42f09800f87b841775b3ce40ebfacc351b","modified":1647140341238},{"_id":"themes/next/public/page/9/index.html","hash":"f6ce24ea67b63b14318398551a96240c95ef9f95","modified":1647140341239},{"_id":"themes/next/package-lock.json","hash":"e8b2d505a1629590f096da0683564d4f6d4ad7b7","modified":1647140281940},{"_id":"themes/next/public/images/add-this-id.png","hash":"6a989cc3f9bc5822e363f727a23b994fa0311c38","modified":1647140341253},{"_id":"themes/next/public/images/algolia-1.png","hash":"c3ed2d9f5dda3771215251533437094f3c9f940b","modified":1647140341253},{"_id":"themes/next/public/images/algolia-2.png","hash":"94c7fd10bf19a3d55065fc201e32f6f98cc49770","modified":1647140341253},{"_id":"themes/next/public/images/algolia-3.png","hash":"4d1ce8979cb97e3a824352ec2cac8eed002f9ef4","modified":1647140341253},{"_id":"themes/next/public/images/algolia-4.png","hash":"90f68059dfd7fcd4c5db3a432cad122b92cf6e79","modified":1647140341253},{"_id":"themes/next/public/images/algolia-5.png","hash":"e4844c2656ac3eab39633123d22bb0e4d03ff8d1","modified":1647140341253},{"_id":"themes/next/public/images/firebase.png","hash":"b2c3612d3b724b8355989baf41050914b6dc859b","modified":1647140341252},{"_id":"themes/next/public/images/next-schemes.png","hash":"c92afa29ac33c75f7e5b55bc79babaa4dd242dd8","modified":1647140341253},{"_id":"themes/next/public/images/next-schemes-dark.png","hash":"b52e914bb6d3b7d00c19bcf5ef95c49c83e9fbd8","modified":1647140341258},{"_id":"themes/next/public/search.json","hash":"b566c8545c93f3f7eff6b5b38880f928ec02959b","modified":1647140341207},{"_id":"themes/next/db.json","hash":"b06b6832c381aa4237302113527de7539a2f030b","modified":1647140489031},{"_id":"public/atom.xml","hash":"1f66e8b40032a9e0e7ccce8ee691554c49456075","modified":1647140679229},{"_id":"public/search.xml","hash":"a7c5a6017afc10f0a9ec5dd7ef27e953eef267c7","modified":1647140526699},{"_id":"public/search.json","hash":"0f67014ab127d552c0ae7f6045517551a37bf2bf","modified":1647140679229},{"_id":"public/docker版本mysql5-7及以上版本-only-full-group-by报错的解决方法/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/contract-eth/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/approve-transfer/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/solidity-keyword/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/eth-contract-demo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/install-abigen/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/brew-update-error1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/mac-phpbrew/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/empty-and-count/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-array/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-parse-post/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/redis-hyperloglog/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/make-php-error/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/ascii-unicode-utf-8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/nohup/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/code-to-lose-weight/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/linux-ulimit-warning/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/greedy/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/structured-thinking/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/return/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/playing/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/phuket-travel/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-float-double-precision/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/当我们聊技术实力的时候，我们到底在聊什么/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/mysql-generated-columns/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/linux之统计ip排行/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/debug-php7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-libnetwork/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-apollo-config-center/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/principle-of-diligence/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-safe-and-config/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-unionfs/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-cgroups/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-namespace/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-golang/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-link/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/reading/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/mysqldump-excel/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-json-encode/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/vscode-install-psr2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/mysql-index/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/awk/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/interview-phpers/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-adapter-mode/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/linux-php-const/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/download-weibo-video/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/curl-https-502/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-prototype-pattern/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php7-gc/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/limit-req-limit-conn/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/nginx-limit-rate/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/eth-2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/eth/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php7-copy-on-write/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php7-refcount/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-factory/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-lnmp-2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/docker-lnmp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/phpsource-cli/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/phpsource-hash/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/nginx-tcp-proxy/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/ubuntu搭建lnmp环境/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/ubuntu-version/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/git-ssh-https/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/sphinx-warning/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-fastcgi-finish-request/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-rsa/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-utc2gmt/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-lifetime/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-sapi/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-xml/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-curl-json/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php7-function/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/php-7-hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/nodejs-pm2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/nodejs-lang/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/mysql-transaction/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/linux-hang-up/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/linux-alias/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/linux-add-user-group/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/linux-install-supervisor/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/git-push-error/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/git-branch/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/curlopt-timeout-ms/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/bash-lean-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/nodejs-error-cant-set-headers-after-they-are-sent/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/thinking-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/aliyun-mq/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/regular/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/reading-code-clean/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/14/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/13/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/15/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/16/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/17/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/18/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/19/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/20/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/21/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/22/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/page/23/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/Linux/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/Linux/page/8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/以太坊/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/Linux/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/PHP/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/Life/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/Nginx/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/Linux/page/7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/PHP源码/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/Docker/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/PHP/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/categories/PHP/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/tags/PHP/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/tags/PHP7/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/tags/docker/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/tags/以太坊/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229},{"_id":"public/tags/PHP源码/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647140679229}],"Category":[{"name":"以太坊","_id":"cl0oi8mdr0004417tf8145pdm"},{"name":"Linux","_id":"cl0oi8mdw0008417tcm7n7cz5"},{"name":"PHP","_id":"cl0oi8me0000c417t555j4eb9"},{"name":"Git","_id":"cl0oi8meg000s417t5mhq6dx2"},{"name":"Life","_id":"cl0oi8men000y417t0mav5qnr"},{"name":"Nginx","_id":"cl0oi8mer0013417t7ebjazkt"},{"name":"算法","_id":"cl0oi8mew0018417t22sfbx1n"},{"name":"Docker","_id":"cl0oi8mf3001f417tghvw3e51"},{"name":"PHP源码","_id":"cl0oi8mf9001n417tfpr9ffqy"},{"name":"Go","_id":"cl0oi8mgb003v417t4gjd0439"},{"name":"自我反思","_id":"cl0oi8mgo004b417t11s8esng"},{"name":"Mysql","_id":"cl0oi8mgs004k417tajd98ko0"},{"name":"Nodejs","_id":"cl0oi8mhc005m417t5fb0ekew"},{"name":"PHP设计模式","_id":"cl0oi8mho0068417thkuq61rq"}],"Data":[],"Page":[],"Post":[{"title":"【以太坊】创建以太坊钱包（mist）","id":"809","_content":"\n#### 什么是mist\n\nmist是以太坊的钱包，其实就是类似于大家比较常用的支付宝软件，我们可以通过mist钱包创建钱包地址","source":"_drafts/【以太坊】创建以太坊钱包（mist）.md","raw":"---\ntitle: 【以太坊】创建以太坊钱包（mist）\ntags:\n  - blockchain\n  - mist\n  - 以太坊\n  - 以太坊币\n  - 以太坊钱包\n  - 区块链\n  - 比特币\n  - 私有链\nid: '809'\ncategories:\n  - - 以太坊\n---\n\n#### 什么是mist\n\nmist是以太坊的钱包，其实就是类似于大家比较常用的支付宝软件，我们可以通过mist钱包创建钱包地址","slug":"【以太坊】创建以太坊钱包（mist）","published":0,"date":"2022-03-12T23:52:58.693Z","updated":"2022-03-12T23:52:58.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mdf0000417ta0l19oyo","content":"<h4 id=\"什么是mist\"><a href=\"#什么是mist\" class=\"headerlink\" title=\"什么是mist\"></a>什么是mist</h4><p>mist是以太坊的钱包，其实就是类似于大家比较常用的支付宝软件，我们可以通过mist钱包创建钱包地址</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是mist\"><a href=\"#什么是mist\" class=\"headerlink\" title=\"什么是mist\"></a>什么是mist</h4><p>mist是以太坊的钱包，其实就是类似于大家比较常用的支付宝软件，我们可以通过mist钱包创建钱包地址</p>\n"},{"title":"阿里云消息队列和消息服务的使用","id":"57","date":"2017-08-24T11:37:31.000Z","_content":"\n### 应用场景\n\n#### 异步处理\n\n消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。\n<!-- more -->\n> **串行方式**：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%971-1.png)\n\n> **并行方式**：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%972-1.png)\n\n消息队列实现方式：\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%974.png)\n\n#### 应用解耦\n\n用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%975-300x111.png)\n\n消息队列形式：\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%976.png)\n\n#### 流量削峰\n\n很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%977.png)\n\n### 阿里云消息队列和消息服务\n\n#### 消息服务和消息队列的对比\n\n对比项目\n\n消息服务(MNS,原MQS)\n\n消息队列(ONS)\n\nqueue模型\n\nYes\n\nYes\n\n官方SDK\n\nJava,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)\n\nJava,C/C++,C#,PHP(http),Python(http)\n\n支持JMS\n\nYes\n\nNo\n\n协议支持\n\nHTTP\n\nTCP,HTTP,MQTT\n\n延时消息\n\nYes\n\nYes\n\n定时消息\n\nNo\n\nYes\n\n事务消息\n\nYes\n\nYes\n\n消息Batch操作\n\nYes\n\nNo\n\n保证消息至少消费一次\n\nYes\n\nYes\n\n支持RAM访问控制\n\nYes\n\nYes\n\n消息优先级\n\nYes\n\nNo\n\n消息推拉模式\n\nPull，Push\n\nPull，Push\n\n消息轨迹追踪\n\nYes\n\nYes\n\n服务端消息过滤\n\nYes\n\nYes\n\nqps性能\n\n默认5000\n\n默认5000\n\n数据可靠性\n\n99.99999999%\n\n99.99%\n\n数据堆积\n\n不限\n\n不限\n\n服务可用性\n\n99.9%\n\n99.9%\n\n#### API对比\n\n[消息服务API地址](https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O)\n\n[消息队列http API地址](https://help.aliyun.com/document_detail/29572.html)\n\n> **消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到[签名](https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt)的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。**\n> \n> **消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。**","source":"_posts/aliyun-mq.md","raw":"---\ntitle: 阿里云消息队列和消息服务的使用\ntags: []\nid: '57'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:37:31\n---\n\n### 应用场景\n\n#### 异步处理\n\n消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。\n<!-- more -->\n> **串行方式**：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%971-1.png)\n\n> **并行方式**：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%972-1.png)\n\n消息队列实现方式：\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%974.png)\n\n#### 应用解耦\n\n用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%975-300x111.png)\n\n消息队列形式：\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%976.png)\n\n#### 流量削峰\n\n很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。\n\n![](/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%977.png)\n\n### 阿里云消息队列和消息服务\n\n#### 消息服务和消息队列的对比\n\n对比项目\n\n消息服务(MNS,原MQS)\n\n消息队列(ONS)\n\nqueue模型\n\nYes\n\nYes\n\n官方SDK\n\nJava,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)\n\nJava,C/C++,C#,PHP(http),Python(http)\n\n支持JMS\n\nYes\n\nNo\n\n协议支持\n\nHTTP\n\nTCP,HTTP,MQTT\n\n延时消息\n\nYes\n\nYes\n\n定时消息\n\nNo\n\nYes\n\n事务消息\n\nYes\n\nYes\n\n消息Batch操作\n\nYes\n\nNo\n\n保证消息至少消费一次\n\nYes\n\nYes\n\n支持RAM访问控制\n\nYes\n\nYes\n\n消息优先级\n\nYes\n\nNo\n\n消息推拉模式\n\nPull，Push\n\nPull，Push\n\n消息轨迹追踪\n\nYes\n\nYes\n\n服务端消息过滤\n\nYes\n\nYes\n\nqps性能\n\n默认5000\n\n默认5000\n\n数据可靠性\n\n99.99999999%\n\n99.99%\n\n数据堆积\n\n不限\n\n不限\n\n服务可用性\n\n99.9%\n\n99.9%\n\n#### API对比\n\n[消息服务API地址](https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O)\n\n[消息队列http API地址](https://help.aliyun.com/document_detail/29572.html)\n\n> **消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到[签名](https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt)的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。**\n> \n> **消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。**","slug":"aliyun-mq","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mdl0001417tff2igmy9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h4><p>消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p><strong>串行方式</strong>：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟</p>\n</blockquote>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%971-1.png\"></p>\n<blockquote>\n<p><strong>并行方式</strong>：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。</p>\n</blockquote>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%972-1.png\"></p>\n<p>消息队列实现方式：</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%974.png\"></p>\n<h4 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h4><p>用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%975-300x111.png\"></p>\n<p>消息队列形式：</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%976.png\"></p>\n<h4 id=\"流量削峰\"><a href=\"#流量削峰\" class=\"headerlink\" title=\"流量削峰\"></a>流量削峰</h4><p>很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%977.png\"></p>\n<h3 id=\"阿里云消息队列和消息服务\"><a href=\"#阿里云消息队列和消息服务\" class=\"headerlink\" title=\"阿里云消息队列和消息服务\"></a>阿里云消息队列和消息服务</h3><h4 id=\"消息服务和消息队列的对比\"><a href=\"#消息服务和消息队列的对比\" class=\"headerlink\" title=\"消息服务和消息队列的对比\"></a>消息服务和消息队列的对比</h4><p>对比项目</p>\n<p>消息服务(MNS,原MQS)</p>\n<p>消息队列(ONS)</p>\n<p>queue模型</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>官方SDK</p>\n<p>Java,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)</p>\n<p>Java,C&#x2F;C++,C#,PHP(http),Python(http)</p>\n<p>支持JMS</p>\n<p>Yes</p>\n<p>No</p>\n<p>协议支持</p>\n<p>HTTP</p>\n<p>TCP,HTTP,MQTT</p>\n<p>延时消息</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>定时消息</p>\n<p>No</p>\n<p>Yes</p>\n<p>事务消息</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>消息Batch操作</p>\n<p>Yes</p>\n<p>No</p>\n<p>保证消息至少消费一次</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>支持RAM访问控制</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>消息优先级</p>\n<p>Yes</p>\n<p>No</p>\n<p>消息推拉模式</p>\n<p>Pull，Push</p>\n<p>Pull，Push</p>\n<p>消息轨迹追踪</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>服务端消息过滤</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>qps性能</p>\n<p>默认5000</p>\n<p>默认5000</p>\n<p>数据可靠性</p>\n<p>99.99999999%</p>\n<p>99.99%</p>\n<p>数据堆积</p>\n<p>不限</p>\n<p>不限</p>\n<p>服务可用性</p>\n<p>99.9%</p>\n<p>99.9%</p>\n<h4 id=\"API对比\"><a href=\"#API对比\" class=\"headerlink\" title=\"API对比\"></a>API对比</h4><p><a href=\"https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O\">消息服务API地址</a></p>\n<p><a href=\"https://help.aliyun.com/document_detail/29572.html\">消息队列http API地址</a></p>\n<blockquote>\n<p><strong>消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到<a href=\"https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt\">签名</a>的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。</strong></p>\n<p><strong>消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h4><p>消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。</p>","more":"<blockquote>\n<p><strong>串行方式</strong>：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟</p>\n</blockquote>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%971-1.png\"></p>\n<blockquote>\n<p><strong>并行方式</strong>：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。</p>\n</blockquote>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%972-1.png\"></p>\n<p>消息队列实现方式：</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%974.png\"></p>\n<h4 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h4><p>用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%975-300x111.png\"></p>\n<p>消息队列形式：</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%976.png\"></p>\n<h4 id=\"流量削峰\"><a href=\"#流量削峰\" class=\"headerlink\" title=\"流量削峰\"></a>流量削峰</h4><p>很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。</p>\n<p><img src=\"/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%977.png\"></p>\n<h3 id=\"阿里云消息队列和消息服务\"><a href=\"#阿里云消息队列和消息服务\" class=\"headerlink\" title=\"阿里云消息队列和消息服务\"></a>阿里云消息队列和消息服务</h3><h4 id=\"消息服务和消息队列的对比\"><a href=\"#消息服务和消息队列的对比\" class=\"headerlink\" title=\"消息服务和消息队列的对比\"></a>消息服务和消息队列的对比</h4><p>对比项目</p>\n<p>消息服务(MNS,原MQS)</p>\n<p>消息队列(ONS)</p>\n<p>queue模型</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>官方SDK</p>\n<p>Java,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)</p>\n<p>Java,C&#x2F;C++,C#,PHP(http),Python(http)</p>\n<p>支持JMS</p>\n<p>Yes</p>\n<p>No</p>\n<p>协议支持</p>\n<p>HTTP</p>\n<p>TCP,HTTP,MQTT</p>\n<p>延时消息</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>定时消息</p>\n<p>No</p>\n<p>Yes</p>\n<p>事务消息</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>消息Batch操作</p>\n<p>Yes</p>\n<p>No</p>\n<p>保证消息至少消费一次</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>支持RAM访问控制</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>消息优先级</p>\n<p>Yes</p>\n<p>No</p>\n<p>消息推拉模式</p>\n<p>Pull，Push</p>\n<p>Pull，Push</p>\n<p>消息轨迹追踪</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>服务端消息过滤</p>\n<p>Yes</p>\n<p>Yes</p>\n<p>qps性能</p>\n<p>默认5000</p>\n<p>默认5000</p>\n<p>数据可靠性</p>\n<p>99.99999999%</p>\n<p>99.99%</p>\n<p>数据堆积</p>\n<p>不限</p>\n<p>不限</p>\n<p>服务可用性</p>\n<p>99.9%</p>\n<p>99.9%</p>\n<h4 id=\"API对比\"><a href=\"#API对比\" class=\"headerlink\" title=\"API对比\"></a>API对比</h4><p><a href=\"https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O\">消息服务API地址</a></p>\n<p><a href=\"https://help.aliyun.com/document_detail/29572.html\">消息队列http API地址</a></p>\n<blockquote>\n<p><strong>消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到<a href=\"https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt\">签名</a>的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。</strong></p>\n<p><strong>消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。</strong></p>\n</blockquote>"},{"title":"【以太坊】实现智能合约授权与余额转账","id":"794","date":"2021-06-07T14:06:30.000Z","_content":"\n上一节实现了智能合约的基本编写以及solidity的基本的函数修饰关键字。这一节开始进行合约的授权和余额的转账。\n\n### 代币授权\n\n首先，代币的授权与余额是一个map，对应key是以太坊钱包的地址，value是对应的授权额度，查询的时间复杂度是O(1)，查询效率会比较高。现在需要实现的是代币余额查询（balanceOf），代币的额度申请（approve）和授权额度查询（allowance）这三个函数。\n\n```bash\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // 根据地址获取获取代币金额 \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // 授权额度申请 \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n```\n\n在approve函数中，emit的关键字含义是触发一个事件授权事件`Approval`。\n\n我们在发布智能合约的第一件事，就是设置代币总金额：\n\n```bash\n    constructor() public{\n        totalPublic = 1000000000;\n        balances[msg.sender] = totalPublic;\n    }\n```\n\n其中`msg.sender`代表智能合约发布者的以太坊地址，我们把发行量`totalPublic`给予了这个地址。当然这个是可以控制的，只给予一小部分也是允许的。\n\n### 转账函数\n\n一下是智能合约的转账函数：\n\n```bash\n   // 转账 \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n```\n\n转账函数的一些参数校验，一般使用solidity语法中的require函数，首先，验真剩余的额度不能小于转账额度；转账的额度不能是赋值；依次在对收款方和付款方进行额度的增加和减少；然后触发转账事件`Transfer`,把对应的数据写到区块里面。 以上的这个函数，只是合约发布方转账给其他地址。还会有地址之间的代币转账：\n\n```bash\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowanceValue = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowanceValue >= _value);\n        require(balances[_to] + _value > balances[_to]);\n        allowed[_from][msg.sender] -= _value;\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n```\n\n至此，一份标准的ERC20代币的智能合约就编写完成了，完整代码如下：\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic;//代币发行量\n\n    mapping (address => uint256) public balances;// 余额map \n    mapping (address => mapping(address =>uint256)) public allowed;// 授权map\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    constructor() public{\n        totalPublic = 1000000000;\n        balances[msg.sender] = totalPublic;\n    }\n\n    // 根据地址获取获取代币金额 \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // 授权额度申请 \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // 转账 \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowanceValue = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowanceValue >= _value);\n        require(balances[_to] + _value > balances[_to]);\n        allowed[_from][msg.sender] -= _value;\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n}\n```\n\n### 合约的代码安全\n\n由于智能合约是代码编写的，所以就可能存在代码的漏洞。最著名的合约的漏洞是2018年的“美链BEC合约漏洞事件”。该事件的后果就是“BEC”代币价值归零，以下是漏洞代码：\n\n```bash\n    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n        uint cnt = _receivers.length;\n        uint256 amount = uint256(cnt) * _value;\n        require(cnt > 0 && cnt <= 20);\n        require(_value > 0 && balances[msg.sender] >= amount);\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        for (uint i = 0; i < cnt; i++) {\n            balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n            Transfer(msg,sender, _receivers[i], _value);\n        }\n        return true;\n    }\n```\n\nbatchTransfer是一个批量函数，可以实现批量转账，但是代码`uint256 amount = uint256(cnt) * _value`存在风险，加入`_value`是一个在uint256范围内，但是乘以cnt得到的`amount`超过了uint256而造成溢出，就会变成一个比较小的数字，当执行代码`require(_value > 0 && balances[msg.sender] >= amount);`也校验通过了，在循环执行转账操作的时候就会出现扣除很少的`amount`，而收款方获得了很大的`_value`，造成了资产的被盗。\n\n解决这种溢出，可以通过除法进行验证，比如：\n\n```bash\n    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n        uint cnt = _receivers.length;\n        uint256 amount = uint256(cnt) * _value;\n        require(_value > 0 && amount / _value == cnt);\n        require(cnt > 0 && cnt <= 20);\n        require(_value > 0 && balances[msg.sender] >= amount);\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        for (uint i = 0; i < cnt; i++) {\n            balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n            Transfer(msg,sender, _receivers[i], _value);\n        }\n        return true;\n    }\n```\n\n以上只是合约安全的一个简单的例子。在实际开发中，涉及到复杂的运算，一定要谨慎编写代码，以免出现代码漏洞。\n\n本文链接：[https://feilong.tech/approve\\_transfer/](https://feilong.tech/approve_transfer/)","source":"_posts/approve-transfer.md","raw":"---\ntitle: 【以太坊】实现智能合约授权与余额转账\ntags:\n  - token\n  - 以太坊\n  - 区块链\n  - 智能合约\nid: '794'\ncategories:\n  - - PHP\ndate: 2021-06-07 22:06:30\n---\n\n上一节实现了智能合约的基本编写以及solidity的基本的函数修饰关键字。这一节开始进行合约的授权和余额的转账。\n\n### 代币授权\n\n首先，代币的授权与余额是一个map，对应key是以太坊钱包的地址，value是对应的授权额度，查询的时间复杂度是O(1)，查询效率会比较高。现在需要实现的是代币余额查询（balanceOf），代币的额度申请（approve）和授权额度查询（allowance）这三个函数。\n\n```bash\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // 根据地址获取获取代币金额 \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // 授权额度申请 \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n```\n\n在approve函数中，emit的关键字含义是触发一个事件授权事件`Approval`。\n\n我们在发布智能合约的第一件事，就是设置代币总金额：\n\n```bash\n    constructor() public{\n        totalPublic = 1000000000;\n        balances[msg.sender] = totalPublic;\n    }\n```\n\n其中`msg.sender`代表智能合约发布者的以太坊地址，我们把发行量`totalPublic`给予了这个地址。当然这个是可以控制的，只给予一小部分也是允许的。\n\n### 转账函数\n\n一下是智能合约的转账函数：\n\n```bash\n   // 转账 \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n```\n\n转账函数的一些参数校验，一般使用solidity语法中的require函数，首先，验真剩余的额度不能小于转账额度；转账的额度不能是赋值；依次在对收款方和付款方进行额度的增加和减少；然后触发转账事件`Transfer`,把对应的数据写到区块里面。 以上的这个函数，只是合约发布方转账给其他地址。还会有地址之间的代币转账：\n\n```bash\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowanceValue = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowanceValue >= _value);\n        require(balances[_to] + _value > balances[_to]);\n        allowed[_from][msg.sender] -= _value;\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n```\n\n至此，一份标准的ERC20代币的智能合约就编写完成了，完整代码如下：\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic;//代币发行量\n\n    mapping (address => uint256) public balances;// 余额map \n    mapping (address => mapping(address =>uint256)) public allowed;// 授权map\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    constructor() public{\n        totalPublic = 1000000000;\n        balances[msg.sender] = totalPublic;\n    }\n\n    // 根据地址获取获取代币金额 \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // 授权额度申请 \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // 转账 \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowanceValue = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowanceValue >= _value);\n        require(balances[_to] + _value > balances[_to]);\n        allowed[_from][msg.sender] -= _value;\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n}\n```\n\n### 合约的代码安全\n\n由于智能合约是代码编写的，所以就可能存在代码的漏洞。最著名的合约的漏洞是2018年的“美链BEC合约漏洞事件”。该事件的后果就是“BEC”代币价值归零，以下是漏洞代码：\n\n```bash\n    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n        uint cnt = _receivers.length;\n        uint256 amount = uint256(cnt) * _value;\n        require(cnt > 0 && cnt <= 20);\n        require(_value > 0 && balances[msg.sender] >= amount);\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        for (uint i = 0; i < cnt; i++) {\n            balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n            Transfer(msg,sender, _receivers[i], _value);\n        }\n        return true;\n    }\n```\n\nbatchTransfer是一个批量函数，可以实现批量转账，但是代码`uint256 amount = uint256(cnt) * _value`存在风险，加入`_value`是一个在uint256范围内，但是乘以cnt得到的`amount`超过了uint256而造成溢出，就会变成一个比较小的数字，当执行代码`require(_value > 0 && balances[msg.sender] >= amount);`也校验通过了，在循环执行转账操作的时候就会出现扣除很少的`amount`，而收款方获得了很大的`_value`，造成了资产的被盗。\n\n解决这种溢出，可以通过除法进行验证，比如：\n\n```bash\n    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n        uint cnt = _receivers.length;\n        uint256 amount = uint256(cnt) * _value;\n        require(_value > 0 && amount / _value == cnt);\n        require(cnt > 0 && cnt <= 20);\n        require(_value > 0 && balances[msg.sender] >= amount);\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        for (uint i = 0; i < cnt; i++) {\n            balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n            Transfer(msg,sender, _receivers[i], _value);\n        }\n        return true;\n    }\n```\n\n以上只是合约安全的一个简单的例子。在实际开发中，涉及到复杂的运算，一定要谨慎编写代码，以免出现代码漏洞。\n\n本文链接：[https://feilong.tech/approve\\_transfer/](https://feilong.tech/approve_transfer/)","slug":"approve-transfer","published":1,"updated":"2022-03-12T23:52:58.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mdq0003417thk1ncp52","content":"<p>上一节实现了智能合约的基本编写以及solidity的基本的函数修饰关键字。这一节开始进行合约的授权和余额的转账。</p>\n<h3 id=\"代币授权\"><a href=\"#代币授权\" class=\"headerlink\" title=\"代币授权\"></a>代币授权</h3><p>首先，代币的授权与余额是一个map，对应key是以太坊钱包的地址，value是对应的授权额度，查询的时间复杂度是O(1)，查询效率会比较高。现在需要实现的是代币余额查询（balanceOf），代币的额度申请（approve）和授权额度查询（allowance）这三个函数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class=\"line\">event Approval(address indexed _owner, address indexed _spender, uint256 _value);</span><br><span class=\"line\"></span><br><span class=\"line\">// 根据地址获取获取代币金额 </span><br><span class=\"line\"><span class=\"keyword\">function</span> balanceOf(address _owner) public view returns (uint256 balance) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> balances[_owner];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 授权额度申请 </span><br><span class=\"line\"><span class=\"keyword\">function</span> approve(address _spender, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">    allowed[msg.sender][_spender] = _value;</span><br><span class=\"line\">    emit Approval(msg.sender, _spender, _value);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 </span><br><span class=\"line\"><span class=\"keyword\">function</span> allowance(address _owner, address _spender) public view returns (uint256 remaining) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> allowed[_owner][_spender];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在approve函数中，emit的关键字含义是触发一个事件授权事件<code>Approval</code>。</p>\n<p>我们在发布智能合约的第一件事，就是设置代币总金额：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor() public&#123;</span><br><span class=\"line\">    totalPublic = 1000000000;</span><br><span class=\"line\">    balances[msg.sender] = totalPublic;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>msg.sender</code>代表智能合约发布者的以太坊地址，我们把发行量<code>totalPublic</code>给予了这个地址。当然这个是可以控制的，只给予一小部分也是允许的。</p>\n<h3 id=\"转账函数\"><a href=\"#转账函数\" class=\"headerlink\" title=\"转账函数\"></a>转账函数</h3><p>一下是智能合约的转账函数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 转账 </span><br><span class=\"line\"> <span class=\"keyword\">function</span> transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">     require(balances[msg.sender] &gt;= _value);</span><br><span class=\"line\">     require(balances[_to] + _value &gt;= balances[_to]);</span><br><span class=\"line\">     balances[msg.sender] -= _value;</span><br><span class=\"line\">     balances[_to] += _value;</span><br><span class=\"line\">     emit Transfer(msg.sender, _to, _value);</span><br><span class=\"line\">     <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>转账函数的一些参数校验，一般使用solidity语法中的require函数，首先，验真剩余的额度不能小于转账额度；转账的额度不能是赋值；依次在对收款方和付款方进行额度的增加和减少；然后触发转账事件<code>Transfer</code>,把对应的数据写到区块里面。 以上的这个函数，只是合约发布方转账给其他地址。还会有地址之间的代币转账：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">    uint256 allowanceValue = allowed[_from][msg.sender];</span><br><span class=\"line\">    require(balances[_from] &gt;= _value &amp;&amp; allowanceValue &gt;= _value);</span><br><span class=\"line\">    require(balances[_to] + _value &gt; balances[_to]);</span><br><span class=\"line\">    allowed[_from][msg.sender] -= _value;</span><br><span class=\"line\">    balances[_to] += _value;</span><br><span class=\"line\">    balances[_from] -= _value;</span><br><span class=\"line\">    emit Transfer(_from, _to, _value);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，一份标准的ERC20代币的智能合约就编写完成了，完整代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic;//代币发行量</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; uint256) public balances;// 余额map </span><br><span class=\"line\">    mapping (address =&gt; mapping(address =&gt;uint256)) public allowed;// 授权map</span><br><span class=\"line\"></span><br><span class=\"line\">    event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class=\"line\">    event Approval(address indexed _owner, address indexed _spender, uint256 _value);</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() public&#123;</span><br><span class=\"line\">        totalPublic = 1000000000;</span><br><span class=\"line\">        balances[msg.sender] = totalPublic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据地址获取获取代币金额 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> balanceOf(address _owner) public view returns (uint256 balance) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> balances[_owner];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 授权额度申请 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> approve(address _spender, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        allowed[msg.sender][_spender] = _value;</span><br><span class=\"line\">        emit Approval(msg.sender, _spender, _value);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> allowance(address _owner, address _spender) public view returns (uint256 remaining) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> allowed[_owner][_spender];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 转账 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balances[msg.sender] &gt;= _value);</span><br><span class=\"line\">        require(balances[_to] + _value &gt;= balances[_to]);</span><br><span class=\"line\">        balances[msg.sender] -= _value;</span><br><span class=\"line\">        balances[_to] += _value;</span><br><span class=\"line\">        emit Transfer(msg.sender, _to, _value);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        uint256 allowanceValue = allowed[_from][msg.sender];</span><br><span class=\"line\">        require(balances[_from] &gt;= _value &amp;&amp; allowanceValue &gt;= _value);</span><br><span class=\"line\">        require(balances[_to] + _value &gt; balances[_to]);</span><br><span class=\"line\">        allowed[_from][msg.sender] -= _value;</span><br><span class=\"line\">        balances[_to] += _value;</span><br><span class=\"line\">        balances[_from] -= _value;</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合约的代码安全\"><a href=\"#合约的代码安全\" class=\"headerlink\" title=\"合约的代码安全\"></a>合约的代码安全</h3><p>由于智能合约是代码编写的，所以就可能存在代码的漏洞。最著名的合约的漏洞是2018年的“美链BEC合约漏洞事件”。该事件的后果就是“BEC”代币价值归零，以下是漏洞代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) &#123;</span><br><span class=\"line\">    uint cnt = _receivers.length;</span><br><span class=\"line\">    uint256 amount = uint256(cnt) * _value;</span><br><span class=\"line\">    require(cnt &gt; 0 &amp;&amp; cnt &lt;= 20);</span><br><span class=\"line\">    require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);</span><br><span class=\"line\"></span><br><span class=\"line\">    balances[msg.sender] = balances[msg.sender].sub(amount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = 0; i &lt; cnt; i++) &#123;</span><br><span class=\"line\">        balances[_receivers[i]] = balances[_receivers[i]].add(_value);</span><br><span class=\"line\">        Transfer(msg,sender, _receivers[i], _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>batchTransfer是一个批量函数，可以实现批量转账，但是代码<code>uint256 amount = uint256(cnt) * _value</code>存在风险，加入<code>_value</code>是一个在uint256范围内，但是乘以cnt得到的<code>amount</code>超过了uint256而造成溢出，就会变成一个比较小的数字，当执行代码<code>require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);</code>也校验通过了，在循环执行转账操作的时候就会出现扣除很少的<code>amount</code>，而收款方获得了很大的<code>_value</code>，造成了资产的被盗。</p>\n<p>解决这种溢出，可以通过除法进行验证，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) &#123;</span><br><span class=\"line\">    uint cnt = _receivers.length;</span><br><span class=\"line\">    uint256 amount = uint256(cnt) * _value;</span><br><span class=\"line\">    require(_value &gt; 0 &amp;&amp; amount / _value == cnt);</span><br><span class=\"line\">    require(cnt &gt; 0 &amp;&amp; cnt &lt;= 20);</span><br><span class=\"line\">    require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);</span><br><span class=\"line\"></span><br><span class=\"line\">    balances[msg.sender] = balances[msg.sender].sub(amount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = 0; i &lt; cnt; i++) &#123;</span><br><span class=\"line\">        balances[_receivers[i]] = balances[_receivers[i]].add(_value);</span><br><span class=\"line\">        Transfer(msg,sender, _receivers[i], _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上只是合约安全的一个简单的例子。在实际开发中，涉及到复杂的运算，一定要谨慎编写代码，以免出现代码漏洞。</p>\n<p>本文链接：<a href=\"https://feilong.tech/approve_transfer/\">https://feilong.tech/approve_transfer&#x2F;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一节实现了智能合约的基本编写以及solidity的基本的函数修饰关键字。这一节开始进行合约的授权和余额的转账。</p>\n<h3 id=\"代币授权\"><a href=\"#代币授权\" class=\"headerlink\" title=\"代币授权\"></a>代币授权</h3><p>首先，代币的授权与余额是一个map，对应key是以太坊钱包的地址，value是对应的授权额度，查询的时间复杂度是O(1)，查询效率会比较高。现在需要实现的是代币余额查询（balanceOf），代币的额度申请（approve）和授权额度查询（allowance）这三个函数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class=\"line\">event Approval(address indexed _owner, address indexed _spender, uint256 _value);</span><br><span class=\"line\"></span><br><span class=\"line\">// 根据地址获取获取代币金额 </span><br><span class=\"line\"><span class=\"keyword\">function</span> balanceOf(address _owner) public view returns (uint256 balance) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> balances[_owner];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 授权额度申请 </span><br><span class=\"line\"><span class=\"keyword\">function</span> approve(address _spender, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">    allowed[msg.sender][_spender] = _value;</span><br><span class=\"line\">    emit Approval(msg.sender, _spender, _value);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 </span><br><span class=\"line\"><span class=\"keyword\">function</span> allowance(address _owner, address _spender) public view returns (uint256 remaining) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> allowed[_owner][_spender];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在approve函数中，emit的关键字含义是触发一个事件授权事件<code>Approval</code>。</p>\n<p>我们在发布智能合约的第一件事，就是设置代币总金额：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor() public&#123;</span><br><span class=\"line\">    totalPublic = 1000000000;</span><br><span class=\"line\">    balances[msg.sender] = totalPublic;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>msg.sender</code>代表智能合约发布者的以太坊地址，我们把发行量<code>totalPublic</code>给予了这个地址。当然这个是可以控制的，只给予一小部分也是允许的。</p>\n<h3 id=\"转账函数\"><a href=\"#转账函数\" class=\"headerlink\" title=\"转账函数\"></a>转账函数</h3><p>一下是智能合约的转账函数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 转账 </span><br><span class=\"line\"> <span class=\"keyword\">function</span> transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">     require(balances[msg.sender] &gt;= _value);</span><br><span class=\"line\">     require(balances[_to] + _value &gt;= balances[_to]);</span><br><span class=\"line\">     balances[msg.sender] -= _value;</span><br><span class=\"line\">     balances[_to] += _value;</span><br><span class=\"line\">     emit Transfer(msg.sender, _to, _value);</span><br><span class=\"line\">     <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>转账函数的一些参数校验，一般使用solidity语法中的require函数，首先，验真剩余的额度不能小于转账额度；转账的额度不能是赋值；依次在对收款方和付款方进行额度的增加和减少；然后触发转账事件<code>Transfer</code>,把对应的数据写到区块里面。 以上的这个函数，只是合约发布方转账给其他地址。还会有地址之间的代币转账：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">    uint256 allowanceValue = allowed[_from][msg.sender];</span><br><span class=\"line\">    require(balances[_from] &gt;= _value &amp;&amp; allowanceValue &gt;= _value);</span><br><span class=\"line\">    require(balances[_to] + _value &gt; balances[_to]);</span><br><span class=\"line\">    allowed[_from][msg.sender] -= _value;</span><br><span class=\"line\">    balances[_to] += _value;</span><br><span class=\"line\">    balances[_from] -= _value;</span><br><span class=\"line\">    emit Transfer(_from, _to, _value);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，一份标准的ERC20代币的智能合约就编写完成了，完整代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic;//代币发行量</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; uint256) public balances;// 余额map </span><br><span class=\"line\">    mapping (address =&gt; mapping(address =&gt;uint256)) public allowed;// 授权map</span><br><span class=\"line\"></span><br><span class=\"line\">    event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class=\"line\">    event Approval(address indexed _owner, address indexed _spender, uint256 _value);</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() public&#123;</span><br><span class=\"line\">        totalPublic = 1000000000;</span><br><span class=\"line\">        balances[msg.sender] = totalPublic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据地址获取获取代币金额 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> balanceOf(address _owner) public view returns (uint256 balance) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> balances[_owner];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 授权额度申请 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> approve(address _spender, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        allowed[msg.sender][_spender] = _value;</span><br><span class=\"line\">        emit Approval(msg.sender, _spender, _value);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> allowance(address _owner, address _spender) public view returns (uint256 remaining) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> allowed[_owner][_spender];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 转账 </span><br><span class=\"line\">    <span class=\"keyword\">function</span> transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balances[msg.sender] &gt;= _value);</span><br><span class=\"line\">        require(balances[_to] + _value &gt;= balances[_to]);</span><br><span class=\"line\">        balances[msg.sender] -= _value;</span><br><span class=\"line\">        balances[_to] += _value;</span><br><span class=\"line\">        emit Transfer(msg.sender, _to, _value);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        uint256 allowanceValue = allowed[_from][msg.sender];</span><br><span class=\"line\">        require(balances[_from] &gt;= _value &amp;&amp; allowanceValue &gt;= _value);</span><br><span class=\"line\">        require(balances[_to] + _value &gt; balances[_to]);</span><br><span class=\"line\">        allowed[_from][msg.sender] -= _value;</span><br><span class=\"line\">        balances[_to] += _value;</span><br><span class=\"line\">        balances[_from] -= _value;</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合约的代码安全\"><a href=\"#合约的代码安全\" class=\"headerlink\" title=\"合约的代码安全\"></a>合约的代码安全</h3><p>由于智能合约是代码编写的，所以就可能存在代码的漏洞。最著名的合约的漏洞是2018年的“美链BEC合约漏洞事件”。该事件的后果就是“BEC”代币价值归零，以下是漏洞代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) &#123;</span><br><span class=\"line\">    uint cnt = _receivers.length;</span><br><span class=\"line\">    uint256 amount = uint256(cnt) * _value;</span><br><span class=\"line\">    require(cnt &gt; 0 &amp;&amp; cnt &lt;= 20);</span><br><span class=\"line\">    require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);</span><br><span class=\"line\"></span><br><span class=\"line\">    balances[msg.sender] = balances[msg.sender].sub(amount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = 0; i &lt; cnt; i++) &#123;</span><br><span class=\"line\">        balances[_receivers[i]] = balances[_receivers[i]].add(_value);</span><br><span class=\"line\">        Transfer(msg,sender, _receivers[i], _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>batchTransfer是一个批量函数，可以实现批量转账，但是代码<code>uint256 amount = uint256(cnt) * _value</code>存在风险，加入<code>_value</code>是一个在uint256范围内，但是乘以cnt得到的<code>amount</code>超过了uint256而造成溢出，就会变成一个比较小的数字，当执行代码<code>require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);</code>也校验通过了，在循环执行转账操作的时候就会出现扣除很少的<code>amount</code>，而收款方获得了很大的<code>_value</code>，造成了资产的被盗。</p>\n<p>解决这种溢出，可以通过除法进行验证，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) &#123;</span><br><span class=\"line\">    uint cnt = _receivers.length;</span><br><span class=\"line\">    uint256 amount = uint256(cnt) * _value;</span><br><span class=\"line\">    require(_value &gt; 0 &amp;&amp; amount / _value == cnt);</span><br><span class=\"line\">    require(cnt &gt; 0 &amp;&amp; cnt &lt;= 20);</span><br><span class=\"line\">    require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);</span><br><span class=\"line\"></span><br><span class=\"line\">    balances[msg.sender] = balances[msg.sender].sub(amount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = 0; i &lt; cnt; i++) &#123;</span><br><span class=\"line\">        balances[_receivers[i]] = balances[_receivers[i]].add(_value);</span><br><span class=\"line\">        Transfer(msg,sender, _receivers[i], _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上只是合约安全的一个简单的例子。在实际开发中，涉及到复杂的运算，一定要谨慎编写代码，以免出现代码漏洞。</p>\n<p>本文链接：<a href=\"https://feilong.tech/approve_transfer/\">https://feilong.tech/approve_transfer&#x2F;</a></p>\n"},{"title":"ASCII、Unicode和UTF-8的关系","id":"707","date":"2019-11-08T06:34:15.000Z","_content":"\n对于我来说，字符集的相关知识，一直都是噩梦。Unicode、utf-8、ASCII....搞得头都大了。我也特意梳理了下，字符集之间的关系。而且，之前在贝壳面试，面试官也问了我关于unicode编码的事情。\n\n### ASCII\n\n#### 由来\n\nASCII的字符集算是出来最早的了，最初是来源于美国。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。除了我们常见的英文字母，还包含了各种英文的标点符号等等。在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个符号是不够的。\n\n#### 存在的问题\n\n但是这样是有问题的。举个例子，法语的字母上方是有音标的，它就无法使用ASCII的编码表示。于是，一些欧洲的国家决定，利用字节中闲置的最高位编入新的符号，这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。由最开始的 0xxx xxxx (2^7=128) 变成了 1xxx xxxx (2^8=256)\n\n### Unicode\n\n后来，大家都在考虑，如果有一种字符集，能够包含所有的字符，那就好了。\n\n于是，在 1991 年，国际标准化组织和统一码联盟组织各自开发了 ISO/IEC 10646（USC）和 Unicode 项目。他们俩的野心和当时的秦始皇一样，一统江湖。后来，两个组织开始进行讨论，决定把彼此的工作内容合并，但是项目还是独立存在，各自发布自己的标准，但是要保持兼容。后来由于Unicode的好记，就被广为流传。其实，Unicode的含义可以解释为union code。\n\n在表示一个Unicode的字符时，通常会用U+ 后面跟着十六进制的数字来表示这一个字符。\n\nUnicode的编码，延续了ASCII的编码，0-127位，还是代表了ASCII的编码，从128以后，才是其他的编码。\n\n比如 在unicode的`U+ 0041`代表了大写的`A`, 在ascii编码16进制也是`\\x41`\n\n再比如，`肥`的unicode编码表示为`U+ 80a5`\n\n### UTF-8\n\nutf-8的的全拼是`Universal Character Set/Unicode Transformation Format`,翻译过来就是`Unicode格式化`，很明显是一个动词，表示把字符转换成8位的Unicode。\n\n举个例子:\n\n```bash\nI’m 肥龙\n```\n\n使用unicode的表示为\n\n```bash\nI U+49\n' U+20\nm U+6D\n肥 U+80A5\n龙 U+9F99\n```\n\n但是，在计算机里，统一都是2进制的存储的，所以转换成2进制表示为\n\n```bash\nI  00000000 01001001\n'  00000000 00100000\nm  00000000 01101101\n   00000000 00000000\n肥  10000000 10100101\n龙  10011111 10011001\n```\n\nUTF-8规定：\n\n1、单字节的字符，字节的第一位设为0，对于英文文本，utf-8只占用一个字符，所以第一位都是0\n\n2、n个字节，第一个字节的前n个设为1，第n+1设为0，后面的字节前两位都设为10，这n个字节的其余空位填充该字符unicode码，高位用0补足。\n\n所以，转换成UTF-8过程\n\n```bash\n肥\n---------------------------\n10000000 10100101   二进制\n1110 10 10         初始化模板\n11101000 10000010 10100101 补全\ne8 82 a5            16进制\n```\n\n```bash\n龙\n---------------------------\n10011111 10011001 二进制\n1110 10 10          初始化模板\n11101001 10111110 10011001 补全\ne9 be 99            16进制\n```\n\n所以最后的转换成utf-8的编码\n\n```bash\nI  01001001\n'  00100000\nm  01101101\n   00000000\n肥  11101000 10000010 10100101\n龙  11101001 10111110 10011001\n```\n\n使用Python验证一下结果\n\n```pyhton\n>>> a=u'肥龙'\n>>> a\nu'\\u80a5\\u9f99'\n>>> b=a.encode('utf8')\n>>> b\n'\\xe8\\x82\\xa5\\xe9\\xbe\\x99'\n>>>\n```\n\n可以看到，省略了一部分空间。汉子的编码多了一个字节，英文的编码少了一个字节，总共节省了2个字节的空间！\n\n本文连接： [https://feilong.tech/2019/11/08/ascii\\_unicode\\_utf-8](https://feilong.tech/2019/11/08/ascii_unicode_utf-8)","source":"_posts/ascii-unicode-utf-8.md","raw":"---\ntitle: ASCII、Unicode和UTF-8的关系\ntags:\n  - ascii\n  - unicode\n  - utf-8\n  - 编码\nid: '707'\ncategories:\n  - - Linux\n  - - 算法\ndate: 2019-11-08 14:34:15\n---\n\n对于我来说，字符集的相关知识，一直都是噩梦。Unicode、utf-8、ASCII....搞得头都大了。我也特意梳理了下，字符集之间的关系。而且，之前在贝壳面试，面试官也问了我关于unicode编码的事情。\n\n### ASCII\n\n#### 由来\n\nASCII的字符集算是出来最早的了，最初是来源于美国。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。除了我们常见的英文字母，还包含了各种英文的标点符号等等。在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个符号是不够的。\n\n#### 存在的问题\n\n但是这样是有问题的。举个例子，法语的字母上方是有音标的，它就无法使用ASCII的编码表示。于是，一些欧洲的国家决定，利用字节中闲置的最高位编入新的符号，这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。由最开始的 0xxx xxxx (2^7=128) 变成了 1xxx xxxx (2^8=256)\n\n### Unicode\n\n后来，大家都在考虑，如果有一种字符集，能够包含所有的字符，那就好了。\n\n于是，在 1991 年，国际标准化组织和统一码联盟组织各自开发了 ISO/IEC 10646（USC）和 Unicode 项目。他们俩的野心和当时的秦始皇一样，一统江湖。后来，两个组织开始进行讨论，决定把彼此的工作内容合并，但是项目还是独立存在，各自发布自己的标准，但是要保持兼容。后来由于Unicode的好记，就被广为流传。其实，Unicode的含义可以解释为union code。\n\n在表示一个Unicode的字符时，通常会用U+ 后面跟着十六进制的数字来表示这一个字符。\n\nUnicode的编码，延续了ASCII的编码，0-127位，还是代表了ASCII的编码，从128以后，才是其他的编码。\n\n比如 在unicode的`U+ 0041`代表了大写的`A`, 在ascii编码16进制也是`\\x41`\n\n再比如，`肥`的unicode编码表示为`U+ 80a5`\n\n### UTF-8\n\nutf-8的的全拼是`Universal Character Set/Unicode Transformation Format`,翻译过来就是`Unicode格式化`，很明显是一个动词，表示把字符转换成8位的Unicode。\n\n举个例子:\n\n```bash\nI’m 肥龙\n```\n\n使用unicode的表示为\n\n```bash\nI U+49\n' U+20\nm U+6D\n肥 U+80A5\n龙 U+9F99\n```\n\n但是，在计算机里，统一都是2进制的存储的，所以转换成2进制表示为\n\n```bash\nI  00000000 01001001\n'  00000000 00100000\nm  00000000 01101101\n   00000000 00000000\n肥  10000000 10100101\n龙  10011111 10011001\n```\n\nUTF-8规定：\n\n1、单字节的字符，字节的第一位设为0，对于英文文本，utf-8只占用一个字符，所以第一位都是0\n\n2、n个字节，第一个字节的前n个设为1，第n+1设为0，后面的字节前两位都设为10，这n个字节的其余空位填充该字符unicode码，高位用0补足。\n\n所以，转换成UTF-8过程\n\n```bash\n肥\n---------------------------\n10000000 10100101   二进制\n1110 10 10         初始化模板\n11101000 10000010 10100101 补全\ne8 82 a5            16进制\n```\n\n```bash\n龙\n---------------------------\n10011111 10011001 二进制\n1110 10 10          初始化模板\n11101001 10111110 10011001 补全\ne9 be 99            16进制\n```\n\n所以最后的转换成utf-8的编码\n\n```bash\nI  01001001\n'  00100000\nm  01101101\n   00000000\n肥  11101000 10000010 10100101\n龙  11101001 10111110 10011001\n```\n\n使用Python验证一下结果\n\n```pyhton\n>>> a=u'肥龙'\n>>> a\nu'\\u80a5\\u9f99'\n>>> b=a.encode('utf8')\n>>> b\n'\\xe8\\x82\\xa5\\xe9\\xbe\\x99'\n>>>\n```\n\n可以看到，省略了一部分空间。汉子的编码多了一个字节，英文的编码少了一个字节，总共节省了2个字节的空间！\n\n本文连接： [https://feilong.tech/2019/11/08/ascii\\_unicode\\_utf-8](https://feilong.tech/2019/11/08/ascii_unicode_utf-8)","slug":"ascii-unicode-utf-8","published":1,"updated":"2022-03-12T23:52:58.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mdt0005417t7vwld2e6","content":"<p>对于我来说，字符集的相关知识，一直都是噩梦。Unicode、utf-8、ASCII….搞得头都大了。我也特意梳理了下，字符集之间的关系。而且，之前在贝壳面试，面试官也问了我关于unicode编码的事情。</p>\n<h3 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h3><h4 id=\"由来\"><a href=\"#由来\" class=\"headerlink\" title=\"由来\"></a>由来</h4><p>ASCII的字符集算是出来最早的了，最初是来源于美国。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。除了我们常见的英文字母，还包含了各种英文的标点符号等等。在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个符号是不够的。</p>\n<h4 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h4><p>但是这样是有问题的。举个例子，法语的字母上方是有音标的，它就无法使用ASCII的编码表示。于是，一些欧洲的国家决定，利用字节中闲置的最高位编入新的符号，这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。由最开始的 0xxx xxxx (2^7&#x3D;128) 变成了 1xxx xxxx (2^8&#x3D;256)</p>\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><p>后来，大家都在考虑，如果有一种字符集，能够包含所有的字符，那就好了。</p>\n<p>于是，在 1991 年，国际标准化组织和统一码联盟组织各自开发了 ISO&#x2F;IEC 10646（USC）和 Unicode 项目。他们俩的野心和当时的秦始皇一样，一统江湖。后来，两个组织开始进行讨论，决定把彼此的工作内容合并，但是项目还是独立存在，各自发布自己的标准，但是要保持兼容。后来由于Unicode的好记，就被广为流传。其实，Unicode的含义可以解释为union code。</p>\n<p>在表示一个Unicode的字符时，通常会用U+ 后面跟着十六进制的数字来表示这一个字符。</p>\n<p>Unicode的编码，延续了ASCII的编码，0-127位，还是代表了ASCII的编码，从128以后，才是其他的编码。</p>\n<p>比如 在unicode的<code>U+ 0041</code>代表了大写的<code>A</code>, 在ascii编码16进制也是<code>\\x41</code></p>\n<p>再比如，<code>肥</code>的unicode编码表示为<code>U+ 80a5</code></p>\n<h3 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h3><p>utf-8的的全拼是<code>Universal Character Set/Unicode Transformation Format</code>,翻译过来就是<code>Unicode格式化</code>，很明显是一个动词，表示把字符转换成8位的Unicode。</p>\n<p>举个例子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I’m 肥龙</span><br></pre></td></tr></table></figure>\n\n<p>使用unicode的表示为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I U+49</span><br><span class=\"line\"><span class=\"string\">&#x27; U+20</span></span><br><span class=\"line\"><span class=\"string\">m U+6D</span></span><br><span class=\"line\"><span class=\"string\">肥 U+80A5</span></span><br><span class=\"line\"><span class=\"string\">龙 U+9F99</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，在计算机里，统一都是2进制的存储的，所以转换成2进制表示为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I  00000000 01001001</span><br><span class=\"line\"><span class=\"string\">&#x27;  00000000 00100000</span></span><br><span class=\"line\"><span class=\"string\">m  00000000 01101101</span></span><br><span class=\"line\"><span class=\"string\">   00000000 00000000</span></span><br><span class=\"line\"><span class=\"string\">肥  10000000 10100101</span></span><br><span class=\"line\"><span class=\"string\">龙  10011111 10011001</span></span><br></pre></td></tr></table></figure>\n\n<p>UTF-8规定：</p>\n<p>1、单字节的字符，字节的第一位设为0，对于英文文本，utf-8只占用一个字符，所以第一位都是0</p>\n<p>2、n个字节，第一个字节的前n个设为1，第n+1设为0，后面的字节前两位都设为10，这n个字节的其余空位填充该字符unicode码，高位用0补足。</p>\n<p>所以，转换成UTF-8过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">肥</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\">10000000 10100101   二进制</span><br><span class=\"line\">1110 10 10         初始化模板</span><br><span class=\"line\">11101000 10000010 10100101 补全</span><br><span class=\"line\">e8 82 a5            16进制</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">龙</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\">10011111 10011001 二进制</span><br><span class=\"line\">1110 10 10          初始化模板</span><br><span class=\"line\">11101001 10111110 10011001 补全</span><br><span class=\"line\">e9 be 99            16进制</span><br></pre></td></tr></table></figure>\n\n<p>所以最后的转换成utf-8的编码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I  01001001</span><br><span class=\"line\"><span class=\"string\">&#x27;  00100000</span></span><br><span class=\"line\"><span class=\"string\">m  01101101</span></span><br><span class=\"line\"><span class=\"string\">   00000000</span></span><br><span class=\"line\"><span class=\"string\">肥  11101000 10000010 10100101</span></span><br><span class=\"line\"><span class=\"string\">龙  11101001 10111110 10011001</span></span><br></pre></td></tr></table></figure>\n\n<p>使用Python验证一下结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a=u&#x27;肥龙&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">u&#x27;\\u80a5\\u9f99&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; b=a.encode(&#x27;utf8&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; b</span><br><span class=\"line\">&#x27;\\xe8\\x82\\xa5\\xe9\\xbe\\x99&#x27;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，省略了一部分空间。汉子的编码多了一个字节，英文的编码少了一个字节，总共节省了2个字节的空间！</p>\n<p>本文连接： <a href=\"https://feilong.tech/2019/11/08/ascii_unicode_utf-8\">https://feilong.tech/2019/11/08/ascii_unicode_utf-8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于我来说，字符集的相关知识，一直都是噩梦。Unicode、utf-8、ASCII….搞得头都大了。我也特意梳理了下，字符集之间的关系。而且，之前在贝壳面试，面试官也问了我关于unicode编码的事情。</p>\n<h3 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h3><h4 id=\"由来\"><a href=\"#由来\" class=\"headerlink\" title=\"由来\"></a>由来</h4><p>ASCII的字符集算是出来最早的了，最初是来源于美国。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。除了我们常见的英文字母，还包含了各种英文的标点符号等等。在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个符号是不够的。</p>\n<h4 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h4><p>但是这样是有问题的。举个例子，法语的字母上方是有音标的，它就无法使用ASCII的编码表示。于是，一些欧洲的国家决定，利用字节中闲置的最高位编入新的符号，这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。由最开始的 0xxx xxxx (2^7&#x3D;128) 变成了 1xxx xxxx (2^8&#x3D;256)</p>\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><p>后来，大家都在考虑，如果有一种字符集，能够包含所有的字符，那就好了。</p>\n<p>于是，在 1991 年，国际标准化组织和统一码联盟组织各自开发了 ISO&#x2F;IEC 10646（USC）和 Unicode 项目。他们俩的野心和当时的秦始皇一样，一统江湖。后来，两个组织开始进行讨论，决定把彼此的工作内容合并，但是项目还是独立存在，各自发布自己的标准，但是要保持兼容。后来由于Unicode的好记，就被广为流传。其实，Unicode的含义可以解释为union code。</p>\n<p>在表示一个Unicode的字符时，通常会用U+ 后面跟着十六进制的数字来表示这一个字符。</p>\n<p>Unicode的编码，延续了ASCII的编码，0-127位，还是代表了ASCII的编码，从128以后，才是其他的编码。</p>\n<p>比如 在unicode的<code>U+ 0041</code>代表了大写的<code>A</code>, 在ascii编码16进制也是<code>\\x41</code></p>\n<p>再比如，<code>肥</code>的unicode编码表示为<code>U+ 80a5</code></p>\n<h3 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h3><p>utf-8的的全拼是<code>Universal Character Set/Unicode Transformation Format</code>,翻译过来就是<code>Unicode格式化</code>，很明显是一个动词，表示把字符转换成8位的Unicode。</p>\n<p>举个例子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I’m 肥龙</span><br></pre></td></tr></table></figure>\n\n<p>使用unicode的表示为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I U+49</span><br><span class=\"line\"><span class=\"string\">&#x27; U+20</span></span><br><span class=\"line\"><span class=\"string\">m U+6D</span></span><br><span class=\"line\"><span class=\"string\">肥 U+80A5</span></span><br><span class=\"line\"><span class=\"string\">龙 U+9F99</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，在计算机里，统一都是2进制的存储的，所以转换成2进制表示为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I  00000000 01001001</span><br><span class=\"line\"><span class=\"string\">&#x27;  00000000 00100000</span></span><br><span class=\"line\"><span class=\"string\">m  00000000 01101101</span></span><br><span class=\"line\"><span class=\"string\">   00000000 00000000</span></span><br><span class=\"line\"><span class=\"string\">肥  10000000 10100101</span></span><br><span class=\"line\"><span class=\"string\">龙  10011111 10011001</span></span><br></pre></td></tr></table></figure>\n\n<p>UTF-8规定：</p>\n<p>1、单字节的字符，字节的第一位设为0，对于英文文本，utf-8只占用一个字符，所以第一位都是0</p>\n<p>2、n个字节，第一个字节的前n个设为1，第n+1设为0，后面的字节前两位都设为10，这n个字节的其余空位填充该字符unicode码，高位用0补足。</p>\n<p>所以，转换成UTF-8过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">肥</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\">10000000 10100101   二进制</span><br><span class=\"line\">1110 10 10         初始化模板</span><br><span class=\"line\">11101000 10000010 10100101 补全</span><br><span class=\"line\">e8 82 a5            16进制</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">龙</span><br><span class=\"line\">---------------------------</span><br><span class=\"line\">10011111 10011001 二进制</span><br><span class=\"line\">1110 10 10          初始化模板</span><br><span class=\"line\">11101001 10111110 10011001 补全</span><br><span class=\"line\">e9 be 99            16进制</span><br></pre></td></tr></table></figure>\n\n<p>所以最后的转换成utf-8的编码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I  01001001</span><br><span class=\"line\"><span class=\"string\">&#x27;  00100000</span></span><br><span class=\"line\"><span class=\"string\">m  01101101</span></span><br><span class=\"line\"><span class=\"string\">   00000000</span></span><br><span class=\"line\"><span class=\"string\">肥  11101000 10000010 10100101</span></span><br><span class=\"line\"><span class=\"string\">龙  11101001 10111110 10011001</span></span><br></pre></td></tr></table></figure>\n\n<p>使用Python验证一下结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a=u&#x27;肥龙&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">u&#x27;\\u80a5\\u9f99&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; b=a.encode(&#x27;utf8&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; b</span><br><span class=\"line\">&#x27;\\xe8\\x82\\xa5\\xe9\\xbe\\x99&#x27;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，省略了一部分空间。汉子的编码多了一个字节，英文的编码少了一个字节，总共节省了2个字节的空间！</p>\n<p>本文连接： <a href=\"https://feilong.tech/2019/11/08/ascii_unicode_utf-8\">https://feilong.tech/2019/11/08/ascii_unicode_utf-8</a></p>\n"},{"title":"awk命令的简单介绍","id":"271","comments":0,"date":"2018-04-08T15:54:50.000Z","_content":"\n#### 背景\n\nawk算是Linux上面比较实用频繁的命令之一。第一次见到这个命令，是同事们分析一些日志实用，通过这个命令与其他命令结合，可以有效的分析nginx日志的一些访问情况。所以我也特意找了一些资料，查询了一下。\n\n#### 语法规则\n\nawk的命令的语法规则是 `awk '条件类型1{动作1} 条件类型2{动作2} ...' 文件名；` 。awk条件类型后面的{}是满足条件后处理的一些动作。这些动作可以形成一套连续的操作。awk的处理单元是每一行。也就是每行处理之后，再对下一行进行处理。所以，awk并不适合对大量数据处理。\n\n#### awk的处理原理\n\n```bash\nfeilongdeMBP:~ feilong$ awk '{print $0}' /etc/passwd\n##\n# User Database\n#\n# Note that this file is consulted directly only when the system is running\n# in single-user mode.  At other times this information is provided by\n# Open Directory.\n#\n# See the opendirectoryd(8) man page for additional information about\n# Open Directory.\n##\nnobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\n_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico\n_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false\n_networkd:*:24:24:Network Services:/var/networkd:/usr/bin/false\n_installassistant:*:25:25:Install Assistant:/var/empty:/usr/bin/false\n_lp:*:26:26:Printing Services:/var/spool/cups:/usr/bin/false\n.....\n```\n\n我们发现，这样输出的内容和执行`cat /etc/passwd`内容是一样的。\n\n```bash\nfeilongdeMBP:~ feilong$ awk '{print $1}' /etc/passwd\n##\n#\n#\n#\n#\n#\n#\n#\n#\n##\nnobody:*:-2:-2:Unprivileged\nroot:*:0:0:System\ndaemon:*:1:1:System\n_uucp:*:4:4:Unix\n_taskgated:*:13:13:Task\n_networkd:*:24:24:Network\n_installassistant:*:25:25:Install\n_lp:*:26:26:Printing\n_postfix:*:27:27:Postfix\n_scsd:*:31:31:Service\n_ces:*:32:32:Certificate\n_mcxalr:*:54:54:MCX\n_appleevents:*:55:55:AppleEvents\n_geod:*:56:56:Geo\n_serialnumberd:*:58:58:Serial\n_devdocs:*:59:59:Developer\n_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false\n_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false\n.....\n```\n\n随着print后面的变化，输出的内容也发生了变化\n\n所以，awk的原理是这样的\n\n![](/uploads/2018/04/WX20180408-225116.png)\n\n除了这个，awk还有一些标量的含义\n\n标量\n\n含义\n\nNR\n\n当前的行号\n\nNF\n\n每一行拥有的字段总数\n\nFS\n\n每行的字段分隔符（默认空格）\n\nRS\n\n每行的结束符（默认\\\\n）\n\n#### 实际操作\n\n##### 以分号进行分割\n\n```bash\nfeilongdeMBP:~ feilong$ awk 'FS=\":\" {print $1}' /etc/passwd ## 或 awk -F \":\" '{print $1}' /etc/passwd\n##\n# User Database\n#\n# Note that this file is consulted directly only when the system is running\n# in single-user mode.  At other times this information is provided by\n# Open Directory.\n#\n# See the opendirectoryd(8) man page for additional information about\n# Open Directory.\n##\nnobody\nroot\ndaemon\n_uucp\n_taskgated\n_networkd\n_installassistant\n_lp\n_postfix\n_scsd\n_ces\n_mcxalr\n....\n```\n\n##### 比如，只看 第20行到30行的内容\n\n```shell\nfeilongdeMBP:~ feilong$ awk '{if(NR>=20 && NR<=30) {print \"行号是: \" NR \" \" $0}}' /etc/passwd\n行号是: 20 _scsd:*:31:31:Service Configuration Service:/var/empty:/usr/bin/false\n行号是: 21 _ces:*:32:32:Certificate Enrollment Service:/var/empty:/usr/bin/false\n行号是: 22 _mcxalr:*:54:54:MCX AppLaunch:/var/empty:/usr/bin/false\n行号是: 23 _appleevents:*:55:55:AppleEvents Daemon:/var/empty:/usr/bin/false\n行号是: 24 _geod:*:56:56:Geo Services Daemon:/var/db/geod:/usr/bin/false\n行号是: 25 _serialnumberd:*:58:58:Serial Number Daemon:/var/empty:/usr/bin/false\n行号是: 26 _devdocs:*:59:59:Developer Documentation:/var/empty:/usr/bin/false\n行号是: 27 _sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false\n行号是: 28 _mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false\n行号是: 29 _ard:*:67:67:Apple Remote Desktop:/var/empty:/usr/bin/false\n行号是: 30 _www:*:70:70:World Wide Web Server:/Library/WebServer:/usr/bin/false\n```\n\n##### 已知 test.txt 内容是 \"I am Poe,my qq is 33794712\"。过滤相应字符串，是输出结果为 \"Poe 33794712\"\n\n```bash\nfeilongdeMBP:~ feilong$ awk -F \"[ ,]+\" '{print $3 \" \" $7}' test.txt\nPoe 33794712\n```\n\n#### BEGIN和END模块\n\nbegin和end主要是只在awk执行开始（还没对第一行进行操作）和结束（对最后一行处理结束）后的行为。所以，begin和end只会操作一次。所以begin和end更像是 编程语言中的默认构造函数和析构函数。\n\n##### 统计用户的数量\n\n```bash\nfeilongdeMBP:Downloads feilong$ awk 'BEGIN{count = 0} {if (NR > 10) { count ++} } { if (NR > 10 ) { print $1}} END{print \"总的用户数量是: \" count}' /etc/passwd ## 以为我的机器上面前10行不是用户的数据\nnobody:*:-2:-2:Unprivileged\nroot:*:0:0:System\ndaemon:*:1:1:System\n_uucp:*:4:4:Unix\n_taskgated:*:13:13:Task\n_networkd:*:24:24:Network\n_installassistant:*:25:25:Install\n_lp:*:26:26:Printing\n_postfix:*:27:27:Postfix\n_scsd:*:31:31:Service\n_ces:*:32:32:Certificate\n_mcxalr:*:54:54:MCX\n_appleevents:*:55:55:AppleEvents\n_geod:*:56:56:Geo\n_serialnumberd:*:58:58:Serial\n_devdocs:*:59:59:Developer\n_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false\n_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false\n_ard:*:67:67:Apple\n_www:*:70:70:World\n_eppc:*:71:71:Apple\n总的用户数量是: 93\n```\n\n##### 总计金额\n\n```shell\nfeilongdeMBP:~ feilong$ cat test.txt\nName    1st 2st 3st\nTyler   100 200 500\nStart   59  30  444\nJack    345 222 67\n\nfeilongdeMBP:~ feilong$  awk 'BEGIN{ totle = 0;} NR==1{print \"Name\\t1st\\t2st\\t3st\\tTotle\"} NR>=2{totle = $2 + $3 + $4; print $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $4 \"\\t\"  totle}' test.txt\nName    1st 2st 3st Totle\nTyler   100 200 500 800\nStart   59  30  444 533\nJack    345 222 67  634\n```\n\n##### 统计字节数量\n\n```bash\nfeilongdeMBP:~ feilong$ ll  grep JPG\n-rw-r--r--@   1 feilong  access_bpf    255800  3  1 16:49 IMG_0898.JPG\n-rw-r--r--@   1 feilong  access_bpf    258234  3  1 16:49 IMG_0899.JPG\n-rw-r--r--@   1 feilong  access_bpf    338363  3  4 10:32 IMG_0930.JPG\n\nfeilongdeMBP:~ feilong$ ll  grep JPG  awk 'BEGIN{size = 0;} {size += $5} END{print \"The .JPG file size:\" size/1024/1024 \"MB\"}'\nThe .JPG file size:0.812909MB\n```\n\n#### awk还有丰富的运算符\n\nawk支持大多数的运算符，这些运算符和编程语言基本类似\n\n![](/uploads/2018/04/1089507-20170126224150269-207487187.jpg)\n\n#### 正则表达式\n\n语法结构 `awk '/正则表达式/{动作}' 文件`\n\n##### 找出匹配包含root的行\n\n```shell\nfeilongdeMBP:~ feilong$ awk '/root/{print $0}' /etc/passwd\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\n_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false\n```\n\n#### 其他\n\nawk还有其他的功能，比如支持for循环，if语句，while循环等待\n\n##### for 循环\n\n```bash\nfeilongdeMBP:~ feilong$ awk '/root/{print $0; for(i=1; i< 4; i++) {print \"test\"}}' /etc/passwd\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ntest\ntest\ntest\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\ntest\ntest\ntest\n_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false\ntest\ntest\ntest\n```\n\n#### 参考资料\n\n*   [Linux三剑客之awk命令](https://www.cnblogs.com/ginvip/p/6352157.html)\n*   鸟哥的Linux私房菜基础学习篇","source":"_posts/awk.md","raw":"---\ntitle: awk命令的简单介绍\ntags:\n  - Linux\nid: '271'\ncategories:\n  - - Linux\ncomments: false\ndate: 2018-04-08 23:54:50\n---\n\n#### 背景\n\nawk算是Linux上面比较实用频繁的命令之一。第一次见到这个命令，是同事们分析一些日志实用，通过这个命令与其他命令结合，可以有效的分析nginx日志的一些访问情况。所以我也特意找了一些资料，查询了一下。\n\n#### 语法规则\n\nawk的命令的语法规则是 `awk '条件类型1{动作1} 条件类型2{动作2} ...' 文件名；` 。awk条件类型后面的{}是满足条件后处理的一些动作。这些动作可以形成一套连续的操作。awk的处理单元是每一行。也就是每行处理之后，再对下一行进行处理。所以，awk并不适合对大量数据处理。\n\n#### awk的处理原理\n\n```bash\nfeilongdeMBP:~ feilong$ awk '{print $0}' /etc/passwd\n##\n# User Database\n#\n# Note that this file is consulted directly only when the system is running\n# in single-user mode.  At other times this information is provided by\n# Open Directory.\n#\n# See the opendirectoryd(8) man page for additional information about\n# Open Directory.\n##\nnobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\n_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico\n_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false\n_networkd:*:24:24:Network Services:/var/networkd:/usr/bin/false\n_installassistant:*:25:25:Install Assistant:/var/empty:/usr/bin/false\n_lp:*:26:26:Printing Services:/var/spool/cups:/usr/bin/false\n.....\n```\n\n我们发现，这样输出的内容和执行`cat /etc/passwd`内容是一样的。\n\n```bash\nfeilongdeMBP:~ feilong$ awk '{print $1}' /etc/passwd\n##\n#\n#\n#\n#\n#\n#\n#\n#\n##\nnobody:*:-2:-2:Unprivileged\nroot:*:0:0:System\ndaemon:*:1:1:System\n_uucp:*:4:4:Unix\n_taskgated:*:13:13:Task\n_networkd:*:24:24:Network\n_installassistant:*:25:25:Install\n_lp:*:26:26:Printing\n_postfix:*:27:27:Postfix\n_scsd:*:31:31:Service\n_ces:*:32:32:Certificate\n_mcxalr:*:54:54:MCX\n_appleevents:*:55:55:AppleEvents\n_geod:*:56:56:Geo\n_serialnumberd:*:58:58:Serial\n_devdocs:*:59:59:Developer\n_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false\n_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false\n.....\n```\n\n随着print后面的变化，输出的内容也发生了变化\n\n所以，awk的原理是这样的\n\n![](/uploads/2018/04/WX20180408-225116.png)\n\n除了这个，awk还有一些标量的含义\n\n标量\n\n含义\n\nNR\n\n当前的行号\n\nNF\n\n每一行拥有的字段总数\n\nFS\n\n每行的字段分隔符（默认空格）\n\nRS\n\n每行的结束符（默认\\\\n）\n\n#### 实际操作\n\n##### 以分号进行分割\n\n```bash\nfeilongdeMBP:~ feilong$ awk 'FS=\":\" {print $1}' /etc/passwd ## 或 awk -F \":\" '{print $1}' /etc/passwd\n##\n# User Database\n#\n# Note that this file is consulted directly only when the system is running\n# in single-user mode.  At other times this information is provided by\n# Open Directory.\n#\n# See the opendirectoryd(8) man page for additional information about\n# Open Directory.\n##\nnobody\nroot\ndaemon\n_uucp\n_taskgated\n_networkd\n_installassistant\n_lp\n_postfix\n_scsd\n_ces\n_mcxalr\n....\n```\n\n##### 比如，只看 第20行到30行的内容\n\n```shell\nfeilongdeMBP:~ feilong$ awk '{if(NR>=20 && NR<=30) {print \"行号是: \" NR \" \" $0}}' /etc/passwd\n行号是: 20 _scsd:*:31:31:Service Configuration Service:/var/empty:/usr/bin/false\n行号是: 21 _ces:*:32:32:Certificate Enrollment Service:/var/empty:/usr/bin/false\n行号是: 22 _mcxalr:*:54:54:MCX AppLaunch:/var/empty:/usr/bin/false\n行号是: 23 _appleevents:*:55:55:AppleEvents Daemon:/var/empty:/usr/bin/false\n行号是: 24 _geod:*:56:56:Geo Services Daemon:/var/db/geod:/usr/bin/false\n行号是: 25 _serialnumberd:*:58:58:Serial Number Daemon:/var/empty:/usr/bin/false\n行号是: 26 _devdocs:*:59:59:Developer Documentation:/var/empty:/usr/bin/false\n行号是: 27 _sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false\n行号是: 28 _mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false\n行号是: 29 _ard:*:67:67:Apple Remote Desktop:/var/empty:/usr/bin/false\n行号是: 30 _www:*:70:70:World Wide Web Server:/Library/WebServer:/usr/bin/false\n```\n\n##### 已知 test.txt 内容是 \"I am Poe,my qq is 33794712\"。过滤相应字符串，是输出结果为 \"Poe 33794712\"\n\n```bash\nfeilongdeMBP:~ feilong$ awk -F \"[ ,]+\" '{print $3 \" \" $7}' test.txt\nPoe 33794712\n```\n\n#### BEGIN和END模块\n\nbegin和end主要是只在awk执行开始（还没对第一行进行操作）和结束（对最后一行处理结束）后的行为。所以，begin和end只会操作一次。所以begin和end更像是 编程语言中的默认构造函数和析构函数。\n\n##### 统计用户的数量\n\n```bash\nfeilongdeMBP:Downloads feilong$ awk 'BEGIN{count = 0} {if (NR > 10) { count ++} } { if (NR > 10 ) { print $1}} END{print \"总的用户数量是: \" count}' /etc/passwd ## 以为我的机器上面前10行不是用户的数据\nnobody:*:-2:-2:Unprivileged\nroot:*:0:0:System\ndaemon:*:1:1:System\n_uucp:*:4:4:Unix\n_taskgated:*:13:13:Task\n_networkd:*:24:24:Network\n_installassistant:*:25:25:Install\n_lp:*:26:26:Printing\n_postfix:*:27:27:Postfix\n_scsd:*:31:31:Service\n_ces:*:32:32:Certificate\n_mcxalr:*:54:54:MCX\n_appleevents:*:55:55:AppleEvents\n_geod:*:56:56:Geo\n_serialnumberd:*:58:58:Serial\n_devdocs:*:59:59:Developer\n_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false\n_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false\n_ard:*:67:67:Apple\n_www:*:70:70:World\n_eppc:*:71:71:Apple\n总的用户数量是: 93\n```\n\n##### 总计金额\n\n```shell\nfeilongdeMBP:~ feilong$ cat test.txt\nName    1st 2st 3st\nTyler   100 200 500\nStart   59  30  444\nJack    345 222 67\n\nfeilongdeMBP:~ feilong$  awk 'BEGIN{ totle = 0;} NR==1{print \"Name\\t1st\\t2st\\t3st\\tTotle\"} NR>=2{totle = $2 + $3 + $4; print $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $4 \"\\t\"  totle}' test.txt\nName    1st 2st 3st Totle\nTyler   100 200 500 800\nStart   59  30  444 533\nJack    345 222 67  634\n```\n\n##### 统计字节数量\n\n```bash\nfeilongdeMBP:~ feilong$ ll  grep JPG\n-rw-r--r--@   1 feilong  access_bpf    255800  3  1 16:49 IMG_0898.JPG\n-rw-r--r--@   1 feilong  access_bpf    258234  3  1 16:49 IMG_0899.JPG\n-rw-r--r--@   1 feilong  access_bpf    338363  3  4 10:32 IMG_0930.JPG\n\nfeilongdeMBP:~ feilong$ ll  grep JPG  awk 'BEGIN{size = 0;} {size += $5} END{print \"The .JPG file size:\" size/1024/1024 \"MB\"}'\nThe .JPG file size:0.812909MB\n```\n\n#### awk还有丰富的运算符\n\nawk支持大多数的运算符，这些运算符和编程语言基本类似\n\n![](/uploads/2018/04/1089507-20170126224150269-207487187.jpg)\n\n#### 正则表达式\n\n语法结构 `awk '/正则表达式/{动作}' 文件`\n\n##### 找出匹配包含root的行\n\n```shell\nfeilongdeMBP:~ feilong$ awk '/root/{print $0}' /etc/passwd\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\n_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false\n```\n\n#### 其他\n\nawk还有其他的功能，比如支持for循环，if语句，while循环等待\n\n##### for 循环\n\n```bash\nfeilongdeMBP:~ feilong$ awk '/root/{print $0; for(i=1; i< 4; i++) {print \"test\"}}' /etc/passwd\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ntest\ntest\ntest\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\ntest\ntest\ntest\n_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false\ntest\ntest\ntest\n```\n\n#### 参考资料\n\n*   [Linux三剑客之awk命令](https://www.cnblogs.com/ginvip/p/6352157.html)\n*   鸟哥的Linux私房菜基础学习篇","slug":"awk","published":1,"updated":"2022-03-13T01:17:12.409Z","_id":"cl0oi8mdu0006417tbf5w30ug","layout":"post","photos":[],"link":"","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>awk算是Linux上面比较实用频繁的命令之一。第一次见到这个命令，是同事们分析一些日志实用，通过这个命令与其他命令结合，可以有效的分析nginx日志的一些访问情况。所以我也特意找了一些资料，查询了一下。</p>\n<h4 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h4><p>awk的命令的语法规则是 <code>awk &#39;条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...&#39; 文件名；</code> 。awk条件类型后面的{}是满足条件后处理的一些动作。这些动作可以形成一套连续的操作。awk的处理单元是每一行。也就是每行处理之后，再对下一行进行处理。所以，awk并不适合对大量数据处理。</p>\n<h4 id=\"awk的处理原理\"><a href=\"#awk的处理原理\" class=\"headerlink\" title=\"awk的处理原理\"></a>awk的处理原理</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;&#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\"># User Database</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that this file is consulted directly only when the system is running</span></span><br><span class=\"line\"><span class=\"comment\"># in single-user mode.  At other times this information is provided by</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See the opendirectoryd(8) man page for additional information about</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\">nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false</span><br><span class=\"line\">root:*:0:0:System Administrator:/var/root:/bin/sh</span><br><span class=\"line\">daemon:*:1:1:System Services:/var/root:/usr/bin/false</span><br><span class=\"line\">_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico</span><br><span class=\"line\">_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false</span><br><span class=\"line\">_networkd:*:24:24:Network Services:/var/networkd:/usr/bin/false</span><br><span class=\"line\">_installassistant:*:25:25:Install Assistant:/var/empty:/usr/bin/false</span><br><span class=\"line\">_lp:*:26:26:Printing Services:/var/spool/cups:/usr/bin/false</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<p>我们发现，这样输出的内容和执行<code>cat /etc/passwd</code>内容是一样的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\">nobody:*:-2:-2:Unprivileged</span><br><span class=\"line\">root:*:0:0:System</span><br><span class=\"line\">daemon:*:1:1:System</span><br><span class=\"line\">_uucp:*:4:4:Unix</span><br><span class=\"line\">_taskgated:*:13:13:Task</span><br><span class=\"line\">_networkd:*:24:24:Network</span><br><span class=\"line\">_installassistant:*:25:25:Install</span><br><span class=\"line\">_lp:*:26:26:Printing</span><br><span class=\"line\">_postfix:*:27:27:Postfix</span><br><span class=\"line\">_scsd:*:31:31:Service</span><br><span class=\"line\">_ces:*:32:32:Certificate</span><br><span class=\"line\">_mcxalr:*:54:54:MCX</span><br><span class=\"line\">_appleevents:*:55:55:AppleEvents</span><br><span class=\"line\">_geod:*:56:56:Geo</span><br><span class=\"line\">_serialnumberd:*:58:58:Serial</span><br><span class=\"line\">_devdocs:*:59:59:Developer</span><br><span class=\"line\">_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false</span><br><span class=\"line\">_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<p>随着print后面的变化，输出的内容也发生了变化</p>\n<p>所以，awk的原理是这样的</p>\n<p><img src=\"/uploads/2018/04/WX20180408-225116.png\"></p>\n<p>除了这个，awk还有一些标量的含义</p>\n<p>标量</p>\n<p>含义</p>\n<p>NR</p>\n<p>当前的行号</p>\n<p>NF</p>\n<p>每一行拥有的字段总数</p>\n<p>FS</p>\n<p>每行的字段分隔符（默认空格）</p>\n<p>RS</p>\n<p>每行的结束符（默认\\n）</p>\n<h4 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a>实际操作</h4><h5 id=\"以分号进行分割\"><a href=\"#以分号进行分割\" class=\"headerlink\" title=\"以分号进行分割\"></a>以分号进行分割</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;FS=&quot;:&quot; &#123;print $1&#125;&#x27;</span> /etc/passwd <span class=\"comment\">## 或 awk -F &quot;:&quot; &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\"># User Database</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that this file is consulted directly only when the system is running</span></span><br><span class=\"line\"><span class=\"comment\"># in single-user mode.  At other times this information is provided by</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See the opendirectoryd(8) man page for additional information about</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\">nobody</span><br><span class=\"line\">root</span><br><span class=\"line\">daemon</span><br><span class=\"line\">_uucp</span><br><span class=\"line\">_taskgated</span><br><span class=\"line\">_networkd</span><br><span class=\"line\">_installassistant</span><br><span class=\"line\">_lp</span><br><span class=\"line\">_postfix</span><br><span class=\"line\">_scsd</span><br><span class=\"line\">_ces</span><br><span class=\"line\">_mcxalr</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"比如，只看-第20行到30行的内容\"><a href=\"#比如，只看-第20行到30行的内容\" class=\"headerlink\" title=\"比如，只看 第20行到30行的内容\"></a>比如，只看 第20行到30行的内容</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk &#x27;&#123;if(NR&gt;=20 &amp;&amp; NR&lt;=30) &#123;print &quot;行号是: &quot; NR &quot; &quot; $0&#125;&#125;&#x27; /etc/passwd</span><br><span class=\"line\">行号是: 20 _scsd:*:31:31:Service Configuration Service:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 21 _ces:*:32:32:Certificate Enrollment Service:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 22 _mcxalr:*:54:54:MCX AppLaunch:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 23 _appleevents:*:55:55:AppleEvents Daemon:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 24 _geod:*:56:56:Geo Services Daemon:/var/db/geod:/usr/bin/false</span><br><span class=\"line\">行号是: 25 _serialnumberd:*:58:58:Serial Number Daemon:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 26 _devdocs:*:59:59:Developer Documentation:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 27 _sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 28 _mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 29 _ard:*:67:67:Apple Remote Desktop:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 30 _www:*:70:70:World Wide Web Server:/Library/WebServer:/usr/bin/false</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"已知-test-txt-内容是-“I-am-Poe-my-qq-is-33794712”。过滤相应字符串，是输出结果为-“Poe-33794712”\"><a href=\"#已知-test-txt-内容是-“I-am-Poe-my-qq-is-33794712”。过滤相应字符串，是输出结果为-“Poe-33794712”\" class=\"headerlink\" title=\"已知 test.txt 内容是 “I am Poe,my qq is 33794712”。过滤相应字符串，是输出结果为 “Poe 33794712”\"></a>已知 test.txt 内容是 “I am Poe,my qq is 33794712”。过滤相应字符串，是输出结果为 “Poe 33794712”</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk -F <span class=\"string\">&quot;[ ,]+&quot;</span> <span class=\"string\">&#x27;&#123;print $3 &quot; &quot; $7&#125;&#x27;</span> test.txt</span><br><span class=\"line\">Poe 33794712</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BEGIN和END模块\"><a href=\"#BEGIN和END模块\" class=\"headerlink\" title=\"BEGIN和END模块\"></a>BEGIN和END模块</h4><p>begin和end主要是只在awk执行开始（还没对第一行进行操作）和结束（对最后一行处理结束）后的行为。所以，begin和end只会操作一次。所以begin和end更像是 编程语言中的默认构造函数和析构函数。</p>\n<h5 id=\"统计用户的数量\"><a href=\"#统计用户的数量\" class=\"headerlink\" title=\"统计用户的数量\"></a>统计用户的数量</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:Downloads feilong$ awk <span class=\"string\">&#x27;BEGIN&#123;count = 0&#125; &#123;if (NR &gt; 10) &#123; count ++&#125; &#125; &#123; if (NR &gt; 10 ) &#123; print $1&#125;&#125; END&#123;print &quot;总的用户数量是: &quot; count&#125;&#x27;</span> /etc/passwd <span class=\"comment\">## 以为我的机器上面前10行不是用户的数据</span></span><br><span class=\"line\">nobody:*:-2:-2:Unprivileged</span><br><span class=\"line\">root:*:0:0:System</span><br><span class=\"line\">daemon:*:1:1:System</span><br><span class=\"line\">_uucp:*:4:4:Unix</span><br><span class=\"line\">_taskgated:*:13:13:Task</span><br><span class=\"line\">_networkd:*:24:24:Network</span><br><span class=\"line\">_installassistant:*:25:25:Install</span><br><span class=\"line\">_lp:*:26:26:Printing</span><br><span class=\"line\">_postfix:*:27:27:Postfix</span><br><span class=\"line\">_scsd:*:31:31:Service</span><br><span class=\"line\">_ces:*:32:32:Certificate</span><br><span class=\"line\">_mcxalr:*:54:54:MCX</span><br><span class=\"line\">_appleevents:*:55:55:AppleEvents</span><br><span class=\"line\">_geod:*:56:56:Geo</span><br><span class=\"line\">_serialnumberd:*:58:58:Serial</span><br><span class=\"line\">_devdocs:*:59:59:Developer</span><br><span class=\"line\">_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false</span><br><span class=\"line\">_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false</span><br><span class=\"line\">_ard:*:67:67:Apple</span><br><span class=\"line\">_www:*:70:70:World</span><br><span class=\"line\">_eppc:*:71:71:Apple</span><br><span class=\"line\">总的用户数量是: 93</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"总计金额\"><a href=\"#总计金额\" class=\"headerlink\" title=\"总计金额\"></a>总计金额</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ cat test.txt</span><br><span class=\"line\">Name    1st 2st 3st</span><br><span class=\"line\">Tyler   100 200 500</span><br><span class=\"line\">Start   59  30  444</span><br><span class=\"line\">Jack    345 222 67</span><br><span class=\"line\"></span><br><span class=\"line\">feilongdeMBP:~ feilong$  awk &#x27;BEGIN&#123; totle = 0;&#125; NR==1&#123;print &quot;Name\\t1st\\t2st\\t3st\\tTotle&quot;&#125; NR&gt;=2&#123;totle = $2 + $3 + $4; print $1 &quot;\\t&quot; $2 &quot;\\t&quot; $3 &quot;\\t&quot; $4 &quot;\\t&quot;  totle&#125;&#x27; test.txt</span><br><span class=\"line\">Name    1st 2st 3st Totle</span><br><span class=\"line\">Tyler   100 200 500 800</span><br><span class=\"line\">Start   59  30  444 533</span><br><span class=\"line\">Jack    345 222 67  634</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"统计字节数量\"><a href=\"#统计字节数量\" class=\"headerlink\" title=\"统计字节数量\"></a>统计字节数量</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ ll  grep JPG</span><br><span class=\"line\">-rw-r--r--@   1 feilong  access_bpf    255800  3  1 16:49 IMG_0898.JPG</span><br><span class=\"line\">-rw-r--r--@   1 feilong  access_bpf    258234  3  1 16:49 IMG_0899.JPG</span><br><span class=\"line\">-rw-r--r--@   1 feilong  access_bpf    338363  3  4 10:32 IMG_0930.JPG</span><br><span class=\"line\"></span><br><span class=\"line\">feilongdeMBP:~ feilong$ ll  grep JPG  awk <span class=\"string\">&#x27;BEGIN&#123;size = 0;&#125; &#123;size += $5&#125; END&#123;print &quot;The .JPG file size:&quot; size/1024/1024 &quot;MB&quot;&#125;&#x27;</span></span><br><span class=\"line\">The .JPG file size:0.812909MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"awk还有丰富的运算符\"><a href=\"#awk还有丰富的运算符\" class=\"headerlink\" title=\"awk还有丰富的运算符\"></a>awk还有丰富的运算符</h4><p>awk支持大多数的运算符，这些运算符和编程语言基本类似</p>\n<p><img src=\"/uploads/2018/04/1089507-20170126224150269-207487187.jpg\"></p>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><p>语法结构 <code>awk &#39;/正则表达式/&#123;动作&#125;&#39; 文件</code></p>\n<h5 id=\"找出匹配包含root的行\"><a href=\"#找出匹配包含root的行\" class=\"headerlink\" title=\"找出匹配包含root的行\"></a>找出匹配包含root的行</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk &#x27;/root/&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">root:*:0:0:System Administrator:/var/root:/bin/sh</span><br><span class=\"line\">daemon:*:1:1:System Services:/var/root:/usr/bin/false</span><br><span class=\"line\">_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>awk还有其他的功能，比如支持for循环，if语句，while循环等待</p>\n<h5 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;/root/&#123;print $0; for(i=1; i&lt; 4; i++) &#123;print &quot;test&quot;&#125;&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\">root:*:0:0:System Administrator:/var/root:/bin/sh</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">daemon:*:1:1:System Services:/var/root:/usr/bin/false</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"https://www.cnblogs.com/ginvip/p/6352157.html\">Linux三剑客之awk命令</a></li>\n<li>鸟哥的Linux私房菜基础学习篇</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>awk算是Linux上面比较实用频繁的命令之一。第一次见到这个命令，是同事们分析一些日志实用，通过这个命令与其他命令结合，可以有效的分析nginx日志的一些访问情况。所以我也特意找了一些资料，查询了一下。</p>\n<h4 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h4><p>awk的命令的语法规则是 <code>awk &#39;条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...&#39; 文件名；</code> 。awk条件类型后面的{}是满足条件后处理的一些动作。这些动作可以形成一套连续的操作。awk的处理单元是每一行。也就是每行处理之后，再对下一行进行处理。所以，awk并不适合对大量数据处理。</p>\n<h4 id=\"awk的处理原理\"><a href=\"#awk的处理原理\" class=\"headerlink\" title=\"awk的处理原理\"></a>awk的处理原理</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;&#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\"># User Database</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that this file is consulted directly only when the system is running</span></span><br><span class=\"line\"><span class=\"comment\"># in single-user mode.  At other times this information is provided by</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See the opendirectoryd(8) man page for additional information about</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\">nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false</span><br><span class=\"line\">root:*:0:0:System Administrator:/var/root:/bin/sh</span><br><span class=\"line\">daemon:*:1:1:System Services:/var/root:/usr/bin/false</span><br><span class=\"line\">_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico</span><br><span class=\"line\">_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false</span><br><span class=\"line\">_networkd:*:24:24:Network Services:/var/networkd:/usr/bin/false</span><br><span class=\"line\">_installassistant:*:25:25:Install Assistant:/var/empty:/usr/bin/false</span><br><span class=\"line\">_lp:*:26:26:Printing Services:/var/spool/cups:/usr/bin/false</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<p>我们发现，这样输出的内容和执行<code>cat /etc/passwd</code>内容是一样的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\">nobody:*:-2:-2:Unprivileged</span><br><span class=\"line\">root:*:0:0:System</span><br><span class=\"line\">daemon:*:1:1:System</span><br><span class=\"line\">_uucp:*:4:4:Unix</span><br><span class=\"line\">_taskgated:*:13:13:Task</span><br><span class=\"line\">_networkd:*:24:24:Network</span><br><span class=\"line\">_installassistant:*:25:25:Install</span><br><span class=\"line\">_lp:*:26:26:Printing</span><br><span class=\"line\">_postfix:*:27:27:Postfix</span><br><span class=\"line\">_scsd:*:31:31:Service</span><br><span class=\"line\">_ces:*:32:32:Certificate</span><br><span class=\"line\">_mcxalr:*:54:54:MCX</span><br><span class=\"line\">_appleevents:*:55:55:AppleEvents</span><br><span class=\"line\">_geod:*:56:56:Geo</span><br><span class=\"line\">_serialnumberd:*:58:58:Serial</span><br><span class=\"line\">_devdocs:*:59:59:Developer</span><br><span class=\"line\">_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false</span><br><span class=\"line\">_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<p>随着print后面的变化，输出的内容也发生了变化</p>\n<p>所以，awk的原理是这样的</p>\n<p><img src=\"/uploads/2018/04/WX20180408-225116.png\"></p>\n<p>除了这个，awk还有一些标量的含义</p>\n<p>标量</p>\n<p>含义</p>\n<p>NR</p>\n<p>当前的行号</p>\n<p>NF</p>\n<p>每一行拥有的字段总数</p>\n<p>FS</p>\n<p>每行的字段分隔符（默认空格）</p>\n<p>RS</p>\n<p>每行的结束符（默认\\n）</p>\n<h4 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a>实际操作</h4><h5 id=\"以分号进行分割\"><a href=\"#以分号进行分割\" class=\"headerlink\" title=\"以分号进行分割\"></a>以分号进行分割</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;FS=&quot;:&quot; &#123;print $1&#125;&#x27;</span> /etc/passwd <span class=\"comment\">## 或 awk -F &quot;:&quot; &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\"># User Database</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that this file is consulted directly only when the system is running</span></span><br><span class=\"line\"><span class=\"comment\"># in single-user mode.  At other times this information is provided by</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See the opendirectoryd(8) man page for additional information about</span></span><br><span class=\"line\"><span class=\"comment\"># Open Directory.</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\">nobody</span><br><span class=\"line\">root</span><br><span class=\"line\">daemon</span><br><span class=\"line\">_uucp</span><br><span class=\"line\">_taskgated</span><br><span class=\"line\">_networkd</span><br><span class=\"line\">_installassistant</span><br><span class=\"line\">_lp</span><br><span class=\"line\">_postfix</span><br><span class=\"line\">_scsd</span><br><span class=\"line\">_ces</span><br><span class=\"line\">_mcxalr</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"比如，只看-第20行到30行的内容\"><a href=\"#比如，只看-第20行到30行的内容\" class=\"headerlink\" title=\"比如，只看 第20行到30行的内容\"></a>比如，只看 第20行到30行的内容</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk &#x27;&#123;if(NR&gt;=20 &amp;&amp; NR&lt;=30) &#123;print &quot;行号是: &quot; NR &quot; &quot; $0&#125;&#125;&#x27; /etc/passwd</span><br><span class=\"line\">行号是: 20 _scsd:*:31:31:Service Configuration Service:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 21 _ces:*:32:32:Certificate Enrollment Service:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 22 _mcxalr:*:54:54:MCX AppLaunch:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 23 _appleevents:*:55:55:AppleEvents Daemon:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 24 _geod:*:56:56:Geo Services Daemon:/var/db/geod:/usr/bin/false</span><br><span class=\"line\">行号是: 25 _serialnumberd:*:58:58:Serial Number Daemon:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 26 _devdocs:*:59:59:Developer Documentation:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 27 _sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 28 _mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 29 _ard:*:67:67:Apple Remote Desktop:/var/empty:/usr/bin/false</span><br><span class=\"line\">行号是: 30 _www:*:70:70:World Wide Web Server:/Library/WebServer:/usr/bin/false</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"已知-test-txt-内容是-“I-am-Poe-my-qq-is-33794712”。过滤相应字符串，是输出结果为-“Poe-33794712”\"><a href=\"#已知-test-txt-内容是-“I-am-Poe-my-qq-is-33794712”。过滤相应字符串，是输出结果为-“Poe-33794712”\" class=\"headerlink\" title=\"已知 test.txt 内容是 “I am Poe,my qq is 33794712”。过滤相应字符串，是输出结果为 “Poe 33794712”\"></a>已知 test.txt 内容是 “I am Poe,my qq is 33794712”。过滤相应字符串，是输出结果为 “Poe 33794712”</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk -F <span class=\"string\">&quot;[ ,]+&quot;</span> <span class=\"string\">&#x27;&#123;print $3 &quot; &quot; $7&#125;&#x27;</span> test.txt</span><br><span class=\"line\">Poe 33794712</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BEGIN和END模块\"><a href=\"#BEGIN和END模块\" class=\"headerlink\" title=\"BEGIN和END模块\"></a>BEGIN和END模块</h4><p>begin和end主要是只在awk执行开始（还没对第一行进行操作）和结束（对最后一行处理结束）后的行为。所以，begin和end只会操作一次。所以begin和end更像是 编程语言中的默认构造函数和析构函数。</p>\n<h5 id=\"统计用户的数量\"><a href=\"#统计用户的数量\" class=\"headerlink\" title=\"统计用户的数量\"></a>统计用户的数量</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:Downloads feilong$ awk <span class=\"string\">&#x27;BEGIN&#123;count = 0&#125; &#123;if (NR &gt; 10) &#123; count ++&#125; &#125; &#123; if (NR &gt; 10 ) &#123; print $1&#125;&#125; END&#123;print &quot;总的用户数量是: &quot; count&#125;&#x27;</span> /etc/passwd <span class=\"comment\">## 以为我的机器上面前10行不是用户的数据</span></span><br><span class=\"line\">nobody:*:-2:-2:Unprivileged</span><br><span class=\"line\">root:*:0:0:System</span><br><span class=\"line\">daemon:*:1:1:System</span><br><span class=\"line\">_uucp:*:4:4:Unix</span><br><span class=\"line\">_taskgated:*:13:13:Task</span><br><span class=\"line\">_networkd:*:24:24:Network</span><br><span class=\"line\">_installassistant:*:25:25:Install</span><br><span class=\"line\">_lp:*:26:26:Printing</span><br><span class=\"line\">_postfix:*:27:27:Postfix</span><br><span class=\"line\">_scsd:*:31:31:Service</span><br><span class=\"line\">_ces:*:32:32:Certificate</span><br><span class=\"line\">_mcxalr:*:54:54:MCX</span><br><span class=\"line\">_appleevents:*:55:55:AppleEvents</span><br><span class=\"line\">_geod:*:56:56:Geo</span><br><span class=\"line\">_serialnumberd:*:58:58:Serial</span><br><span class=\"line\">_devdocs:*:59:59:Developer</span><br><span class=\"line\">_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false</span><br><span class=\"line\">_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false</span><br><span class=\"line\">_ard:*:67:67:Apple</span><br><span class=\"line\">_www:*:70:70:World</span><br><span class=\"line\">_eppc:*:71:71:Apple</span><br><span class=\"line\">总的用户数量是: 93</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"总计金额\"><a href=\"#总计金额\" class=\"headerlink\" title=\"总计金额\"></a>总计金额</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ cat test.txt</span><br><span class=\"line\">Name    1st 2st 3st</span><br><span class=\"line\">Tyler   100 200 500</span><br><span class=\"line\">Start   59  30  444</span><br><span class=\"line\">Jack    345 222 67</span><br><span class=\"line\"></span><br><span class=\"line\">feilongdeMBP:~ feilong$  awk &#x27;BEGIN&#123; totle = 0;&#125; NR==1&#123;print &quot;Name\\t1st\\t2st\\t3st\\tTotle&quot;&#125; NR&gt;=2&#123;totle = $2 + $3 + $4; print $1 &quot;\\t&quot; $2 &quot;\\t&quot; $3 &quot;\\t&quot; $4 &quot;\\t&quot;  totle&#125;&#x27; test.txt</span><br><span class=\"line\">Name    1st 2st 3st Totle</span><br><span class=\"line\">Tyler   100 200 500 800</span><br><span class=\"line\">Start   59  30  444 533</span><br><span class=\"line\">Jack    345 222 67  634</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"统计字节数量\"><a href=\"#统计字节数量\" class=\"headerlink\" title=\"统计字节数量\"></a>统计字节数量</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ ll  grep JPG</span><br><span class=\"line\">-rw-r--r--@   1 feilong  access_bpf    255800  3  1 16:49 IMG_0898.JPG</span><br><span class=\"line\">-rw-r--r--@   1 feilong  access_bpf    258234  3  1 16:49 IMG_0899.JPG</span><br><span class=\"line\">-rw-r--r--@   1 feilong  access_bpf    338363  3  4 10:32 IMG_0930.JPG</span><br><span class=\"line\"></span><br><span class=\"line\">feilongdeMBP:~ feilong$ ll  grep JPG  awk <span class=\"string\">&#x27;BEGIN&#123;size = 0;&#125; &#123;size += $5&#125; END&#123;print &quot;The .JPG file size:&quot; size/1024/1024 &quot;MB&quot;&#125;&#x27;</span></span><br><span class=\"line\">The .JPG file size:0.812909MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"awk还有丰富的运算符\"><a href=\"#awk还有丰富的运算符\" class=\"headerlink\" title=\"awk还有丰富的运算符\"></a>awk还有丰富的运算符</h4><p>awk支持大多数的运算符，这些运算符和编程语言基本类似</p>\n<p><img src=\"/uploads/2018/04/1089507-20170126224150269-207487187.jpg\"></p>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><p>语法结构 <code>awk &#39;/正则表达式/&#123;动作&#125;&#39; 文件</code></p>\n<h5 id=\"找出匹配包含root的行\"><a href=\"#找出匹配包含root的行\" class=\"headerlink\" title=\"找出匹配包含root的行\"></a>找出匹配包含root的行</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk &#x27;/root/&#123;print $0&#125;&#x27; /etc/passwd</span><br><span class=\"line\">root:*:0:0:System Administrator:/var/root:/bin/sh</span><br><span class=\"line\">daemon:*:1:1:System Services:/var/root:/usr/bin/false</span><br><span class=\"line\">_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>awk还有其他的功能，比如支持for循环，if语句，while循环等待</p>\n<h5 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ awk <span class=\"string\">&#x27;/root/&#123;print $0; for(i=1; i&lt; 4; i++) &#123;print &quot;test&quot;&#125;&#125;&#x27;</span> /etc/passwd</span><br><span class=\"line\">root:*:0:0:System Administrator:/var/root:/bin/sh</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">daemon:*:1:1:System Services:/var/root:/usr/bin/false</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"https://www.cnblogs.com/ginvip/p/6352157.html\">Linux三剑客之awk命令</a></li>\n<li>鸟哥的Linux私房菜基础学习篇</li>\n</ul>\n"},{"title":"bash基础学习一","id":"60","date":"2017-08-24T11:41:06.000Z","_content":"\n### Bash 中处理特殊字符\n\n### 符号\n\n#### 注释\n\n行号以#开头是注释，bash脚本的第一行通常是`#!/bin/bash`，意思是这个文件是bash脚本 `#!` 用于当前脚本的解释器\n\n当然，在echo中转义的#是不能做转义的：\n<!-- more -->\n```bash\n$ vim test.sh\n```\n\n输入如下代码，并保存\n\n```bash\n#!/bin/bash\n\n echo \"The # here does not begin a comment.\"\n echo 'The # here does not begin a comment.'\n echo The \\# here does not begin a comment.\n echo The # 这里开始一个注释\n\n echo ${PATH#*:}         # 参数替换，不是一个注释\n echo $(( 2#101011 ))   # 数制转换（使用二进制表示），32+8+2+1\n```\n\n执行结果\n\n```bash\n$ bash test.sh\n```\n\n运行效果\n\n```bash\nThe # here does not begin a comment.\nThe # here does not begin a comment.\nThe # here does not begin a comment.\nThe\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n43\n```\n\n### 分号\n\n#### 命令分隔符\n\n使用分号可以分割在同一行的两个或两个以上的命令\n\n```bash\n$ vim test2.sh\n```\n\n输入如下代码，并保存\n\n```bash\n#!/bin/bash\n echo hello; echo there\n filename=ttt.sh\n if [ -r \"$filename\" ]; then    # 注意: \"if\"和\"then\"需要分隔\n     echo \"File $filename exists.\"; cp $filename $filename.bak\n else\n     echo \"File $filename not found.\"; touch $filename\n fi; echo \"File test complete.\"\n```\n\n运行脚本\n\n```bash\n$ bash test2.sh\n```\n\n运行结果\n\n```bash\nhello\nthere\nFile ttt.sh not found\nFilename test complete.\n```\n\n#### 终止case选项(双;分号)\n\n使用双分号用于终止case选项\n\n```bash\n$ vim test.bash\n```\n\n输入如下代码，并保存\n\n```bash\n#!/bin/bash\nvarname=b\ncase $varname in \n    [a-z]) echo \"abc\";;\n    [0-9]) echo \"123\";;\nesac    #case终止符号\n```\n\n执行脚本，查看输出\n\n```bash\n$ bash test.sh\nabc\n```\n\n解释说明，上面的代码，首先赋值给变量varname的值是b，然后使用case进行判断。 case的格式\n\n```bash\ncase $ in\n    条件1) command;;\n    条件2) command;;\n    .\n    .\n    .\n    *) command;; ##匹配所有\nesac\n```\n\n### 点号（.）\n\n等价于source命令 bash 中的 source 命令用于在当前 bash 环境下读取并执行 FileName.sh 中的命令。\n\n```bash\n$ source test.sh\nHello World\n$ . test.sh\nHello World\n```\n\n### 引号\n\n#### 双引号\n\n\"STRING\" 将会阻止（解释）STRING中大部分特殊的字符。\n\n#### 单引号\n\n'STRING' 将会阻止STRING中所有特殊字符的解释，这是一种比使用\"更强烈的形式。\n\n### 反引号\n\n反引号通常是用于命令，反引号中的命令会优先执行\n\n```bash\n$ cp `mkdir back` test.sh back\n```\n\n分析：反引号类似算法中的小括号，会优先执行，上面的运行结果\n\n```bash\n$ cp `mkdir back` test.sh back\n$ ll\ntotal 16K\ndrwxrwxr-x 3 shiyanlou shiyanlou 4.0K Apr 14 14:43 Code\ndrwxrwxr-x 2 shiyanlou shiyanlou 4.0K Nov 27  2015 Desktop\ndrwxrwxr-x 2 shiyanlou shiyanlou 4.0K Apr 14 15:07 back\n-rw-rw-r-- 1 shiyanlou shiyanlou   13 Apr 14 15:04 test.sh\n```\n\n为了验证一下，我们可以删除back文件夹内容，然后执行 **cp test.sh back `mkdir back`** 效果是一样的\n\n### 冒号\n\n#### 空命令\n\n等价于“NOP”（no op，一个什么也不干的命令）。也可以被认为与shell的内建命令true作用相同。“:”命令是一个bash的内建命令，它的退出码（exit status）是（0）。 如：\n\n```bash\n#!/bin/bash\n\nwhile :\ndo\n    echo \"endless loop\"\ndone\n```\n\n等价于\n\n```bash\n#!/bin/bash\n\nwhile true\ndo\n    echo \"endless loop\"\ndone\n```\n\n可以在 if/then 中作占位符：\n\n```bash\ncondition=5\n\nif [ $condition -gt 0 ]\nthen :   # 什么都不做，退出分支\nelse\n    echo \"$condition\"\nfi\n```\n\n#### 变量拓展/子串替换\n\n在与`>`重定向操作符联合使用的时候，会把文件内容清空，但是并不会修改文件的权限。如果文件不存在，那么创建这个文件，在这方面，类似`cat`命令\n\n```bash\n$ : > test.bash\n# 与 cat /dev/null > test.sh\n# /dev/null一直是一个空内容\n```\n\n在与`>>`重定向操作符结合使用时，将不会对预先存在的目标文件(: >> target\\_file)产生任何影响。如果这个文件之前并不存在，那么就创建它。 \":\"还用来在 /etc/passwd 和 $PATH 变量中做分隔符，如：\n\n```bash\n$ echo $PATH\n/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games\n```\n\n### 问号\n\n#### 操作符\n\n在一个双括号结构中，? 就是C语言的三元操作符，如：\n\n```bash\n#!/bin/bash\n a=10\n (( t=a<50?8:9 ))\n echo $t\n```","source":"_posts/bash-lean-1.md","raw":"---\ntitle: bash基础学习一\ntags: []\nid: '60'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:41:06\n---\n\n### Bash 中处理特殊字符\n\n### 符号\n\n#### 注释\n\n行号以#开头是注释，bash脚本的第一行通常是`#!/bin/bash`，意思是这个文件是bash脚本 `#!` 用于当前脚本的解释器\n\n当然，在echo中转义的#是不能做转义的：\n<!-- more -->\n```bash\n$ vim test.sh\n```\n\n输入如下代码，并保存\n\n```bash\n#!/bin/bash\n\n echo \"The # here does not begin a comment.\"\n echo 'The # here does not begin a comment.'\n echo The \\# here does not begin a comment.\n echo The # 这里开始一个注释\n\n echo ${PATH#*:}         # 参数替换，不是一个注释\n echo $(( 2#101011 ))   # 数制转换（使用二进制表示），32+8+2+1\n```\n\n执行结果\n\n```bash\n$ bash test.sh\n```\n\n运行效果\n\n```bash\nThe # here does not begin a comment.\nThe # here does not begin a comment.\nThe # here does not begin a comment.\nThe\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n43\n```\n\n### 分号\n\n#### 命令分隔符\n\n使用分号可以分割在同一行的两个或两个以上的命令\n\n```bash\n$ vim test2.sh\n```\n\n输入如下代码，并保存\n\n```bash\n#!/bin/bash\n echo hello; echo there\n filename=ttt.sh\n if [ -r \"$filename\" ]; then    # 注意: \"if\"和\"then\"需要分隔\n     echo \"File $filename exists.\"; cp $filename $filename.bak\n else\n     echo \"File $filename not found.\"; touch $filename\n fi; echo \"File test complete.\"\n```\n\n运行脚本\n\n```bash\n$ bash test2.sh\n```\n\n运行结果\n\n```bash\nhello\nthere\nFile ttt.sh not found\nFilename test complete.\n```\n\n#### 终止case选项(双;分号)\n\n使用双分号用于终止case选项\n\n```bash\n$ vim test.bash\n```\n\n输入如下代码，并保存\n\n```bash\n#!/bin/bash\nvarname=b\ncase $varname in \n    [a-z]) echo \"abc\";;\n    [0-9]) echo \"123\";;\nesac    #case终止符号\n```\n\n执行脚本，查看输出\n\n```bash\n$ bash test.sh\nabc\n```\n\n解释说明，上面的代码，首先赋值给变量varname的值是b，然后使用case进行判断。 case的格式\n\n```bash\ncase $ in\n    条件1) command;;\n    条件2) command;;\n    .\n    .\n    .\n    *) command;; ##匹配所有\nesac\n```\n\n### 点号（.）\n\n等价于source命令 bash 中的 source 命令用于在当前 bash 环境下读取并执行 FileName.sh 中的命令。\n\n```bash\n$ source test.sh\nHello World\n$ . test.sh\nHello World\n```\n\n### 引号\n\n#### 双引号\n\n\"STRING\" 将会阻止（解释）STRING中大部分特殊的字符。\n\n#### 单引号\n\n'STRING' 将会阻止STRING中所有特殊字符的解释，这是一种比使用\"更强烈的形式。\n\n### 反引号\n\n反引号通常是用于命令，反引号中的命令会优先执行\n\n```bash\n$ cp `mkdir back` test.sh back\n```\n\n分析：反引号类似算法中的小括号，会优先执行，上面的运行结果\n\n```bash\n$ cp `mkdir back` test.sh back\n$ ll\ntotal 16K\ndrwxrwxr-x 3 shiyanlou shiyanlou 4.0K Apr 14 14:43 Code\ndrwxrwxr-x 2 shiyanlou shiyanlou 4.0K Nov 27  2015 Desktop\ndrwxrwxr-x 2 shiyanlou shiyanlou 4.0K Apr 14 15:07 back\n-rw-rw-r-- 1 shiyanlou shiyanlou   13 Apr 14 15:04 test.sh\n```\n\n为了验证一下，我们可以删除back文件夹内容，然后执行 **cp test.sh back `mkdir back`** 效果是一样的\n\n### 冒号\n\n#### 空命令\n\n等价于“NOP”（no op，一个什么也不干的命令）。也可以被认为与shell的内建命令true作用相同。“:”命令是一个bash的内建命令，它的退出码（exit status）是（0）。 如：\n\n```bash\n#!/bin/bash\n\nwhile :\ndo\n    echo \"endless loop\"\ndone\n```\n\n等价于\n\n```bash\n#!/bin/bash\n\nwhile true\ndo\n    echo \"endless loop\"\ndone\n```\n\n可以在 if/then 中作占位符：\n\n```bash\ncondition=5\n\nif [ $condition -gt 0 ]\nthen :   # 什么都不做，退出分支\nelse\n    echo \"$condition\"\nfi\n```\n\n#### 变量拓展/子串替换\n\n在与`>`重定向操作符联合使用的时候，会把文件内容清空，但是并不会修改文件的权限。如果文件不存在，那么创建这个文件，在这方面，类似`cat`命令\n\n```bash\n$ : > test.bash\n# 与 cat /dev/null > test.sh\n# /dev/null一直是一个空内容\n```\n\n在与`>>`重定向操作符结合使用时，将不会对预先存在的目标文件(: >> target\\_file)产生任何影响。如果这个文件之前并不存在，那么就创建它。 \":\"还用来在 /etc/passwd 和 $PATH 变量中做分隔符，如：\n\n```bash\n$ echo $PATH\n/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games\n```\n\n### 问号\n\n#### 操作符\n\n在一个双括号结构中，? 就是C语言的三元操作符，如：\n\n```bash\n#!/bin/bash\n a=10\n (( t=a<50?8:9 ))\n echo $t\n```","slug":"bash-lean-1","published":1,"updated":"2022-03-12T23:52:58.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mdx0009417td4fjalmg","content":"<h3 id=\"Bash-中处理特殊字符\"><a href=\"#Bash-中处理特殊字符\" class=\"headerlink\" title=\"Bash 中处理特殊字符\"></a>Bash 中处理特殊字符</h3><h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h3><h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>行号以#开头是注释，bash脚本的第一行通常是<code>#!/bin/bash</code>，意思是这个文件是bash脚本 <code>#!</code> 用于当前脚本的解释器</p>\n<p>当然，在echo中转义的#是不能做转义的：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.sh</span><br></pre></td></tr></table></figure>\n\n<p>输入如下代码，并保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The # here does not begin a comment.&quot;</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;The # here does not begin a comment.&#x27;</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> The \\<span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> The <span class=\"comment\"># 这里开始一个注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;PATH#*:&#125;</span>         <span class=\"comment\"># 参数替换，不是一个注释</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> $(( <span class=\"number\">2#101011</span> ))   <span class=\"comment\"># 数制转换（使用二进制表示），32+8+2+1</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash test.sh</span><br></pre></td></tr></table></figure>\n\n<p>运行效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\">The <span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\">The <span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\">The</span><br><span class=\"line\">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games</span><br><span class=\"line\">43</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><h4 id=\"命令分隔符\"><a href=\"#命令分隔符\" class=\"headerlink\" title=\"命令分隔符\"></a>命令分隔符</h4><p>使用分号可以分割在同一行的两个或两个以上的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test2.sh</span><br></pre></td></tr></table></figure>\n\n<p>输入如下代码，并保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> hello; <span class=\"built_in\">echo</span> there</span><br><span class=\"line\"> filename=ttt.sh</span><br><span class=\"line\"> <span class=\"keyword\">if</span> [ -r <span class=\"string\">&quot;<span class=\"variable\">$filename</span>&quot;</span> ]; <span class=\"keyword\">then</span>    <span class=\"comment\"># 注意: &quot;if&quot;和&quot;then&quot;需要分隔</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">&quot;File <span class=\"variable\">$filename</span> exists.&quot;</span>; <span class=\"built_in\">cp</span> <span class=\"variable\">$filename</span> <span class=\"variable\">$filename</span>.bak</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">&quot;File <span class=\"variable\">$filename</span> not found.&quot;</span>; <span class=\"built_in\">touch</span> <span class=\"variable\">$filename</span></span><br><span class=\"line\"> <span class=\"keyword\">fi</span>; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;File test complete.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash test2.sh</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">there</span><br><span class=\"line\">File ttt.sh not found</span><br><span class=\"line\">Filename <span class=\"built_in\">test</span> complete.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"终止case选项-双-分号\"><a href=\"#终止case选项-双-分号\" class=\"headerlink\" title=\"终止case选项(双;分号)\"></a>终止case选项(双;分号)</h4><p>使用双分号用于终止case选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.bash</span><br></pre></td></tr></table></figure>\n\n<p>输入如下代码，并保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">varname=b</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$varname</span> <span class=\"keyword\">in</span> </span><br><span class=\"line\">    [a-z]) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;abc&quot;</span>;;</span><br><span class=\"line\">    [0-9]) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;123&quot;</span>;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span>    <span class=\"comment\">#case终止符号</span></span><br></pre></td></tr></table></figure>\n\n<p>执行脚本，查看输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash test.sh</span><br><span class=\"line\">abc</span><br></pre></td></tr></table></figure>\n\n<p>解释说明，上面的代码，首先赋值给变量varname的值是b，然后使用case进行判断。 case的格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> $ <span class=\"keyword\">in</span></span><br><span class=\"line\">    条件1) <span class=\"built_in\">command</span>;;</span><br><span class=\"line\">    条件2) <span class=\"built_in\">command</span>;;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    *) <span class=\"built_in\">command</span>;; <span class=\"comment\">##匹配所有</span></span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"点号（-）\"><a href=\"#点号（-）\" class=\"headerlink\" title=\"点号（.）\"></a>点号（.）</h3><p>等价于source命令 bash 中的 source 命令用于在当前 bash 环境下读取并执行 FileName.sh 中的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> test.sh</span><br><span class=\"line\">Hello World</span><br><span class=\"line\">$ . test.sh</span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><h4 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h4><p>“STRING” 将会阻止（解释）STRING中大部分特殊的字符。</p>\n<h4 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h4><p>‘STRING’ 将会阻止STRING中所有特殊字符的解释，这是一种比使用”更强烈的形式。</p>\n<h3 id=\"反引号\"><a href=\"#反引号\" class=\"headerlink\" title=\"反引号\"></a>反引号</h3><p>反引号通常是用于命令，反引号中的命令会优先执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span> `<span class=\"built_in\">mkdir</span> back` test.sh back</span><br></pre></td></tr></table></figure>\n\n<p>分析：反引号类似算法中的小括号，会优先执行，上面的运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span> `<span class=\"built_in\">mkdir</span> back` test.sh back</span><br><span class=\"line\">$ ll</span><br><span class=\"line\">total 16K</span><br><span class=\"line\">drwxrwxr-x 3 shiyanlou shiyanlou 4.0K Apr 14 14:43 Code</span><br><span class=\"line\">drwxrwxr-x 2 shiyanlou shiyanlou 4.0K Nov 27  2015 Desktop</span><br><span class=\"line\">drwxrwxr-x 2 shiyanlou shiyanlou 4.0K Apr 14 15:07 back</span><br><span class=\"line\">-rw-rw-r-- 1 shiyanlou shiyanlou   13 Apr 14 15:04 test.sh</span><br></pre></td></tr></table></figure>\n\n<p>为了验证一下，我们可以删除back文件夹内容，然后执行 <strong>cp test.sh back <code>mkdir back</code></strong> 效果是一样的</p>\n<h3 id=\"冒号\"><a href=\"#冒号\" class=\"headerlink\" title=\"冒号\"></a>冒号</h3><h4 id=\"空命令\"><a href=\"#空命令\" class=\"headerlink\" title=\"空命令\"></a>空命令</h4><p>等价于“NOP”（no op，一个什么也不干的命令）。也可以被认为与shell的内建命令true作用相同。“:”命令是一个bash的内建命令，它的退出码（exit status）是（0）。 如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;endless loop&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;endless loop&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>可以在 if&#x2F;then 中作占位符：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">condition=5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$condition</span> -gt 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span> :   <span class=\"comment\"># 什么都不做，退出分支</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$condition</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量拓展-x2F-子串替换\"><a href=\"#变量拓展-x2F-子串替换\" class=\"headerlink\" title=\"变量拓展&#x2F;子串替换\"></a>变量拓展&#x2F;子串替换</h4><p>在与<code>&gt;</code>重定向操作符联合使用的时候，会把文件内容清空，但是并不会修改文件的权限。如果文件不存在，那么创建这个文件，在这方面，类似<code>cat</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ : &gt; test.bash</span><br><span class=\"line\"><span class=\"comment\"># 与 cat /dev/null &gt; test.sh</span></span><br><span class=\"line\"><span class=\"comment\"># /dev/null一直是一个空内容</span></span><br></pre></td></tr></table></figure>\n\n<p>在与<code>&gt;&gt;</code>重定向操作符结合使用时，将不会对预先存在的目标文件(: &gt;&gt; target_file)产生任何影响。如果这个文件之前并不存在，那么就创建它。 “:”还用来在 &#x2F;etc&#x2F;passwd 和 $PATH 变量中做分隔符，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br><span class=\"line\">/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问号\"><a href=\"#问号\" class=\"headerlink\" title=\"问号\"></a>问号</h3><h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><p>在一个双括号结构中，? 就是C语言的三元操作符，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"> a=10</span><br><span class=\"line\"> (( t=a&lt;50?8:9 ))</span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$t</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"Bash-中处理特殊字符\"><a href=\"#Bash-中处理特殊字符\" class=\"headerlink\" title=\"Bash 中处理特殊字符\"></a>Bash 中处理特殊字符</h3><h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h3><h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>行号以#开头是注释，bash脚本的第一行通常是<code>#!/bin/bash</code>，意思是这个文件是bash脚本 <code>#!</code> 用于当前脚本的解释器</p>\n<p>当然，在echo中转义的#是不能做转义的：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.sh</span><br></pre></td></tr></table></figure>\n\n<p>输入如下代码，并保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The # here does not begin a comment.&quot;</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;The # here does not begin a comment.&#x27;</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> The \\<span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> The <span class=\"comment\"># 这里开始一个注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;PATH#*:&#125;</span>         <span class=\"comment\"># 参数替换，不是一个注释</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> $(( <span class=\"number\">2#101011</span> ))   <span class=\"comment\"># 数制转换（使用二进制表示），32+8+2+1</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash test.sh</span><br></pre></td></tr></table></figure>\n\n<p>运行效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\">The <span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\">The <span class=\"comment\"># here does not begin a comment.</span></span><br><span class=\"line\">The</span><br><span class=\"line\">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games</span><br><span class=\"line\">43</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><h4 id=\"命令分隔符\"><a href=\"#命令分隔符\" class=\"headerlink\" title=\"命令分隔符\"></a>命令分隔符</h4><p>使用分号可以分割在同一行的两个或两个以上的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test2.sh</span><br></pre></td></tr></table></figure>\n\n<p>输入如下代码，并保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> hello; <span class=\"built_in\">echo</span> there</span><br><span class=\"line\"> filename=ttt.sh</span><br><span class=\"line\"> <span class=\"keyword\">if</span> [ -r <span class=\"string\">&quot;<span class=\"variable\">$filename</span>&quot;</span> ]; <span class=\"keyword\">then</span>    <span class=\"comment\"># 注意: &quot;if&quot;和&quot;then&quot;需要分隔</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">&quot;File <span class=\"variable\">$filename</span> exists.&quot;</span>; <span class=\"built_in\">cp</span> <span class=\"variable\">$filename</span> <span class=\"variable\">$filename</span>.bak</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">&quot;File <span class=\"variable\">$filename</span> not found.&quot;</span>; <span class=\"built_in\">touch</span> <span class=\"variable\">$filename</span></span><br><span class=\"line\"> <span class=\"keyword\">fi</span>; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;File test complete.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash test2.sh</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">there</span><br><span class=\"line\">File ttt.sh not found</span><br><span class=\"line\">Filename <span class=\"built_in\">test</span> complete.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"终止case选项-双-分号\"><a href=\"#终止case选项-双-分号\" class=\"headerlink\" title=\"终止case选项(双;分号)\"></a>终止case选项(双;分号)</h4><p>使用双分号用于终止case选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.bash</span><br></pre></td></tr></table></figure>\n\n<p>输入如下代码，并保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">varname=b</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$varname</span> <span class=\"keyword\">in</span> </span><br><span class=\"line\">    [a-z]) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;abc&quot;</span>;;</span><br><span class=\"line\">    [0-9]) <span class=\"built_in\">echo</span> <span class=\"string\">&quot;123&quot;</span>;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span>    <span class=\"comment\">#case终止符号</span></span><br></pre></td></tr></table></figure>\n\n<p>执行脚本，查看输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash test.sh</span><br><span class=\"line\">abc</span><br></pre></td></tr></table></figure>\n\n<p>解释说明，上面的代码，首先赋值给变量varname的值是b，然后使用case进行判断。 case的格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> $ <span class=\"keyword\">in</span></span><br><span class=\"line\">    条件1) <span class=\"built_in\">command</span>;;</span><br><span class=\"line\">    条件2) <span class=\"built_in\">command</span>;;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    *) <span class=\"built_in\">command</span>;; <span class=\"comment\">##匹配所有</span></span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"点号（-）\"><a href=\"#点号（-）\" class=\"headerlink\" title=\"点号（.）\"></a>点号（.）</h3><p>等价于source命令 bash 中的 source 命令用于在当前 bash 环境下读取并执行 FileName.sh 中的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> test.sh</span><br><span class=\"line\">Hello World</span><br><span class=\"line\">$ . test.sh</span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><h4 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h4><p>“STRING” 将会阻止（解释）STRING中大部分特殊的字符。</p>\n<h4 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h4><p>‘STRING’ 将会阻止STRING中所有特殊字符的解释，这是一种比使用”更强烈的形式。</p>\n<h3 id=\"反引号\"><a href=\"#反引号\" class=\"headerlink\" title=\"反引号\"></a>反引号</h3><p>反引号通常是用于命令，反引号中的命令会优先执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span> `<span class=\"built_in\">mkdir</span> back` test.sh back</span><br></pre></td></tr></table></figure>\n\n<p>分析：反引号类似算法中的小括号，会优先执行，上面的运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span> `<span class=\"built_in\">mkdir</span> back` test.sh back</span><br><span class=\"line\">$ ll</span><br><span class=\"line\">total 16K</span><br><span class=\"line\">drwxrwxr-x 3 shiyanlou shiyanlou 4.0K Apr 14 14:43 Code</span><br><span class=\"line\">drwxrwxr-x 2 shiyanlou shiyanlou 4.0K Nov 27  2015 Desktop</span><br><span class=\"line\">drwxrwxr-x 2 shiyanlou shiyanlou 4.0K Apr 14 15:07 back</span><br><span class=\"line\">-rw-rw-r-- 1 shiyanlou shiyanlou   13 Apr 14 15:04 test.sh</span><br></pre></td></tr></table></figure>\n\n<p>为了验证一下，我们可以删除back文件夹内容，然后执行 <strong>cp test.sh back <code>mkdir back</code></strong> 效果是一样的</p>\n<h3 id=\"冒号\"><a href=\"#冒号\" class=\"headerlink\" title=\"冒号\"></a>冒号</h3><h4 id=\"空命令\"><a href=\"#空命令\" class=\"headerlink\" title=\"空命令\"></a>空命令</h4><p>等价于“NOP”（no op，一个什么也不干的命令）。也可以被认为与shell的内建命令true作用相同。“:”命令是一个bash的内建命令，它的退出码（exit status）是（0）。 如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;endless loop&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;endless loop&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>可以在 if&#x2F;then 中作占位符：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">condition=5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$condition</span> -gt 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span> :   <span class=\"comment\"># 什么都不做，退出分支</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$condition</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量拓展-x2F-子串替换\"><a href=\"#变量拓展-x2F-子串替换\" class=\"headerlink\" title=\"变量拓展&#x2F;子串替换\"></a>变量拓展&#x2F;子串替换</h4><p>在与<code>&gt;</code>重定向操作符联合使用的时候，会把文件内容清空，但是并不会修改文件的权限。如果文件不存在，那么创建这个文件，在这方面，类似<code>cat</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ : &gt; test.bash</span><br><span class=\"line\"><span class=\"comment\"># 与 cat /dev/null &gt; test.sh</span></span><br><span class=\"line\"><span class=\"comment\"># /dev/null一直是一个空内容</span></span><br></pre></td></tr></table></figure>\n\n<p>在与<code>&gt;&gt;</code>重定向操作符结合使用时，将不会对预先存在的目标文件(: &gt;&gt; target_file)产生任何影响。如果这个文件之前并不存在，那么就创建它。 “:”还用来在 &#x2F;etc&#x2F;passwd 和 $PATH 变量中做分隔符，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br><span class=\"line\">/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问号\"><a href=\"#问号\" class=\"headerlink\" title=\"问号\"></a>问号</h3><h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><p>在一个双括号结构中，? 就是C语言的三元操作符，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"> a=10</span><br><span class=\"line\"> (( t=a&lt;50?8:9 ))</span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$t</span></span><br></pre></td></tr></table></figure>"},{"title":"brew update的时候提示：fatal: It seems that there is already a rebase-apply directory, and....","id":"757","date":"2021-05-16T08:39:28.000Z","_content":"\n今天在更新brew update的时候，提示了报错信息：\n\n```bash\n$ brew update\nfatal: It seems that there is already a rebase-apply directory, and\nI wonder if you are in the middle of another rebase.  If that is the\ncase, please try\n    git rebase (--continue  --abort  --skip)\nIf that is not the case, please\n    rm -fr \".git/rebase-apply\"\nand run me again.  I am stopping in case you still have something\nvaluable there.\n\nAlready up-to-date.\n```\n\n解决这个的办法就是，重新将brew的update reset下，就OK了。\n\n```bash\n$ brew update-reset\n```\n\n本文链接： [https://feilong.tech/2021/05/16/brew-update-error1](https://feilong.tech/2021/05/16/brew-update-error1)","source":"_posts/brew-update-error1.md","raw":"---\ntitle: >-\n  brew update的时候提示：fatal: It seems that there is already a rebase-apply\n  directory, and....\ntags: []\nid: '757'\ncategories:\n  - - Git\ndate: 2021-05-16 16:39:28\n---\n\n今天在更新brew update的时候，提示了报错信息：\n\n```bash\n$ brew update\nfatal: It seems that there is already a rebase-apply directory, and\nI wonder if you are in the middle of another rebase.  If that is the\ncase, please try\n    git rebase (--continue  --abort  --skip)\nIf that is not the case, please\n    rm -fr \".git/rebase-apply\"\nand run me again.  I am stopping in case you still have something\nvaluable there.\n\nAlready up-to-date.\n```\n\n解决这个的办法就是，重新将brew的update reset下，就OK了。\n\n```bash\n$ brew update-reset\n```\n\n本文链接： [https://feilong.tech/2021/05/16/brew-update-error1](https://feilong.tech/2021/05/16/brew-update-error1)","slug":"brew-update-error1","published":1,"updated":"2022-03-12T23:52:58.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mdy000a417t3zvmd030","content":"<p>今天在更新brew update的时候，提示了报错信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew update</span><br><span class=\"line\">fatal: It seems that there is already a rebase-apply directory, and</span><br><span class=\"line\">I wonder <span class=\"keyword\">if</span> you are <span class=\"keyword\">in</span> the middle of another rebase.  If that is the</span><br><span class=\"line\"><span class=\"keyword\">case</span>, please try</span><br><span class=\"line\">    git rebase (--<span class=\"built_in\">continue</span>  --abort  --skip)</span><br><span class=\"line\">If that is not the <span class=\"keyword\">case</span>, please</span><br><span class=\"line\">    <span class=\"built_in\">rm</span> -fr <span class=\"string\">&quot;.git/rebase-apply&quot;</span></span><br><span class=\"line\">and run me again.  I am stopping <span class=\"keyword\">in</span> <span class=\"keyword\">case</span> you still have something</span><br><span class=\"line\">valuable there.</span><br><span class=\"line\"></span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n\n<p>解决这个的办法就是，重新将brew的update reset下，就OK了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew update-reset</span><br></pre></td></tr></table></figure>\n\n<p>本文链接： <a href=\"https://feilong.tech/2021/05/16/brew-update-error1\">https://feilong.tech/2021/05/16/brew-update-error1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在更新brew update的时候，提示了报错信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew update</span><br><span class=\"line\">fatal: It seems that there is already a rebase-apply directory, and</span><br><span class=\"line\">I wonder <span class=\"keyword\">if</span> you are <span class=\"keyword\">in</span> the middle of another rebase.  If that is the</span><br><span class=\"line\"><span class=\"keyword\">case</span>, please try</span><br><span class=\"line\">    git rebase (--<span class=\"built_in\">continue</span>  --abort  --skip)</span><br><span class=\"line\">If that is not the <span class=\"keyword\">case</span>, please</span><br><span class=\"line\">    <span class=\"built_in\">rm</span> -fr <span class=\"string\">&quot;.git/rebase-apply&quot;</span></span><br><span class=\"line\">and run me again.  I am stopping <span class=\"keyword\">in</span> <span class=\"keyword\">case</span> you still have something</span><br><span class=\"line\">valuable there.</span><br><span class=\"line\"></span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n\n<p>解决这个的办法就是，重新将brew的update reset下，就OK了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew update-reset</span><br></pre></td></tr></table></figure>\n\n<p>本文链接： <a href=\"https://feilong.tech/2021/05/16/brew-update-error1\">https://feilong.tech/2021/05/16/brew-update-error1</a></p>\n"},{"title":"程序员应该如何减肥","id":"647","date":"2019-10-08T14:11:08.000Z","_content":"\n从开始减肥到现在，已经是2-3个年头了，在大学的时候，基本上每天除了睡就是吃，再加上自己时不时晚上出去通宵，所以体重从大一的160斤，毕业后接近200斤。毕业之后，由于没有注意体重的问题，没过多久就超过了200斤。\n\n![](/uploads/2019/10/IMG_0825-225x300.jpg)\n\n![](/uploads/2019/10/IMG_1103.png)\n\n这两张是大一入学和大学刚毕业的对比照片。不得不说，大学真的算是“养猪场”了。\n\n### 减肥的原因\n\n我最开始是在海淀工作，后来公司搬到了昌平。上班的时候会路过一个天桥，但是有一次我发现，上天桥的时候，自己呼哧呼哧的喘着粗气，我才意识到：我应该开始减肥了，再这样下去我就不行了。\n\n### 减肥的过程\n\n当时刚毕业到北京，手里没什么钱，四个同学挤在了一个10平米的公寓，月租1300块，平均每人每个月300多。每天吃饭都成问题，更没有闲钱办健身卡，所以就买了一个瑜伽垫，在公寓里面使用keep上“减脂课”。\n\n![](/uploads/2019/10/WechatIMG5-139x300.jpeg)\n\n当时练得最多的就是“hiit”的减脂课了。\n\n在北京工作一段时间之后，生活稍微宽裕了一些，自己就在咸鱼买了人生中的第一张健身卡，花了800块钱，开始了自己的健身房锻炼的生涯。\n\n### 减肥的结果\n\n第一次到了健身房，和大家一样，基本上就是跑步，不会使用器械。不过好在keep上面有一些训练的动作，里面会交一些器械使用的注意事项。慢慢的，也开始熟能生巧。也越来越有感觉。\n\n从减肥，到现在已经2年多了，现在体重基本上维持在160斤左右，虽然没有腹肌，但是也基本算是“穿衣显瘦，脱衣有肉”。\n\n### 减肥的误区\n\n减肥的道理其实大家都懂“管住嘴，迈开腿”，也就是说，消耗 > 摄入。但是很多人依然会减肥失败，原因是什么？\n\n#### 大家都太着急了\n\n其实我们长胖，并不是几天就一下子变胖的，我们在开始减肥的时候，发现前期没有什么明显的变化，内心就开始动摇了，在加上我们身处一个快节奏的生活，身边再有几个“看热闹不嫌事大”的损友，所以很容易就放弃减肥了。\n\n#### 不吃主食\n\n糖分在为我们大脑的供能有很重要的作用，当你不吃主食，大脑的糖分不足，就容易出现头晕、易怒。下午就很容易出现犯困。\n\n晚上不吃主食，到了半夜睡眠的时候，身体的缺少能量，会开始分解肝糖原进行供能，肝糖原不足之后，就会分解肌糖原，进而也会影响肌肉的合成。所以晚上，我们应该适当少吃点主食。或者使用土豆作为代餐主食。因为在我们身体中，胰岛素是维持血糖平衡的重要物质，如果血糖一旦升高，那么胰岛素就会把多余的血糖合成脂肪，这要是为什么奶茶等饮料容易长胖的重要原因！\n\n#### 肌肉重不重要\n\n很多人会说，“我不想长肌肉，我只想瘦一点”。\n\n我们的身体，在活动的时候，是由肌肉带动骨骼，身体的能量消耗，在于肌肉和骨骼的牵引，所以一般来说，肌肉量相对比较大的，消耗的能量也相对较大。这也就是我们常说的基础代谢。所以肌肉在减值过程中具有很重要的作用。\n\n其实肌肉的生长，是一个复杂的过程。\n\n肌肉的基本单位是肌肉纤维。肌肉想要得到生长，需要先把肌肉纤维产生破损，然后再通过氨基酸，将肌肉纤维进行修复，所以没有足够的蛋白质和氨基酸，肌肉增长会是一个比较慢的过程。除此以外，还需要足够的休息，所以 蛋白质+训练+休息 三者结合肌肉才会得到足够的生长。\n\n### 程序员怎么减肥？\n\n#### 调整饮食\n\n![](/uploads/2019/10/d15ea020bfcc444181bfd16a88f53909-300x184.jpeg)\n\n首先，我们应该调整一下自己的饮食结构。上面说了，胰岛素是维持血糖的重要物质所以我们应该在日常生活中，调整饮食结构，将主食的比例降低一点，将蛋白质的比例稍微调高一点。这样可以让我们的血糖变化小一点，减少过多的糖分合成脂肪的可能性。\n\n#### 增加无氧训练\n\n![](/uploads/2019/10/8f3d71c9c5b54eaab2527b13b3531100-300x193.jpeg)\n\n肌肉是维持基础代谢的一个重要的因素。除了我们增加蛋白质的摄入比例以外，我们也应该做一些无氧训练。比如健身房做一些器械的训练，但是我们减肥的目的是为了健康，不是为了举重。\n\n在健身房，我不建议请私教。 因为现在很多商业健身房都是盈利为目的，买课之前和买课之后态度差很多，私教素质也是参差不齐。所以如果请私教，还是需要擦亮眼睛。可以和健身房练得不错的请教一下，其实健身爱好者都是非常谦逊的。\n\n* * *\n\n以上就是我对程序员减肥的相关感触和理解，我自己个人也是这么走过来的。减肥就想红军长征一样，并不是一蹴而就，而是需要时间的一点点积累，一点点看到变化。加油！\n\n本文连接： [http://feilong.tech/2019/10/08/code-to-lose-weight](http://feilong.tech/2019/10/08/code-to-lose-weight)","source":"_posts/code-to-lose-weight.md","raw":"---\ntitle: 程序员应该如何减肥\ntags:\n  - 健康\n  - 健身\n  - 减肥\nid: '647'\ncategories:\n  - - Life\ndate: 2019-10-08 22:11:08\n---\n\n从开始减肥到现在，已经是2-3个年头了，在大学的时候，基本上每天除了睡就是吃，再加上自己时不时晚上出去通宵，所以体重从大一的160斤，毕业后接近200斤。毕业之后，由于没有注意体重的问题，没过多久就超过了200斤。\n\n![](/uploads/2019/10/IMG_0825-225x300.jpg)\n\n![](/uploads/2019/10/IMG_1103.png)\n\n这两张是大一入学和大学刚毕业的对比照片。不得不说，大学真的算是“养猪场”了。\n\n### 减肥的原因\n\n我最开始是在海淀工作，后来公司搬到了昌平。上班的时候会路过一个天桥，但是有一次我发现，上天桥的时候，自己呼哧呼哧的喘着粗气，我才意识到：我应该开始减肥了，再这样下去我就不行了。\n\n### 减肥的过程\n\n当时刚毕业到北京，手里没什么钱，四个同学挤在了一个10平米的公寓，月租1300块，平均每人每个月300多。每天吃饭都成问题，更没有闲钱办健身卡，所以就买了一个瑜伽垫，在公寓里面使用keep上“减脂课”。\n\n![](/uploads/2019/10/WechatIMG5-139x300.jpeg)\n\n当时练得最多的就是“hiit”的减脂课了。\n\n在北京工作一段时间之后，生活稍微宽裕了一些，自己就在咸鱼买了人生中的第一张健身卡，花了800块钱，开始了自己的健身房锻炼的生涯。\n\n### 减肥的结果\n\n第一次到了健身房，和大家一样，基本上就是跑步，不会使用器械。不过好在keep上面有一些训练的动作，里面会交一些器械使用的注意事项。慢慢的，也开始熟能生巧。也越来越有感觉。\n\n从减肥，到现在已经2年多了，现在体重基本上维持在160斤左右，虽然没有腹肌，但是也基本算是“穿衣显瘦，脱衣有肉”。\n\n### 减肥的误区\n\n减肥的道理其实大家都懂“管住嘴，迈开腿”，也就是说，消耗 > 摄入。但是很多人依然会减肥失败，原因是什么？\n\n#### 大家都太着急了\n\n其实我们长胖，并不是几天就一下子变胖的，我们在开始减肥的时候，发现前期没有什么明显的变化，内心就开始动摇了，在加上我们身处一个快节奏的生活，身边再有几个“看热闹不嫌事大”的损友，所以很容易就放弃减肥了。\n\n#### 不吃主食\n\n糖分在为我们大脑的供能有很重要的作用，当你不吃主食，大脑的糖分不足，就容易出现头晕、易怒。下午就很容易出现犯困。\n\n晚上不吃主食，到了半夜睡眠的时候，身体的缺少能量，会开始分解肝糖原进行供能，肝糖原不足之后，就会分解肌糖原，进而也会影响肌肉的合成。所以晚上，我们应该适当少吃点主食。或者使用土豆作为代餐主食。因为在我们身体中，胰岛素是维持血糖平衡的重要物质，如果血糖一旦升高，那么胰岛素就会把多余的血糖合成脂肪，这要是为什么奶茶等饮料容易长胖的重要原因！\n\n#### 肌肉重不重要\n\n很多人会说，“我不想长肌肉，我只想瘦一点”。\n\n我们的身体，在活动的时候，是由肌肉带动骨骼，身体的能量消耗，在于肌肉和骨骼的牵引，所以一般来说，肌肉量相对比较大的，消耗的能量也相对较大。这也就是我们常说的基础代谢。所以肌肉在减值过程中具有很重要的作用。\n\n其实肌肉的生长，是一个复杂的过程。\n\n肌肉的基本单位是肌肉纤维。肌肉想要得到生长，需要先把肌肉纤维产生破损，然后再通过氨基酸，将肌肉纤维进行修复，所以没有足够的蛋白质和氨基酸，肌肉增长会是一个比较慢的过程。除此以外，还需要足够的休息，所以 蛋白质+训练+休息 三者结合肌肉才会得到足够的生长。\n\n### 程序员怎么减肥？\n\n#### 调整饮食\n\n![](/uploads/2019/10/d15ea020bfcc444181bfd16a88f53909-300x184.jpeg)\n\n首先，我们应该调整一下自己的饮食结构。上面说了，胰岛素是维持血糖的重要物质所以我们应该在日常生活中，调整饮食结构，将主食的比例降低一点，将蛋白质的比例稍微调高一点。这样可以让我们的血糖变化小一点，减少过多的糖分合成脂肪的可能性。\n\n#### 增加无氧训练\n\n![](/uploads/2019/10/8f3d71c9c5b54eaab2527b13b3531100-300x193.jpeg)\n\n肌肉是维持基础代谢的一个重要的因素。除了我们增加蛋白质的摄入比例以外，我们也应该做一些无氧训练。比如健身房做一些器械的训练，但是我们减肥的目的是为了健康，不是为了举重。\n\n在健身房，我不建议请私教。 因为现在很多商业健身房都是盈利为目的，买课之前和买课之后态度差很多，私教素质也是参差不齐。所以如果请私教，还是需要擦亮眼睛。可以和健身房练得不错的请教一下，其实健身爱好者都是非常谦逊的。\n\n* * *\n\n以上就是我对程序员减肥的相关感触和理解，我自己个人也是这么走过来的。减肥就想红军长征一样，并不是一蹴而就，而是需要时间的一点点积累，一点点看到变化。加油！\n\n本文连接： [http://feilong.tech/2019/10/08/code-to-lose-weight](http://feilong.tech/2019/10/08/code-to-lose-weight)","slug":"code-to-lose-weight","published":1,"updated":"2022-03-13T01:17:12.528Z","_id":"cl0oi8me1000d417tg02jb0dj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从开始减肥到现在，已经是2-3个年头了，在大学的时候，基本上每天除了睡就是吃，再加上自己时不时晚上出去通宵，所以体重从大一的160斤，毕业后接近200斤。毕业之后，由于没有注意体重的问题，没过多久就超过了200斤。</p>\n<p><img src=\"/uploads/2019/10/IMG_0825-225x300.jpg\"></p>\n<p><img src=\"/uploads/2019/10/IMG_1103.png\"></p>\n<p>这两张是大一入学和大学刚毕业的对比照片。不得不说，大学真的算是“养猪场”了。</p>\n<h3 id=\"减肥的原因\"><a href=\"#减肥的原因\" class=\"headerlink\" title=\"减肥的原因\"></a>减肥的原因</h3><p>我最开始是在海淀工作，后来公司搬到了昌平。上班的时候会路过一个天桥，但是有一次我发现，上天桥的时候，自己呼哧呼哧的喘着粗气，我才意识到：我应该开始减肥了，再这样下去我就不行了。</p>\n<h3 id=\"减肥的过程\"><a href=\"#减肥的过程\" class=\"headerlink\" title=\"减肥的过程\"></a>减肥的过程</h3><p>当时刚毕业到北京，手里没什么钱，四个同学挤在了一个10平米的公寓，月租1300块，平均每人每个月300多。每天吃饭都成问题，更没有闲钱办健身卡，所以就买了一个瑜伽垫，在公寓里面使用keep上“减脂课”。</p>\n<p><img src=\"/uploads/2019/10/WechatIMG5-139x300.jpeg\"></p>\n<p>当时练得最多的就是“hiit”的减脂课了。</p>\n<p>在北京工作一段时间之后，生活稍微宽裕了一些，自己就在咸鱼买了人生中的第一张健身卡，花了800块钱，开始了自己的健身房锻炼的生涯。</p>\n<h3 id=\"减肥的结果\"><a href=\"#减肥的结果\" class=\"headerlink\" title=\"减肥的结果\"></a>减肥的结果</h3><p>第一次到了健身房，和大家一样，基本上就是跑步，不会使用器械。不过好在keep上面有一些训练的动作，里面会交一些器械使用的注意事项。慢慢的，也开始熟能生巧。也越来越有感觉。</p>\n<p>从减肥，到现在已经2年多了，现在体重基本上维持在160斤左右，虽然没有腹肌，但是也基本算是“穿衣显瘦，脱衣有肉”。</p>\n<h3 id=\"减肥的误区\"><a href=\"#减肥的误区\" class=\"headerlink\" title=\"减肥的误区\"></a>减肥的误区</h3><p>减肥的道理其实大家都懂“管住嘴，迈开腿”，也就是说，消耗 &gt; 摄入。但是很多人依然会减肥失败，原因是什么？</p>\n<h4 id=\"大家都太着急了\"><a href=\"#大家都太着急了\" class=\"headerlink\" title=\"大家都太着急了\"></a>大家都太着急了</h4><p>其实我们长胖，并不是几天就一下子变胖的，我们在开始减肥的时候，发现前期没有什么明显的变化，内心就开始动摇了，在加上我们身处一个快节奏的生活，身边再有几个“看热闹不嫌事大”的损友，所以很容易就放弃减肥了。</p>\n<h4 id=\"不吃主食\"><a href=\"#不吃主食\" class=\"headerlink\" title=\"不吃主食\"></a>不吃主食</h4><p>糖分在为我们大脑的供能有很重要的作用，当你不吃主食，大脑的糖分不足，就容易出现头晕、易怒。下午就很容易出现犯困。</p>\n<p>晚上不吃主食，到了半夜睡眠的时候，身体的缺少能量，会开始分解肝糖原进行供能，肝糖原不足之后，就会分解肌糖原，进而也会影响肌肉的合成。所以晚上，我们应该适当少吃点主食。或者使用土豆作为代餐主食。因为在我们身体中，胰岛素是维持血糖平衡的重要物质，如果血糖一旦升高，那么胰岛素就会把多余的血糖合成脂肪，这要是为什么奶茶等饮料容易长胖的重要原因！</p>\n<h4 id=\"肌肉重不重要\"><a href=\"#肌肉重不重要\" class=\"headerlink\" title=\"肌肉重不重要\"></a>肌肉重不重要</h4><p>很多人会说，“我不想长肌肉，我只想瘦一点”。</p>\n<p>我们的身体，在活动的时候，是由肌肉带动骨骼，身体的能量消耗，在于肌肉和骨骼的牵引，所以一般来说，肌肉量相对比较大的，消耗的能量也相对较大。这也就是我们常说的基础代谢。所以肌肉在减值过程中具有很重要的作用。</p>\n<p>其实肌肉的生长，是一个复杂的过程。</p>\n<p>肌肉的基本单位是肌肉纤维。肌肉想要得到生长，需要先把肌肉纤维产生破损，然后再通过氨基酸，将肌肉纤维进行修复，所以没有足够的蛋白质和氨基酸，肌肉增长会是一个比较慢的过程。除此以外，还需要足够的休息，所以 蛋白质+训练+休息 三者结合肌肉才会得到足够的生长。</p>\n<h3 id=\"程序员怎么减肥？\"><a href=\"#程序员怎么减肥？\" class=\"headerlink\" title=\"程序员怎么减肥？\"></a>程序员怎么减肥？</h3><h4 id=\"调整饮食\"><a href=\"#调整饮食\" class=\"headerlink\" title=\"调整饮食\"></a>调整饮食</h4><p><img src=\"/uploads/2019/10/d15ea020bfcc444181bfd16a88f53909-300x184.jpeg\"></p>\n<p>首先，我们应该调整一下自己的饮食结构。上面说了，胰岛素是维持血糖的重要物质所以我们应该在日常生活中，调整饮食结构，将主食的比例降低一点，将蛋白质的比例稍微调高一点。这样可以让我们的血糖变化小一点，减少过多的糖分合成脂肪的可能性。</p>\n<h4 id=\"增加无氧训练\"><a href=\"#增加无氧训练\" class=\"headerlink\" title=\"增加无氧训练\"></a>增加无氧训练</h4><p><img src=\"/uploads/2019/10/8f3d71c9c5b54eaab2527b13b3531100-300x193.jpeg\"></p>\n<p>肌肉是维持基础代谢的一个重要的因素。除了我们增加蛋白质的摄入比例以外，我们也应该做一些无氧训练。比如健身房做一些器械的训练，但是我们减肥的目的是为了健康，不是为了举重。</p>\n<p>在健身房，我不建议请私教。 因为现在很多商业健身房都是盈利为目的，买课之前和买课之后态度差很多，私教素质也是参差不齐。所以如果请私教，还是需要擦亮眼睛。可以和健身房练得不错的请教一下，其实健身爱好者都是非常谦逊的。</p>\n<hr>\n<p>以上就是我对程序员减肥的相关感触和理解，我自己个人也是这么走过来的。减肥就想红军长征一样，并不是一蹴而就，而是需要时间的一点点积累，一点点看到变化。加油！</p>\n<p>本文连接： <a href=\"http://feilong.tech/2019/10/08/code-to-lose-weight\">http://feilong.tech/2019/10/08/code-to-lose-weight</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>从开始减肥到现在，已经是2-3个年头了，在大学的时候，基本上每天除了睡就是吃，再加上自己时不时晚上出去通宵，所以体重从大一的160斤，毕业后接近200斤。毕业之后，由于没有注意体重的问题，没过多久就超过了200斤。</p>\n<p><img src=\"/uploads/2019/10/IMG_0825-225x300.jpg\"></p>\n<p><img src=\"/uploads/2019/10/IMG_1103.png\"></p>\n<p>这两张是大一入学和大学刚毕业的对比照片。不得不说，大学真的算是“养猪场”了。</p>\n<h3 id=\"减肥的原因\"><a href=\"#减肥的原因\" class=\"headerlink\" title=\"减肥的原因\"></a>减肥的原因</h3><p>我最开始是在海淀工作，后来公司搬到了昌平。上班的时候会路过一个天桥，但是有一次我发现，上天桥的时候，自己呼哧呼哧的喘着粗气，我才意识到：我应该开始减肥了，再这样下去我就不行了。</p>\n<h3 id=\"减肥的过程\"><a href=\"#减肥的过程\" class=\"headerlink\" title=\"减肥的过程\"></a>减肥的过程</h3><p>当时刚毕业到北京，手里没什么钱，四个同学挤在了一个10平米的公寓，月租1300块，平均每人每个月300多。每天吃饭都成问题，更没有闲钱办健身卡，所以就买了一个瑜伽垫，在公寓里面使用keep上“减脂课”。</p>\n<p><img src=\"/uploads/2019/10/WechatIMG5-139x300.jpeg\"></p>\n<p>当时练得最多的就是“hiit”的减脂课了。</p>\n<p>在北京工作一段时间之后，生活稍微宽裕了一些，自己就在咸鱼买了人生中的第一张健身卡，花了800块钱，开始了自己的健身房锻炼的生涯。</p>\n<h3 id=\"减肥的结果\"><a href=\"#减肥的结果\" class=\"headerlink\" title=\"减肥的结果\"></a>减肥的结果</h3><p>第一次到了健身房，和大家一样，基本上就是跑步，不会使用器械。不过好在keep上面有一些训练的动作，里面会交一些器械使用的注意事项。慢慢的，也开始熟能生巧。也越来越有感觉。</p>\n<p>从减肥，到现在已经2年多了，现在体重基本上维持在160斤左右，虽然没有腹肌，但是也基本算是“穿衣显瘦，脱衣有肉”。</p>\n<h3 id=\"减肥的误区\"><a href=\"#减肥的误区\" class=\"headerlink\" title=\"减肥的误区\"></a>减肥的误区</h3><p>减肥的道理其实大家都懂“管住嘴，迈开腿”，也就是说，消耗 &gt; 摄入。但是很多人依然会减肥失败，原因是什么？</p>\n<h4 id=\"大家都太着急了\"><a href=\"#大家都太着急了\" class=\"headerlink\" title=\"大家都太着急了\"></a>大家都太着急了</h4><p>其实我们长胖，并不是几天就一下子变胖的，我们在开始减肥的时候，发现前期没有什么明显的变化，内心就开始动摇了，在加上我们身处一个快节奏的生活，身边再有几个“看热闹不嫌事大”的损友，所以很容易就放弃减肥了。</p>\n<h4 id=\"不吃主食\"><a href=\"#不吃主食\" class=\"headerlink\" title=\"不吃主食\"></a>不吃主食</h4><p>糖分在为我们大脑的供能有很重要的作用，当你不吃主食，大脑的糖分不足，就容易出现头晕、易怒。下午就很容易出现犯困。</p>\n<p>晚上不吃主食，到了半夜睡眠的时候，身体的缺少能量，会开始分解肝糖原进行供能，肝糖原不足之后，就会分解肌糖原，进而也会影响肌肉的合成。所以晚上，我们应该适当少吃点主食。或者使用土豆作为代餐主食。因为在我们身体中，胰岛素是维持血糖平衡的重要物质，如果血糖一旦升高，那么胰岛素就会把多余的血糖合成脂肪，这要是为什么奶茶等饮料容易长胖的重要原因！</p>\n<h4 id=\"肌肉重不重要\"><a href=\"#肌肉重不重要\" class=\"headerlink\" title=\"肌肉重不重要\"></a>肌肉重不重要</h4><p>很多人会说，“我不想长肌肉，我只想瘦一点”。</p>\n<p>我们的身体，在活动的时候，是由肌肉带动骨骼，身体的能量消耗，在于肌肉和骨骼的牵引，所以一般来说，肌肉量相对比较大的，消耗的能量也相对较大。这也就是我们常说的基础代谢。所以肌肉在减值过程中具有很重要的作用。</p>\n<p>其实肌肉的生长，是一个复杂的过程。</p>\n<p>肌肉的基本单位是肌肉纤维。肌肉想要得到生长，需要先把肌肉纤维产生破损，然后再通过氨基酸，将肌肉纤维进行修复，所以没有足够的蛋白质和氨基酸，肌肉增长会是一个比较慢的过程。除此以外，还需要足够的休息，所以 蛋白质+训练+休息 三者结合肌肉才会得到足够的生长。</p>\n<h3 id=\"程序员怎么减肥？\"><a href=\"#程序员怎么减肥？\" class=\"headerlink\" title=\"程序员怎么减肥？\"></a>程序员怎么减肥？</h3><h4 id=\"调整饮食\"><a href=\"#调整饮食\" class=\"headerlink\" title=\"调整饮食\"></a>调整饮食</h4><p><img src=\"/uploads/2019/10/d15ea020bfcc444181bfd16a88f53909-300x184.jpeg\"></p>\n<p>首先，我们应该调整一下自己的饮食结构。上面说了，胰岛素是维持血糖的重要物质所以我们应该在日常生活中，调整饮食结构，将主食的比例降低一点，将蛋白质的比例稍微调高一点。这样可以让我们的血糖变化小一点，减少过多的糖分合成脂肪的可能性。</p>\n<h4 id=\"增加无氧训练\"><a href=\"#增加无氧训练\" class=\"headerlink\" title=\"增加无氧训练\"></a>增加无氧训练</h4><p><img src=\"/uploads/2019/10/8f3d71c9c5b54eaab2527b13b3531100-300x193.jpeg\"></p>\n<p>肌肉是维持基础代谢的一个重要的因素。除了我们增加蛋白质的摄入比例以外，我们也应该做一些无氧训练。比如健身房做一些器械的训练，但是我们减肥的目的是为了健康，不是为了举重。</p>\n<p>在健身房，我不建议请私教。 因为现在很多商业健身房都是盈利为目的，买课之前和买课之后态度差很多，私教素质也是参差不齐。所以如果请私教，还是需要擦亮眼睛。可以和健身房练得不错的请教一下，其实健身爱好者都是非常谦逊的。</p>\n<hr>\n<p>以上就是我对程序员减肥的相关感触和理解，我自己个人也是这么走过来的。减肥就想红军长征一样，并不是一蹴而就，而是需要时间的一点点积累，一点点看到变化。加油！</p>\n<p>本文连接： <a href=\"http://feilong.tech/2019/10/08/code-to-lose-weight\">http://feilong.tech/2019/10/08/code-to-lose-weight</a></p>\n"},{"title":"【以太坊】公链上的合约","id":"797","date":"2021-06-16T14:38:37.000Z","_content":"\n发布智能合约指的就是把智能合约发布到以太坊公链上。但是如果一旦发布到了公链上，那么智能合约就不能再更改了，这里值的更改，含义是修改已经发布的智能合约的代码。所以，这是一个不可逆的过程。\n\n一般来说，编写完智能合约，会先发布到[以太坊测试网络的公链](https://rinkeby.etherscan.io/ \"以太坊测试网络的公链\")上，经过反复的测试，然后再发布到[以太坊公链](https://cn.etherscan.com/ \"以太坊公链\")上。\n\n在公链上，我们可以搜索到已经发布的代币\n\n![](/uploads/2021/06/iShot2021-06-16-22.41.21.png)\n\n也可以在代币的详情页面，查看持有者和合约的信息，发布的代币数量，等等\n\n![](/uploads/2021/06/iShot2021-06-16-22.41.53.png)\n\n![](/uploads/2021/06/iShot2021-06-16-22.46.47.png)\n\n上面说到，发布智能合约后，不能进行修改，如果真的公链上的合约出现问题怎么办呢？\n\n这种情况下只能重新发布一份智能合约了，把之前的智能合约废弃掉。\n\n但是如果之前的发布的代币已经开始交易了，这里有一个思路，可以选择一个固定的区块高度，然后把这个区块高度的持有者的代币映射到新的合约上，宣布旧合约作废。这种操作其实对于持有者是有损失的，因为在这个高度之后的交易，其实是无效的。所以为了杜绝这种情况的发生，在测试阶段，一定要充分的进行测试才能发布到公链上。\n\n本文链接： [https://feilong.tech/2021/06/16/contract-eth](https://feilong.tech/2021/06/16/contract-eth)","source":"_posts/contract-eth.md","raw":"---\ntitle: 【以太坊】公链上的合约\ntags:\n  - 以太坊\n  - 区块链\nid: '797'\ncategories:\n  - - 以太坊\ndate: 2021-06-16 22:38:37\n---\n\n发布智能合约指的就是把智能合约发布到以太坊公链上。但是如果一旦发布到了公链上，那么智能合约就不能再更改了，这里值的更改，含义是修改已经发布的智能合约的代码。所以，这是一个不可逆的过程。\n\n一般来说，编写完智能合约，会先发布到[以太坊测试网络的公链](https://rinkeby.etherscan.io/ \"以太坊测试网络的公链\")上，经过反复的测试，然后再发布到[以太坊公链](https://cn.etherscan.com/ \"以太坊公链\")上。\n\n在公链上，我们可以搜索到已经发布的代币\n\n![](/uploads/2021/06/iShot2021-06-16-22.41.21.png)\n\n也可以在代币的详情页面，查看持有者和合约的信息，发布的代币数量，等等\n\n![](/uploads/2021/06/iShot2021-06-16-22.41.53.png)\n\n![](/uploads/2021/06/iShot2021-06-16-22.46.47.png)\n\n上面说到，发布智能合约后，不能进行修改，如果真的公链上的合约出现问题怎么办呢？\n\n这种情况下只能重新发布一份智能合约了，把之前的智能合约废弃掉。\n\n但是如果之前的发布的代币已经开始交易了，这里有一个思路，可以选择一个固定的区块高度，然后把这个区块高度的持有者的代币映射到新的合约上，宣布旧合约作废。这种操作其实对于持有者是有损失的，因为在这个高度之后的交易，其实是无效的。所以为了杜绝这种情况的发生，在测试阶段，一定要充分的进行测试才能发布到公链上。\n\n本文链接： [https://feilong.tech/2021/06/16/contract-eth](https://feilong.tech/2021/06/16/contract-eth)","slug":"contract-eth","published":1,"updated":"2022-03-13T01:18:42.687Z","_id":"cl0oi8me2000f417te8cm9scf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>发布智能合约指的就是把智能合约发布到以太坊公链上。但是如果一旦发布到了公链上，那么智能合约就不能再更改了，这里值的更改，含义是修改已经发布的智能合约的代码。所以，这是一个不可逆的过程。</p>\n<p>一般来说，编写完智能合约，会先发布到<a href=\"https://rinkeby.etherscan.io/\" title=\"以太坊测试网络的公链\">以太坊测试网络的公链</a>上，经过反复的测试，然后再发布到<a href=\"https://cn.etherscan.com/\" title=\"以太坊公链\">以太坊公链</a>上。</p>\n<p>在公链上，我们可以搜索到已经发布的代币</p>\n<p><img src=\"/uploads/2021/06/iShot2021-06-16-22.41.21.png\"></p>\n<p>也可以在代币的详情页面，查看持有者和合约的信息，发布的代币数量，等等</p>\n<p><img src=\"/uploads/2021/06/iShot2021-06-16-22.41.53.png\"></p>\n<p><img src=\"/uploads/2021/06/iShot2021-06-16-22.46.47.png\"></p>\n<p>上面说到，发布智能合约后，不能进行修改，如果真的公链上的合约出现问题怎么办呢？</p>\n<p>这种情况下只能重新发布一份智能合约了，把之前的智能合约废弃掉。</p>\n<p>但是如果之前的发布的代币已经开始交易了，这里有一个思路，可以选择一个固定的区块高度，然后把这个区块高度的持有者的代币映射到新的合约上，宣布旧合约作废。这种操作其实对于持有者是有损失的，因为在这个高度之后的交易，其实是无效的。所以为了杜绝这种情况的发生，在测试阶段，一定要充分的进行测试才能发布到公链上。</p>\n<p>本文链接： <a href=\"https://feilong.tech/2021/06/16/contract-eth\">https://feilong.tech/2021/06/16/contract-eth</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>发布智能合约指的就是把智能合约发布到以太坊公链上。但是如果一旦发布到了公链上，那么智能合约就不能再更改了，这里值的更改，含义是修改已经发布的智能合约的代码。所以，这是一个不可逆的过程。</p>\n<p>一般来说，编写完智能合约，会先发布到<a href=\"https://rinkeby.etherscan.io/\" title=\"以太坊测试网络的公链\">以太坊测试网络的公链</a>上，经过反复的测试，然后再发布到<a href=\"https://cn.etherscan.com/\" title=\"以太坊公链\">以太坊公链</a>上。</p>\n<p>在公链上，我们可以搜索到已经发布的代币</p>\n<p><img src=\"/uploads/2021/06/iShot2021-06-16-22.41.21.png\"></p>\n<p>也可以在代币的详情页面，查看持有者和合约的信息，发布的代币数量，等等</p>\n<p><img src=\"/uploads/2021/06/iShot2021-06-16-22.41.53.png\"></p>\n<p><img src=\"/uploads/2021/06/iShot2021-06-16-22.46.47.png\"></p>\n<p>上面说到，发布智能合约后，不能进行修改，如果真的公链上的合约出现问题怎么办呢？</p>\n<p>这种情况下只能重新发布一份智能合约了，把之前的智能合约废弃掉。</p>\n<p>但是如果之前的发布的代币已经开始交易了，这里有一个思路，可以选择一个固定的区块高度，然后把这个区块高度的持有者的代币映射到新的合约上，宣布旧合约作废。这种操作其实对于持有者是有损失的，因为在这个高度之后的交易，其实是无效的。所以为了杜绝这种情况的发生，在测试阶段，一定要充分的进行测试才能发布到公链上。</p>\n<p>本文链接： <a href=\"https://feilong.tech/2021/06/16/contract-eth\">https://feilong.tech/2021/06/16/contract-eth</a></p>\n"},{"title":"一次由于curl调用https接口导致的502","id":"251","comments":0,"date":"2018-03-06T12:49:06.000Z","_content":"\n#### 背景描述\n\n最近在调研百度人脸识别的服务，百度的人脸识别是免费的，但是有QPS的限制，QPS免费的最大值是5，也就是峰值在每秒5次，都是可以免费使用的。我从百度平台下载的SDK，但是到了第一步就被卡主了。\n\n当我使用检测接口的时候，频繁出现 502。在之前，本地运行PHP的时候，也会偶尔出现502，但是并没有这么高。这次变态的浮现率是100%.\n\n查了下nginx日志`*173 upstream prematurely closed connection while reading response header from upstream, client: 127.0.0.1, server: sdeno-api, request: \"GET /facev1/test HTTP/1.1\", upstream: \"fastcgi://127.0.0.1:9000\"`\n\n在网上查了一下，说什么的都有，大多数是在说nginx的问题。没有一个能够解决问题。\n\n#### 发现问题\n\n我发现，出现http 502 的接口使用了curl，所以很可能是curl代码有问题。我自己有写了一段代码，调用百度首页`http://www.baidu.com`，咦？正常返回啊。完全没有问题。后来百度查了很多，最终发现一个不起眼的问题 `php curl 调用https出现502问题`。我验证了一些，我曹，果然只有https接口是不正常的。\n\n#### 解决办法\n\n后来找到了一个靠谱的方法，那就是使用sudo重启php-fpm.\n\n```bash\n$ brew services stop php53\n$ sudo brew services start php53\n```\n\n其实除了这样，还可以考虑下重装或者升级PHP的版本。我把本地的php5.3卸载了，重新安装了php5.6也解决了问题。\n\n```bash\n$ brew uninstall php53\n$ brew install php56\n```","source":"_posts/curl-https-502.md","raw":"---\ntitle: 一次由于curl调用https接口导致的502\ntags: []\nid: '251'\ncategories:\n  - - Linux\n  - - Nginx\n  - - PHP\ncomments: false\ndate: 2018-03-06 20:49:06\n---\n\n#### 背景描述\n\n最近在调研百度人脸识别的服务，百度的人脸识别是免费的，但是有QPS的限制，QPS免费的最大值是5，也就是峰值在每秒5次，都是可以免费使用的。我从百度平台下载的SDK，但是到了第一步就被卡主了。\n\n当我使用检测接口的时候，频繁出现 502。在之前，本地运行PHP的时候，也会偶尔出现502，但是并没有这么高。这次变态的浮现率是100%.\n\n查了下nginx日志`*173 upstream prematurely closed connection while reading response header from upstream, client: 127.0.0.1, server: sdeno-api, request: \"GET /facev1/test HTTP/1.1\", upstream: \"fastcgi://127.0.0.1:9000\"`\n\n在网上查了一下，说什么的都有，大多数是在说nginx的问题。没有一个能够解决问题。\n\n#### 发现问题\n\n我发现，出现http 502 的接口使用了curl，所以很可能是curl代码有问题。我自己有写了一段代码，调用百度首页`http://www.baidu.com`，咦？正常返回啊。完全没有问题。后来百度查了很多，最终发现一个不起眼的问题 `php curl 调用https出现502问题`。我验证了一些，我曹，果然只有https接口是不正常的。\n\n#### 解决办法\n\n后来找到了一个靠谱的方法，那就是使用sudo重启php-fpm.\n\n```bash\n$ brew services stop php53\n$ sudo brew services start php53\n```\n\n其实除了这样，还可以考虑下重装或者升级PHP的版本。我把本地的php5.3卸载了，重新安装了php5.6也解决了问题。\n\n```bash\n$ brew uninstall php53\n$ brew install php56\n```","slug":"curl-https-502","published":1,"updated":"2022-03-12T23:52:58.758Z","layout":"post","photos":[],"link":"","_id":"cl0oi8me4000i417thgs254b6","content":"<h4 id=\"背景描述\"><a href=\"#背景描述\" class=\"headerlink\" title=\"背景描述\"></a>背景描述</h4><p>最近在调研百度人脸识别的服务，百度的人脸识别是免费的，但是有QPS的限制，QPS免费的最大值是5，也就是峰值在每秒5次，都是可以免费使用的。我从百度平台下载的SDK，但是到了第一步就被卡主了。</p>\n<p>当我使用检测接口的时候，频繁出现 502。在之前，本地运行PHP的时候，也会偶尔出现502，但是并没有这么高。这次变态的浮现率是100%.</p>\n<p>查了下nginx日志<code>*173 upstream prematurely closed connection while reading response header from upstream, client: 127.0.0.1, server: sdeno-api, request: &quot;GET /facev1/test HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;</code></p>\n<p>在网上查了一下，说什么的都有，大多数是在说nginx的问题。没有一个能够解决问题。</p>\n<h4 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h4><p>我发现，出现http 502 的接口使用了curl，所以很可能是curl代码有问题。我自己有写了一段代码，调用百度首页<code>http://www.baidu.com</code>，咦？正常返回啊。完全没有问题。后来百度查了很多，最终发现一个不起眼的问题 <code>php curl 调用https出现502问题</code>。我验证了一些，我曹，果然只有https接口是不正常的。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>后来找到了一个靠谱的方法，那就是使用sudo重启php-fpm.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew services stop php53</span><br><span class=\"line\">$ sudo brew services start php53</span><br></pre></td></tr></table></figure>\n\n<p>其实除了这样，还可以考虑下重装或者升级PHP的版本。我把本地的php5.3卸载了，重新安装了php5.6也解决了问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew uninstall php53</span><br><span class=\"line\">$ brew install php56</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"背景描述\"><a href=\"#背景描述\" class=\"headerlink\" title=\"背景描述\"></a>背景描述</h4><p>最近在调研百度人脸识别的服务，百度的人脸识别是免费的，但是有QPS的限制，QPS免费的最大值是5，也就是峰值在每秒5次，都是可以免费使用的。我从百度平台下载的SDK，但是到了第一步就被卡主了。</p>\n<p>当我使用检测接口的时候，频繁出现 502。在之前，本地运行PHP的时候，也会偶尔出现502，但是并没有这么高。这次变态的浮现率是100%.</p>\n<p>查了下nginx日志<code>*173 upstream prematurely closed connection while reading response header from upstream, client: 127.0.0.1, server: sdeno-api, request: &quot;GET /facev1/test HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;</code></p>\n<p>在网上查了一下，说什么的都有，大多数是在说nginx的问题。没有一个能够解决问题。</p>\n<h4 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h4><p>我发现，出现http 502 的接口使用了curl，所以很可能是curl代码有问题。我自己有写了一段代码，调用百度首页<code>http://www.baidu.com</code>，咦？正常返回啊。完全没有问题。后来百度查了很多，最终发现一个不起眼的问题 <code>php curl 调用https出现502问题</code>。我验证了一些，我曹，果然只有https接口是不正常的。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>后来找到了一个靠谱的方法，那就是使用sudo重启php-fpm.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew services stop php53</span><br><span class=\"line\">$ sudo brew services start php53</span><br></pre></td></tr></table></figure>\n\n<p>其实除了这样，还可以考虑下重装或者升级PHP的版本。我把本地的php5.3卸载了，重新安装了php5.6也解决了问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew uninstall php53</span><br><span class=\"line\">$ brew install php56</span><br></pre></td></tr></table></figure>"},{"title":"CURL 设置CURLOPT_TIMEOUT_MS 超时时间","id":"61","date":"2017-08-24T11:41:23.000Z","_content":"\n#### 作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\n\n#### 比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\n\n##### 最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\n\n_curl可以通过设置变量 `CURLOPT_TIMEOUT_MS`或者 `CURLOPT_TIMEOUT`设置超时时间。_\n\n> CURLOPT\\_TIMEOUT\\_MS 以毫秒计算超时时间 CURLOPT\\_TIMEOUT 以秒计算超时时间\n\n查了手册关于`timeout`的设置\n\n变量\n\n说明\n\nCURLOPT\\_TIMEOUT\n\n允许 cURL 函数执行的最长秒数。\n\nCURLOPT\\_TIMEOUT\\_MS\n\n设置cURL允许执行的最长毫秒数。 如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。\n\n##### 假设我们想要设置超时时间是500毫秒，那么直接设置 curl\\_setopt($ch, CURLOPT\\_TIMEOUT\\_MS, 500);\n\n但是，测试的时候，发现，设置了500ms，curl直接返回了false，并且打印了下错误信息：`cURL Error (28): Timeout was reached` 可能和libcurl 的编译有关系，我继续查了下php手册，发现了如下的内容\n\n> If you want cURL to timeout in less than one second, you can use CURLOPT\\_TIMEOUT\\_MS, although there is a bug/\"feature\" on \"Unix-like systems\" that causes libcurl to timeout immediately if the value is < 1000 ms with the error \"cURL Error (28): Timeout was reached\". The explanation for this behavior is: \"If libcurl is built to use the standard system name resolver, that portion of the transfer will still use full-second resolution for timeouts with a minimum timeout allowed of one second.\"\n> \n> What this means to PHP developers is \"You can use this function without testing it first, because you can't tell if libcurl is using the standard system name resolver (but you can be pretty sure it is)\"\n> \n> The problem is that on (LiU)nix, when libcurl uses the standard name resolver, a SIGALRM is raised during name resolution which libcurl thinks is the timeout alarm.\n> \n> The solution is to disable signals using CURLOPT\\_NOSIGNAL. Here's an example script that requests itself causing a 10-second delay so you can test timeouts:\n\n内容的大概意思是：libcurl使用的是标准名称的解析器，内部传输信息号部分，依然是使用秒来计算是否超时，并且最少时间是1秒，如果想要设置超时时间小于1秒，那么直接通过`CURLOPT_NOSIGNAL`禁用信号即可。即：`curl_setopt($ch, CURLOPT_NOSIGNAL, 1);`\n\n```php\n#demo code\n\n if (!isset($_GET['foo'])) {\n        // Client\n      $ch = curl_init('http://localhost/test/test_timeout.php?foo=bar');\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n      curl_setopt($ch, CURLOPT_NOSIGNAL, 1);\n      curl_setopt($ch, CURLOPT_TIMEOUT_MS, 200);\n      $data = curl_exec($ch);\n      $curl_errno = curl_errno($ch);\n      $curl_error = curl_error($ch);\n      curl_close($ch);\n\n        if ($curl_errno > 0) {\n                echo \"cURL Error ($curl_errno): $curl_error\\n\";\n        } else {\n               echo \"Data received: $data\\n\";\n        }\n} else {\n        // Server\n        sleep(10);\n        echo \"Done.\";\n}\n```\n\n#### 本文连接：[http://feilong.tech/2017/08/24/curlopt\\_timeout\\_ms](http://feilong.tech/2017/08/24/curlopt_timeout_ms)","source":"_posts/curlopt-timeout-ms.md","raw":"---\ntitle: CURL 设置CURLOPT_TIMEOUT_MS 超时时间\ntags: []\nid: '61'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:41:23\n---\n\n#### 作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\n\n#### 比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\n\n##### 最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\n\n_curl可以通过设置变量 `CURLOPT_TIMEOUT_MS`或者 `CURLOPT_TIMEOUT`设置超时时间。_\n\n> CURLOPT\\_TIMEOUT\\_MS 以毫秒计算超时时间 CURLOPT\\_TIMEOUT 以秒计算超时时间\n\n查了手册关于`timeout`的设置\n\n变量\n\n说明\n\nCURLOPT\\_TIMEOUT\n\n允许 cURL 函数执行的最长秒数。\n\nCURLOPT\\_TIMEOUT\\_MS\n\n设置cURL允许执行的最长毫秒数。 如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。\n\n##### 假设我们想要设置超时时间是500毫秒，那么直接设置 curl\\_setopt($ch, CURLOPT\\_TIMEOUT\\_MS, 500);\n\n但是，测试的时候，发现，设置了500ms，curl直接返回了false，并且打印了下错误信息：`cURL Error (28): Timeout was reached` 可能和libcurl 的编译有关系，我继续查了下php手册，发现了如下的内容\n\n> If you want cURL to timeout in less than one second, you can use CURLOPT\\_TIMEOUT\\_MS, although there is a bug/\"feature\" on \"Unix-like systems\" that causes libcurl to timeout immediately if the value is < 1000 ms with the error \"cURL Error (28): Timeout was reached\". The explanation for this behavior is: \"If libcurl is built to use the standard system name resolver, that portion of the transfer will still use full-second resolution for timeouts with a minimum timeout allowed of one second.\"\n> \n> What this means to PHP developers is \"You can use this function without testing it first, because you can't tell if libcurl is using the standard system name resolver (but you can be pretty sure it is)\"\n> \n> The problem is that on (LiU)nix, when libcurl uses the standard name resolver, a SIGALRM is raised during name resolution which libcurl thinks is the timeout alarm.\n> \n> The solution is to disable signals using CURLOPT\\_NOSIGNAL. Here's an example script that requests itself causing a 10-second delay so you can test timeouts:\n\n内容的大概意思是：libcurl使用的是标准名称的解析器，内部传输信息号部分，依然是使用秒来计算是否超时，并且最少时间是1秒，如果想要设置超时时间小于1秒，那么直接通过`CURLOPT_NOSIGNAL`禁用信号即可。即：`curl_setopt($ch, CURLOPT_NOSIGNAL, 1);`\n\n```php\n#demo code\n\n if (!isset($_GET['foo'])) {\n        // Client\n      $ch = curl_init('http://localhost/test/test_timeout.php?foo=bar');\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n      curl_setopt($ch, CURLOPT_NOSIGNAL, 1);\n      curl_setopt($ch, CURLOPT_TIMEOUT_MS, 200);\n      $data = curl_exec($ch);\n      $curl_errno = curl_errno($ch);\n      $curl_error = curl_error($ch);\n      curl_close($ch);\n\n        if ($curl_errno > 0) {\n                echo \"cURL Error ($curl_errno): $curl_error\\n\";\n        } else {\n               echo \"Data received: $data\\n\";\n        }\n} else {\n        // Server\n        sleep(10);\n        echo \"Done.\";\n}\n```\n\n#### 本文连接：[http://feilong.tech/2017/08/24/curlopt\\_timeout\\_ms](http://feilong.tech/2017/08/24/curlopt_timeout_ms)","slug":"curlopt-timeout-ms","published":1,"updated":"2022-03-12T23:52:58.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8me8000k417t40y715y9","content":"<h4 id=\"作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\"><a href=\"#作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\" class=\"headerlink\" title=\"作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\"></a>作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。</h4><h4 id=\"比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\"><a href=\"#比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\" class=\"headerlink\" title=\"比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\"></a>比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。</h4><h5 id=\"最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\"><a href=\"#最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\" class=\"headerlink\" title=\"最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\"></a>最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。</h5><p><em>curl可以通过设置变量 <code>CURLOPT_TIMEOUT_MS</code>或者 <code>CURLOPT_TIMEOUT</code>设置超时时间。</em></p>\n<blockquote>\n<p>CURLOPT_TIMEOUT_MS 以毫秒计算超时时间 CURLOPT_TIMEOUT 以秒计算超时时间</p>\n</blockquote>\n<p>查了手册关于<code>timeout</code>的设置</p>\n<p>变量</p>\n<p>说明</p>\n<p>CURLOPT_TIMEOUT</p>\n<p>允许 cURL 函数执行的最长秒数。</p>\n<p>CURLOPT_TIMEOUT_MS</p>\n<p>设置cURL允许执行的最长毫秒数。 如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。</p>\n<h5 id=\"假设我们想要设置超时时间是500毫秒，那么直接设置-curl-setopt-ch-CURLOPT-TIMEOUT-MS-500\"><a href=\"#假设我们想要设置超时时间是500毫秒，那么直接设置-curl-setopt-ch-CURLOPT-TIMEOUT-MS-500\" class=\"headerlink\" title=\"假设我们想要设置超时时间是500毫秒，那么直接设置 curl_setopt($ch, CURLOPT_TIMEOUT_MS, 500);\"></a>假设我们想要设置超时时间是500毫秒，那么直接设置 curl_setopt($ch, CURLOPT_TIMEOUT_MS, 500);</h5><p>但是，测试的时候，发现，设置了500ms，curl直接返回了false，并且打印了下错误信息：<code>cURL Error (28): Timeout was reached</code> 可能和libcurl 的编译有关系，我继续查了下php手册，发现了如下的内容</p>\n<blockquote>\n<p>If you want cURL to timeout in less than one second, you can use CURLOPT_TIMEOUT_MS, although there is a bug&#x2F;“feature” on “Unix-like systems” that causes libcurl to timeout immediately if the value is &lt; 1000 ms with the error “cURL Error (28): Timeout was reached”. The explanation for this behavior is: “If libcurl is built to use the standard system name resolver, that portion of the transfer will still use full-second resolution for timeouts with a minimum timeout allowed of one second.”</p>\n<p>What this means to PHP developers is “You can use this function without testing it first, because you can’t tell if libcurl is using the standard system name resolver (but you can be pretty sure it is)”</p>\n<p>The problem is that on (LiU)nix, when libcurl uses the standard name resolver, a SIGALRM is raised during name resolution which libcurl thinks is the timeout alarm.</p>\n<p>The solution is to disable signals using CURLOPT_NOSIGNAL. Here’s an example script that requests itself causing a 10-second delay so you can test timeouts:</p>\n</blockquote>\n<p>内容的大概意思是：libcurl使用的是标准名称的解析器，内部传输信息号部分，依然是使用秒来计算是否超时，并且最少时间是1秒，如果想要设置超时时间小于1秒，那么直接通过<code>CURLOPT_NOSIGNAL</code>禁用信号即可。即：<code>curl_setopt($ch, CURLOPT_NOSIGNAL, 1);</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#demo code</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;foo&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Client</span></span><br><span class=\"line\">      <span class=\"variable\">$ch</span> = <span class=\"title function_ invoke__\">curl_init</span>(<span class=\"string\">&#x27;http://localhost/test/test_timeout.php?foo=bar&#x27;</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_NOSIGNAL, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_TIMEOUT_MS, <span class=\"number\">200</span>);</span><br><span class=\"line\">      <span class=\"variable\">$data</span> = <span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\">      <span class=\"variable\">$curl_errno</span> = <span class=\"title function_ invoke__\">curl_errno</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\">      <span class=\"variable\">$curl_error</span> = <span class=\"title function_ invoke__\">curl_error</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$curl_errno</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;cURL Error (<span class=\"subst\">$curl_errno</span>): <span class=\"subst\">$curl_error</span>\\n&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Data received: <span class=\"subst\">$data</span>\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Server</span></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">sleep</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Done.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"本文连接：http-feilong-tech-2017-08-24-curlopt-timeout-ms\"><a href=\"#本文连接：http-feilong-tech-2017-08-24-curlopt-timeout-ms\" class=\"headerlink\" title=\"本文连接：http://feilong.tech/2017/08/24/curlopt_timeout_ms\"></a>本文连接：<a href=\"http://feilong.tech/2017/08/24/curlopt_timeout_ms\">http://feilong.tech/2017/08/24/curlopt_timeout_ms</a></h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\"><a href=\"#作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\" class=\"headerlink\" title=\"作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。\"></a>作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。</h4><h4 id=\"比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\"><a href=\"#比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\" class=\"headerlink\" title=\"比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。\"></a>比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。</h4><h5 id=\"最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\"><a href=\"#最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\" class=\"headerlink\" title=\"最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。\"></a>最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。</h5><p><em>curl可以通过设置变量 <code>CURLOPT_TIMEOUT_MS</code>或者 <code>CURLOPT_TIMEOUT</code>设置超时时间。</em></p>\n<blockquote>\n<p>CURLOPT_TIMEOUT_MS 以毫秒计算超时时间 CURLOPT_TIMEOUT 以秒计算超时时间</p>\n</blockquote>\n<p>查了手册关于<code>timeout</code>的设置</p>\n<p>变量</p>\n<p>说明</p>\n<p>CURLOPT_TIMEOUT</p>\n<p>允许 cURL 函数执行的最长秒数。</p>\n<p>CURLOPT_TIMEOUT_MS</p>\n<p>设置cURL允许执行的最长毫秒数。 如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。</p>\n<h5 id=\"假设我们想要设置超时时间是500毫秒，那么直接设置-curl-setopt-ch-CURLOPT-TIMEOUT-MS-500\"><a href=\"#假设我们想要设置超时时间是500毫秒，那么直接设置-curl-setopt-ch-CURLOPT-TIMEOUT-MS-500\" class=\"headerlink\" title=\"假设我们想要设置超时时间是500毫秒，那么直接设置 curl_setopt($ch, CURLOPT_TIMEOUT_MS, 500);\"></a>假设我们想要设置超时时间是500毫秒，那么直接设置 curl_setopt($ch, CURLOPT_TIMEOUT_MS, 500);</h5><p>但是，测试的时候，发现，设置了500ms，curl直接返回了false，并且打印了下错误信息：<code>cURL Error (28): Timeout was reached</code> 可能和libcurl 的编译有关系，我继续查了下php手册，发现了如下的内容</p>\n<blockquote>\n<p>If you want cURL to timeout in less than one second, you can use CURLOPT_TIMEOUT_MS, although there is a bug&#x2F;“feature” on “Unix-like systems” that causes libcurl to timeout immediately if the value is &lt; 1000 ms with the error “cURL Error (28): Timeout was reached”. The explanation for this behavior is: “If libcurl is built to use the standard system name resolver, that portion of the transfer will still use full-second resolution for timeouts with a minimum timeout allowed of one second.”</p>\n<p>What this means to PHP developers is “You can use this function without testing it first, because you can’t tell if libcurl is using the standard system name resolver (but you can be pretty sure it is)”</p>\n<p>The problem is that on (LiU)nix, when libcurl uses the standard name resolver, a SIGALRM is raised during name resolution which libcurl thinks is the timeout alarm.</p>\n<p>The solution is to disable signals using CURLOPT_NOSIGNAL. Here’s an example script that requests itself causing a 10-second delay so you can test timeouts:</p>\n</blockquote>\n<p>内容的大概意思是：libcurl使用的是标准名称的解析器，内部传输信息号部分，依然是使用秒来计算是否超时，并且最少时间是1秒，如果想要设置超时时间小于1秒，那么直接通过<code>CURLOPT_NOSIGNAL</code>禁用信号即可。即：<code>curl_setopt($ch, CURLOPT_NOSIGNAL, 1);</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#demo code</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;foo&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Client</span></span><br><span class=\"line\">      <span class=\"variable\">$ch</span> = <span class=\"title function_ invoke__\">curl_init</span>(<span class=\"string\">&#x27;http://localhost/test/test_timeout.php?foo=bar&#x27;</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_NOSIGNAL, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_TIMEOUT_MS, <span class=\"number\">200</span>);</span><br><span class=\"line\">      <span class=\"variable\">$data</span> = <span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\">      <span class=\"variable\">$curl_errno</span> = <span class=\"title function_ invoke__\">curl_errno</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\">      <span class=\"variable\">$curl_error</span> = <span class=\"title function_ invoke__\">curl_error</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\">      <span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$curl_errno</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;cURL Error (<span class=\"subst\">$curl_errno</span>): <span class=\"subst\">$curl_error</span>\\n&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Data received: <span class=\"subst\">$data</span>\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Server</span></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">sleep</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Done.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"本文连接：http-feilong-tech-2017-08-24-curlopt-timeout-ms\"><a href=\"#本文连接：http-feilong-tech-2017-08-24-curlopt-timeout-ms\" class=\"headerlink\" title=\"本文连接：http://feilong.tech/2017/08/24/curlopt_timeout_ms\"></a>本文连接：<a href=\"http://feilong.tech/2017/08/24/curlopt_timeout_ms\">http://feilong.tech/2017/08/24/curlopt_timeout_ms</a></h4>"},{"title":"使用VS Code调试PHP7的源码","id":"429","date":"2019-02-24T12:40:53.000Z","_content":"\n我是PHP的爱好者，大一下半年开始接触PHP到现在，已经有了几个年头，但是我不敢说自己“精通PHP”，因为我连PHP内核源码都还没看全，现在顶多停留在“熟悉”的层面。\n\n我2018年买了一本《PHP7的内核剖析》，但是只是看了一些罢了。因为里面很多原理不太明白。如果真的要读懂一本书，尤其是技术相关，一定要手把手操作才能真正的理解！！！\n\n但是自从装了几次PHP源码失败之后，就没有再尝试下去的决心了。书，也就仍在了一边，没有再看。\n\n但是上次一个朋友分享了一篇文章《[程序员装逼被怼，决定用面试证明自己，结果......](https://mp.weixin.qq.com/s/SaT9jIxfnOw7htKoS8hedg) 》，还是多少有一些小触动的。\n\n所以，就再次拿起来书本，开始“啃骨头”。\n\n## 1.安装PHP7源码\n\n源码下载容易安装难！\n\n自从上次几次失败之后，也多少总结一点小经验。\n\n```bash\n$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm #生成Makefile\n```\n\n如果没有configure命令，需要使用buildconf生成一下\n\n```bash\n$ ./buildconf --force \n```\n\n出现了报错\n\n```bash\nchecking for libiconv... no\nconfigure: error: Please specify the install prefix of iconv with --with-iconv=<DIR></pre>\n<pre class=\"prettyprint\">$ brew install libiconv\n$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm --with-iconv=/usr/local/opt/libiconv\n...\nGenerating files\nconfigure: creating ./config.status\ncreating main/internal_functions.c\ncreating main/internal_functions_cli.c\n+--------------------------------------------------------------------+\n License:                                                           \n This software is subject to the PHP License, available in this     \n distribution in the file LICENSE.  By continuing this installation \n process, you are bound by the terms of this license agreement.     \n If you do not agree with the terms of this license, you must abort \n the installation process at this point.                            \n+--------------------------------------------------------------------+\n\nThank you for using PHP.\n\nconfig.status: creating php7.spec\nconfig.status: creating main/build-defs.h\nconfig.status: creating scripts/phpize\nconfig.status: creating scripts/man1/phpize.1\nconfig.status: creating scripts/php-config\nconfig.status: creating scripts/man1/php-config.1\nconfig.status: creating sapi/cli/php.1\nconfig.status: creating sapi/fpm/php-fpm.conf\nconfig.status: creating sapi/fpm/www.conf\nconfig.status: creating sapi/fpm/init.d.php-fpm\nconfig.status: creating sapi/fpm/php-fpm.service\nconfig.status: creating sapi/fpm/php-fpm.8\nconfig.status: creating sapi/fpm/status.html\nconfig.status: creating sapi/cgi/php-cgi.1\nconfig.status: creating ext/phar/phar.1\nconfig.status: creating ext/phar/phar.phar.1\nconfig.status: creating main/php_config.h\nconfig.status: executing default commands\n$ make #编译\n$ make install #安装</pre>\n```\n\n## 2\\. 配置lnmp\n\n配置lnmp的步骤就不再多说了\n\n## 3\\. 更改www.conf\n\n安装源码之后的bin文件，会都保存到/usr/local/php7文件夹下面，PHP-fpm的配置文件也是一样。\n\n```bash\n$ ll\ntotal 472\n-rwxrwxrwx  1 root  wheel   1271 Feb 21 22:44 pear.conf\n-rwxrwxrwx  1 root  wheel   4465 Feb 21 23:25 php-fpm.conf\n-rwxrwxrwx  1 root  wheel   4465 Feb 21 22:44 php-fpm.conf.default\ndrwxrwxrwx  4 root  wheel    128 Feb 24 00:27 php-fpm.d\n-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:07 php.ini\n-rwxrwxrwx@ 1 root  wheel  69692 Feb 22 08:06 php.ini-development\n-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:06 php.ini-production\n```\n\n我们是想要通过web的方式，调试源码的运行过程。\n\n大家知道，PHP-fpm是基于多进程的，我们在使用VS Code进行调试的时候，会需要选择挂起的进程号（下面会后响应的步骤说明）。所以，我们最好能够只有一个php-fpm的子进程，这样，就能确保选择的进程，能正常停顿到断点位置。\n\n```bash\n....\n\n;pm = dynamic\npm = static\n\n.....\n\npm.max_children = 1\n```\n\n## 4\\. 配置调试文件\n\n![](/uploads/2019/02/WeChat66016f8d6aa495d141d88a8f1af530fe.png)\n\n添加配置，使用attach的方式\n\n```json\n{\n    // 使用 IntelliSense 了解相关属性。 \n    // 悬停以查看现有属性的描述。\n    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [{\n            \"name\": \"(lldb) Attach\",\n            \"type\": \"cppdbg\",\n            \"request\": \"attach\",\n            \"program\": \"/usr/local/php7/sbin/php-fpm\",\n            \"processId\": \"${command:pickProcess}\",\n            \"MIMode\": \"lldb\"\n        }\n    ]\n}\n```\n\n## 5\\. 运行测试\n\n我就以数组的PHP代码文件为例，进行测试。\n\n在nginx的项目目录里面创建一个测试文件。比如 a.php\n\n```bash\n<?php\n$arr = [1,2,3,4,5];\narray_push($arr, 10, 20);\nvar_dump($arr);\n```\n\n我们在源码文件 ext/standard/array.c里面加个断点\n\n![](/uploads/2019/02/WX20190224-203146@2x.png)\n\n开始进行调试\n\n![](/uploads/2019/02/WX20190224-203242@2x.png)\n\n我们再选择进程号的时候，需要选择大的进程号，因为小进程号主要是php-fpm主进程，主进程是用来管理子进程的，子进程才是正在进行执行代码的进程\n\n然后访问a.php文件\n\n[http://localhost/a.php](http://localhost/a.php)\n\n![](/uploads/2019/02/WX20190224-203334@2x.png)\n\n侧边栏显示了调用的堆栈信息，以及传入的参数信息。","source":"_posts/debug-php7.md","raw":"---\ntitle: 使用VS Code调试PHP7的源码\ntags:\n  - PHP\n  - PHP7\n  - PHP源码\nid: '429'\ncategories:\n  - - PHP\n  - - PHP源码\ndate: 2019-02-24 20:40:53\n---\n\n我是PHP的爱好者，大一下半年开始接触PHP到现在，已经有了几个年头，但是我不敢说自己“精通PHP”，因为我连PHP内核源码都还没看全，现在顶多停留在“熟悉”的层面。\n\n我2018年买了一本《PHP7的内核剖析》，但是只是看了一些罢了。因为里面很多原理不太明白。如果真的要读懂一本书，尤其是技术相关，一定要手把手操作才能真正的理解！！！\n\n但是自从装了几次PHP源码失败之后，就没有再尝试下去的决心了。书，也就仍在了一边，没有再看。\n\n但是上次一个朋友分享了一篇文章《[程序员装逼被怼，决定用面试证明自己，结果......](https://mp.weixin.qq.com/s/SaT9jIxfnOw7htKoS8hedg) 》，还是多少有一些小触动的。\n\n所以，就再次拿起来书本，开始“啃骨头”。\n\n## 1.安装PHP7源码\n\n源码下载容易安装难！\n\n自从上次几次失败之后，也多少总结一点小经验。\n\n```bash\n$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm #生成Makefile\n```\n\n如果没有configure命令，需要使用buildconf生成一下\n\n```bash\n$ ./buildconf --force \n```\n\n出现了报错\n\n```bash\nchecking for libiconv... no\nconfigure: error: Please specify the install prefix of iconv with --with-iconv=<DIR></pre>\n<pre class=\"prettyprint\">$ brew install libiconv\n$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm --with-iconv=/usr/local/opt/libiconv\n...\nGenerating files\nconfigure: creating ./config.status\ncreating main/internal_functions.c\ncreating main/internal_functions_cli.c\n+--------------------------------------------------------------------+\n License:                                                           \n This software is subject to the PHP License, available in this     \n distribution in the file LICENSE.  By continuing this installation \n process, you are bound by the terms of this license agreement.     \n If you do not agree with the terms of this license, you must abort \n the installation process at this point.                            \n+--------------------------------------------------------------------+\n\nThank you for using PHP.\n\nconfig.status: creating php7.spec\nconfig.status: creating main/build-defs.h\nconfig.status: creating scripts/phpize\nconfig.status: creating scripts/man1/phpize.1\nconfig.status: creating scripts/php-config\nconfig.status: creating scripts/man1/php-config.1\nconfig.status: creating sapi/cli/php.1\nconfig.status: creating sapi/fpm/php-fpm.conf\nconfig.status: creating sapi/fpm/www.conf\nconfig.status: creating sapi/fpm/init.d.php-fpm\nconfig.status: creating sapi/fpm/php-fpm.service\nconfig.status: creating sapi/fpm/php-fpm.8\nconfig.status: creating sapi/fpm/status.html\nconfig.status: creating sapi/cgi/php-cgi.1\nconfig.status: creating ext/phar/phar.1\nconfig.status: creating ext/phar/phar.phar.1\nconfig.status: creating main/php_config.h\nconfig.status: executing default commands\n$ make #编译\n$ make install #安装</pre>\n```\n\n## 2\\. 配置lnmp\n\n配置lnmp的步骤就不再多说了\n\n## 3\\. 更改www.conf\n\n安装源码之后的bin文件，会都保存到/usr/local/php7文件夹下面，PHP-fpm的配置文件也是一样。\n\n```bash\n$ ll\ntotal 472\n-rwxrwxrwx  1 root  wheel   1271 Feb 21 22:44 pear.conf\n-rwxrwxrwx  1 root  wheel   4465 Feb 21 23:25 php-fpm.conf\n-rwxrwxrwx  1 root  wheel   4465 Feb 21 22:44 php-fpm.conf.default\ndrwxrwxrwx  4 root  wheel    128 Feb 24 00:27 php-fpm.d\n-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:07 php.ini\n-rwxrwxrwx@ 1 root  wheel  69692 Feb 22 08:06 php.ini-development\n-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:06 php.ini-production\n```\n\n我们是想要通过web的方式，调试源码的运行过程。\n\n大家知道，PHP-fpm是基于多进程的，我们在使用VS Code进行调试的时候，会需要选择挂起的进程号（下面会后响应的步骤说明）。所以，我们最好能够只有一个php-fpm的子进程，这样，就能确保选择的进程，能正常停顿到断点位置。\n\n```bash\n....\n\n;pm = dynamic\npm = static\n\n.....\n\npm.max_children = 1\n```\n\n## 4\\. 配置调试文件\n\n![](/uploads/2019/02/WeChat66016f8d6aa495d141d88a8f1af530fe.png)\n\n添加配置，使用attach的方式\n\n```json\n{\n    // 使用 IntelliSense 了解相关属性。 \n    // 悬停以查看现有属性的描述。\n    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [{\n            \"name\": \"(lldb) Attach\",\n            \"type\": \"cppdbg\",\n            \"request\": \"attach\",\n            \"program\": \"/usr/local/php7/sbin/php-fpm\",\n            \"processId\": \"${command:pickProcess}\",\n            \"MIMode\": \"lldb\"\n        }\n    ]\n}\n```\n\n## 5\\. 运行测试\n\n我就以数组的PHP代码文件为例，进行测试。\n\n在nginx的项目目录里面创建一个测试文件。比如 a.php\n\n```bash\n<?php\n$arr = [1,2,3,4,5];\narray_push($arr, 10, 20);\nvar_dump($arr);\n```\n\n我们在源码文件 ext/standard/array.c里面加个断点\n\n![](/uploads/2019/02/WX20190224-203146@2x.png)\n\n开始进行调试\n\n![](/uploads/2019/02/WX20190224-203242@2x.png)\n\n我们再选择进程号的时候，需要选择大的进程号，因为小进程号主要是php-fpm主进程，主进程是用来管理子进程的，子进程才是正在进行执行代码的进程\n\n然后访问a.php文件\n\n[http://localhost/a.php](http://localhost/a.php)\n\n![](/uploads/2019/02/WX20190224-203334@2x.png)\n\n侧边栏显示了调用的堆栈信息，以及传入的参数信息。","slug":"debug-php7","published":1,"updated":"2022-03-13T01:17:12.527Z","_id":"cl0oi8meb000o417t256whj3h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我是PHP的爱好者，大一下半年开始接触PHP到现在，已经有了几个年头，但是我不敢说自己“精通PHP”，因为我连PHP内核源码都还没看全，现在顶多停留在“熟悉”的层面。</p>\n<p>我2018年买了一本《PHP7的内核剖析》，但是只是看了一些罢了。因为里面很多原理不太明白。如果真的要读懂一本书，尤其是技术相关，一定要手把手操作才能真正的理解！！！</p>\n<p>但是自从装了几次PHP源码失败之后，就没有再尝试下去的决心了。书，也就仍在了一边，没有再看。</p>\n<p>但是上次一个朋友分享了一篇文章《<a href=\"https://mp.weixin.qq.com/s/SaT9jIxfnOw7htKoS8hedg\">程序员装逼被怼，决定用面试证明自己，结果……</a> 》，还是多少有一些小触动的。</p>\n<p>所以，就再次拿起来书本，开始“啃骨头”。</p>\n<h2 id=\"1-安装PHP7源码\"><a href=\"#1-安装PHP7源码\" class=\"headerlink\" title=\"1.安装PHP7源码\"></a>1.安装PHP7源码</h2><p>源码下载容易安装难！</p>\n<p>自从上次几次失败之后，也多少总结一点小经验。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm <span class=\"comment\">#生成Makefile</span></span><br></pre></td></tr></table></figure>\n\n<p>如果没有configure命令，需要使用buildconf生成一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./buildconf --force </span><br></pre></td></tr></table></figure>\n\n<p>出现了报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> libiconv... no</span><br><span class=\"line\">configure: error: Please specify the install prefix of iconv with --with-iconv=&lt;DIR&gt;&lt;/pre&gt;</span><br><span class=\"line\">&lt;pre class=<span class=\"string\">&quot;prettyprint&quot;</span>&gt;$ brew install libiconv</span><br><span class=\"line\">$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm --with-iconv=/usr/local/opt/libiconv</span><br><span class=\"line\">...</span><br><span class=\"line\">Generating files</span><br><span class=\"line\">configure: creating ./config.status</span><br><span class=\"line\">creating main/internal_functions.c</span><br><span class=\"line\">creating main/internal_functions_cli.c</span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\"> License:                                                           </span><br><span class=\"line\"> This software is subject to the PHP License, available <span class=\"keyword\">in</span> this     </span><br><span class=\"line\"> distribution <span class=\"keyword\">in</span> the file LICENSE.  By continuing this installation </span><br><span class=\"line\"> process, you are bound by the terms of this license agreement.     </span><br><span class=\"line\"> If you <span class=\"keyword\">do</span> not agree with the terms of this license, you must abort </span><br><span class=\"line\"> the installation process at this point.                            </span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">Thank you <span class=\"keyword\">for</span> using PHP.</span><br><span class=\"line\"></span><br><span class=\"line\">config.status: creating php7.spec</span><br><span class=\"line\">config.status: creating main/build-defs.h</span><br><span class=\"line\">config.status: creating scripts/phpize</span><br><span class=\"line\">config.status: creating scripts/man1/phpize.1</span><br><span class=\"line\">config.status: creating scripts/php-config</span><br><span class=\"line\">config.status: creating scripts/man1/php-config.1</span><br><span class=\"line\">config.status: creating sapi/cli/php.1</span><br><span class=\"line\">config.status: creating sapi/fpm/php-fpm.conf</span><br><span class=\"line\">config.status: creating sapi/fpm/www.conf</span><br><span class=\"line\">config.status: creating sapi/fpm/init.d.php-fpm</span><br><span class=\"line\">config.status: creating sapi/fpm/php-fpm.service</span><br><span class=\"line\">config.status: creating sapi/fpm/php-fpm.8</span><br><span class=\"line\">config.status: creating sapi/fpm/status.html</span><br><span class=\"line\">config.status: creating sapi/cgi/php-cgi.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.phar.1</span><br><span class=\"line\">config.status: creating main/php_config.h</span><br><span class=\"line\">config.status: executing default commands</span><br><span class=\"line\">$ make <span class=\"comment\">#编译</span></span><br><span class=\"line\">$ make install <span class=\"comment\">#安装&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置lnmp\"><a href=\"#2-配置lnmp\" class=\"headerlink\" title=\"2. 配置lnmp\"></a>2. 配置lnmp</h2><p>配置lnmp的步骤就不再多说了</p>\n<h2 id=\"3-更改www-conf\"><a href=\"#3-更改www-conf\" class=\"headerlink\" title=\"3. 更改www.conf\"></a>3. 更改<a href=\"http://www.conf/\">www.conf</a></h2><p>安装源码之后的bin文件，会都保存到&#x2F;usr&#x2F;local&#x2F;php7文件夹下面，PHP-fpm的配置文件也是一样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll</span><br><span class=\"line\">total 472</span><br><span class=\"line\">-rwxrwxrwx  1 root  wheel   1271 Feb 21 22:44 pear.conf</span><br><span class=\"line\">-rwxrwxrwx  1 root  wheel   4465 Feb 21 23:25 php-fpm.conf</span><br><span class=\"line\">-rwxrwxrwx  1 root  wheel   4465 Feb 21 22:44 php-fpm.conf.default</span><br><span class=\"line\">drwxrwxrwx  4 root  wheel    128 Feb 24 00:27 php-fpm.d</span><br><span class=\"line\">-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:07 php.ini</span><br><span class=\"line\">-rwxrwxrwx@ 1 root  wheel  69692 Feb 22 08:06 php.ini-development</span><br><span class=\"line\">-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:06 php.ini-production</span><br></pre></td></tr></table></figure>\n\n<p>我们是想要通过web的方式，调试源码的运行过程。</p>\n<p>大家知道，PHP-fpm是基于多进程的，我们在使用VS Code进行调试的时候，会需要选择挂起的进程号（下面会后响应的步骤说明）。所以，我们最好能够只有一个php-fpm的子进程，这样，就能确保选择的进程，能正常停顿到断点位置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">;pm = dynamic</span><br><span class=\"line\">pm = static</span><br><span class=\"line\"></span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">pm.max_children = 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-配置调试文件\"><a href=\"#4-配置调试文件\" class=\"headerlink\" title=\"4. 配置调试文件\"></a>4. 配置调试文件</h2><p><img src=\"/uploads/2019/02/WeChat66016f8d6aa495d141d88a8f1af530fe.png\"></p>\n<p>添加配置，使用attach的方式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class=\"line\">    <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">    <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;(lldb) Attach&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;attach&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/local/php7/sbin/php-fpm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;processId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;command:pickProcess&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lldb&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-运行测试\"><a href=\"#5-运行测试\" class=\"headerlink\" title=\"5. 运行测试\"></a>5. 运行测试</h2><p>我就以数组的PHP代码文件为例，进行测试。</p>\n<p>在nginx的项目目录里面创建一个测试文件。比如 a.php</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"><span class=\"variable\">$arr</span> = [1,2,3,4,5];</span><br><span class=\"line\">array_push(<span class=\"variable\">$arr</span>, 10, 20);</span><br><span class=\"line\">var_dump(<span class=\"variable\">$arr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们在源码文件 ext&#x2F;standard&#x2F;array.c里面加个断点</p>\n<p><img src=\"/uploads/2019/02/WX20190224-203146@2x.png\"></p>\n<p>开始进行调试</p>\n<p><img src=\"/uploads/2019/02/WX20190224-203242@2x.png\"></p>\n<p>我们再选择进程号的时候，需要选择大的进程号，因为小进程号主要是php-fpm主进程，主进程是用来管理子进程的，子进程才是正在进行执行代码的进程</p>\n<p>然后访问a.php文件</p>\n<p><a href=\"http://localhost/a.php\">http://localhost/a.php</a></p>\n<p><img src=\"/uploads/2019/02/WX20190224-203334@2x.png\"></p>\n<p>侧边栏显示了调用的堆栈信息，以及传入的参数信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是PHP的爱好者，大一下半年开始接触PHP到现在，已经有了几个年头，但是我不敢说自己“精通PHP”，因为我连PHP内核源码都还没看全，现在顶多停留在“熟悉”的层面。</p>\n<p>我2018年买了一本《PHP7的内核剖析》，但是只是看了一些罢了。因为里面很多原理不太明白。如果真的要读懂一本书，尤其是技术相关，一定要手把手操作才能真正的理解！！！</p>\n<p>但是自从装了几次PHP源码失败之后，就没有再尝试下去的决心了。书，也就仍在了一边，没有再看。</p>\n<p>但是上次一个朋友分享了一篇文章《<a href=\"https://mp.weixin.qq.com/s/SaT9jIxfnOw7htKoS8hedg\">程序员装逼被怼，决定用面试证明自己，结果……</a> 》，还是多少有一些小触动的。</p>\n<p>所以，就再次拿起来书本，开始“啃骨头”。</p>\n<h2 id=\"1-安装PHP7源码\"><a href=\"#1-安装PHP7源码\" class=\"headerlink\" title=\"1.安装PHP7源码\"></a>1.安装PHP7源码</h2><p>源码下载容易安装难！</p>\n<p>自从上次几次失败之后，也多少总结一点小经验。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm <span class=\"comment\">#生成Makefile</span></span><br></pre></td></tr></table></figure>\n\n<p>如果没有configure命令，需要使用buildconf生成一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./buildconf --force </span><br></pre></td></tr></table></figure>\n\n<p>出现了报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> libiconv... no</span><br><span class=\"line\">configure: error: Please specify the install prefix of iconv with --with-iconv=&lt;DIR&gt;&lt;/pre&gt;</span><br><span class=\"line\">&lt;pre class=<span class=\"string\">&quot;prettyprint&quot;</span>&gt;$ brew install libiconv</span><br><span class=\"line\">$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm --with-iconv=/usr/local/opt/libiconv</span><br><span class=\"line\">...</span><br><span class=\"line\">Generating files</span><br><span class=\"line\">configure: creating ./config.status</span><br><span class=\"line\">creating main/internal_functions.c</span><br><span class=\"line\">creating main/internal_functions_cli.c</span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\"> License:                                                           </span><br><span class=\"line\"> This software is subject to the PHP License, available <span class=\"keyword\">in</span> this     </span><br><span class=\"line\"> distribution <span class=\"keyword\">in</span> the file LICENSE.  By continuing this installation </span><br><span class=\"line\"> process, you are bound by the terms of this license agreement.     </span><br><span class=\"line\"> If you <span class=\"keyword\">do</span> not agree with the terms of this license, you must abort </span><br><span class=\"line\"> the installation process at this point.                            </span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">Thank you <span class=\"keyword\">for</span> using PHP.</span><br><span class=\"line\"></span><br><span class=\"line\">config.status: creating php7.spec</span><br><span class=\"line\">config.status: creating main/build-defs.h</span><br><span class=\"line\">config.status: creating scripts/phpize</span><br><span class=\"line\">config.status: creating scripts/man1/phpize.1</span><br><span class=\"line\">config.status: creating scripts/php-config</span><br><span class=\"line\">config.status: creating scripts/man1/php-config.1</span><br><span class=\"line\">config.status: creating sapi/cli/php.1</span><br><span class=\"line\">config.status: creating sapi/fpm/php-fpm.conf</span><br><span class=\"line\">config.status: creating sapi/fpm/www.conf</span><br><span class=\"line\">config.status: creating sapi/fpm/init.d.php-fpm</span><br><span class=\"line\">config.status: creating sapi/fpm/php-fpm.service</span><br><span class=\"line\">config.status: creating sapi/fpm/php-fpm.8</span><br><span class=\"line\">config.status: creating sapi/fpm/status.html</span><br><span class=\"line\">config.status: creating sapi/cgi/php-cgi.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.phar.1</span><br><span class=\"line\">config.status: creating main/php_config.h</span><br><span class=\"line\">config.status: executing default commands</span><br><span class=\"line\">$ make <span class=\"comment\">#编译</span></span><br><span class=\"line\">$ make install <span class=\"comment\">#安装&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置lnmp\"><a href=\"#2-配置lnmp\" class=\"headerlink\" title=\"2. 配置lnmp\"></a>2. 配置lnmp</h2><p>配置lnmp的步骤就不再多说了</p>\n<h2 id=\"3-更改www-conf\"><a href=\"#3-更改www-conf\" class=\"headerlink\" title=\"3. 更改www.conf\"></a>3. 更改<a href=\"http://www.conf/\">www.conf</a></h2><p>安装源码之后的bin文件，会都保存到&#x2F;usr&#x2F;local&#x2F;php7文件夹下面，PHP-fpm的配置文件也是一样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll</span><br><span class=\"line\">total 472</span><br><span class=\"line\">-rwxrwxrwx  1 root  wheel   1271 Feb 21 22:44 pear.conf</span><br><span class=\"line\">-rwxrwxrwx  1 root  wheel   4465 Feb 21 23:25 php-fpm.conf</span><br><span class=\"line\">-rwxrwxrwx  1 root  wheel   4465 Feb 21 22:44 php-fpm.conf.default</span><br><span class=\"line\">drwxrwxrwx  4 root  wheel    128 Feb 24 00:27 php-fpm.d</span><br><span class=\"line\">-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:07 php.ini</span><br><span class=\"line\">-rwxrwxrwx@ 1 root  wheel  69692 Feb 22 08:06 php.ini-development</span><br><span class=\"line\">-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:06 php.ini-production</span><br></pre></td></tr></table></figure>\n\n<p>我们是想要通过web的方式，调试源码的运行过程。</p>\n<p>大家知道，PHP-fpm是基于多进程的，我们在使用VS Code进行调试的时候，会需要选择挂起的进程号（下面会后响应的步骤说明）。所以，我们最好能够只有一个php-fpm的子进程，这样，就能确保选择的进程，能正常停顿到断点位置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">;pm = dynamic</span><br><span class=\"line\">pm = static</span><br><span class=\"line\"></span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">pm.max_children = 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-配置调试文件\"><a href=\"#4-配置调试文件\" class=\"headerlink\" title=\"4. 配置调试文件\"></a>4. 配置调试文件</h2><p><img src=\"/uploads/2019/02/WeChat66016f8d6aa495d141d88a8f1af530fe.png\"></p>\n<p>添加配置，使用attach的方式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class=\"line\">    <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">    <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;(lldb) Attach&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;attach&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/local/php7/sbin/php-fpm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;processId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;command:pickProcess&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lldb&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-运行测试\"><a href=\"#5-运行测试\" class=\"headerlink\" title=\"5. 运行测试\"></a>5. 运行测试</h2><p>我就以数组的PHP代码文件为例，进行测试。</p>\n<p>在nginx的项目目录里面创建一个测试文件。比如 a.php</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"><span class=\"variable\">$arr</span> = [1,2,3,4,5];</span><br><span class=\"line\">array_push(<span class=\"variable\">$arr</span>, 10, 20);</span><br><span class=\"line\">var_dump(<span class=\"variable\">$arr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们在源码文件 ext&#x2F;standard&#x2F;array.c里面加个断点</p>\n<p><img src=\"/uploads/2019/02/WX20190224-203146@2x.png\"></p>\n<p>开始进行调试</p>\n<p><img src=\"/uploads/2019/02/WX20190224-203242@2x.png\"></p>\n<p>我们再选择进程号的时候，需要选择大的进程号，因为小进程号主要是php-fpm主进程，主进程是用来管理子进程的，子进程才是正在进行执行代码的进程</p>\n<p>然后访问a.php文件</p>\n<p><a href=\"http://localhost/a.php\">http://localhost/a.php</a></p>\n<p><img src=\"/uploads/2019/02/WX20190224-203334@2x.png\"></p>\n<p>侧边栏显示了调用的堆栈信息，以及传入的参数信息。</p>\n"},{"title":"docker之控制组","id":"361","date":"2018-09-12T10:55:50.000Z","_content":"\n### 1\\. 作用\n\n控制度(CGroups) 其实是Linux内核的一个特性，主要是用来控制共享资源，比如限制内存、CPU的的一些使用等。容器使用的CPU、内存等硬件信息，其实就是使用的宿主机上面的硬件设备，所以合理的分配资源，也是为了避免不同容器之间、容器和宿主机进程之间，产生资源的抢占。\n\n## 2\\. 容器控制组\n\n### 2.1 资源限制\n\n比如我们要限制容器的使用内存，可以在run的时候加上--memory的参数\n\n```bash\nfeilongdeMBP:~ feilong$ docker run -it --rm --name test --memory 10m busybox\n```\n\n然后新打开一个窗口，可以实时查看下容器的内存使用情况\n\n![](/uploads/2018/09/WX20180912-000121.png)\n\nTIP:\n\n使用docker-compose的时候需要注意一下，设置内存限制的参数是mem\\_limit，但是在docker-compose的3.x版本之后，不支持这个参数，所以在写docker-compose.yaml 的时候，会出现 Unsupported config option for xxxx: 'mem\\_limit' 的错误信息，所以需要指定 version: '2'\n\n### 2.2 优先级\n\ndocker run的时候支持使用-c 或者 --cpu-shares 用来指定容器使用CPU的加权值。如果不指定，那么就是使用的是默认值，一般是1024。\n\n\\-c 或者 --cpu-shares并不能指定容器能够使用多少CPU或者多少GHz，而是一个加权值。有点类似nginx的负载均衡配置。\n\n这个配置在少量容器的时候，并没有太大的实际意义。只有CPU资源比较紧缺的时候，这个配置参数才会展现出来。\n\n比如，一个容器的加权值是100，另一个加权值是50，那么加权值为100的容器，获取CPU时间片的概率就是另一个的2倍\n\n如果只有一个容器，那么CPU时间片肯定都会给这个容器使用。\n\n创建一个容器，安装stress软件，然后开启10个进程，看下CPU占用情况\n\n```bash\nlocalhost:marvin feilong$ docker run -itd --name cpu512  --cpu-shares 512 ubuntu\nlocalhost:marvin feilong$ docker exec -it cpu512\n# apt update\n# apt install stress\n# stress -c 10\nstress: info: [250] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd\n```\n\n打开一个新窗口，然后登录到这个容器，使用top查看下CPU占用情况\n\n```bash\nlocalhost:~ feilong$ docker exec -it cpu512 sh\n```\n\n![](/uploads/2018/09/WX20180912-185154.png)\n\n可以从截图看到cpu大概占用了3.3%左右\n\n新打开另一个窗口，创建新容器，一样的操作，安装stress，然后开10个进程，查看下CPU占用情况\n\n```bash\nlocalhost:~ feilong$ docker run -itd --name cpu1024  --cpu-shares 1024 ubuntu\n# apt update\n# apt install stress\n# stress -c 10\nstress: info: [241] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd\n```\n\n新开窗口，进入cpu1024容器，然后使用top查看CPU占用情况\n\n![Alt text](/uploads/2018/09/WX20180912-185440.png)\n\n可以看出CPU占用情况大概是6.6%左右，基本上是cpu是cpu512的两倍。\n\n### 2.3 资源审计\n\n资源审计主要是做一些审计操作，用来统计系统实际上把多少资源用到适合的目的上，可以使用cpuacct子系统记录某个进程组使用的CPU时间\n\n### 2.4 隔离\n\n为组隔离命名空间，这样一个组不会看到另一个组的进程、网络连接和文件系统\n\n### 2.5 控制\n\n挂起、恢复和重启动等操作","source":"_posts/docker-cgroups.md","raw":"---\ntitle: docker之控制组\ntags:\n  - docker\nid: '361'\ncategories:\n  - - Docker\ndate: 2018-09-12 18:55:50\n---\n\n### 1\\. 作用\n\n控制度(CGroups) 其实是Linux内核的一个特性，主要是用来控制共享资源，比如限制内存、CPU的的一些使用等。容器使用的CPU、内存等硬件信息，其实就是使用的宿主机上面的硬件设备，所以合理的分配资源，也是为了避免不同容器之间、容器和宿主机进程之间，产生资源的抢占。\n\n## 2\\. 容器控制组\n\n### 2.1 资源限制\n\n比如我们要限制容器的使用内存，可以在run的时候加上--memory的参数\n\n```bash\nfeilongdeMBP:~ feilong$ docker run -it --rm --name test --memory 10m busybox\n```\n\n然后新打开一个窗口，可以实时查看下容器的内存使用情况\n\n![](/uploads/2018/09/WX20180912-000121.png)\n\nTIP:\n\n使用docker-compose的时候需要注意一下，设置内存限制的参数是mem\\_limit，但是在docker-compose的3.x版本之后，不支持这个参数，所以在写docker-compose.yaml 的时候，会出现 Unsupported config option for xxxx: 'mem\\_limit' 的错误信息，所以需要指定 version: '2'\n\n### 2.2 优先级\n\ndocker run的时候支持使用-c 或者 --cpu-shares 用来指定容器使用CPU的加权值。如果不指定，那么就是使用的是默认值，一般是1024。\n\n\\-c 或者 --cpu-shares并不能指定容器能够使用多少CPU或者多少GHz，而是一个加权值。有点类似nginx的负载均衡配置。\n\n这个配置在少量容器的时候，并没有太大的实际意义。只有CPU资源比较紧缺的时候，这个配置参数才会展现出来。\n\n比如，一个容器的加权值是100，另一个加权值是50，那么加权值为100的容器，获取CPU时间片的概率就是另一个的2倍\n\n如果只有一个容器，那么CPU时间片肯定都会给这个容器使用。\n\n创建一个容器，安装stress软件，然后开启10个进程，看下CPU占用情况\n\n```bash\nlocalhost:marvin feilong$ docker run -itd --name cpu512  --cpu-shares 512 ubuntu\nlocalhost:marvin feilong$ docker exec -it cpu512\n# apt update\n# apt install stress\n# stress -c 10\nstress: info: [250] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd\n```\n\n打开一个新窗口，然后登录到这个容器，使用top查看下CPU占用情况\n\n```bash\nlocalhost:~ feilong$ docker exec -it cpu512 sh\n```\n\n![](/uploads/2018/09/WX20180912-185154.png)\n\n可以从截图看到cpu大概占用了3.3%左右\n\n新打开另一个窗口，创建新容器，一样的操作，安装stress，然后开10个进程，查看下CPU占用情况\n\n```bash\nlocalhost:~ feilong$ docker run -itd --name cpu1024  --cpu-shares 1024 ubuntu\n# apt update\n# apt install stress\n# stress -c 10\nstress: info: [241] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd\n```\n\n新开窗口，进入cpu1024容器，然后使用top查看CPU占用情况\n\n![Alt text](/uploads/2018/09/WX20180912-185440.png)\n\n可以看出CPU占用情况大概是6.6%左右，基本上是cpu是cpu512的两倍。\n\n### 2.3 资源审计\n\n资源审计主要是做一些审计操作，用来统计系统实际上把多少资源用到适合的目的上，可以使用cpuacct子系统记录某个进程组使用的CPU时间\n\n### 2.4 隔离\n\n为组隔离命名空间，这样一个组不会看到另一个组的进程、网络连接和文件系统\n\n### 2.5 控制\n\n挂起、恢复和重启动等操作","slug":"docker-cgroups","published":1,"updated":"2022-03-13T01:17:12.409Z","_id":"cl0oi8mef000q417tf39h0c0g","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1. 作用\"></a>1. 作用</h3><p>控制度(CGroups) 其实是Linux内核的一个特性，主要是用来控制共享资源，比如限制内存、CPU的的一些使用等。容器使用的CPU、内存等硬件信息，其实就是使用的宿主机上面的硬件设备，所以合理的分配资源，也是为了避免不同容器之间、容器和宿主机进程之间，产生资源的抢占。</p>\n<h2 id=\"2-容器控制组\"><a href=\"#2-容器控制组\" class=\"headerlink\" title=\"2. 容器控制组\"></a>2. 容器控制组</h2><h3 id=\"2-1-资源限制\"><a href=\"#2-1-资源限制\" class=\"headerlink\" title=\"2.1 资源限制\"></a>2.1 资源限制</h3><p>比如我们要限制容器的使用内存，可以在run的时候加上–memory的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ docker run -it --<span class=\"built_in\">rm</span> --name <span class=\"built_in\">test</span> --memory 10m busybox</span><br></pre></td></tr></table></figure>\n\n<p>然后新打开一个窗口，可以实时查看下容器的内存使用情况</p>\n<p><img src=\"/uploads/2018/09/WX20180912-000121.png\"></p>\n<p>TIP:</p>\n<p>使用docker-compose的时候需要注意一下，设置内存限制的参数是mem_limit，但是在docker-compose的3.x版本之后，不支持这个参数，所以在写docker-compose.yaml 的时候，会出现 Unsupported config option for xxxx: ‘mem_limit’ 的错误信息，所以需要指定 version: ‘2’</p>\n<h3 id=\"2-2-优先级\"><a href=\"#2-2-优先级\" class=\"headerlink\" title=\"2.2 优先级\"></a>2.2 优先级</h3><p>docker run的时候支持使用-c 或者 –cpu-shares 用来指定容器使用CPU的加权值。如果不指定，那么就是使用的是默认值，一般是1024。</p>\n<p>-c 或者 –cpu-shares并不能指定容器能够使用多少CPU或者多少GHz，而是一个加权值。有点类似nginx的负载均衡配置。</p>\n<p>这个配置在少量容器的时候，并没有太大的实际意义。只有CPU资源比较紧缺的时候，这个配置参数才会展现出来。</p>\n<p>比如，一个容器的加权值是100，另一个加权值是50，那么加权值为100的容器，获取CPU时间片的概率就是另一个的2倍</p>\n<p>如果只有一个容器，那么CPU时间片肯定都会给这个容器使用。</p>\n<p>创建一个容器，安装stress软件，然后开启10个进程，看下CPU占用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:marvin feilong$ docker run -itd --name cpu512  --cpu-shares 512 ubuntu</span><br><span class=\"line\">localhost:marvin feilong$ docker <span class=\"built_in\">exec</span> -it cpu512</span><br><span class=\"line\"><span class=\"comment\"># apt update</span></span><br><span class=\"line\"><span class=\"comment\"># apt install stress</span></span><br><span class=\"line\"><span class=\"comment\"># stress -c 10</span></span><br><span class=\"line\">stress: info: [250] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure>\n\n<p>打开一个新窗口，然后登录到这个容器，使用top查看下CPU占用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker <span class=\"built_in\">exec</span> -it cpu512 sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/09/WX20180912-185154.png\"></p>\n<p>可以从截图看到cpu大概占用了3.3%左右</p>\n<p>新打开另一个窗口，创建新容器，一样的操作，安装stress，然后开10个进程，查看下CPU占用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker run -itd --name cpu1024  --cpu-shares 1024 ubuntu</span><br><span class=\"line\"><span class=\"comment\"># apt update</span></span><br><span class=\"line\"><span class=\"comment\"># apt install stress</span></span><br><span class=\"line\"><span class=\"comment\"># stress -c 10</span></span><br><span class=\"line\">stress: info: [241] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure>\n\n<p>新开窗口，进入cpu1024容器，然后使用top查看CPU占用情况</p>\n<p><img src=\"/uploads/2018/09/WX20180912-185440.png\" alt=\"Alt text\"></p>\n<p>可以看出CPU占用情况大概是6.6%左右，基本上是cpu是cpu512的两倍。</p>\n<h3 id=\"2-3-资源审计\"><a href=\"#2-3-资源审计\" class=\"headerlink\" title=\"2.3 资源审计\"></a>2.3 资源审计</h3><p>资源审计主要是做一些审计操作，用来统计系统实际上把多少资源用到适合的目的上，可以使用cpuacct子系统记录某个进程组使用的CPU时间</p>\n<h3 id=\"2-4-隔离\"><a href=\"#2-4-隔离\" class=\"headerlink\" title=\"2.4 隔离\"></a>2.4 隔离</h3><p>为组隔离命名空间，这样一个组不会看到另一个组的进程、网络连接和文件系统</p>\n<h3 id=\"2-5-控制\"><a href=\"#2-5-控制\" class=\"headerlink\" title=\"2.5 控制\"></a>2.5 控制</h3><p>挂起、恢复和重启动等操作</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1. 作用\"></a>1. 作用</h3><p>控制度(CGroups) 其实是Linux内核的一个特性，主要是用来控制共享资源，比如限制内存、CPU的的一些使用等。容器使用的CPU、内存等硬件信息，其实就是使用的宿主机上面的硬件设备，所以合理的分配资源，也是为了避免不同容器之间、容器和宿主机进程之间，产生资源的抢占。</p>\n<h2 id=\"2-容器控制组\"><a href=\"#2-容器控制组\" class=\"headerlink\" title=\"2. 容器控制组\"></a>2. 容器控制组</h2><h3 id=\"2-1-资源限制\"><a href=\"#2-1-资源限制\" class=\"headerlink\" title=\"2.1 资源限制\"></a>2.1 资源限制</h3><p>比如我们要限制容器的使用内存，可以在run的时候加上–memory的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ docker run -it --<span class=\"built_in\">rm</span> --name <span class=\"built_in\">test</span> --memory 10m busybox</span><br></pre></td></tr></table></figure>\n\n<p>然后新打开一个窗口，可以实时查看下容器的内存使用情况</p>\n<p><img src=\"/uploads/2018/09/WX20180912-000121.png\"></p>\n<p>TIP:</p>\n<p>使用docker-compose的时候需要注意一下，设置内存限制的参数是mem_limit，但是在docker-compose的3.x版本之后，不支持这个参数，所以在写docker-compose.yaml 的时候，会出现 Unsupported config option for xxxx: ‘mem_limit’ 的错误信息，所以需要指定 version: ‘2’</p>\n<h3 id=\"2-2-优先级\"><a href=\"#2-2-优先级\" class=\"headerlink\" title=\"2.2 优先级\"></a>2.2 优先级</h3><p>docker run的时候支持使用-c 或者 –cpu-shares 用来指定容器使用CPU的加权值。如果不指定，那么就是使用的是默认值，一般是1024。</p>\n<p>-c 或者 –cpu-shares并不能指定容器能够使用多少CPU或者多少GHz，而是一个加权值。有点类似nginx的负载均衡配置。</p>\n<p>这个配置在少量容器的时候，并没有太大的实际意义。只有CPU资源比较紧缺的时候，这个配置参数才会展现出来。</p>\n<p>比如，一个容器的加权值是100，另一个加权值是50，那么加权值为100的容器，获取CPU时间片的概率就是另一个的2倍</p>\n<p>如果只有一个容器，那么CPU时间片肯定都会给这个容器使用。</p>\n<p>创建一个容器，安装stress软件，然后开启10个进程，看下CPU占用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:marvin feilong$ docker run -itd --name cpu512  --cpu-shares 512 ubuntu</span><br><span class=\"line\">localhost:marvin feilong$ docker <span class=\"built_in\">exec</span> -it cpu512</span><br><span class=\"line\"><span class=\"comment\"># apt update</span></span><br><span class=\"line\"><span class=\"comment\"># apt install stress</span></span><br><span class=\"line\"><span class=\"comment\"># stress -c 10</span></span><br><span class=\"line\">stress: info: [250] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure>\n\n<p>打开一个新窗口，然后登录到这个容器，使用top查看下CPU占用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker <span class=\"built_in\">exec</span> -it cpu512 sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/09/WX20180912-185154.png\"></p>\n<p>可以从截图看到cpu大概占用了3.3%左右</p>\n<p>新打开另一个窗口，创建新容器，一样的操作，安装stress，然后开10个进程，查看下CPU占用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker run -itd --name cpu1024  --cpu-shares 1024 ubuntu</span><br><span class=\"line\"><span class=\"comment\"># apt update</span></span><br><span class=\"line\"><span class=\"comment\"># apt install stress</span></span><br><span class=\"line\"><span class=\"comment\"># stress -c 10</span></span><br><span class=\"line\">stress: info: [241] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure>\n\n<p>新开窗口，进入cpu1024容器，然后使用top查看CPU占用情况</p>\n<p><img src=\"/uploads/2018/09/WX20180912-185440.png\" alt=\"Alt text\"></p>\n<p>可以看出CPU占用情况大概是6.6%左右，基本上是cpu是cpu512的两倍。</p>\n<h3 id=\"2-3-资源审计\"><a href=\"#2-3-资源审计\" class=\"headerlink\" title=\"2.3 资源审计\"></a>2.3 资源审计</h3><p>资源审计主要是做一些审计操作，用来统计系统实际上把多少资源用到适合的目的上，可以使用cpuacct子系统记录某个进程组使用的CPU时间</p>\n<h3 id=\"2-4-隔离\"><a href=\"#2-4-隔离\" class=\"headerlink\" title=\"2.4 隔离\"></a>2.4 隔离</h3><p>为组隔离命名空间，这样一个组不会看到另一个组的进程、网络连接和文件系统</p>\n<h3 id=\"2-5-控制\"><a href=\"#2-5-控制\" class=\"headerlink\" title=\"2.5 控制\"></a>2.5 控制</h3><p>挂起、恢复和重启动等操作</p>\n"},{"title":"docker之运行golang","id":"329","date":"2018-09-01T16:21:04.000Z","_content":"\n众所周知，docker解决了编程的痛点问题——运行环境，所以我先走基本上尽量都使用docker运行。这样做，首先就是让我不必关心配置复杂的运行环境，另外也可以让我更加熟练的使用docker。\n\n```go\n//go-sample.go\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"hello world\");\n}\n```\n\n## Golang:onbuild\n\n现在关于go的docker镜像也发布了很多个版本，我们首先介绍一下`golang:onbuild`以及如何使用。 `golang:onbuild`是go语言官方发布的一款很小的镜像(只有几KB大小)，目的是为了让我们可以编译go文件，并且运行。使用的方式很简单，只需要创建一个Dockerfile，然后在首行加上`FROM golang:onbuild`。\n\n```bash\n-rw-r--r--@ 1 feilong wheel 20 9 2 00:23 Dockerfile\n-rw-r--r-- 1 feilong wheel 72 9 2 00:03 go-sample.go\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ cat Dockerfile\nFROM golang:onbuild\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ docker build -t golang_onbuild .\nSending build context to Docker daemon  3.072kB\nStep 1/1 : FROM golang:onbuild\nonbuild: Pulling from library/golang\nad74af05f5a2: Pull complete\n2b032b8bbe8b: Pull complete\na9a5b35f6ead: Pull complete\n25d9840c55bc: Pull complete\nd792ec7d64a3: Pull complete\nbe556a93c22e: Pull complete\n3a5fce283a1e: Pull complete\n0621865a0c2e: Pull complete\nDigest: sha256:c0ec19d49014d604e4f62266afd490016b11ceec103f0b7ef44875801ef93f36\nStatus: Downloaded newer image for golang:onbuild\n# Executing 3 build triggers\n ---> Running in 109c7a7ebeb5\n+ exec go get -v -d\nRemoving intermediate container 109c7a7ebeb5\n ---> Running in c0dfd28de95e\n+ exec go install -v\napp\nRemoving intermediate container c0dfd28de95e\n ---> 820e315d7160\nSuccessfully built 820e315d7160\nSuccessfully tagged golang_onbuild:latest\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ docker run -it --rm --name go_onbuild golang_onbuild\n+ exec app\nhello world\n```\n\n我们根据docker:onbuild的Dockerfile文件具体分析一个整个编译的过程(以1.3.1版本为例)\n\n```dockerfile\nFROM golang:1.3.1\n\nRUN mkdir -p /go/src/app\nWORKDIR /go/src/app\n\n# this will ideally be built by the ONBUILD below ;)\nCMD [\"go-wrapper\", \"run\"]\n\nONBUILD COPY . /go/src/app\nONBUILD RUN go-wrapper download\nONBUILD RUN go-wrapper install\n```\n\n从Dockerfile和build过程可以看出，在进行build的时候，经历了三次触发器:\n\n*   首先，将当前目录拷贝到`. /go/src/app`\n*   下载对应的依赖包\n*   编译安装\n\n编译之后，golang:onbuild镜像默认包含了一个CMD \\[\"app\"\\] 命令，用来执行编译后的go文件。\n\n我们通过实际run一个容器验证一下：\n\n```bash\nfeilongdeMBP:go feilong$ docker run -it --rm --name golang_onbuild golang_onbuild\n+ exec app\nhello world\n```\n\n##  Golang:latest\n\n相比较golang:onbuild的便利性，golang:latest就变得很灵活了，需要我们手动编译go文件，然后手动执行编译后的文件。因为毕竟电脑并不知道你具体想要编译的顺序，以及你要想要执行的编译文件。运行过程如下：\n\n```bash\nfeilongdeMBP:go feilong$ ll\ntotal 16\n-rw-r--r--@ 1 feilong  wheel  133  9  2 00:04 Dockerfile\n-rw-r--r--  1 feilong  wheel   72  9  2 00:03 go-sample.go\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ cat Dockerfile\nFROM golang:latest\n\nRUN mkdir -p /go/src/app\nWORKDIR /go/src/app\n\nCOPY . /go/src/app\nRUN go build -o app .\nCMD [ \"/go/src/app/app\" ]\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ docker build -t go_go .\nSending build context to Docker daemon 3.072kB\nStep 1/6 : FROM golang:latest\n ---> 7e9ac7032e33\nStep 2/6 : RUN mkdir -p /go/src/app\n ---> Running in b5d3f63578ed\nRemoving intermediate container b5d3f63578ed\n ---> 95c2beb49121\nStep 3/6 : WORKDIR /go/src/app\n ---> Running in 3011d74944c9\nRemoving intermediate container 3011d74944c9\n ---> 82d6a45aa3e3\nStep 4/6 : COPY . /go/src/app\n ---> 475b2bdd5769\nStep 5/6 : RUN go build -o app .\n ---> Running in 5802ac0c98b4\nRemoving intermediate container 5802ac0c98b4\n ---> 7a019370f09d\nStep 6/6 : CMD [ \"/go/src/app/app\" ]\n ---> Running in a3f6ad19d2ef\nRemoving intermediate container a3f6ad19d2ef\n ---> 635417bdcda8\nSuccessfully built 635417bdcda8\nSuccessfully tagged go_go:latest\n```\n\nrun一个容器，查看运行效果\n\n```bash\nfeilongdeMBP:go feilong$ docker run -it --rm --name go go_go\nhello world\n```\n\n## 总结\n\ngolang:onbuild和golang:lastest各有利弊，前者更加简单，能够更加简明扼要的告诉我们运行过程，而后者更加灵活，将更多的操作命令交给了开发人员。\n\n## 参考文献\n\n*   [https://time-track.cn/build-minimal-go-image.html](https://time-track.cn/build-minimal-go-image.html)","source":"_posts/docker-golang.md","raw":"---\ntitle: docker之运行golang\ntags: []\nid: '329'\ncategories:\n  - - Docker\n  - - Linux\ndate: 2018-09-02 00:21:04\n---\n\n众所周知，docker解决了编程的痛点问题——运行环境，所以我先走基本上尽量都使用docker运行。这样做，首先就是让我不必关心配置复杂的运行环境，另外也可以让我更加熟练的使用docker。\n\n```go\n//go-sample.go\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"hello world\");\n}\n```\n\n## Golang:onbuild\n\n现在关于go的docker镜像也发布了很多个版本，我们首先介绍一下`golang:onbuild`以及如何使用。 `golang:onbuild`是go语言官方发布的一款很小的镜像(只有几KB大小)，目的是为了让我们可以编译go文件，并且运行。使用的方式很简单，只需要创建一个Dockerfile，然后在首行加上`FROM golang:onbuild`。\n\n```bash\n-rw-r--r--@ 1 feilong wheel 20 9 2 00:23 Dockerfile\n-rw-r--r-- 1 feilong wheel 72 9 2 00:03 go-sample.go\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ cat Dockerfile\nFROM golang:onbuild\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ docker build -t golang_onbuild .\nSending build context to Docker daemon  3.072kB\nStep 1/1 : FROM golang:onbuild\nonbuild: Pulling from library/golang\nad74af05f5a2: Pull complete\n2b032b8bbe8b: Pull complete\na9a5b35f6ead: Pull complete\n25d9840c55bc: Pull complete\nd792ec7d64a3: Pull complete\nbe556a93c22e: Pull complete\n3a5fce283a1e: Pull complete\n0621865a0c2e: Pull complete\nDigest: sha256:c0ec19d49014d604e4f62266afd490016b11ceec103f0b7ef44875801ef93f36\nStatus: Downloaded newer image for golang:onbuild\n# Executing 3 build triggers\n ---> Running in 109c7a7ebeb5\n+ exec go get -v -d\nRemoving intermediate container 109c7a7ebeb5\n ---> Running in c0dfd28de95e\n+ exec go install -v\napp\nRemoving intermediate container c0dfd28de95e\n ---> 820e315d7160\nSuccessfully built 820e315d7160\nSuccessfully tagged golang_onbuild:latest\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ docker run -it --rm --name go_onbuild golang_onbuild\n+ exec app\nhello world\n```\n\n我们根据docker:onbuild的Dockerfile文件具体分析一个整个编译的过程(以1.3.1版本为例)\n\n```dockerfile\nFROM golang:1.3.1\n\nRUN mkdir -p /go/src/app\nWORKDIR /go/src/app\n\n# this will ideally be built by the ONBUILD below ;)\nCMD [\"go-wrapper\", \"run\"]\n\nONBUILD COPY . /go/src/app\nONBUILD RUN go-wrapper download\nONBUILD RUN go-wrapper install\n```\n\n从Dockerfile和build过程可以看出，在进行build的时候，经历了三次触发器:\n\n*   首先，将当前目录拷贝到`. /go/src/app`\n*   下载对应的依赖包\n*   编译安装\n\n编译之后，golang:onbuild镜像默认包含了一个CMD \\[\"app\"\\] 命令，用来执行编译后的go文件。\n\n我们通过实际run一个容器验证一下：\n\n```bash\nfeilongdeMBP:go feilong$ docker run -it --rm --name golang_onbuild golang_onbuild\n+ exec app\nhello world\n```\n\n##  Golang:latest\n\n相比较golang:onbuild的便利性，golang:latest就变得很灵活了，需要我们手动编译go文件，然后手动执行编译后的文件。因为毕竟电脑并不知道你具体想要编译的顺序，以及你要想要执行的编译文件。运行过程如下：\n\n```bash\nfeilongdeMBP:go feilong$ ll\ntotal 16\n-rw-r--r--@ 1 feilong  wheel  133  9  2 00:04 Dockerfile\n-rw-r--r--  1 feilong  wheel   72  9  2 00:03 go-sample.go\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ cat Dockerfile\nFROM golang:latest\n\nRUN mkdir -p /go/src/app\nWORKDIR /go/src/app\n\nCOPY . /go/src/app\nRUN go build -o app .\nCMD [ \"/go/src/app/app\" ]\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$\nfeilongdeMBP:go feilong$ docker build -t go_go .\nSending build context to Docker daemon 3.072kB\nStep 1/6 : FROM golang:latest\n ---> 7e9ac7032e33\nStep 2/6 : RUN mkdir -p /go/src/app\n ---> Running in b5d3f63578ed\nRemoving intermediate container b5d3f63578ed\n ---> 95c2beb49121\nStep 3/6 : WORKDIR /go/src/app\n ---> Running in 3011d74944c9\nRemoving intermediate container 3011d74944c9\n ---> 82d6a45aa3e3\nStep 4/6 : COPY . /go/src/app\n ---> 475b2bdd5769\nStep 5/6 : RUN go build -o app .\n ---> Running in 5802ac0c98b4\nRemoving intermediate container 5802ac0c98b4\n ---> 7a019370f09d\nStep 6/6 : CMD [ \"/go/src/app/app\" ]\n ---> Running in a3f6ad19d2ef\nRemoving intermediate container a3f6ad19d2ef\n ---> 635417bdcda8\nSuccessfully built 635417bdcda8\nSuccessfully tagged go_go:latest\n```\n\nrun一个容器，查看运行效果\n\n```bash\nfeilongdeMBP:go feilong$ docker run -it --rm --name go go_go\nhello world\n```\n\n## 总结\n\ngolang:onbuild和golang:lastest各有利弊，前者更加简单，能够更加简明扼要的告诉我们运行过程，而后者更加灵活，将更多的操作命令交给了开发人员。\n\n## 参考文献\n\n*   [https://time-track.cn/build-minimal-go-image.html](https://time-track.cn/build-minimal-go-image.html)","slug":"docker-golang","published":1,"updated":"2022-03-12T23:52:58.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8meh000t417t3772eqza","content":"<p>众所周知，docker解决了编程的痛点问题——运行环境，所以我先走基本上尽量都使用docker运行。这样做，首先就是让我不必关心配置复杂的运行环境，另外也可以让我更加熟练的使用docker。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go-sample.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-onbuild\"><a href=\"#Golang-onbuild\" class=\"headerlink\" title=\"Golang:onbuild\"></a>Golang:onbuild</h2><p>现在关于go的docker镜像也发布了很多个版本，我们首先介绍一下<code>golang:onbuild</code>以及如何使用。 <code>golang:onbuild</code>是go语言官方发布的一款很小的镜像(只有几KB大小)，目的是为了让我们可以编译go文件，并且运行。使用的方式很简单，只需要创建一个Dockerfile，然后在首行加上<code>FROM golang:onbuild</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--@ 1 feilong wheel 20 9 2 00:23 Dockerfile</span><br><span class=\"line\">-rw-r--r-- 1 feilong wheel 72 9 2 00:03 go-sample.go</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ <span class=\"built_in\">cat</span> Dockerfile</span><br><span class=\"line\">FROM golang:onbuild</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ docker build -t golang_onbuild .</span><br><span class=\"line\">Sending build context to Docker daemon  3.072kB</span><br><span class=\"line\">Step 1/1 : FROM golang:onbuild</span><br><span class=\"line\">onbuild: Pulling from library/golang</span><br><span class=\"line\">ad74af05f5a2: Pull complete</span><br><span class=\"line\">2b032b8bbe8b: Pull complete</span><br><span class=\"line\">a9a5b35f6ead: Pull complete</span><br><span class=\"line\">25d9840c55bc: Pull complete</span><br><span class=\"line\">d792ec7d64a3: Pull complete</span><br><span class=\"line\">be556a93c22e: Pull complete</span><br><span class=\"line\">3a5fce283a1e: Pull complete</span><br><span class=\"line\">0621865a0c2e: Pull complete</span><br><span class=\"line\">Digest: sha256:c0ec19d49014d604e4f62266afd490016b11ceec103f0b7ef44875801ef93f36</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> golang:onbuild</span><br><span class=\"line\"><span class=\"comment\"># Executing 3 build triggers</span></span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 109c7a7ebeb5</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> go get -v -d</span><br><span class=\"line\">Removing intermediate container 109c7a7ebeb5</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> c0dfd28de95e</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> go install -v</span><br><span class=\"line\">app</span><br><span class=\"line\">Removing intermediate container c0dfd28de95e</span><br><span class=\"line\"> ---&gt; 820e315d7160</span><br><span class=\"line\">Successfully built 820e315d7160</span><br><span class=\"line\">Successfully tagged golang_onbuild:latest</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ docker run -it --<span class=\"built_in\">rm</span> --name go_onbuild golang_onbuild</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> app</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<p>我们根据docker:onbuild的Dockerfile文件具体分析一个整个编译的过程(以1.3.1版本为例)</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.3</span>.<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /go/src/app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /go/src/app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this will ideally be built by the ONBUILD below ;)</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;go-wrapper&quot;</span>, <span class=\"string\">&quot;run&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"language-bash\"> . /go/src/app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"language-bash\"> go-wrapper download</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"language-bash\"> go-wrapper install</span></span><br></pre></td></tr></table></figure>\n\n<p>从Dockerfile和build过程可以看出，在进行build的时候，经历了三次触发器:</p>\n<ul>\n<li>首先，将当前目录拷贝到<code>. /go/src/app</code></li>\n<li>下载对应的依赖包</li>\n<li>编译安装</li>\n</ul>\n<p>编译之后，golang:onbuild镜像默认包含了一个CMD [“app”] 命令，用来执行编译后的go文件。</p>\n<p>我们通过实际run一个容器验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:go feilong$ docker run -it --<span class=\"built_in\">rm</span> --name golang_onbuild golang_onbuild</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> app</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-latest\"><a href=\"#Golang-latest\" class=\"headerlink\" title=\"Golang:latest\"></a>Golang:latest</h2><p>相比较golang:onbuild的便利性，golang:latest就变得很灵活了，需要我们手动编译go文件，然后手动执行编译后的文件。因为毕竟电脑并不知道你具体想要编译的顺序，以及你要想要执行的编译文件。运行过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:go feilong$ ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r--@ 1 feilong  wheel  133  9  2 00:04 Dockerfile</span><br><span class=\"line\">-rw-r--r--  1 feilong  wheel   72  9  2 00:03 go-sample.go</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ <span class=\"built_in\">cat</span> Dockerfile</span><br><span class=\"line\">FROM golang:latest</span><br><span class=\"line\"></span><br><span class=\"line\">RUN <span class=\"built_in\">mkdir</span> -p /go/src/app</span><br><span class=\"line\">WORKDIR /go/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /go/src/app</span><br><span class=\"line\">RUN go build -o app .</span><br><span class=\"line\">CMD [ <span class=\"string\">&quot;/go/src/app/app&quot;</span> ]</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ docker build -t go_go .</span><br><span class=\"line\">Sending build context to Docker daemon 3.072kB</span><br><span class=\"line\">Step 1/6 : FROM golang:latest</span><br><span class=\"line\"> ---&gt; 7e9ac7032e33</span><br><span class=\"line\">Step 2/6 : RUN <span class=\"built_in\">mkdir</span> -p /go/src/app</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> b5d3f63578ed</span><br><span class=\"line\">Removing intermediate container b5d3f63578ed</span><br><span class=\"line\"> ---&gt; 95c2beb49121</span><br><span class=\"line\">Step 3/6 : WORKDIR /go/src/app</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 3011d74944c9</span><br><span class=\"line\">Removing intermediate container 3011d74944c9</span><br><span class=\"line\"> ---&gt; 82d6a45aa3e3</span><br><span class=\"line\">Step 4/6 : COPY . /go/src/app</span><br><span class=\"line\"> ---&gt; 475b2bdd5769</span><br><span class=\"line\">Step 5/6 : RUN go build -o app .</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 5802ac0c98b4</span><br><span class=\"line\">Removing intermediate container 5802ac0c98b4</span><br><span class=\"line\"> ---&gt; 7a019370f09d</span><br><span class=\"line\">Step 6/6 : CMD [ <span class=\"string\">&quot;/go/src/app/app&quot;</span> ]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> a3f6ad19d2ef</span><br><span class=\"line\">Removing intermediate container a3f6ad19d2ef</span><br><span class=\"line\"> ---&gt; 635417bdcda8</span><br><span class=\"line\">Successfully built 635417bdcda8</span><br><span class=\"line\">Successfully tagged go_go:latest</span><br></pre></td></tr></table></figure>\n\n<p>run一个容器，查看运行效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:go feilong$ docker run -it --<span class=\"built_in\">rm</span> --name go go_go</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>golang:onbuild和golang:lastest各有利弊，前者更加简单，能够更加简明扼要的告诉我们运行过程，而后者更加灵活，将更多的操作命令交给了开发人员。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://time-track.cn/build-minimal-go-image.html\">https://time-track.cn/build-minimal-go-image.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，docker解决了编程的痛点问题——运行环境，所以我先走基本上尽量都使用docker运行。这样做，首先就是让我不必关心配置复杂的运行环境，另外也可以让我更加熟练的使用docker。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go-sample.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-onbuild\"><a href=\"#Golang-onbuild\" class=\"headerlink\" title=\"Golang:onbuild\"></a>Golang:onbuild</h2><p>现在关于go的docker镜像也发布了很多个版本，我们首先介绍一下<code>golang:onbuild</code>以及如何使用。 <code>golang:onbuild</code>是go语言官方发布的一款很小的镜像(只有几KB大小)，目的是为了让我们可以编译go文件，并且运行。使用的方式很简单，只需要创建一个Dockerfile，然后在首行加上<code>FROM golang:onbuild</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--@ 1 feilong wheel 20 9 2 00:23 Dockerfile</span><br><span class=\"line\">-rw-r--r-- 1 feilong wheel 72 9 2 00:03 go-sample.go</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ <span class=\"built_in\">cat</span> Dockerfile</span><br><span class=\"line\">FROM golang:onbuild</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ docker build -t golang_onbuild .</span><br><span class=\"line\">Sending build context to Docker daemon  3.072kB</span><br><span class=\"line\">Step 1/1 : FROM golang:onbuild</span><br><span class=\"line\">onbuild: Pulling from library/golang</span><br><span class=\"line\">ad74af05f5a2: Pull complete</span><br><span class=\"line\">2b032b8bbe8b: Pull complete</span><br><span class=\"line\">a9a5b35f6ead: Pull complete</span><br><span class=\"line\">25d9840c55bc: Pull complete</span><br><span class=\"line\">d792ec7d64a3: Pull complete</span><br><span class=\"line\">be556a93c22e: Pull complete</span><br><span class=\"line\">3a5fce283a1e: Pull complete</span><br><span class=\"line\">0621865a0c2e: Pull complete</span><br><span class=\"line\">Digest: sha256:c0ec19d49014d604e4f62266afd490016b11ceec103f0b7ef44875801ef93f36</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> golang:onbuild</span><br><span class=\"line\"><span class=\"comment\"># Executing 3 build triggers</span></span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 109c7a7ebeb5</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> go get -v -d</span><br><span class=\"line\">Removing intermediate container 109c7a7ebeb5</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> c0dfd28de95e</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> go install -v</span><br><span class=\"line\">app</span><br><span class=\"line\">Removing intermediate container c0dfd28de95e</span><br><span class=\"line\"> ---&gt; 820e315d7160</span><br><span class=\"line\">Successfully built 820e315d7160</span><br><span class=\"line\">Successfully tagged golang_onbuild:latest</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ docker run -it --<span class=\"built_in\">rm</span> --name go_onbuild golang_onbuild</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> app</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<p>我们根据docker:onbuild的Dockerfile文件具体分析一个整个编译的过程(以1.3.1版本为例)</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.3</span>.<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /go/src/app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /go/src/app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this will ideally be built by the ONBUILD below ;)</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;go-wrapper&quot;</span>, <span class=\"string\">&quot;run&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">COPY</span><span class=\"language-bash\"> . /go/src/app</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"language-bash\"> go-wrapper download</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"language-bash\"> go-wrapper install</span></span><br></pre></td></tr></table></figure>\n\n<p>从Dockerfile和build过程可以看出，在进行build的时候，经历了三次触发器:</p>\n<ul>\n<li>首先，将当前目录拷贝到<code>. /go/src/app</code></li>\n<li>下载对应的依赖包</li>\n<li>编译安装</li>\n</ul>\n<p>编译之后，golang:onbuild镜像默认包含了一个CMD [“app”] 命令，用来执行编译后的go文件。</p>\n<p>我们通过实际run一个容器验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:go feilong$ docker run -it --<span class=\"built_in\">rm</span> --name golang_onbuild golang_onbuild</span><br><span class=\"line\">+ <span class=\"built_in\">exec</span> app</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Golang-latest\"><a href=\"#Golang-latest\" class=\"headerlink\" title=\"Golang:latest\"></a>Golang:latest</h2><p>相比较golang:onbuild的便利性，golang:latest就变得很灵活了，需要我们手动编译go文件，然后手动执行编译后的文件。因为毕竟电脑并不知道你具体想要编译的顺序，以及你要想要执行的编译文件。运行过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:go feilong$ ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r--@ 1 feilong  wheel  133  9  2 00:04 Dockerfile</span><br><span class=\"line\">-rw-r--r--  1 feilong  wheel   72  9  2 00:03 go-sample.go</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ <span class=\"built_in\">cat</span> Dockerfile</span><br><span class=\"line\">FROM golang:latest</span><br><span class=\"line\"></span><br><span class=\"line\">RUN <span class=\"built_in\">mkdir</span> -p /go/src/app</span><br><span class=\"line\">WORKDIR /go/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /go/src/app</span><br><span class=\"line\">RUN go build -o app .</span><br><span class=\"line\">CMD [ <span class=\"string\">&quot;/go/src/app/app&quot;</span> ]</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$</span><br><span class=\"line\">feilongdeMBP:go feilong$ docker build -t go_go .</span><br><span class=\"line\">Sending build context to Docker daemon 3.072kB</span><br><span class=\"line\">Step 1/6 : FROM golang:latest</span><br><span class=\"line\"> ---&gt; 7e9ac7032e33</span><br><span class=\"line\">Step 2/6 : RUN <span class=\"built_in\">mkdir</span> -p /go/src/app</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> b5d3f63578ed</span><br><span class=\"line\">Removing intermediate container b5d3f63578ed</span><br><span class=\"line\"> ---&gt; 95c2beb49121</span><br><span class=\"line\">Step 3/6 : WORKDIR /go/src/app</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 3011d74944c9</span><br><span class=\"line\">Removing intermediate container 3011d74944c9</span><br><span class=\"line\"> ---&gt; 82d6a45aa3e3</span><br><span class=\"line\">Step 4/6 : COPY . /go/src/app</span><br><span class=\"line\"> ---&gt; 475b2bdd5769</span><br><span class=\"line\">Step 5/6 : RUN go build -o app .</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 5802ac0c98b4</span><br><span class=\"line\">Removing intermediate container 5802ac0c98b4</span><br><span class=\"line\"> ---&gt; 7a019370f09d</span><br><span class=\"line\">Step 6/6 : CMD [ <span class=\"string\">&quot;/go/src/app/app&quot;</span> ]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> a3f6ad19d2ef</span><br><span class=\"line\">Removing intermediate container a3f6ad19d2ef</span><br><span class=\"line\"> ---&gt; 635417bdcda8</span><br><span class=\"line\">Successfully built 635417bdcda8</span><br><span class=\"line\">Successfully tagged go_go:latest</span><br></pre></td></tr></table></figure>\n\n<p>run一个容器，查看运行效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:go feilong$ docker run -it --<span class=\"built_in\">rm</span> --name go go_go</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>golang:onbuild和golang:lastest各有利弊，前者更加简单，能够更加简明扼要的告诉我们运行过程，而后者更加灵活，将更多的操作命令交给了开发人员。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://time-track.cn/build-minimal-go-image.html\">https://time-track.cn/build-minimal-go-image.html</a></li>\n</ul>\n"},{"title":"docker之libnetwork插件化网络功能","id":"402","date":"2018-10-02T15:06:07.000Z","_content":"\n# 1\\. 背景\n\ndocker的版本不断迭代，从1.7开始，docker将网络的部分以插件化的方式剥离出来，允许用户通过命令实现不同的后端，增加了docker的灵活性。剥离出来的网络叫做libnetwork，显而易见，它希望将来为不同的容器定义统一网络层的规范。\n\n# 2\\. 容器的网络模型（CNM）\n\n容器网络模型（Container Networking Model，CNM）最开始的提出者是思科公司员工Erik，设计了一个docker扩展的网桥模型。后来，他将这个模型反馈给docker的团队，得到了docker的极大的认可，也是libnetwork的雏形。\n\nCNM主要包含三点sandbox、endpoint和network。\n\n之前有篇文章是[DOCKER之命名空间](http://feilong.tech/2018/09/10/docker-namespace/) ，文章简要说了一下网络的隔离，讲述了一些docker的网络基本知识。其实也是libnetwork的一个缩影。\n\nsandbox相当于网卡配置、路由表、dns配置、网络命名空间等\n\nendpoint相当于容器内部的虚拟网卡（eth0等）\n\nnetwork代表一个或者多个网络\n\n当然，这些概念并不是对等，这里只是有一个类比的关系。\n\n![](/uploads/2018/09/mp55072270_1453099798138_1_th.jpeg)\n\n可见，具体底层网络如何实现，每个容器的endpoint所连接的network，以及sandbox如何进行隔离，都可以不用关心。只要libnetwork提供网络和接入点，只需要容器给街上或者拔下（这里指的是endpoint和network的链接和断开），剩下的都是直接由驱动自己实现。\n\n# 3\\. docker网络bridge\n\ndocker自带了查看网络的命令\n\n```bash\nlocalhost:~ feilong$ docker network ls\nNETWORK ID          NAME                  DRIVER              SCOPE\n5adfcce2b464        bridge                bridge              local\nc2d85093b647        docker_default        bridge              local\n0eec2b9c7d57        go_default            bridge              local\n604e2a13b930        host                  host                local\nbded596e1021        marvin2_default       bridge              local\n6c006e90b785        marvin_code-network   bridge              local\nef31b0632a2f        marvin_default        bridge              local\n72169048d0e7        none                  null                local\n6eb2e51b63e2        redis_default         bridge              local\n6c6e4cc36312        registry_default      bridge              local\nlocalhost:~ feilong$\n```\n\n从查询结果，可以看出，我的电脑上面，有很多的网络信息。docker默认是携带3种网络：bridge、host、none，这三个网络是不能被删除的\n\n```bash\nlocalhost:~ feilong$ docker network rm host\nError response from daemon: host is a pre-defined network and cannot be removed\nlocalhost:~ feilong$ docker network rm bridge\nError response from daemon: bridge is a pre-defined network and cannot be removed\nlocalhost:~ feilong$ docker network rm none\nError response from daemon: none is a pre-defined network and cannot be removed\nlocalhost:~ feilong$\n```\n\n我们在运行容器的时候，指定的网络类型（--network=bridge--network=host--network=none）其实就是来源于这里，又由于docker默认是使用bridge的网络类型，通常是省略这个参数。\n\n#### 使用docker-compose发生了什么？\n\n我们在使用docker-compose的时候，通常是不用设置--link参数的，那是因为，docker会认为使用docker-compose启动多个容器，但是这几个容器是组成了一个service，会自动创建一个bridge类型的网络，然后将启动的容器，放到这个网络中，和其他的网络进行隔离。\n\n```yaml\n# docker-compose.yaml\nversion: '3'\n\nservices: \n  busybox1:\n    image: busybox\n    container_name: busybox1\n  busybox2:\n    image: busybox\n    container_name: busybox2\n  busybox3:\n    image: busybox\n    container_name: busybox3\n```\n\n查看docker的网络\n\n```bash\nlocalhost:test feilong$ docker network ls\nNETWORK ID          NAME                  DRIVER              SCOPE\n5adfcce2b464        bridge                bridge              local\nc2d85093b647        docker_default        bridge              local\n0eec2b9c7d57        go_default            bridge              local\n604e2a13b930        host                  host                local\nbded596e1021        marvin2_default       bridge              local\n6c006e90b785        marvin_code-network   bridge              local\nef31b0632a2f        marvin_default        bridge              local\n72169048d0e7        none                  null                local\n6eb2e51b63e2        redis_default         bridge              local\n6c6e4cc36312        registry_default      bridge              local\nlocalhost:test feilong$\n```\n\n运行docker-compose，然后查看网络\n\n```bash\nlocalhost:test feilong$ docker-compose up -d\nCreating network \"test_default\" with the default driver\nCreating busybox2 ... done\nCreating busybox3 ... done\nCreating busybox1 ... done\nlocalhost:test feilong$ docker network ls\nNETWORK ID          NAME                  DRIVER              SCOPE\n5adfcce2b464        bridge                bridge              local\nc2d85093b647        docker_default        bridge              local\n0eec2b9c7d57        go_default            bridge              local\n604e2a13b930        host                  host                local\nbded596e1021        marvin2_default       bridge              local\n6c006e90b785        marvin_code-network   bridge              local\nef31b0632a2f        marvin_default        bridge              local\n72169048d0e7        none                  null                local\n6eb2e51b63e2        redis_default         bridge              local\n6c6e4cc36312        registry_default      bridge              local\nfca18d6c1259        test_default          bridge              local\n```\n\n从上面，我们看出，在运行docker-compose的时候，就已经创建了一个网络，叫做 test\\_default\n\n#### \\--link ？\n\n我们知道，想要将两个容器链接起来，可以使用--link参数（在使用命令行 docker run的时候）。其实，我们在进行docker run的时候，创建的容器，加入了一个默认的网络“bridge”，但是在“bridge”中，默认是不能进行连接的，需要加上--link，使bridge内部的容器进行连接。这样也是为了隔离容器。试想一下，如果不采用这个机制，那么网络空间就不再是隔离的状态了，就和docker的设计不太相符。\n\n我们分别运行一个test1和test2容器\n\n```bash\nfeilongdeMacBook-Pro:~ feilong$ docker run -itd --name test1 busybox\nbfca24444ce4ee16d6e2af76cf0967d0923dbbed4310c811cdbefef5d6b5b67f\nfeilongdeMacBook-Pro:~ feilong$ docker run -itd --name test2 busybox\n48a5c7e9c042de472ed5edd328a53952fe9552357eff7b1c81f4d9e3bbed1c8c\nfeilongdeMacBook-Pro:~ feilong$ docker ps  grep test\n48a5c7e9c042        busybox                              \"sh\"                     6 seconds ago       Up 5 seconds                                  test2\nbfca24444ce4        busybox                              \"sh\"                     10 seconds ago      Up 9 seconds                                  test1\nb742b60be6a0        registry:latest                      \"/entrypoint.sh /etc…\"   22 hours ago        Up 3 hours          0.0.0.0:32768->5000/tcp   thirsty_almeida\nfeilongdeMacBook-Pro:~ feilong$\n```\n\n然后我们进入test1，ping一下test2\n\n```bash\nfeilongdeMacBook-Pro:~ feilong$ docker exec -it test1 sh\n/ # ping test2\nping: bad address 'test2'\n/ #\n```\n\n结果很明显，是不通的！\n\n但是他们是在同一个网络里面的\n\n![](/uploads/2018/10/1__bash.jpg) ![](/uploads/2018/10/2__bash.jpg)\n\n# 4\\. 总结\n\nlibnetwork通过CNM，抽象了下层网络的实现让docker可以根据需要，实现不同的网络技术，docke将swarm引擎加到了新的版本中，以提供集群网络的更好支持。","source":"_posts/docker-libnetwork.md","raw":"---\ntitle: docker之libnetwork插件化网络功能\ntags:\n  - docker\n  - docker network\n  - libnetwork\nid: '402'\ncategories:\n  - - Docker\ndate: 2018-10-02 23:06:07\n---\n\n# 1\\. 背景\n\ndocker的版本不断迭代，从1.7开始，docker将网络的部分以插件化的方式剥离出来，允许用户通过命令实现不同的后端，增加了docker的灵活性。剥离出来的网络叫做libnetwork，显而易见，它希望将来为不同的容器定义统一网络层的规范。\n\n# 2\\. 容器的网络模型（CNM）\n\n容器网络模型（Container Networking Model，CNM）最开始的提出者是思科公司员工Erik，设计了一个docker扩展的网桥模型。后来，他将这个模型反馈给docker的团队，得到了docker的极大的认可，也是libnetwork的雏形。\n\nCNM主要包含三点sandbox、endpoint和network。\n\n之前有篇文章是[DOCKER之命名空间](http://feilong.tech/2018/09/10/docker-namespace/) ，文章简要说了一下网络的隔离，讲述了一些docker的网络基本知识。其实也是libnetwork的一个缩影。\n\nsandbox相当于网卡配置、路由表、dns配置、网络命名空间等\n\nendpoint相当于容器内部的虚拟网卡（eth0等）\n\nnetwork代表一个或者多个网络\n\n当然，这些概念并不是对等，这里只是有一个类比的关系。\n\n![](/uploads/2018/09/mp55072270_1453099798138_1_th.jpeg)\n\n可见，具体底层网络如何实现，每个容器的endpoint所连接的network，以及sandbox如何进行隔离，都可以不用关心。只要libnetwork提供网络和接入点，只需要容器给街上或者拔下（这里指的是endpoint和network的链接和断开），剩下的都是直接由驱动自己实现。\n\n# 3\\. docker网络bridge\n\ndocker自带了查看网络的命令\n\n```bash\nlocalhost:~ feilong$ docker network ls\nNETWORK ID          NAME                  DRIVER              SCOPE\n5adfcce2b464        bridge                bridge              local\nc2d85093b647        docker_default        bridge              local\n0eec2b9c7d57        go_default            bridge              local\n604e2a13b930        host                  host                local\nbded596e1021        marvin2_default       bridge              local\n6c006e90b785        marvin_code-network   bridge              local\nef31b0632a2f        marvin_default        bridge              local\n72169048d0e7        none                  null                local\n6eb2e51b63e2        redis_default         bridge              local\n6c6e4cc36312        registry_default      bridge              local\nlocalhost:~ feilong$\n```\n\n从查询结果，可以看出，我的电脑上面，有很多的网络信息。docker默认是携带3种网络：bridge、host、none，这三个网络是不能被删除的\n\n```bash\nlocalhost:~ feilong$ docker network rm host\nError response from daemon: host is a pre-defined network and cannot be removed\nlocalhost:~ feilong$ docker network rm bridge\nError response from daemon: bridge is a pre-defined network and cannot be removed\nlocalhost:~ feilong$ docker network rm none\nError response from daemon: none is a pre-defined network and cannot be removed\nlocalhost:~ feilong$\n```\n\n我们在运行容器的时候，指定的网络类型（--network=bridge--network=host--network=none）其实就是来源于这里，又由于docker默认是使用bridge的网络类型，通常是省略这个参数。\n\n#### 使用docker-compose发生了什么？\n\n我们在使用docker-compose的时候，通常是不用设置--link参数的，那是因为，docker会认为使用docker-compose启动多个容器，但是这几个容器是组成了一个service，会自动创建一个bridge类型的网络，然后将启动的容器，放到这个网络中，和其他的网络进行隔离。\n\n```yaml\n# docker-compose.yaml\nversion: '3'\n\nservices: \n  busybox1:\n    image: busybox\n    container_name: busybox1\n  busybox2:\n    image: busybox\n    container_name: busybox2\n  busybox3:\n    image: busybox\n    container_name: busybox3\n```\n\n查看docker的网络\n\n```bash\nlocalhost:test feilong$ docker network ls\nNETWORK ID          NAME                  DRIVER              SCOPE\n5adfcce2b464        bridge                bridge              local\nc2d85093b647        docker_default        bridge              local\n0eec2b9c7d57        go_default            bridge              local\n604e2a13b930        host                  host                local\nbded596e1021        marvin2_default       bridge              local\n6c006e90b785        marvin_code-network   bridge              local\nef31b0632a2f        marvin_default        bridge              local\n72169048d0e7        none                  null                local\n6eb2e51b63e2        redis_default         bridge              local\n6c6e4cc36312        registry_default      bridge              local\nlocalhost:test feilong$\n```\n\n运行docker-compose，然后查看网络\n\n```bash\nlocalhost:test feilong$ docker-compose up -d\nCreating network \"test_default\" with the default driver\nCreating busybox2 ... done\nCreating busybox3 ... done\nCreating busybox1 ... done\nlocalhost:test feilong$ docker network ls\nNETWORK ID          NAME                  DRIVER              SCOPE\n5adfcce2b464        bridge                bridge              local\nc2d85093b647        docker_default        bridge              local\n0eec2b9c7d57        go_default            bridge              local\n604e2a13b930        host                  host                local\nbded596e1021        marvin2_default       bridge              local\n6c006e90b785        marvin_code-network   bridge              local\nef31b0632a2f        marvin_default        bridge              local\n72169048d0e7        none                  null                local\n6eb2e51b63e2        redis_default         bridge              local\n6c6e4cc36312        registry_default      bridge              local\nfca18d6c1259        test_default          bridge              local\n```\n\n从上面，我们看出，在运行docker-compose的时候，就已经创建了一个网络，叫做 test\\_default\n\n#### \\--link ？\n\n我们知道，想要将两个容器链接起来，可以使用--link参数（在使用命令行 docker run的时候）。其实，我们在进行docker run的时候，创建的容器，加入了一个默认的网络“bridge”，但是在“bridge”中，默认是不能进行连接的，需要加上--link，使bridge内部的容器进行连接。这样也是为了隔离容器。试想一下，如果不采用这个机制，那么网络空间就不再是隔离的状态了，就和docker的设计不太相符。\n\n我们分别运行一个test1和test2容器\n\n```bash\nfeilongdeMacBook-Pro:~ feilong$ docker run -itd --name test1 busybox\nbfca24444ce4ee16d6e2af76cf0967d0923dbbed4310c811cdbefef5d6b5b67f\nfeilongdeMacBook-Pro:~ feilong$ docker run -itd --name test2 busybox\n48a5c7e9c042de472ed5edd328a53952fe9552357eff7b1c81f4d9e3bbed1c8c\nfeilongdeMacBook-Pro:~ feilong$ docker ps  grep test\n48a5c7e9c042        busybox                              \"sh\"                     6 seconds ago       Up 5 seconds                                  test2\nbfca24444ce4        busybox                              \"sh\"                     10 seconds ago      Up 9 seconds                                  test1\nb742b60be6a0        registry:latest                      \"/entrypoint.sh /etc…\"   22 hours ago        Up 3 hours          0.0.0.0:32768->5000/tcp   thirsty_almeida\nfeilongdeMacBook-Pro:~ feilong$\n```\n\n然后我们进入test1，ping一下test2\n\n```bash\nfeilongdeMacBook-Pro:~ feilong$ docker exec -it test1 sh\n/ # ping test2\nping: bad address 'test2'\n/ #\n```\n\n结果很明显，是不通的！\n\n但是他们是在同一个网络里面的\n\n![](/uploads/2018/10/1__bash.jpg) ![](/uploads/2018/10/2__bash.jpg)\n\n# 4\\. 总结\n\nlibnetwork通过CNM，抽象了下层网络的实现让docker可以根据需要，实现不同的网络技术，docke将swarm引擎加到了新的版本中，以提供集群网络的更好支持。","slug":"docker-libnetwork","published":1,"updated":"2022-03-13T01:17:12.409Z","_id":"cl0oi8mej000v417t6eys662g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><p>docker的版本不断迭代，从1.7开始，docker将网络的部分以插件化的方式剥离出来，允许用户通过命令实现不同的后端，增加了docker的灵活性。剥离出来的网络叫做libnetwork，显而易见，它希望将来为不同的容器定义统一网络层的规范。</p>\n<h1 id=\"2-容器的网络模型（CNM）\"><a href=\"#2-容器的网络模型（CNM）\" class=\"headerlink\" title=\"2. 容器的网络模型（CNM）\"></a>2. 容器的网络模型（CNM）</h1><p>容器网络模型（Container Networking Model，CNM）最开始的提出者是思科公司员工Erik，设计了一个docker扩展的网桥模型。后来，他将这个模型反馈给docker的团队，得到了docker的极大的认可，也是libnetwork的雏形。</p>\n<p>CNM主要包含三点sandbox、endpoint和network。</p>\n<p>之前有篇文章是<a href=\"http://feilong.tech/2018/09/10/docker-namespace/\">DOCKER之命名空间</a> ，文章简要说了一下网络的隔离，讲述了一些docker的网络基本知识。其实也是libnetwork的一个缩影。</p>\n<p>sandbox相当于网卡配置、路由表、dns配置、网络命名空间等</p>\n<p>endpoint相当于容器内部的虚拟网卡（eth0等）</p>\n<p>network代表一个或者多个网络</p>\n<p>当然，这些概念并不是对等，这里只是有一个类比的关系。</p>\n<p><img src=\"/uploads/2018/09/mp55072270_1453099798138_1_th.jpeg\"></p>\n<p>可见，具体底层网络如何实现，每个容器的endpoint所连接的network，以及sandbox如何进行隔离，都可以不用关心。只要libnetwork提供网络和接入点，只需要容器给街上或者拔下（这里指的是endpoint和network的链接和断开），剩下的都是直接由驱动自己实现。</p>\n<h1 id=\"3-docker网络bridge\"><a href=\"#3-docker网络bridge\" class=\"headerlink\" title=\"3. docker网络bridge\"></a>3. docker网络bridge</h1><p>docker自带了查看网络的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class=\"line\">5adfcce2b464        bridge                bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">c2d85093b647        docker_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0eec2b9c7d57        go_default            bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">604e2a13b930        host                  host                <span class=\"built_in\">local</span></span><br><span class=\"line\">bded596e1021        marvin2_default       bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c006e90b785        marvin_code-network   bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">ef31b0632a2f        marvin_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">72169048d0e7        none                  null                <span class=\"built_in\">local</span></span><br><span class=\"line\">6eb2e51b63e2        redis_default         bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c6e4cc36312        registry_default      bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">localhost:~ feilong$</span><br></pre></td></tr></table></figure>\n\n<p>从查询结果，可以看出，我的电脑上面，有很多的网络信息。docker默认是携带3种网络：bridge、host、none，这三个网络是不能被删除的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">rm</span> host</span><br><span class=\"line\">Error response from daemon: host is a pre-defined network and cannot be removed</span><br><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">rm</span> bridge</span><br><span class=\"line\">Error response from daemon: bridge is a pre-defined network and cannot be removed</span><br><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">rm</span> none</span><br><span class=\"line\">Error response from daemon: none is a pre-defined network and cannot be removed</span><br><span class=\"line\">localhost:~ feilong$</span><br></pre></td></tr></table></figure>\n\n<p>我们在运行容器的时候，指定的网络类型（–network&#x3D;bridge–network&#x3D;host–network&#x3D;none）其实就是来源于这里，又由于docker默认是使用bridge的网络类型，通常是省略这个参数。</p>\n<h4 id=\"使用docker-compose发生了什么？\"><a href=\"#使用docker-compose发生了什么？\" class=\"headerlink\" title=\"使用docker-compose发生了什么？\"></a>使用docker-compose发生了什么？</h4><p>我们在使用docker-compose的时候，通常是不用设置–link参数的，那是因为，docker会认为使用docker-compose启动多个容器，但是这几个容器是组成了一个service，会自动创建一个bridge类型的网络，然后将启动的容器，放到这个网络中，和其他的网络进行隔离。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span> </span><br><span class=\"line\">  <span class=\"attr\">busybox1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">busybox1</span></span><br><span class=\"line\">  <span class=\"attr\">busybox2:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">busybox2</span></span><br><span class=\"line\">  <span class=\"attr\">busybox3:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">busybox3</span></span><br></pre></td></tr></table></figure>\n\n<p>查看docker的网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$ docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class=\"line\">5adfcce2b464        bridge                bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">c2d85093b647        docker_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0eec2b9c7d57        go_default            bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">604e2a13b930        host                  host                <span class=\"built_in\">local</span></span><br><span class=\"line\">bded596e1021        marvin2_default       bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c006e90b785        marvin_code-network   bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">ef31b0632a2f        marvin_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">72169048d0e7        none                  null                <span class=\"built_in\">local</span></span><br><span class=\"line\">6eb2e51b63e2        redis_default         bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c6e4cc36312        registry_default      bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$</span><br></pre></td></tr></table></figure>\n\n<p>运行docker-compose，然后查看网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$ docker-compose up -d</span><br><span class=\"line\">Creating network <span class=\"string\">&quot;test_default&quot;</span> with the default driver</span><br><span class=\"line\">Creating busybox2 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating busybox3 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating busybox1 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$ docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class=\"line\">5adfcce2b464        bridge                bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">c2d85093b647        docker_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0eec2b9c7d57        go_default            bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">604e2a13b930        host                  host                <span class=\"built_in\">local</span></span><br><span class=\"line\">bded596e1021        marvin2_default       bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c006e90b785        marvin_code-network   bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">ef31b0632a2f        marvin_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">72169048d0e7        none                  null                <span class=\"built_in\">local</span></span><br><span class=\"line\">6eb2e51b63e2        redis_default         bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c6e4cc36312        registry_default      bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">fca18d6c1259        test_default          bridge              <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面，我们看出，在运行docker-compose的时候，就已经创建了一个网络，叫做 test_default</p>\n<h4 id=\"link-？\"><a href=\"#link-？\" class=\"headerlink\" title=\"--link ？\"></a>--link ？</h4><p>我们知道，想要将两个容器链接起来，可以使用–link参数（在使用命令行 docker run的时候）。其实，我们在进行docker run的时候，创建的容器，加入了一个默认的网络“bridge”，但是在“bridge”中，默认是不能进行连接的，需要加上–link，使bridge内部的容器进行连接。这样也是为了隔离容器。试想一下，如果不采用这个机制，那么网络空间就不再是隔离的状态了，就和docker的设计不太相符。</p>\n<p>我们分别运行一个test1和test2容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker run -itd --name test1 busybox</span><br><span class=\"line\">bfca24444ce4ee16d6e2af76cf0967d0923dbbed4310c811cdbefef5d6b5b67f</span><br><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker run -itd --name test2 busybox</span><br><span class=\"line\">48a5c7e9c042de472ed5edd328a53952fe9552357eff7b1c81f4d9e3bbed1c8c</span><br><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker ps  grep <span class=\"built_in\">test</span></span><br><span class=\"line\">48a5c7e9c042        busybox                              <span class=\"string\">&quot;sh&quot;</span>                     6 seconds ago       Up 5 seconds                                  test2</span><br><span class=\"line\">bfca24444ce4        busybox                              <span class=\"string\">&quot;sh&quot;</span>                     10 seconds ago      Up 9 seconds                                  test1</span><br><span class=\"line\">b742b60be6a0        registry:latest                      <span class=\"string\">&quot;/entrypoint.sh /etc…&quot;</span>   22 hours ago        Up 3 hours          0.0.0.0:32768-&gt;5000/tcp   thirsty_almeida</span><br><span class=\"line\">feilongdeMacBook-Pro:~ feilong$</span><br></pre></td></tr></table></figure>\n\n<p>然后我们进入test1，ping一下test2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker <span class=\"built_in\">exec</span> -it test1 sh</span><br><span class=\"line\">/ <span class=\"comment\"># ping test2</span></span><br><span class=\"line\">ping: bad address <span class=\"string\">&#x27;test2&#x27;</span></span><br><span class=\"line\">/ <span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>结果很明显，是不通的！</p>\n<p>但是他们是在同一个网络里面的</p>\n<p><img src=\"/uploads/2018/10/1__bash.jpg\"> <img src=\"/uploads/2018/10/2__bash.jpg\"></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>libnetwork通过CNM，抽象了下层网络的实现让docker可以根据需要，实现不同的网络技术，docke将swarm引擎加到了新的版本中，以提供集群网络的更好支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><p>docker的版本不断迭代，从1.7开始，docker将网络的部分以插件化的方式剥离出来，允许用户通过命令实现不同的后端，增加了docker的灵活性。剥离出来的网络叫做libnetwork，显而易见，它希望将来为不同的容器定义统一网络层的规范。</p>\n<h1 id=\"2-容器的网络模型（CNM）\"><a href=\"#2-容器的网络模型（CNM）\" class=\"headerlink\" title=\"2. 容器的网络模型（CNM）\"></a>2. 容器的网络模型（CNM）</h1><p>容器网络模型（Container Networking Model，CNM）最开始的提出者是思科公司员工Erik，设计了一个docker扩展的网桥模型。后来，他将这个模型反馈给docker的团队，得到了docker的极大的认可，也是libnetwork的雏形。</p>\n<p>CNM主要包含三点sandbox、endpoint和network。</p>\n<p>之前有篇文章是<a href=\"http://feilong.tech/2018/09/10/docker-namespace/\">DOCKER之命名空间</a> ，文章简要说了一下网络的隔离，讲述了一些docker的网络基本知识。其实也是libnetwork的一个缩影。</p>\n<p>sandbox相当于网卡配置、路由表、dns配置、网络命名空间等</p>\n<p>endpoint相当于容器内部的虚拟网卡（eth0等）</p>\n<p>network代表一个或者多个网络</p>\n<p>当然，这些概念并不是对等，这里只是有一个类比的关系。</p>\n<p><img src=\"/uploads/2018/09/mp55072270_1453099798138_1_th.jpeg\"></p>\n<p>可见，具体底层网络如何实现，每个容器的endpoint所连接的network，以及sandbox如何进行隔离，都可以不用关心。只要libnetwork提供网络和接入点，只需要容器给街上或者拔下（这里指的是endpoint和network的链接和断开），剩下的都是直接由驱动自己实现。</p>\n<h1 id=\"3-docker网络bridge\"><a href=\"#3-docker网络bridge\" class=\"headerlink\" title=\"3. docker网络bridge\"></a>3. docker网络bridge</h1><p>docker自带了查看网络的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class=\"line\">5adfcce2b464        bridge                bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">c2d85093b647        docker_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0eec2b9c7d57        go_default            bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">604e2a13b930        host                  host                <span class=\"built_in\">local</span></span><br><span class=\"line\">bded596e1021        marvin2_default       bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c006e90b785        marvin_code-network   bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">ef31b0632a2f        marvin_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">72169048d0e7        none                  null                <span class=\"built_in\">local</span></span><br><span class=\"line\">6eb2e51b63e2        redis_default         bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c6e4cc36312        registry_default      bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">localhost:~ feilong$</span><br></pre></td></tr></table></figure>\n\n<p>从查询结果，可以看出，我的电脑上面，有很多的网络信息。docker默认是携带3种网络：bridge、host、none，这三个网络是不能被删除的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">rm</span> host</span><br><span class=\"line\">Error response from daemon: host is a pre-defined network and cannot be removed</span><br><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">rm</span> bridge</span><br><span class=\"line\">Error response from daemon: bridge is a pre-defined network and cannot be removed</span><br><span class=\"line\">localhost:~ feilong$ docker network <span class=\"built_in\">rm</span> none</span><br><span class=\"line\">Error response from daemon: none is a pre-defined network and cannot be removed</span><br><span class=\"line\">localhost:~ feilong$</span><br></pre></td></tr></table></figure>\n\n<p>我们在运行容器的时候，指定的网络类型（–network&#x3D;bridge–network&#x3D;host–network&#x3D;none）其实就是来源于这里，又由于docker默认是使用bridge的网络类型，通常是省略这个参数。</p>\n<h4 id=\"使用docker-compose发生了什么？\"><a href=\"#使用docker-compose发生了什么？\" class=\"headerlink\" title=\"使用docker-compose发生了什么？\"></a>使用docker-compose发生了什么？</h4><p>我们在使用docker-compose的时候，通常是不用设置–link参数的，那是因为，docker会认为使用docker-compose启动多个容器，但是这几个容器是组成了一个service，会自动创建一个bridge类型的网络，然后将启动的容器，放到这个网络中，和其他的网络进行隔离。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span> </span><br><span class=\"line\">  <span class=\"attr\">busybox1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">busybox1</span></span><br><span class=\"line\">  <span class=\"attr\">busybox2:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">busybox2</span></span><br><span class=\"line\">  <span class=\"attr\">busybox3:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">busybox3</span></span><br></pre></td></tr></table></figure>\n\n<p>查看docker的网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$ docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class=\"line\">5adfcce2b464        bridge                bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">c2d85093b647        docker_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0eec2b9c7d57        go_default            bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">604e2a13b930        host                  host                <span class=\"built_in\">local</span></span><br><span class=\"line\">bded596e1021        marvin2_default       bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c006e90b785        marvin_code-network   bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">ef31b0632a2f        marvin_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">72169048d0e7        none                  null                <span class=\"built_in\">local</span></span><br><span class=\"line\">6eb2e51b63e2        redis_default         bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c6e4cc36312        registry_default      bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$</span><br></pre></td></tr></table></figure>\n\n<p>运行docker-compose，然后查看网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$ docker-compose up -d</span><br><span class=\"line\">Creating network <span class=\"string\">&quot;test_default&quot;</span> with the default driver</span><br><span class=\"line\">Creating busybox2 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating busybox3 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating busybox1 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">localhost:<span class=\"built_in\">test</span> feilong$ docker network <span class=\"built_in\">ls</span></span><br><span class=\"line\">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class=\"line\">5adfcce2b464        bridge                bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">c2d85093b647        docker_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0eec2b9c7d57        go_default            bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">604e2a13b930        host                  host                <span class=\"built_in\">local</span></span><br><span class=\"line\">bded596e1021        marvin2_default       bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c006e90b785        marvin_code-network   bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">ef31b0632a2f        marvin_default        bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">72169048d0e7        none                  null                <span class=\"built_in\">local</span></span><br><span class=\"line\">6eb2e51b63e2        redis_default         bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">6c6e4cc36312        registry_default      bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">fca18d6c1259        test_default          bridge              <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面，我们看出，在运行docker-compose的时候，就已经创建了一个网络，叫做 test_default</p>\n<h4 id=\"link-？\"><a href=\"#link-？\" class=\"headerlink\" title=\"--link ？\"></a>--link ？</h4><p>我们知道，想要将两个容器链接起来，可以使用–link参数（在使用命令行 docker run的时候）。其实，我们在进行docker run的时候，创建的容器，加入了一个默认的网络“bridge”，但是在“bridge”中，默认是不能进行连接的，需要加上–link，使bridge内部的容器进行连接。这样也是为了隔离容器。试想一下，如果不采用这个机制，那么网络空间就不再是隔离的状态了，就和docker的设计不太相符。</p>\n<p>我们分别运行一个test1和test2容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker run -itd --name test1 busybox</span><br><span class=\"line\">bfca24444ce4ee16d6e2af76cf0967d0923dbbed4310c811cdbefef5d6b5b67f</span><br><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker run -itd --name test2 busybox</span><br><span class=\"line\">48a5c7e9c042de472ed5edd328a53952fe9552357eff7b1c81f4d9e3bbed1c8c</span><br><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker ps  grep <span class=\"built_in\">test</span></span><br><span class=\"line\">48a5c7e9c042        busybox                              <span class=\"string\">&quot;sh&quot;</span>                     6 seconds ago       Up 5 seconds                                  test2</span><br><span class=\"line\">bfca24444ce4        busybox                              <span class=\"string\">&quot;sh&quot;</span>                     10 seconds ago      Up 9 seconds                                  test1</span><br><span class=\"line\">b742b60be6a0        registry:latest                      <span class=\"string\">&quot;/entrypoint.sh /etc…&quot;</span>   22 hours ago        Up 3 hours          0.0.0.0:32768-&gt;5000/tcp   thirsty_almeida</span><br><span class=\"line\">feilongdeMacBook-Pro:~ feilong$</span><br></pre></td></tr></table></figure>\n\n<p>然后我们进入test1，ping一下test2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:~ feilong$ docker <span class=\"built_in\">exec</span> -it test1 sh</span><br><span class=\"line\">/ <span class=\"comment\"># ping test2</span></span><br><span class=\"line\">ping: bad address <span class=\"string\">&#x27;test2&#x27;</span></span><br><span class=\"line\">/ <span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>结果很明显，是不通的！</p>\n<p>但是他们是在同一个网络里面的</p>\n<p><img src=\"/uploads/2018/10/1__bash.jpg\"> <img src=\"/uploads/2018/10/2__bash.jpg\"></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>libnetwork通过CNM，抽象了下层网络的实现让docker可以根据需要，实现不同的网络技术，docke将swarm引擎加到了新的版本中，以提供集群网络的更好支持。</p>\n"},{"title":"docker之link的使用","id":"304","date":"2018-08-31T14:52:43.000Z","_content":"\nDocker功能可以说是非常强大，但是如果想要短时间掌握docker的使用，还是有一些难度的。之前有了解一些docker的知识，但是大多数都是囫囵吞枣。并没有从最基础的知识学起，所以现在想要系统的学习一下docker的知识。\n\n### 通信的痛点\n\nlink的主要作用是实现不同容器之间的连接。 举个例子，我现在有个PHP的容器，我又创建了一个mysql的容器，这个时候，如果我想要使用PHP连接mysql的容器，最常规的方式就是通过ip连接。但是这样的话，如果mysql的容器一旦重启或者重新编译，那么ip就会有可能变动，我们就需要手动更改PHP容器内连接的ip，这样的维护成本太高了。 link的作用就是要解决这个痛点问题。\n\n### link的实现\n\n我们首先pull一个busybox的镜像，busybox是一个非常小巧的Linux镜像，占用的空间只有几MB，但是相比较Ubuntu的镜像，要小很多倍，而且也集成了很全的Linux命令 ![](/uploads/2018/08/pull-busybox.png) ![](/uploads/2018/08/busyboxandubuntu.png)\n\n#### 创建test1容器\n\n![](/uploads/2018/08/test1.png) 从截图中，我们可以看出test1的ip是172.17.0.2\n\n#### 创建test2容器\n\n我们需要新打开一个窗口，然后创建test2容器 ![](/uploads/2018/08/test2.png) 这个时候我们ping test1的容器，是不能ping通的。\n\n#### 使用link关联test1和test2\n\n我们推出test2，删除test2容器，重新run一个容器 ![](/uploads/2018/08/test22.png) 这个时候我们发现test2里面是可以通过别名test1去进行连接， 所以，比如test1里面运行了mysql，test2里面运行了PHP，那么，连接mysql的地方，完全可以把主机的地址写成test1\n\n### 总结\n\n使用link的作用显而易见，我们可以通过别名，直接让两个容器进行通信，使用容器名称通信的优势：\n\n1.  不用担心ip的变动，因为name是唯一的\n2.  极大的增加了可读性\n3.  降低了运维成本","source":"_posts/docker-link.md","raw":"---\ntitle: docker之link的使用\ntags:\n  - docker\n  - Linux\n  - 容器\nid: '304'\ncategories:\n  - - Docker\n  - - Linux\ndate: 2018-08-31 22:52:43\n---\n\nDocker功能可以说是非常强大，但是如果想要短时间掌握docker的使用，还是有一些难度的。之前有了解一些docker的知识，但是大多数都是囫囵吞枣。并没有从最基础的知识学起，所以现在想要系统的学习一下docker的知识。\n\n### 通信的痛点\n\nlink的主要作用是实现不同容器之间的连接。 举个例子，我现在有个PHP的容器，我又创建了一个mysql的容器，这个时候，如果我想要使用PHP连接mysql的容器，最常规的方式就是通过ip连接。但是这样的话，如果mysql的容器一旦重启或者重新编译，那么ip就会有可能变动，我们就需要手动更改PHP容器内连接的ip，这样的维护成本太高了。 link的作用就是要解决这个痛点问题。\n\n### link的实现\n\n我们首先pull一个busybox的镜像，busybox是一个非常小巧的Linux镜像，占用的空间只有几MB，但是相比较Ubuntu的镜像，要小很多倍，而且也集成了很全的Linux命令 ![](/uploads/2018/08/pull-busybox.png) ![](/uploads/2018/08/busyboxandubuntu.png)\n\n#### 创建test1容器\n\n![](/uploads/2018/08/test1.png) 从截图中，我们可以看出test1的ip是172.17.0.2\n\n#### 创建test2容器\n\n我们需要新打开一个窗口，然后创建test2容器 ![](/uploads/2018/08/test2.png) 这个时候我们ping test1的容器，是不能ping通的。\n\n#### 使用link关联test1和test2\n\n我们推出test2，删除test2容器，重新run一个容器 ![](/uploads/2018/08/test22.png) 这个时候我们发现test2里面是可以通过别名test1去进行连接， 所以，比如test1里面运行了mysql，test2里面运行了PHP，那么，连接mysql的地方，完全可以把主机的地址写成test1\n\n### 总结\n\n使用link的作用显而易见，我们可以通过别名，直接让两个容器进行通信，使用容器名称通信的优势：\n\n1.  不用担心ip的变动，因为name是唯一的\n2.  极大的增加了可读性\n3.  降低了运维成本","slug":"docker-link","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mel000x417tbikwbv35","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Docker功能可以说是非常强大，但是如果想要短时间掌握docker的使用，还是有一些难度的。之前有了解一些docker的知识，但是大多数都是囫囵吞枣。并没有从最基础的知识学起，所以现在想要系统的学习一下docker的知识。</p>\n<h3 id=\"通信的痛点\"><a href=\"#通信的痛点\" class=\"headerlink\" title=\"通信的痛点\"></a>通信的痛点</h3><p>link的主要作用是实现不同容器之间的连接。 举个例子，我现在有个PHP的容器，我又创建了一个mysql的容器，这个时候，如果我想要使用PHP连接mysql的容器，最常规的方式就是通过ip连接。但是这样的话，如果mysql的容器一旦重启或者重新编译，那么ip就会有可能变动，我们就需要手动更改PHP容器内连接的ip，这样的维护成本太高了。 link的作用就是要解决这个痛点问题。</p>\n<h3 id=\"link的实现\"><a href=\"#link的实现\" class=\"headerlink\" title=\"link的实现\"></a>link的实现</h3><p>我们首先pull一个busybox的镜像，busybox是一个非常小巧的Linux镜像，占用的空间只有几MB，但是相比较Ubuntu的镜像，要小很多倍，而且也集成了很全的Linux命令 <img src=\"/uploads/2018/08/pull-busybox.png\"> <img src=\"/uploads/2018/08/busyboxandubuntu.png\"></p>\n<h4 id=\"创建test1容器\"><a href=\"#创建test1容器\" class=\"headerlink\" title=\"创建test1容器\"></a>创建test1容器</h4><p><img src=\"/uploads/2018/08/test1.png\"> 从截图中，我们可以看出test1的ip是172.17.0.2</p>\n<h4 id=\"创建test2容器\"><a href=\"#创建test2容器\" class=\"headerlink\" title=\"创建test2容器\"></a>创建test2容器</h4><p>我们需要新打开一个窗口，然后创建test2容器 <img src=\"/uploads/2018/08/test2.png\"> 这个时候我们ping test1的容器，是不能ping通的。</p>\n<h4 id=\"使用link关联test1和test2\"><a href=\"#使用link关联test1和test2\" class=\"headerlink\" title=\"使用link关联test1和test2\"></a>使用link关联test1和test2</h4><p>我们推出test2，删除test2容器，重新run一个容器 <img src=\"/uploads/2018/08/test22.png\"> 这个时候我们发现test2里面是可以通过别名test1去进行连接， 所以，比如test1里面运行了mysql，test2里面运行了PHP，那么，连接mysql的地方，完全可以把主机的地址写成test1</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用link的作用显而易见，我们可以通过别名，直接让两个容器进行通信，使用容器名称通信的优势：</p>\n<ol>\n<li>不用担心ip的变动，因为name是唯一的</li>\n<li>极大的增加了可读性</li>\n<li>降低了运维成本</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker功能可以说是非常强大，但是如果想要短时间掌握docker的使用，还是有一些难度的。之前有了解一些docker的知识，但是大多数都是囫囵吞枣。并没有从最基础的知识学起，所以现在想要系统的学习一下docker的知识。</p>\n<h3 id=\"通信的痛点\"><a href=\"#通信的痛点\" class=\"headerlink\" title=\"通信的痛点\"></a>通信的痛点</h3><p>link的主要作用是实现不同容器之间的连接。 举个例子，我现在有个PHP的容器，我又创建了一个mysql的容器，这个时候，如果我想要使用PHP连接mysql的容器，最常规的方式就是通过ip连接。但是这样的话，如果mysql的容器一旦重启或者重新编译，那么ip就会有可能变动，我们就需要手动更改PHP容器内连接的ip，这样的维护成本太高了。 link的作用就是要解决这个痛点问题。</p>\n<h3 id=\"link的实现\"><a href=\"#link的实现\" class=\"headerlink\" title=\"link的实现\"></a>link的实现</h3><p>我们首先pull一个busybox的镜像，busybox是一个非常小巧的Linux镜像，占用的空间只有几MB，但是相比较Ubuntu的镜像，要小很多倍，而且也集成了很全的Linux命令 <img src=\"/uploads/2018/08/pull-busybox.png\"> <img src=\"/uploads/2018/08/busyboxandubuntu.png\"></p>\n<h4 id=\"创建test1容器\"><a href=\"#创建test1容器\" class=\"headerlink\" title=\"创建test1容器\"></a>创建test1容器</h4><p><img src=\"/uploads/2018/08/test1.png\"> 从截图中，我们可以看出test1的ip是172.17.0.2</p>\n<h4 id=\"创建test2容器\"><a href=\"#创建test2容器\" class=\"headerlink\" title=\"创建test2容器\"></a>创建test2容器</h4><p>我们需要新打开一个窗口，然后创建test2容器 <img src=\"/uploads/2018/08/test2.png\"> 这个时候我们ping test1的容器，是不能ping通的。</p>\n<h4 id=\"使用link关联test1和test2\"><a href=\"#使用link关联test1和test2\" class=\"headerlink\" title=\"使用link关联test1和test2\"></a>使用link关联test1和test2</h4><p>我们推出test2，删除test2容器，重新run一个容器 <img src=\"/uploads/2018/08/test22.png\"> 这个时候我们发现test2里面是可以通过别名test1去进行连接， 所以，比如test1里面运行了mysql，test2里面运行了PHP，那么，连接mysql的地方，完全可以把主机的地址写成test1</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用link的作用显而易见，我们可以通过别名，直接让两个容器进行通信，使用容器名称通信的优势：</p>\n<ol>\n<li>不用担心ip的变动，因为name是唯一的</li>\n<li>极大的增加了可读性</li>\n<li>降低了运维成本</li>\n</ol>\n"},{"title":"使用docker搭建lnmp (二)","id":"183","comments":0,"date":"2017-11-01T07:45:31.000Z","_content":"\ndocker 名为容器。何为容器，也就是所谓的瓶子，罐子。用可以容纳东西的容器，不同容器之间互不影响。比如，一个瓶子装酒精，一个瓶子装水，非人为状态下，两个瓶子是没有关联的。\n\n同样，docker也就是这个作用，每个docker可以作为叫做一个“瓶子”，每个\"瓶子\"可以当做PHP的运行环境，可以当做Java的运行环境。环境完全独立。外部的环境(内存，操作系统，CPU等)相当于柜子，承载着这些\"瓶子\"。\n<!-- more -->\n![](/uploads/2017/11/shiyi.png)\n\n上一篇博客记录的是比较简单的docker配置lnmp的过程。但是并不是一个正确的例子，虽然我没有线上使用docker的经验，但是以我来看，可以使用nginx作为前端机，然后配置外部机器的某个端口（如8080）映射到docker内部的某个端口（80），然后域名的请求转发到机器的8080端口，自然就到了docker内部了。\n\n![](/uploads/2017/11/tuopu.png)\n\n*   [获取lnmp镜像](#获取lnmp镜像)\n*   [运行一个docker](#运行一个docker)\n*   [进入该容器里面](#进入该容器里面)\n*   [配置nginx](#配置nginx)\n*   [配置MySQL](#配置mysql)\n*   [找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）](#找到wordpress项目然后更改配置文件改成mysql的账号密码和数据库-略)\n*   [前端机nginx绑定域名，并且将请求转发到8080端口](#前端机nginx绑定域名并且将请求转发到8080端口)\n*   [访问域名，测试是否正常](#访问域名测试是否正常)\n*   [总结](#总结)\n\n#### 获取lnmp镜像\n\n```bash\n$ docker search lnmp\n\nNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nimagine10255/centos6-lnmp-php56   centos6-lnmp-php56                              31                   [OK]\ntwang2218/lnmp-nginx              这是 LNMP 示例中的 nginx 镜像                           9                    [OK]\ndomainer/centos-lnmp                                                              5                    [OK]\nmaxwhale/ubuntu14-lnmp1.2         Ubuntu14.04 lnmp1.2                             4                    [OK]\ndzer/lnmp                         lnmp环境                                          4\nmaxwhale/lnmp-docker              LNMP Docker                                     4                    [OK]\nwinstonpro/lnmp                   based on ubuntu 14.04                           3\n...\n\n$ docker pull domainer/centos-lnmp\nlatest: Pulling from domainer/centos-lnmp\nlatest: Pulling from imagine10255/centos6-lnmp-php56\nf402e43879a8: Pull complete\ne76184b3b2ef: Extracting [==========>                                        ] 7.864 MB/36.8 MB\nc92be21ea534: Download complete\nae5dfaaf3d26: Downloading [====================================>              ]  6.53 MB/8.989 MB\n....\nDigest: sha256:a555d86ace933743c1c1f0373f16931a58dd737f889a04cfd8027e3eeb0c3c48\nStatus: Downloaded newer image for domainer/centos-lnmp:latest\n```\n\n#### 运行一个docker\n\n```bash\n$ docker run -d -v /etc/docker_nginx:/etc/nginx -v /tmp:/tmp -v /usr/share/docker_nginx:/usr/share/nginx -p 8080:80 --name my_blog domainer/centos-lnmp #外部端口8080映射到内部80端口 \n$ docker ps\nCONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                          NAMES\nb9c310b6bf8a        domainer/centos-lnmp   \"supervisord -n\"    5 seconds ago       Up 4 seconds        22/tcp, 0.0.0.0:8080->80/tcp   my_blog\n```\n\n#### 进入该容器里面\n\n```bash\n$ docker exec -ti my_blog /bin/bash ## 进入容器\n[root@3f2505bc3bd5 nginx]# yum update ## 更新源，然后启动各个服务\n[root@3f2505bc3bd5 nginx]# /etc/init.d/nginx start\nStarting nginx:                                            [  OK  ]\n[root@3f2505bc3bd5 nginx]# /etc/init.d/mysqld start\nStarting mysqld:                                           [  OK  ]\n[root@3f2505bc3bd5 nginx]# /etc/init.d/php-fpm start\nStarting php-fpm:                                          [  OK  ]\n```\n\n#### 配置nginx\n\n```bash\n$ docker exec -ti 3f2505bc3bd5 /bin/bash\n[root@3f2505bc3bd5 nginx]# cd /etc/nginx/conf.d/\n[root@3f2505bc3bd5 nginx]# vim blog.conf\n```\n\n```nginx\nserver {\n        listen 80;\n        root /usr/share/nginx/wordpress;\n        index index.php index.html index.htm index.nginx-debian.html;\n\n        location ~ \\.php$ {\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_na\nme;\n                include        fastcgi_params;\n\n        }\n}\n```\n\n#### 配置MySQL\n\n先将外部的MySQL导出来，放到 /tmp目录下，因为之前/tmp 映射到了容器内部\n\n```mysql\nmysqldump -hlocalhost -uroot -pYOUR_PASSWORD wordpress > /tmp/wordpress.sql\n```\n\n登录容器内部，导入MySQL\n\n```bash\n$ docker exec -ti 3f2505bc3bd5 /bin/bash\n$ mysql -uroot -pSlightech602 < wordpress.sql\n```\n\n如果出现`Unknown collation: 'utf8mb4_unicode_520_ci'` 只需要把`utf8mb4_unicode_520_ci`替换成`utf8_general_ci` 如果出现`Unknown collation: 'utf8mb4'` 只需要把`utf8mb4`替换成`utf8`\n\n#### 找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）\n\n#### 前端机nginx绑定域名，并且将请求转发到8080端口\n\n```nginx\nupstream docker0 {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name test.feilong.tech;\n    root /usr/share/docker_nginx/wordpress;\n    index index.php index.html index.htm index.nginx-debian.html;\n\n    location / {\n        proxy_pass http://docker0;\n    }\n}\n```\n\n#### 访问域名，测试是否正常\n\ntest.feilong.tech\n\n#### 总结\n\n可能实际线上的情景非常复杂，因为很多大厂会有几百个docker实例，以及完善的监控机制，以上也是一个比较简单的demo罢了。","source":"_posts/docker-lnmp-2.md","raw":"---\ntitle: 使用docker搭建lnmp (二)\ntags:\n  - docker\n  - 容器\nid: '183'\ncategories:\n  - - Docker\n  - - Linux\n  - - Nginx\n  - - PHP\ncomments: false\ndate: 2017-11-01 15:45:31\n---\n\ndocker 名为容器。何为容器，也就是所谓的瓶子，罐子。用可以容纳东西的容器，不同容器之间互不影响。比如，一个瓶子装酒精，一个瓶子装水，非人为状态下，两个瓶子是没有关联的。\n\n同样，docker也就是这个作用，每个docker可以作为叫做一个“瓶子”，每个\"瓶子\"可以当做PHP的运行环境，可以当做Java的运行环境。环境完全独立。外部的环境(内存，操作系统，CPU等)相当于柜子，承载着这些\"瓶子\"。\n<!-- more -->\n![](/uploads/2017/11/shiyi.png)\n\n上一篇博客记录的是比较简单的docker配置lnmp的过程。但是并不是一个正确的例子，虽然我没有线上使用docker的经验，但是以我来看，可以使用nginx作为前端机，然后配置外部机器的某个端口（如8080）映射到docker内部的某个端口（80），然后域名的请求转发到机器的8080端口，自然就到了docker内部了。\n\n![](/uploads/2017/11/tuopu.png)\n\n*   [获取lnmp镜像](#获取lnmp镜像)\n*   [运行一个docker](#运行一个docker)\n*   [进入该容器里面](#进入该容器里面)\n*   [配置nginx](#配置nginx)\n*   [配置MySQL](#配置mysql)\n*   [找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）](#找到wordpress项目然后更改配置文件改成mysql的账号密码和数据库-略)\n*   [前端机nginx绑定域名，并且将请求转发到8080端口](#前端机nginx绑定域名并且将请求转发到8080端口)\n*   [访问域名，测试是否正常](#访问域名测试是否正常)\n*   [总结](#总结)\n\n#### 获取lnmp镜像\n\n```bash\n$ docker search lnmp\n\nNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nimagine10255/centos6-lnmp-php56   centos6-lnmp-php56                              31                   [OK]\ntwang2218/lnmp-nginx              这是 LNMP 示例中的 nginx 镜像                           9                    [OK]\ndomainer/centos-lnmp                                                              5                    [OK]\nmaxwhale/ubuntu14-lnmp1.2         Ubuntu14.04 lnmp1.2                             4                    [OK]\ndzer/lnmp                         lnmp环境                                          4\nmaxwhale/lnmp-docker              LNMP Docker                                     4                    [OK]\nwinstonpro/lnmp                   based on ubuntu 14.04                           3\n...\n\n$ docker pull domainer/centos-lnmp\nlatest: Pulling from domainer/centos-lnmp\nlatest: Pulling from imagine10255/centos6-lnmp-php56\nf402e43879a8: Pull complete\ne76184b3b2ef: Extracting [==========>                                        ] 7.864 MB/36.8 MB\nc92be21ea534: Download complete\nae5dfaaf3d26: Downloading [====================================>              ]  6.53 MB/8.989 MB\n....\nDigest: sha256:a555d86ace933743c1c1f0373f16931a58dd737f889a04cfd8027e3eeb0c3c48\nStatus: Downloaded newer image for domainer/centos-lnmp:latest\n```\n\n#### 运行一个docker\n\n```bash\n$ docker run -d -v /etc/docker_nginx:/etc/nginx -v /tmp:/tmp -v /usr/share/docker_nginx:/usr/share/nginx -p 8080:80 --name my_blog domainer/centos-lnmp #外部端口8080映射到内部80端口 \n$ docker ps\nCONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                          NAMES\nb9c310b6bf8a        domainer/centos-lnmp   \"supervisord -n\"    5 seconds ago       Up 4 seconds        22/tcp, 0.0.0.0:8080->80/tcp   my_blog\n```\n\n#### 进入该容器里面\n\n```bash\n$ docker exec -ti my_blog /bin/bash ## 进入容器\n[root@3f2505bc3bd5 nginx]# yum update ## 更新源，然后启动各个服务\n[root@3f2505bc3bd5 nginx]# /etc/init.d/nginx start\nStarting nginx:                                            [  OK  ]\n[root@3f2505bc3bd5 nginx]# /etc/init.d/mysqld start\nStarting mysqld:                                           [  OK  ]\n[root@3f2505bc3bd5 nginx]# /etc/init.d/php-fpm start\nStarting php-fpm:                                          [  OK  ]\n```\n\n#### 配置nginx\n\n```bash\n$ docker exec -ti 3f2505bc3bd5 /bin/bash\n[root@3f2505bc3bd5 nginx]# cd /etc/nginx/conf.d/\n[root@3f2505bc3bd5 nginx]# vim blog.conf\n```\n\n```nginx\nserver {\n        listen 80;\n        root /usr/share/nginx/wordpress;\n        index index.php index.html index.htm index.nginx-debian.html;\n\n        location ~ \\.php$ {\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_na\nme;\n                include        fastcgi_params;\n\n        }\n}\n```\n\n#### 配置MySQL\n\n先将外部的MySQL导出来，放到 /tmp目录下，因为之前/tmp 映射到了容器内部\n\n```mysql\nmysqldump -hlocalhost -uroot -pYOUR_PASSWORD wordpress > /tmp/wordpress.sql\n```\n\n登录容器内部，导入MySQL\n\n```bash\n$ docker exec -ti 3f2505bc3bd5 /bin/bash\n$ mysql -uroot -pSlightech602 < wordpress.sql\n```\n\n如果出现`Unknown collation: 'utf8mb4_unicode_520_ci'` 只需要把`utf8mb4_unicode_520_ci`替换成`utf8_general_ci` 如果出现`Unknown collation: 'utf8mb4'` 只需要把`utf8mb4`替换成`utf8`\n\n#### 找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）\n\n#### 前端机nginx绑定域名，并且将请求转发到8080端口\n\n```nginx\nupstream docker0 {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name test.feilong.tech;\n    root /usr/share/docker_nginx/wordpress;\n    index index.php index.html index.htm index.nginx-debian.html;\n\n    location / {\n        proxy_pass http://docker0;\n    }\n}\n```\n\n#### 访问域名，测试是否正常\n\ntest.feilong.tech\n\n#### 总结\n\n可能实际线上的情景非常复杂，因为很多大厂会有几百个docker实例，以及完善的监控机制，以上也是一个比较简单的demo罢了。","slug":"docker-lnmp-2","published":1,"updated":"2022-03-13T01:13:29.485Z","_id":"cl0oi8meo0011417t4k2i3o52","layout":"post","photos":[],"link":"","content":"<p>docker 名为容器。何为容器，也就是所谓的瓶子，罐子。用可以容纳东西的容器，不同容器之间互不影响。比如，一个瓶子装酒精，一个瓶子装水，非人为状态下，两个瓶子是没有关联的。</p>\n<p>同样，docker也就是这个作用，每个docker可以作为叫做一个“瓶子”，每个”瓶子”可以当做PHP的运行环境，可以当做Java的运行环境。环境完全独立。外部的环境(内存，操作系统，CPU等)相当于柜子，承载着这些”瓶子”。</p>\n<span id=\"more\"></span>\n<p><img src=\"/uploads/2017/11/shiyi.png\"></p>\n<p>上一篇博客记录的是比较简单的docker配置lnmp的过程。但是并不是一个正确的例子，虽然我没有线上使用docker的经验，但是以我来看，可以使用nginx作为前端机，然后配置外部机器的某个端口（如8080）映射到docker内部的某个端口（80），然后域名的请求转发到机器的8080端口，自然就到了docker内部了。</p>\n<p><img src=\"/uploads/2017/11/tuopu.png\"></p>\n<ul>\n<li><a href=\"#%E8%8E%B7%E5%8F%96lnmp%E9%95%9C%E5%83%8F\">获取lnmp镜像</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAdocker\">运行一个docker</a></li>\n<li><a href=\"#%E8%BF%9B%E5%85%A5%E8%AF%A5%E5%AE%B9%E5%99%A8%E9%87%8C%E9%9D%A2\">进入该容器里面</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEnginx\">配置nginx</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEmysql\">配置MySQL</a></li>\n<li><a href=\"#%E6%89%BE%E5%88%B0wordpress%E9%A1%B9%E7%9B%AE%E7%84%B6%E5%90%8E%E6%9B%B4%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%94%B9%E6%88%90mysql%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%95%A5\">找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）</a></li>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E6%9C%BAnginx%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%B9%B6%E4%B8%94%E5%B0%86%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B08080%E7%AB%AF%E5%8F%A3\">前端机nginx绑定域名，并且将请求转发到8080端口</a></li>\n<li><a href=\"#%E8%AE%BF%E9%97%AE%E5%9F%9F%E5%90%8D%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E6%AD%A3%E5%B8%B8\">访问域名，测试是否正常</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<h4 id=\"获取lnmp镜像\"><a href=\"#获取lnmp镜像\" class=\"headerlink\" title=\"获取lnmp镜像\"></a>获取lnmp镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search lnmp</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">imagine10255/centos6-lnmp-php56   centos6-lnmp-php56                              31                   [OK]</span><br><span class=\"line\">twang2218/lnmp-nginx              这是 LNMP 示例中的 nginx 镜像                           9                    [OK]</span><br><span class=\"line\">domainer/centos-lnmp                                                              5                    [OK]</span><br><span class=\"line\">maxwhale/ubuntu14-lnmp1.2         Ubuntu14.04 lnmp1.2                             4                    [OK]</span><br><span class=\"line\">dzer/lnmp                         lnmp环境                                          4</span><br><span class=\"line\">maxwhale/lnmp-docker              LNMP Docker                                     4                    [OK]</span><br><span class=\"line\">winstonpro/lnmp                   based on ubuntu 14.04                           3</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker pull domainer/centos-lnmp</span><br><span class=\"line\">latest: Pulling from domainer/centos-lnmp</span><br><span class=\"line\">latest: Pulling from imagine10255/centos6-lnmp-php56</span><br><span class=\"line\">f402e43879a8: Pull complete</span><br><span class=\"line\">e76184b3b2ef: Extracting [==========&gt;                                        ] 7.864 MB/36.8 MB</span><br><span class=\"line\">c92be21ea534: Download complete</span><br><span class=\"line\">ae5dfaaf3d26: Downloading [====================================&gt;              ]  6.53 MB/8.989 MB</span><br><span class=\"line\">....</span><br><span class=\"line\">Digest: sha256:a555d86ace933743c1c1f0373f16931a58dd737f889a04cfd8027e3eeb0c3c48</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> domainer/centos-lnmp:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行一个docker\"><a href=\"#运行一个docker\" class=\"headerlink\" title=\"运行一个docker\"></a>运行一个docker</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v /etc/docker_nginx:/etc/nginx -v /tmp:/tmp -v /usr/share/docker_nginx:/usr/share/nginx -p 8080:80 --name my_blog domainer/centos-lnmp <span class=\"comment\">#外部端口8080映射到内部80端口 </span></span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                          NAMES</span><br><span class=\"line\">b9c310b6bf8a        domainer/centos-lnmp   <span class=\"string\">&quot;supervisord -n&quot;</span>    5 seconds ago       Up 4 seconds        22/tcp, 0.0.0.0:8080-&gt;80/tcp   my_blog</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入该容器里面\"><a href=\"#进入该容器里面\" class=\"headerlink\" title=\"进入该容器里面\"></a>进入该容器里面</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti my_blog /bin/bash <span class=\"comment\">## 进入容器</span></span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># yum update ## 更新源，然后启动各个服务</span></span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># /etc/init.d/nginx start</span></span><br><span class=\"line\">Starting nginx:                                            [  OK  ]</span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># /etc/init.d/mysqld start</span></span><br><span class=\"line\">Starting mysqld:                                           [  OK  ]</span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># /etc/init.d/php-fpm start</span></span><br><span class=\"line\">Starting php-fpm:                                          [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti 3f2505bc3bd5 /bin/bash</span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># cd /etc/nginx/conf.d/</span></span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># vim blog.conf</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/wordpress;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_na</span></span><br><span class=\"line\">me;</span><br><span class=\"line\">                <span class=\"attribute\">include</span>        fastcgi_params;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置MySQL\"><a href=\"#配置MySQL\" class=\"headerlink\" title=\"配置MySQL\"></a>配置MySQL</h4><p>先将外部的MySQL导出来，放到 &#x2F;tmp目录下，因为之前&#x2F;tmp 映射到了容器内部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -hlocalhost -uroot -pYOUR_PASSWORD wordpress &gt; /tmp/wordpress.sql</span><br></pre></td></tr></table></figure>\n\n<p>登录容器内部，导入MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti 3f2505bc3bd5 /bin/bash</span><br><span class=\"line\">$ mysql -uroot -pSlightech602 &lt; wordpress.sql</span><br></pre></td></tr></table></figure>\n\n<p>如果出现<code>Unknown collation: &#39;utf8mb4_unicode_520_ci&#39;</code> 只需要把<code>utf8mb4_unicode_520_ci</code>替换成<code>utf8_general_ci</code> 如果出现<code>Unknown collation: &#39;utf8mb4&#39;</code> 只需要把<code>utf8mb4</code>替换成<code>utf8</code></p>\n<h4 id=\"找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库-（略）\"><a href=\"#找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库-（略）\" class=\"headerlink\" title=\"找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）\"></a>找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）</h4><h4 id=\"前端机nginx绑定域名，并且将请求转发到8080端口\"><a href=\"#前端机nginx绑定域名，并且将请求转发到8080端口\" class=\"headerlink\" title=\"前端机nginx绑定域名，并且将请求转发到8080端口\"></a>前端机nginx绑定域名，并且将请求转发到8080端口</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> docker0 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:8080</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> test.feilong.tech;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/docker_nginx/wordpress;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://docker0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"访问域名，测试是否正常\"><a href=\"#访问域名，测试是否正常\" class=\"headerlink\" title=\"访问域名，测试是否正常\"></a>访问域名，测试是否正常</h4><p>test.feilong.tech</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>可能实际线上的情景非常复杂，因为很多大厂会有几百个docker实例，以及完善的监控机制，以上也是一个比较简单的demo罢了。</p>\n","site":{"data":{}},"excerpt":"<p>docker 名为容器。何为容器，也就是所谓的瓶子，罐子。用可以容纳东西的容器，不同容器之间互不影响。比如，一个瓶子装酒精，一个瓶子装水，非人为状态下，两个瓶子是没有关联的。</p>\n<p>同样，docker也就是这个作用，每个docker可以作为叫做一个“瓶子”，每个”瓶子”可以当做PHP的运行环境，可以当做Java的运行环境。环境完全独立。外部的环境(内存，操作系统，CPU等)相当于柜子，承载着这些”瓶子”。</p>","more":"<p><img src=\"/uploads/2017/11/shiyi.png\"></p>\n<p>上一篇博客记录的是比较简单的docker配置lnmp的过程。但是并不是一个正确的例子，虽然我没有线上使用docker的经验，但是以我来看，可以使用nginx作为前端机，然后配置外部机器的某个端口（如8080）映射到docker内部的某个端口（80），然后域名的请求转发到机器的8080端口，自然就到了docker内部了。</p>\n<p><img src=\"/uploads/2017/11/tuopu.png\"></p>\n<ul>\n<li><a href=\"#%E8%8E%B7%E5%8F%96lnmp%E9%95%9C%E5%83%8F\">获取lnmp镜像</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAdocker\">运行一个docker</a></li>\n<li><a href=\"#%E8%BF%9B%E5%85%A5%E8%AF%A5%E5%AE%B9%E5%99%A8%E9%87%8C%E9%9D%A2\">进入该容器里面</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEnginx\">配置nginx</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEmysql\">配置MySQL</a></li>\n<li><a href=\"#%E6%89%BE%E5%88%B0wordpress%E9%A1%B9%E7%9B%AE%E7%84%B6%E5%90%8E%E6%9B%B4%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%94%B9%E6%88%90mysql%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%95%A5\">找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）</a></li>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E6%9C%BAnginx%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%B9%B6%E4%B8%94%E5%B0%86%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B08080%E7%AB%AF%E5%8F%A3\">前端机nginx绑定域名，并且将请求转发到8080端口</a></li>\n<li><a href=\"#%E8%AE%BF%E9%97%AE%E5%9F%9F%E5%90%8D%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E6%AD%A3%E5%B8%B8\">访问域名，测试是否正常</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<h4 id=\"获取lnmp镜像\"><a href=\"#获取lnmp镜像\" class=\"headerlink\" title=\"获取lnmp镜像\"></a>获取lnmp镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search lnmp</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">imagine10255/centos6-lnmp-php56   centos6-lnmp-php56                              31                   [OK]</span><br><span class=\"line\">twang2218/lnmp-nginx              这是 LNMP 示例中的 nginx 镜像                           9                    [OK]</span><br><span class=\"line\">domainer/centos-lnmp                                                              5                    [OK]</span><br><span class=\"line\">maxwhale/ubuntu14-lnmp1.2         Ubuntu14.04 lnmp1.2                             4                    [OK]</span><br><span class=\"line\">dzer/lnmp                         lnmp环境                                          4</span><br><span class=\"line\">maxwhale/lnmp-docker              LNMP Docker                                     4                    [OK]</span><br><span class=\"line\">winstonpro/lnmp                   based on ubuntu 14.04                           3</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker pull domainer/centos-lnmp</span><br><span class=\"line\">latest: Pulling from domainer/centos-lnmp</span><br><span class=\"line\">latest: Pulling from imagine10255/centos6-lnmp-php56</span><br><span class=\"line\">f402e43879a8: Pull complete</span><br><span class=\"line\">e76184b3b2ef: Extracting [==========&gt;                                        ] 7.864 MB/36.8 MB</span><br><span class=\"line\">c92be21ea534: Download complete</span><br><span class=\"line\">ae5dfaaf3d26: Downloading [====================================&gt;              ]  6.53 MB/8.989 MB</span><br><span class=\"line\">....</span><br><span class=\"line\">Digest: sha256:a555d86ace933743c1c1f0373f16931a58dd737f889a04cfd8027e3eeb0c3c48</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> domainer/centos-lnmp:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行一个docker\"><a href=\"#运行一个docker\" class=\"headerlink\" title=\"运行一个docker\"></a>运行一个docker</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v /etc/docker_nginx:/etc/nginx -v /tmp:/tmp -v /usr/share/docker_nginx:/usr/share/nginx -p 8080:80 --name my_blog domainer/centos-lnmp <span class=\"comment\">#外部端口8080映射到内部80端口 </span></span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                          NAMES</span><br><span class=\"line\">b9c310b6bf8a        domainer/centos-lnmp   <span class=\"string\">&quot;supervisord -n&quot;</span>    5 seconds ago       Up 4 seconds        22/tcp, 0.0.0.0:8080-&gt;80/tcp   my_blog</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入该容器里面\"><a href=\"#进入该容器里面\" class=\"headerlink\" title=\"进入该容器里面\"></a>进入该容器里面</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti my_blog /bin/bash <span class=\"comment\">## 进入容器</span></span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># yum update ## 更新源，然后启动各个服务</span></span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># /etc/init.d/nginx start</span></span><br><span class=\"line\">Starting nginx:                                            [  OK  ]</span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># /etc/init.d/mysqld start</span></span><br><span class=\"line\">Starting mysqld:                                           [  OK  ]</span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># /etc/init.d/php-fpm start</span></span><br><span class=\"line\">Starting php-fpm:                                          [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti 3f2505bc3bd5 /bin/bash</span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># cd /etc/nginx/conf.d/</span></span><br><span class=\"line\">[root@3f2505bc3bd5 nginx]<span class=\"comment\"># vim blog.conf</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/wordpress;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_na</span></span><br><span class=\"line\">me;</span><br><span class=\"line\">                <span class=\"attribute\">include</span>        fastcgi_params;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置MySQL\"><a href=\"#配置MySQL\" class=\"headerlink\" title=\"配置MySQL\"></a>配置MySQL</h4><p>先将外部的MySQL导出来，放到 &#x2F;tmp目录下，因为之前&#x2F;tmp 映射到了容器内部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -hlocalhost -uroot -pYOUR_PASSWORD wordpress &gt; /tmp/wordpress.sql</span><br></pre></td></tr></table></figure>\n\n<p>登录容器内部，导入MySQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti 3f2505bc3bd5 /bin/bash</span><br><span class=\"line\">$ mysql -uroot -pSlightech602 &lt; wordpress.sql</span><br></pre></td></tr></table></figure>\n\n<p>如果出现<code>Unknown collation: &#39;utf8mb4_unicode_520_ci&#39;</code> 只需要把<code>utf8mb4_unicode_520_ci</code>替换成<code>utf8_general_ci</code> 如果出现<code>Unknown collation: &#39;utf8mb4&#39;</code> 只需要把<code>utf8mb4</code>替换成<code>utf8</code></p>\n<h4 id=\"找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库-（略）\"><a href=\"#找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库-（略）\" class=\"headerlink\" title=\"找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）\"></a>找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）</h4><h4 id=\"前端机nginx绑定域名，并且将请求转发到8080端口\"><a href=\"#前端机nginx绑定域名，并且将请求转发到8080端口\" class=\"headerlink\" title=\"前端机nginx绑定域名，并且将请求转发到8080端口\"></a>前端机nginx绑定域名，并且将请求转发到8080端口</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> docker0 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:8080</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> test.feilong.tech;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/share/docker_nginx/wordpress;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://docker0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"访问域名，测试是否正常\"><a href=\"#访问域名，测试是否正常\" class=\"headerlink\" title=\"访问域名，测试是否正常\"></a>访问域名，测试是否正常</h4><p>test.feilong.tech</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>可能实际线上的情景非常复杂，因为很多大厂会有几百个docker实例，以及完善的监控机制，以上也是一个比较简单的demo罢了。</p>"},{"title":"使用docker搭建lnmp环境","id":"182","comments":0,"date":"2017-10-29T13:07:26.000Z","_content":"\ndocker是一个开源的容器引擎，随着“微服务架构”正在变得越来越重要，docker也变得越来越火。但是网上的文章中，要么是很有借鉴意义的干货，要么就是使用高端术语来讲述什么叫做微服务架构。今天我就通过文章来记述一下传统lnmp迁移docker的过程。\n<!-- more -->\n*   [项目背景](#项目背景)\n*   [前期准备](#前期准备)\n    *   [安装docker](#安装docker)\n    *   [获取php-fpm镜像](#获取php-fpm镜像)\n    *   [同理获取nginx镜像和MySQL镜像](#同理获取nginx镜像和mysql镜像)\n    *   [端口检查](#端口检查)\n    *   [查看镜像](#查看镜像)\n    *   [运行镜像](#运行镜像)\n*   [镜像配置](#镜像配置)\n*   [总结](#总结)\n\n#### 项目背景\n\n主要是以自身的博客系统作为迁移的样例，项目环境是传统的lnmp环境。\n\n#### 前期准备\n\n##### 安装docker\n\n```bash\n$ sudo apt-get install docker.io -y\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\n...\nSetting up docker.io (1.6.2~dfsg1-1ubuntu4~14.04.1) ...\ndocker start/running, process 26908\n```\n\n##### 获取php-fpm镜像\n\n```bash\n$ sudo docker search php-fpm #查找php-fpm镜像\nNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nphp                               While designed for web development, the PH...   2782      [OK]\nricharvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable ...   454                  [OK]\nbitnami/php-fpm                   Bitnami PHP-FPM Docker Image                    41                   [OK]\nphpdockerio/php7-fpm\n...\n\n$ sudo docker pull  phpdockerio/php7-fpm:latest\nlatest: Pulling from phpdockerio/php7-fpm\n632d62e9ff45: Pull complete\n4719c3e8a982: Pull complete\n2309d29c605a: Pull complete\n83aeee240cf5: Pull complete\n6962aaa46258: Pull complete\nceb4c4ec812a: Pull complete\n821e3516e882: Pull complete\nef64564fd4f8: Pull complete\n4ce8803d2ea8: Pull complete\nba9d4bc26f3e: Pull complete\n20fd756c6431: Pull complete\nf7729a02ff06: Pull complete\nDigest: sha256:a2a240a31c8afdf723a8554b6c46691069a80ac622cbb5ab77fcd7b5762ddc58\nStatus: Downloaded newer image for phpdockerio/php7-fpm:latest\n```\n\n##### 同理获取nginx镜像和MySQL镜像\n\n```bash\n$ sudo docker pull nginx:latest\n$ sudo docker pull mysql:latest\n```\n\n##### 端口检查\n\n```bash\n$ netstat -anp  grep \"80\\3306\\9000\" ##查看80 3306 和 9000端口占用情况，如果被占用，停掉响应服务\n```\n\n##### 查看镜像\n\n```bash\n$ sudo docker images\nREPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nmysql                  latest              3ad8e8e4bdb1        14 hours ago        408.2 MB\nphpdockerio/php7-fpm   latest              f7729a02ff06        5 days ago          166.2 MB\nnginx                  latest              2ecc072be0ec        7 days ago          108.3 MB\n```\n\n##### 运行镜像\n\n生成MySQL容器\n\n```bash\n$ sudo docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 --name docker_mysql_00 mysql:latest\n```\n\n生成nginx容器，外部80端口映射到内部80端口，关联容器内外文件夹\n\n```bash\n$ sudo docker run -d -p 80:80 -v /usr/share/nginx:/usr/share/nginx -v /etc/nginx:/etc/nginx --name docker_nginx_00 nginx:lastest\n```\n\n生成php-fpm容器, 同理\n\n```bash\n$ sudo docker run -d -p 9000:9000 -v /usr/share/nginx:/usr/share/nginx --name docker_php_fpm_00 phpdockerio/php7-fpm\n```\n\n#### 镜像配置\n\n查看容器的ip\n\n```bash\n$ sudo docker inspect docker_php_fpm_00 docker_nginx_00 docker_mysql_00 grep \"IPAddress\"\n\"IPAddress\": \"172.17.0.7\",\n\"IPAddress\": \"172.17.0.3\",\n\"IPAddress\": \"172.17.0.2\",\n```\n\n配置nginx和php-fpm\n\n```bash\n$ sudo docker exec -ti docker_nginx_00 /bin/bash #进入docker_nginx_00容器\nvim /etc/nginx/sites-enabled/blog.conf ##像正常一样配置nginx，\n```\n\n```nginx\nserver {\n        listen 80;\n        root /usr/share/nginx/wordpress;\n        index index.php index.html index.htm index.nginx-debian.html;\n\n        server_name blog.feilong.tech www.feilong.tech feilong.tech;\n\n        location ~ \\.php$ {\n                fastcgi_pass 172.17.0.7:9000; ##php-fpm容器的IP\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n                include        fastcgi_params;\n\n        }\n}\n```\n\n同理配置好MySQL的IP地址，容器可能没有安装vim，所以编辑之前需要提前`apt-get update`。然后进行安装。\n\n#### 总结\n\n安装过程比较复杂，尤其是需要配置IP。其实整个过程并不是符合docker的期望，理想情况是将lnmp放到一个容器中，即直接使用`sudo docker search lnmp`查找镜像，进行意见安装。前端使用nginx，通过\\\\$host配置转发到端口，然后通过docker端口的映射到达容器内部。","source":"_posts/docker-lnmp.md","raw":"---\ntitle: 使用docker搭建lnmp环境\ntags:\n  - docker\n  - 容器\nid: '182'\ncategories:\n  - - Docker\n  - - Linux\n  - - PHP\ncomments: false\ndate: 2017-10-29 21:07:26\n---\n\ndocker是一个开源的容器引擎，随着“微服务架构”正在变得越来越重要，docker也变得越来越火。但是网上的文章中，要么是很有借鉴意义的干货，要么就是使用高端术语来讲述什么叫做微服务架构。今天我就通过文章来记述一下传统lnmp迁移docker的过程。\n<!-- more -->\n*   [项目背景](#项目背景)\n*   [前期准备](#前期准备)\n    *   [安装docker](#安装docker)\n    *   [获取php-fpm镜像](#获取php-fpm镜像)\n    *   [同理获取nginx镜像和MySQL镜像](#同理获取nginx镜像和mysql镜像)\n    *   [端口检查](#端口检查)\n    *   [查看镜像](#查看镜像)\n    *   [运行镜像](#运行镜像)\n*   [镜像配置](#镜像配置)\n*   [总结](#总结)\n\n#### 项目背景\n\n主要是以自身的博客系统作为迁移的样例，项目环境是传统的lnmp环境。\n\n#### 前期准备\n\n##### 安装docker\n\n```bash\n$ sudo apt-get install docker.io -y\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\n...\nSetting up docker.io (1.6.2~dfsg1-1ubuntu4~14.04.1) ...\ndocker start/running, process 26908\n```\n\n##### 获取php-fpm镜像\n\n```bash\n$ sudo docker search php-fpm #查找php-fpm镜像\nNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nphp                               While designed for web development, the PH...   2782      [OK]\nricharvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable ...   454                  [OK]\nbitnami/php-fpm                   Bitnami PHP-FPM Docker Image                    41                   [OK]\nphpdockerio/php7-fpm\n...\n\n$ sudo docker pull  phpdockerio/php7-fpm:latest\nlatest: Pulling from phpdockerio/php7-fpm\n632d62e9ff45: Pull complete\n4719c3e8a982: Pull complete\n2309d29c605a: Pull complete\n83aeee240cf5: Pull complete\n6962aaa46258: Pull complete\nceb4c4ec812a: Pull complete\n821e3516e882: Pull complete\nef64564fd4f8: Pull complete\n4ce8803d2ea8: Pull complete\nba9d4bc26f3e: Pull complete\n20fd756c6431: Pull complete\nf7729a02ff06: Pull complete\nDigest: sha256:a2a240a31c8afdf723a8554b6c46691069a80ac622cbb5ab77fcd7b5762ddc58\nStatus: Downloaded newer image for phpdockerio/php7-fpm:latest\n```\n\n##### 同理获取nginx镜像和MySQL镜像\n\n```bash\n$ sudo docker pull nginx:latest\n$ sudo docker pull mysql:latest\n```\n\n##### 端口检查\n\n```bash\n$ netstat -anp  grep \"80\\3306\\9000\" ##查看80 3306 和 9000端口占用情况，如果被占用，停掉响应服务\n```\n\n##### 查看镜像\n\n```bash\n$ sudo docker images\nREPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nmysql                  latest              3ad8e8e4bdb1        14 hours ago        408.2 MB\nphpdockerio/php7-fpm   latest              f7729a02ff06        5 days ago          166.2 MB\nnginx                  latest              2ecc072be0ec        7 days ago          108.3 MB\n```\n\n##### 运行镜像\n\n生成MySQL容器\n\n```bash\n$ sudo docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 --name docker_mysql_00 mysql:latest\n```\n\n生成nginx容器，外部80端口映射到内部80端口，关联容器内外文件夹\n\n```bash\n$ sudo docker run -d -p 80:80 -v /usr/share/nginx:/usr/share/nginx -v /etc/nginx:/etc/nginx --name docker_nginx_00 nginx:lastest\n```\n\n生成php-fpm容器, 同理\n\n```bash\n$ sudo docker run -d -p 9000:9000 -v /usr/share/nginx:/usr/share/nginx --name docker_php_fpm_00 phpdockerio/php7-fpm\n```\n\n#### 镜像配置\n\n查看容器的ip\n\n```bash\n$ sudo docker inspect docker_php_fpm_00 docker_nginx_00 docker_mysql_00 grep \"IPAddress\"\n\"IPAddress\": \"172.17.0.7\",\n\"IPAddress\": \"172.17.0.3\",\n\"IPAddress\": \"172.17.0.2\",\n```\n\n配置nginx和php-fpm\n\n```bash\n$ sudo docker exec -ti docker_nginx_00 /bin/bash #进入docker_nginx_00容器\nvim /etc/nginx/sites-enabled/blog.conf ##像正常一样配置nginx，\n```\n\n```nginx\nserver {\n        listen 80;\n        root /usr/share/nginx/wordpress;\n        index index.php index.html index.htm index.nginx-debian.html;\n\n        server_name blog.feilong.tech www.feilong.tech feilong.tech;\n\n        location ~ \\.php$ {\n                fastcgi_pass 172.17.0.7:9000; ##php-fpm容器的IP\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n                include        fastcgi_params;\n\n        }\n}\n```\n\n同理配置好MySQL的IP地址，容器可能没有安装vim，所以编辑之前需要提前`apt-get update`。然后进行安装。\n\n#### 总结\n\n安装过程比较复杂，尤其是需要配置IP。其实整个过程并不是符合docker的期望，理想情况是将lnmp放到一个容器中，即直接使用`sudo docker search lnmp`查找镜像，进行意见安装。前端使用nginx，通过\\\\$host配置转发到端口，然后通过docker端口的映射到达容器内部。","slug":"docker-lnmp","published":1,"updated":"2022-03-12T23:52:58.729Z","layout":"post","photos":[],"link":"","_id":"cl0oi8meq0012417t3jic51cd","content":"<p>docker是一个开源的容器引擎，随着“微服务架构”正在变得越来越重要，docker也变得越来越火。但是网上的文章中，要么是很有借鉴意义的干货，要么就是使用高端术语来讲述什么叫做微服务架构。今天我就通过文章来记述一下传统lnmp迁移docker的过程。</p>\n<span id=\"more\"></span>\n<ul>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF\">项目背景</a></li>\n<li><a href=\"#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\">前期准备</a><ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85docker\">安装docker</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96php-fpm%E9%95%9C%E5%83%8F\">获取php-fpm镜像</a></li>\n<li><a href=\"#%E5%90%8C%E7%90%86%E8%8E%B7%E5%8F%96nginx%E9%95%9C%E5%83%8F%E5%92%8Cmysql%E9%95%9C%E5%83%8F\">同理获取nginx镜像和MySQL镜像</a></li>\n<li><a href=\"#%E7%AB%AF%E5%8F%A3%E6%A3%80%E6%9F%A5\">端口检查</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F\">查看镜像</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F\">运行镜像</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE\">镜像配置</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<h4 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h4><p>主要是以自身的博客系统作为迁移的样例，项目环境是传统的lnmp环境。</p>\n<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><h5 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install docker.io -y</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">...</span><br><span class=\"line\">Setting up docker.io (1.6.2~dfsg1-1ubuntu4~14.04.1) ...</span><br><span class=\"line\">docker start/running, process 26908</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取php-fpm镜像\"><a href=\"#获取php-fpm镜像\" class=\"headerlink\" title=\"获取php-fpm镜像\"></a>获取php-fpm镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker search php-fpm <span class=\"comment\">#查找php-fpm镜像</span></span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">php                               While designed <span class=\"keyword\">for</span> web development, the PH...   2782      [OK]</span><br><span class=\"line\">richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable ...   454                  [OK]</span><br><span class=\"line\">bitnami/php-fpm                   Bitnami PHP-FPM Docker Image                    41                   [OK]</span><br><span class=\"line\">phpdockerio/php7-fpm</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo docker pull  phpdockerio/php7-fpm:latest</span><br><span class=\"line\">latest: Pulling from phpdockerio/php7-fpm</span><br><span class=\"line\">632d62e9ff45: Pull complete</span><br><span class=\"line\">4719c3e8a982: Pull complete</span><br><span class=\"line\">2309d29c605a: Pull complete</span><br><span class=\"line\">83aeee240cf5: Pull complete</span><br><span class=\"line\">6962aaa46258: Pull complete</span><br><span class=\"line\">ceb4c4ec812a: Pull complete</span><br><span class=\"line\">821e3516e882: Pull complete</span><br><span class=\"line\">ef64564fd4f8: Pull complete</span><br><span class=\"line\">4ce8803d2ea8: Pull complete</span><br><span class=\"line\">ba9d4bc26f3e: Pull complete</span><br><span class=\"line\">20fd756c6431: Pull complete</span><br><span class=\"line\">f7729a02ff06: Pull complete</span><br><span class=\"line\">Digest: sha256:a2a240a31c8afdf723a8554b6c46691069a80ac622cbb5ab77fcd7b5762ddc58</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> phpdockerio/php7-fpm:latest</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"同理获取nginx镜像和MySQL镜像\"><a href=\"#同理获取nginx镜像和MySQL镜像\" class=\"headerlink\" title=\"同理获取nginx镜像和MySQL镜像\"></a>同理获取nginx镜像和MySQL镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull nginx:latest</span><br><span class=\"line\">$ sudo docker pull mysql:latest</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"端口检查\"><a href=\"#端口检查\" class=\"headerlink\" title=\"端口检查\"></a>端口检查</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -anp  grep <span class=\"string\">&quot;80\\3306\\9000&quot;</span> <span class=\"comment\">##查看80 3306 和 9000端口占用情况，如果被占用，停掉响应服务</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">mysql                  latest              3ad8e8e4bdb1        14 hours ago        408.2 MB</span><br><span class=\"line\">phpdockerio/php7-fpm   latest              f7729a02ff06        5 days ago          166.2 MB</span><br><span class=\"line\">nginx                  latest              2ecc072be0ec        7 days ago          108.3 MB</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h5><p>生成MySQL容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 --name docker_mysql_00 mysql:latest</span><br></pre></td></tr></table></figure>\n\n<p>生成nginx容器，外部80端口映射到内部80端口，关联容器内外文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d -p 80:80 -v /usr/share/nginx:/usr/share/nginx -v /etc/nginx:/etc/nginx --name docker_nginx_00 nginx:lastest</span><br></pre></td></tr></table></figure>\n\n<p>生成php-fpm容器, 同理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d -p 9000:9000 -v /usr/share/nginx:/usr/share/nginx --name docker_php_fpm_00 phpdockerio/php7-fpm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像配置\"><a href=\"#镜像配置\" class=\"headerlink\" title=\"镜像配置\"></a>镜像配置</h4><p>查看容器的ip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker inspect docker_php_fpm_00 docker_nginx_00 docker_mysql_00 grep <span class=\"string\">&quot;IPAddress&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;IPAddress&quot;</span>: <span class=\"string\">&quot;172.17.0.7&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;IPAddress&quot;</span>: <span class=\"string\">&quot;172.17.0.3&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;IPAddress&quot;</span>: <span class=\"string\">&quot;172.17.0.2&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>配置nginx和php-fpm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker <span class=\"built_in\">exec</span> -ti docker_nginx_00 /bin/bash <span class=\"comment\">#进入docker_nginx_00容器</span></span><br><span class=\"line\">vim /etc/nginx/sites-enabled/blog.conf <span class=\"comment\">##像正常一样配置nginx，</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/wordpress;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> blog.feilong.tech www.feilong.tech feilong.tech;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">172.17.0.7:9000</span>; <span class=\"comment\">##php-fpm容器的IP</span></span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"attribute\">include</span>        fastcgi_params;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同理配置好MySQL的IP地址，容器可能没有安装vim，所以编辑之前需要提前<code>apt-get update</code>。然后进行安装。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>安装过程比较复杂，尤其是需要配置IP。其实整个过程并不是符合docker的期望，理想情况是将lnmp放到一个容器中，即直接使用<code>sudo docker search lnmp</code>查找镜像，进行意见安装。前端使用nginx，通过\\$host配置转发到端口，然后通过docker端口的映射到达容器内部。</p>\n","site":{"data":{}},"excerpt":"<p>docker是一个开源的容器引擎，随着“微服务架构”正在变得越来越重要，docker也变得越来越火。但是网上的文章中，要么是很有借鉴意义的干货，要么就是使用高端术语来讲述什么叫做微服务架构。今天我就通过文章来记述一下传统lnmp迁移docker的过程。</p>","more":"<ul>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF\">项目背景</a></li>\n<li><a href=\"#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\">前期准备</a><ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85docker\">安装docker</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96php-fpm%E9%95%9C%E5%83%8F\">获取php-fpm镜像</a></li>\n<li><a href=\"#%E5%90%8C%E7%90%86%E8%8E%B7%E5%8F%96nginx%E9%95%9C%E5%83%8F%E5%92%8Cmysql%E9%95%9C%E5%83%8F\">同理获取nginx镜像和MySQL镜像</a></li>\n<li><a href=\"#%E7%AB%AF%E5%8F%A3%E6%A3%80%E6%9F%A5\">端口检查</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F\">查看镜像</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F\">运行镜像</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE\">镜像配置</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<h4 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h4><p>主要是以自身的博客系统作为迁移的样例，项目环境是传统的lnmp环境。</p>\n<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><h5 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install docker.io -y</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">...</span><br><span class=\"line\">Setting up docker.io (1.6.2~dfsg1-1ubuntu4~14.04.1) ...</span><br><span class=\"line\">docker start/running, process 26908</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取php-fpm镜像\"><a href=\"#获取php-fpm镜像\" class=\"headerlink\" title=\"获取php-fpm镜像\"></a>获取php-fpm镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker search php-fpm <span class=\"comment\">#查找php-fpm镜像</span></span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">php                               While designed <span class=\"keyword\">for</span> web development, the PH...   2782      [OK]</span><br><span class=\"line\">richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable ...   454                  [OK]</span><br><span class=\"line\">bitnami/php-fpm                   Bitnami PHP-FPM Docker Image                    41                   [OK]</span><br><span class=\"line\">phpdockerio/php7-fpm</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo docker pull  phpdockerio/php7-fpm:latest</span><br><span class=\"line\">latest: Pulling from phpdockerio/php7-fpm</span><br><span class=\"line\">632d62e9ff45: Pull complete</span><br><span class=\"line\">4719c3e8a982: Pull complete</span><br><span class=\"line\">2309d29c605a: Pull complete</span><br><span class=\"line\">83aeee240cf5: Pull complete</span><br><span class=\"line\">6962aaa46258: Pull complete</span><br><span class=\"line\">ceb4c4ec812a: Pull complete</span><br><span class=\"line\">821e3516e882: Pull complete</span><br><span class=\"line\">ef64564fd4f8: Pull complete</span><br><span class=\"line\">4ce8803d2ea8: Pull complete</span><br><span class=\"line\">ba9d4bc26f3e: Pull complete</span><br><span class=\"line\">20fd756c6431: Pull complete</span><br><span class=\"line\">f7729a02ff06: Pull complete</span><br><span class=\"line\">Digest: sha256:a2a240a31c8afdf723a8554b6c46691069a80ac622cbb5ab77fcd7b5762ddc58</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> phpdockerio/php7-fpm:latest</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"同理获取nginx镜像和MySQL镜像\"><a href=\"#同理获取nginx镜像和MySQL镜像\" class=\"headerlink\" title=\"同理获取nginx镜像和MySQL镜像\"></a>同理获取nginx镜像和MySQL镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull nginx:latest</span><br><span class=\"line\">$ sudo docker pull mysql:latest</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"端口检查\"><a href=\"#端口检查\" class=\"headerlink\" title=\"端口检查\"></a>端口检查</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -anp  grep <span class=\"string\">&quot;80\\3306\\9000&quot;</span> <span class=\"comment\">##查看80 3306 和 9000端口占用情况，如果被占用，停掉响应服务</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">mysql                  latest              3ad8e8e4bdb1        14 hours ago        408.2 MB</span><br><span class=\"line\">phpdockerio/php7-fpm   latest              f7729a02ff06        5 days ago          166.2 MB</span><br><span class=\"line\">nginx                  latest              2ecc072be0ec        7 days ago          108.3 MB</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h5><p>生成MySQL容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 --name docker_mysql_00 mysql:latest</span><br></pre></td></tr></table></figure>\n\n<p>生成nginx容器，外部80端口映射到内部80端口，关联容器内外文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d -p 80:80 -v /usr/share/nginx:/usr/share/nginx -v /etc/nginx:/etc/nginx --name docker_nginx_00 nginx:lastest</span><br></pre></td></tr></table></figure>\n\n<p>生成php-fpm容器, 同理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d -p 9000:9000 -v /usr/share/nginx:/usr/share/nginx --name docker_php_fpm_00 phpdockerio/php7-fpm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像配置\"><a href=\"#镜像配置\" class=\"headerlink\" title=\"镜像配置\"></a>镜像配置</h4><p>查看容器的ip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker inspect docker_php_fpm_00 docker_nginx_00 docker_mysql_00 grep <span class=\"string\">&quot;IPAddress&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;IPAddress&quot;</span>: <span class=\"string\">&quot;172.17.0.7&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;IPAddress&quot;</span>: <span class=\"string\">&quot;172.17.0.3&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;IPAddress&quot;</span>: <span class=\"string\">&quot;172.17.0.2&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>配置nginx和php-fpm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker <span class=\"built_in\">exec</span> -ti docker_nginx_00 /bin/bash <span class=\"comment\">#进入docker_nginx_00容器</span></span><br><span class=\"line\">vim /etc/nginx/sites-enabled/blog.conf <span class=\"comment\">##像正常一样配置nginx，</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/wordpress;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> blog.feilong.tech www.feilong.tech feilong.tech;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">172.17.0.7:9000</span>; <span class=\"comment\">##php-fpm容器的IP</span></span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"attribute\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"attribute\">include</span>        fastcgi_params;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同理配置好MySQL的IP地址，容器可能没有安装vim，所以编辑之前需要提前<code>apt-get update</code>。然后进行安装。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>安装过程比较复杂，尤其是需要配置IP。其实整个过程并不是符合docker的期望，理想情况是将lnmp放到一个容器中，即直接使用<code>sudo docker search lnmp</code>查找镜像，进行意见安装。前端使用nginx，通过\\$host配置转发到端口，然后通过docker端口的映射到达容器内部。</p>"},{"title":"docker之命名空间","id":"332","date":"2018-09-10T15:19:32.000Z","_content":"\n## 1\\. 基本架构\n\ndocker目前采用了标准的C/S架构。客户端和服务端既可以运行在一个机器上，又可以通过socket或者restful API来进行通信。\n\n### 1.1 服务端\n\ndocker服务端一般都是在宿主机上，来接受客户端的命令。docker默认使用套接字的方式，但是也是允许使用tcp进行端口的监听，可以使用docker daemon -H IP:PORT的方式进行监听。\n\n### 1.2 客户端\n\ndocker的客户端主要作用是向服务端发送操作的指令。客户端默认也是采用套接字的方式，向本地的docker服务端发送命令。当然，客户端也是可以使用tcp的方式进行发送指令，使用docker -H tcp://IP:PORT，用来指定接收命令的docker服务端。\n\n## 2\\. 命名空间\n\n大家在平时使用Linux或者macos的时候，我们并没有拆分多个环境的需求。但是在服务器上面，加入一台服务器运行多个进程，进程之间是相互影响的，比如共享内存，操作相同的文件。我们其实更希望能够将这些进程分离开，这样情况下，如果服务受到攻击，不会影响其他的服务。\n\n![Alt text](/uploads/2018/09/屏幕快照-2018-09-04-下午10.59.44.png)\n\ndocker目前主要有6命名空间的隔离方式\n\n### 2.1 进程空间隔离\n\n进程在操作系统中是一个很重要的概念，也就是大家认为的正在运行中的程序。\n\n```bash\nfeilongdeMBP:~ feilong$ ps -ef\nUID PID PPID C STIME TTY TIME CMD\n0 1 0 0 9:31下午 ?? 0:10.07 /sbin/launchd\n0 44 1 0 9:31下午 ?? 0:00.65 /usr/sbin/syslogd\n0 45 1 0 9:31下午 ?? 0:01.37 /usr/libexec/UserEventAgent (System)\n0 48 1 0 9:31下午 ?? 0:00.25 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld\n0 49 1 0 9:31下午 ?? 0:02.57 /usr/libexec/kextd\n0 50 1 0 9:31下午 ?? 0:02.40 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd\n0 52 1 0 9:31下午 ?? 0:00.16 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted\n55 55 1 0 9:31下午 ?? 0:00.38 /System/Library/CoreServices/appleeventsd --server\n0 56 1 0 9:31下午 ?? 0:00.75 /usr/sbin/systemstats --daemon\n```\n\n可见当前系统运行了很多“程序”。\n\n我们现在新建一个容器，然后进入容器看下，docker容器里面的进程列表\n\n```bash\nfeilongdeMBP:~ feilong$ docker run -it --rm --name test busybox\n/ # ps -ef\nPID   USER     TIME  COMMAND\n    1 root      0:00 sh\n    6 root      0:00 ps -ef\n```\n\n对比很明显，容器内部只有很少的几个正在运行的进程。\n\n我们新建一个窗口，然后看下宿主机上面和docker相关的进程\n\n```bash\nlocalhost:~ feilong$ ps -ef  grep docker\n    0    82     1   0  9:31下午 ??         0:00.02 /Library/PrivilegedHelperTools/com.docker.vmnetd\n  501   918   879   0 10:26下午 ??         0:00.14 /Applications/Docker.app/Contents/MacOS/com.docker.supervisor -watchdog fd:0\n  501   920   918   0 10:26下午 ??         0:03.32 com.docker.osxfs serve --address fd:3 --connect vms/0/connect --control fd:4 --log-destination asl\n  501   921   918   0 10:26下午 ??         0:00.73 com.docker.vpnkit --ethernet fd:3 --port fd:4 --diagnostics fd:5 --pcap fd:6 --vsock-path vms/0/connect --host-names host.docker.internal,docker.for.mac.host.internal,docker.for.mac.localhost --gateway-names gateway.docker.internal,docker.for.mac.gateway.internal,docker.for.mac.http.internal --vm-names docker-for-desktop --listen-backlog 32 --mtu 1500 --allowed-bind-addresses 0.0.0.0 --http /Users/feilong/Library/Group Containers/group.com.docker/http_proxy.json --dhcp /Users/feilong/Library/Group Containers/group.com.docker/dhcp.json --port-max-idle-time 300 --max-connections 2000 --gateway-ip 192.168.65.1 --host-ip 192.168.65.2 --lowest-ip 192.168.65.3 --highest-ip 192.168.65.254 --log-destination asl --udpv4-forwards 123:127.0.0.1:59434 --gc-compact-interval 1800\n  501   922   918   0 10:26下午 ??         0:01.17 com.docker.driver.amd64-linux -addr fd:3 -debug\n  501   928   922   0 10:26下午 ??         2:40.08 com.docker.hyperkit -A -u -F vms/0/hyperkit.pid -c 2 -m 2048M -s 0:0,hostbridge -s 31,lpc -s 1:0,virtio-vpnkit,path=vpnkit.eth.sock,uuid=246fb3f9-3ad5-4683-837a-33ac39f57f25 -U 5a3669ae-b209-443a-a074-312cd32a258a -s 2:0,ahci-hd,/Users/feilong/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw -s 3,virtio-sock,guest_cid=3,path=vms/0,guest_forwards=2376;1525 -s 4,ahci-cd,/Applications/Docker.app/Contents/Resources/linuxkit/docker-for-mac.iso -s 5,ahci-cd,vms/0/config.iso -s 6,virtio-rnd -s 7,virtio-9p,path=vpnkit.port.sock,tag=port -l com1,autopty=vms/0/tty,asl -f bootrom,/Applications/Docker.app/Contents/Resources/uefi/UEFI.fd,,\n  501  2074  1102   0 11:21下午 ??         0:00.50 /Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/vscode-languageclient/lib/utils/electronForkStart /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/dockerfile-language-server-nodejs/lib/server.js --node-ipc --node-ipc --clientProcessId=1102\n  501  2100  1065   0 11:24下午 ttys001    0:00.12 docker run -it --rm --name test busybox\n  501  2086  2083   0 11:21下午 ttys002    0:00.19 docker exec -it 910aa64a312b3a884f4efb059e47ee601bbd3ba3d62f4c92abd4120cff770828 /bin/sh\n  501  2090  2087   0 11:21下午 ttys003    0:00.12 docker exec -it 73f8fbcc50651fd4fea9fe0be7fe4066ea78efd7e9b2438fe657a3e7725e7903 /bin/sh\n  501  2115  2111   0 11:27下午 ttys004    0:00.00 grep docker\n```\n\n在进程列表中，我们没有看到容器内部运行的进程，说明相对于容器的“外部”，容器“内部”的进程是隔离的。但是我们也可以发现，刚刚创建的名字为test的容器，实质上就是宿主机上面的一个PID为2090的进程。\n\n所以，我们可以理解docker的进程树是这个状态：\n\n![Alt text](/uploads/2018/09/屏幕快照-2018-09-04-下午11.43.31.png)\n\n### 2.2 网络空间隔离\n\n容器其实不能完全和宿主机器隔离网络，要不然的话容器就没办法通过外部进行访问，那么也就没有实际的意义。但是容器之间是网络隔离的，这种隔离的方式，就是通过网络命名空间实现的。\n\ndocker有四种不同的网络模式：Host、Container、None和bridge\n\ndocker默认的是桥接模式。\n\ndocker在创建容器的时候， 不仅会给容器创建IP地址，还会在宿主机上面创建一个虚拟网桥docker0，在运行的时候，将容器和该网桥进行相连。\n\n在默认的情况下，创建容器的时候，都会创建一对虚拟网卡，两个虚拟网卡组成数据通道，一个在容器内部，另外一个加入到docker0的网桥中。\n\n打开两个窗口，分别创建redis和redis2容器\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z feilong]# docker run -it --rm --name redis  -p 6379:6379 redis:latest /bin/bash\nroot@d89535b59b0b:/data#\n[root@izj6c9b96ia369l2i47yq3z feilong]# docker run -it --rm --name redis2 -p 6378:6379 redis:latest /bin/bash\nroot@7736850135af:/data#\n```\n\n```bash\n打开第三个窗口，查看网桥的状态\n<pre class=\"prettyprint\">[feilong@izj6c9b96ia369l2i47yq3z ~]$ brctl show\nbridge name     bridge id               STP enabled     interfaces\ndocker0         8000.024219a15f9d       no              veth8331b03\n                                                        vethc5f3cb9\n```\n\n![Alt text](/uploads/2018/09/屏幕快照-2018-09-06-下午8.43.46.png)\n\ndocker0 会为每一个容器分配一个新的 IP 地址并将 docker0 的 IP 地址设置为默认的网关。网桥 docker0 通过 iptables 中的配置与宿主机器上的网卡相连，所有符合条件的请求都会通过 iptables 转发到 docker0 并由网桥分发给对应的机器。同时也会在防火墙加上一条新的规则。\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z feilong]# iptables -L\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination\nDOCKER-USER  all  --  anywhere             anywhere\nDOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED\nDOCKER     all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere\n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain DOCKER (1 references)\ntarget     prot opt source               destination\nACCEPT     tcp  --  anywhere             172.17.0.2           tcp dpt:6379\nACCEPT     tcp  --  anywhere             172.17.0.3           tcp dpt:6379\nACCEPT     tcp  --  anywhere             172.17.0.4           tcp dpt:http\n......\n```\n\n### 2.3 挂载点命名空间\n\ndocker已经可以通过命名空间将网络和进程进行隔离。挂载命名空间，允许不同的容器，查看到不同的文件结构，这样，每个命名空间的进程所看到的文件目录彼此被隔离。每个容器内的进程只会更改容器内部的文件目录。\n\n### 2.4 IPC命名空间\n\n容器中的进程交互采用的是Linux中常见的进程间交互方式（Interprocess Communication， IPC），包括信号量、消息队列和内存共享等。IPC命名空间和PID命名空间可以组合使用，同一个IPC命名空间的进程可以彼此可见，允许进行交互，不同空间的进程无法交互。\n\n### 2.5 UTS 命名空间\n\nUTS（Unix time-sharing system）命名空间允许每个容器拥有一个独立的主机名和域名，从而可以虚拟出一个独立的主机名和网络空间的环境，就可以跟网络上的一台独立主机一样。\n\n默认情况下，docker的主机名是容器的id\n\n![Alt text](/uploads/2018/09/WX20180908-004426@2x-1024x293.png)\n\n![Alt text](/uploads/2018/09/WX20180908-004332@2x-1024x55.png)\n\n### 2.6 用户命名空间\n\n每个容器内部都有不同的用户组和组id，也就是说可以在容器内部使用特定的内部用户执行程序，而不是宿主机上的用户。每个容器都有root账号，但是和宿主机都不在一个命名空间。通过使用命名空间隔离，来保证容器内部用户无法操作容器外部的操作权限。\n\n## 3\\. 总结\n\n6种命名空间让容器之间松耦合，也让容器与宿主机松偶尔。同时，也保证了安全性。容器内部不能操作其他容器内部的东西，docker的这种命名空间隔离的方式，也比较符合Linux的系统设计。","source":"_posts/docker-namespace.md","raw":"---\ntitle: docker之命名空间\ntags:\n  - docker\nid: '332'\ncategories:\n  - - Docker\n  - - Linux\ndate: 2018-09-10 23:19:32\n---\n\n## 1\\. 基本架构\n\ndocker目前采用了标准的C/S架构。客户端和服务端既可以运行在一个机器上，又可以通过socket或者restful API来进行通信。\n\n### 1.1 服务端\n\ndocker服务端一般都是在宿主机上，来接受客户端的命令。docker默认使用套接字的方式，但是也是允许使用tcp进行端口的监听，可以使用docker daemon -H IP:PORT的方式进行监听。\n\n### 1.2 客户端\n\ndocker的客户端主要作用是向服务端发送操作的指令。客户端默认也是采用套接字的方式，向本地的docker服务端发送命令。当然，客户端也是可以使用tcp的方式进行发送指令，使用docker -H tcp://IP:PORT，用来指定接收命令的docker服务端。\n\n## 2\\. 命名空间\n\n大家在平时使用Linux或者macos的时候，我们并没有拆分多个环境的需求。但是在服务器上面，加入一台服务器运行多个进程，进程之间是相互影响的，比如共享内存，操作相同的文件。我们其实更希望能够将这些进程分离开，这样情况下，如果服务受到攻击，不会影响其他的服务。\n\n![Alt text](/uploads/2018/09/屏幕快照-2018-09-04-下午10.59.44.png)\n\ndocker目前主要有6命名空间的隔离方式\n\n### 2.1 进程空间隔离\n\n进程在操作系统中是一个很重要的概念，也就是大家认为的正在运行中的程序。\n\n```bash\nfeilongdeMBP:~ feilong$ ps -ef\nUID PID PPID C STIME TTY TIME CMD\n0 1 0 0 9:31下午 ?? 0:10.07 /sbin/launchd\n0 44 1 0 9:31下午 ?? 0:00.65 /usr/sbin/syslogd\n0 45 1 0 9:31下午 ?? 0:01.37 /usr/libexec/UserEventAgent (System)\n0 48 1 0 9:31下午 ?? 0:00.25 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld\n0 49 1 0 9:31下午 ?? 0:02.57 /usr/libexec/kextd\n0 50 1 0 9:31下午 ?? 0:02.40 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd\n0 52 1 0 9:31下午 ?? 0:00.16 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted\n55 55 1 0 9:31下午 ?? 0:00.38 /System/Library/CoreServices/appleeventsd --server\n0 56 1 0 9:31下午 ?? 0:00.75 /usr/sbin/systemstats --daemon\n```\n\n可见当前系统运行了很多“程序”。\n\n我们现在新建一个容器，然后进入容器看下，docker容器里面的进程列表\n\n```bash\nfeilongdeMBP:~ feilong$ docker run -it --rm --name test busybox\n/ # ps -ef\nPID   USER     TIME  COMMAND\n    1 root      0:00 sh\n    6 root      0:00 ps -ef\n```\n\n对比很明显，容器内部只有很少的几个正在运行的进程。\n\n我们新建一个窗口，然后看下宿主机上面和docker相关的进程\n\n```bash\nlocalhost:~ feilong$ ps -ef  grep docker\n    0    82     1   0  9:31下午 ??         0:00.02 /Library/PrivilegedHelperTools/com.docker.vmnetd\n  501   918   879   0 10:26下午 ??         0:00.14 /Applications/Docker.app/Contents/MacOS/com.docker.supervisor -watchdog fd:0\n  501   920   918   0 10:26下午 ??         0:03.32 com.docker.osxfs serve --address fd:3 --connect vms/0/connect --control fd:4 --log-destination asl\n  501   921   918   0 10:26下午 ??         0:00.73 com.docker.vpnkit --ethernet fd:3 --port fd:4 --diagnostics fd:5 --pcap fd:6 --vsock-path vms/0/connect --host-names host.docker.internal,docker.for.mac.host.internal,docker.for.mac.localhost --gateway-names gateway.docker.internal,docker.for.mac.gateway.internal,docker.for.mac.http.internal --vm-names docker-for-desktop --listen-backlog 32 --mtu 1500 --allowed-bind-addresses 0.0.0.0 --http /Users/feilong/Library/Group Containers/group.com.docker/http_proxy.json --dhcp /Users/feilong/Library/Group Containers/group.com.docker/dhcp.json --port-max-idle-time 300 --max-connections 2000 --gateway-ip 192.168.65.1 --host-ip 192.168.65.2 --lowest-ip 192.168.65.3 --highest-ip 192.168.65.254 --log-destination asl --udpv4-forwards 123:127.0.0.1:59434 --gc-compact-interval 1800\n  501   922   918   0 10:26下午 ??         0:01.17 com.docker.driver.amd64-linux -addr fd:3 -debug\n  501   928   922   0 10:26下午 ??         2:40.08 com.docker.hyperkit -A -u -F vms/0/hyperkit.pid -c 2 -m 2048M -s 0:0,hostbridge -s 31,lpc -s 1:0,virtio-vpnkit,path=vpnkit.eth.sock,uuid=246fb3f9-3ad5-4683-837a-33ac39f57f25 -U 5a3669ae-b209-443a-a074-312cd32a258a -s 2:0,ahci-hd,/Users/feilong/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw -s 3,virtio-sock,guest_cid=3,path=vms/0,guest_forwards=2376;1525 -s 4,ahci-cd,/Applications/Docker.app/Contents/Resources/linuxkit/docker-for-mac.iso -s 5,ahci-cd,vms/0/config.iso -s 6,virtio-rnd -s 7,virtio-9p,path=vpnkit.port.sock,tag=port -l com1,autopty=vms/0/tty,asl -f bootrom,/Applications/Docker.app/Contents/Resources/uefi/UEFI.fd,,\n  501  2074  1102   0 11:21下午 ??         0:00.50 /Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/vscode-languageclient/lib/utils/electronForkStart /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/dockerfile-language-server-nodejs/lib/server.js --node-ipc --node-ipc --clientProcessId=1102\n  501  2100  1065   0 11:24下午 ttys001    0:00.12 docker run -it --rm --name test busybox\n  501  2086  2083   0 11:21下午 ttys002    0:00.19 docker exec -it 910aa64a312b3a884f4efb059e47ee601bbd3ba3d62f4c92abd4120cff770828 /bin/sh\n  501  2090  2087   0 11:21下午 ttys003    0:00.12 docker exec -it 73f8fbcc50651fd4fea9fe0be7fe4066ea78efd7e9b2438fe657a3e7725e7903 /bin/sh\n  501  2115  2111   0 11:27下午 ttys004    0:00.00 grep docker\n```\n\n在进程列表中，我们没有看到容器内部运行的进程，说明相对于容器的“外部”，容器“内部”的进程是隔离的。但是我们也可以发现，刚刚创建的名字为test的容器，实质上就是宿主机上面的一个PID为2090的进程。\n\n所以，我们可以理解docker的进程树是这个状态：\n\n![Alt text](/uploads/2018/09/屏幕快照-2018-09-04-下午11.43.31.png)\n\n### 2.2 网络空间隔离\n\n容器其实不能完全和宿主机器隔离网络，要不然的话容器就没办法通过外部进行访问，那么也就没有实际的意义。但是容器之间是网络隔离的，这种隔离的方式，就是通过网络命名空间实现的。\n\ndocker有四种不同的网络模式：Host、Container、None和bridge\n\ndocker默认的是桥接模式。\n\ndocker在创建容器的时候， 不仅会给容器创建IP地址，还会在宿主机上面创建一个虚拟网桥docker0，在运行的时候，将容器和该网桥进行相连。\n\n在默认的情况下，创建容器的时候，都会创建一对虚拟网卡，两个虚拟网卡组成数据通道，一个在容器内部，另外一个加入到docker0的网桥中。\n\n打开两个窗口，分别创建redis和redis2容器\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z feilong]# docker run -it --rm --name redis  -p 6379:6379 redis:latest /bin/bash\nroot@d89535b59b0b:/data#\n[root@izj6c9b96ia369l2i47yq3z feilong]# docker run -it --rm --name redis2 -p 6378:6379 redis:latest /bin/bash\nroot@7736850135af:/data#\n```\n\n```bash\n打开第三个窗口，查看网桥的状态\n<pre class=\"prettyprint\">[feilong@izj6c9b96ia369l2i47yq3z ~]$ brctl show\nbridge name     bridge id               STP enabled     interfaces\ndocker0         8000.024219a15f9d       no              veth8331b03\n                                                        vethc5f3cb9\n```\n\n![Alt text](/uploads/2018/09/屏幕快照-2018-09-06-下午8.43.46.png)\n\ndocker0 会为每一个容器分配一个新的 IP 地址并将 docker0 的 IP 地址设置为默认的网关。网桥 docker0 通过 iptables 中的配置与宿主机器上的网卡相连，所有符合条件的请求都会通过 iptables 转发到 docker0 并由网桥分发给对应的机器。同时也会在防火墙加上一条新的规则。\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z feilong]# iptables -L\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination\nDOCKER-USER  all  --  anywhere             anywhere\nDOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED\nDOCKER     all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere\nACCEPT     all  --  anywhere             anywhere\n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain DOCKER (1 references)\ntarget     prot opt source               destination\nACCEPT     tcp  --  anywhere             172.17.0.2           tcp dpt:6379\nACCEPT     tcp  --  anywhere             172.17.0.3           tcp dpt:6379\nACCEPT     tcp  --  anywhere             172.17.0.4           tcp dpt:http\n......\n```\n\n### 2.3 挂载点命名空间\n\ndocker已经可以通过命名空间将网络和进程进行隔离。挂载命名空间，允许不同的容器，查看到不同的文件结构，这样，每个命名空间的进程所看到的文件目录彼此被隔离。每个容器内的进程只会更改容器内部的文件目录。\n\n### 2.4 IPC命名空间\n\n容器中的进程交互采用的是Linux中常见的进程间交互方式（Interprocess Communication， IPC），包括信号量、消息队列和内存共享等。IPC命名空间和PID命名空间可以组合使用，同一个IPC命名空间的进程可以彼此可见，允许进行交互，不同空间的进程无法交互。\n\n### 2.5 UTS 命名空间\n\nUTS（Unix time-sharing system）命名空间允许每个容器拥有一个独立的主机名和域名，从而可以虚拟出一个独立的主机名和网络空间的环境，就可以跟网络上的一台独立主机一样。\n\n默认情况下，docker的主机名是容器的id\n\n![Alt text](/uploads/2018/09/WX20180908-004426@2x-1024x293.png)\n\n![Alt text](/uploads/2018/09/WX20180908-004332@2x-1024x55.png)\n\n### 2.6 用户命名空间\n\n每个容器内部都有不同的用户组和组id，也就是说可以在容器内部使用特定的内部用户执行程序，而不是宿主机上的用户。每个容器都有root账号，但是和宿主机都不在一个命名空间。通过使用命名空间隔离，来保证容器内部用户无法操作容器外部的操作权限。\n\n## 3\\. 总结\n\n6种命名空间让容器之间松耦合，也让容器与宿主机松偶尔。同时，也保证了安全性。容器内部不能操作其他容器内部的东西，docker的这种命名空间隔离的方式，也比较符合Linux的系统设计。","slug":"docker-namespace","published":1,"updated":"2022-03-13T01:17:12.409Z","_id":"cl0oi8met0016417t46s7gda6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-基本架构\"><a href=\"#1-基本架构\" class=\"headerlink\" title=\"1. 基本架构\"></a>1. 基本架构</h2><p>docker目前采用了标准的C&#x2F;S架构。客户端和服务端既可以运行在一个机器上，又可以通过socket或者restful API来进行通信。</p>\n<h3 id=\"1-1-服务端\"><a href=\"#1-1-服务端\" class=\"headerlink\" title=\"1.1 服务端\"></a>1.1 服务端</h3><p>docker服务端一般都是在宿主机上，来接受客户端的命令。docker默认使用套接字的方式，但是也是允许使用tcp进行端口的监听，可以使用docker daemon -H IP:PORT的方式进行监听。</p>\n<h3 id=\"1-2-客户端\"><a href=\"#1-2-客户端\" class=\"headerlink\" title=\"1.2 客户端\"></a>1.2 客户端</h3><p>docker的客户端主要作用是向服务端发送操作的指令。客户端默认也是采用套接字的方式，向本地的docker服务端发送命令。当然，客户端也是可以使用tcp的方式进行发送指令，使用docker -H tcp:&#x2F;&#x2F;IP:PORT，用来指定接收命令的docker服务端。</p>\n<h2 id=\"2-命名空间\"><a href=\"#2-命名空间\" class=\"headerlink\" title=\"2. 命名空间\"></a>2. 命名空间</h2><p>大家在平时使用Linux或者macos的时候，我们并没有拆分多个环境的需求。但是在服务器上面，加入一台服务器运行多个进程，进程之间是相互影响的，比如共享内存，操作相同的文件。我们其实更希望能够将这些进程分离开，这样情况下，如果服务受到攻击，不会影响其他的服务。</p>\n<p><img src=\"/uploads/2018/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-09-04-%E4%B8%8B%E5%8D%8810.59.44.png\" alt=\"Alt text\"></p>\n<p>docker目前主要有6命名空间的隔离方式</p>\n<h3 id=\"2-1-进程空间隔离\"><a href=\"#2-1-进程空间隔离\" class=\"headerlink\" title=\"2.1 进程空间隔离\"></a>2.1 进程空间隔离</h3><p>进程在操作系统中是一个很重要的概念，也就是大家认为的正在运行中的程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ ps -ef</span><br><span class=\"line\">UID PID PPID C STIME TTY TIME CMD</span><br><span class=\"line\">0 1 0 0 9:31下午 ?? 0:10.07 /sbin/launchd</span><br><span class=\"line\">0 44 1 0 9:31下午 ?? 0:00.65 /usr/sbin/syslogd</span><br><span class=\"line\">0 45 1 0 9:31下午 ?? 0:01.37 /usr/libexec/UserEventAgent (System)</span><br><span class=\"line\">0 48 1 0 9:31下午 ?? 0:00.25 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld</span><br><span class=\"line\">0 49 1 0 9:31下午 ?? 0:02.57 /usr/libexec/kextd</span><br><span class=\"line\">0 50 1 0 9:31下午 ?? 0:02.40 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd</span><br><span class=\"line\">0 52 1 0 9:31下午 ?? 0:00.16 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted</span><br><span class=\"line\">55 55 1 0 9:31下午 ?? 0:00.38 /System/Library/CoreServices/appleeventsd --server</span><br><span class=\"line\">0 56 1 0 9:31下午 ?? 0:00.75 /usr/sbin/systemstats --daemon</span><br></pre></td></tr></table></figure>\n\n<p>可见当前系统运行了很多“程序”。</p>\n<p>我们现在新建一个容器，然后进入容器看下，docker容器里面的进程列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ docker run -it --<span class=\"built_in\">rm</span> --name <span class=\"built_in\">test</span> busybox</span><br><span class=\"line\">/ <span class=\"comment\"># ps -ef</span></span><br><span class=\"line\">PID   USER     TIME  COMMAND</span><br><span class=\"line\">    1 root      0:00 sh</span><br><span class=\"line\">    6 root      0:00 ps -ef</span><br></pre></td></tr></table></figure>\n\n<p>对比很明显，容器内部只有很少的几个正在运行的进程。</p>\n<p>我们新建一个窗口，然后看下宿主机上面和docker相关的进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ ps -ef  grep docker</span><br><span class=\"line\">    0    82     1   0  9:31下午 ??         0:00.02 /Library/PrivilegedHelperTools/com.docker.vmnetd</span><br><span class=\"line\">  501   918   879   0 10:26下午 ??         0:00.14 /Applications/Docker.app/Contents/MacOS/com.docker.supervisor -watchdog fd:0</span><br><span class=\"line\">  501   920   918   0 10:26下午 ??         0:03.32 com.docker.osxfs serve --address fd:3 --connect vms/0/connect --control fd:4 --log-destination asl</span><br><span class=\"line\">  501   921   918   0 10:26下午 ??         0:00.73 com.docker.vpnkit --ethernet fd:3 --port fd:4 --diagnostics fd:5 --pcap fd:6 --vsock-path vms/0/connect --host-names host.docker.internal,docker.for.mac.host.internal,docker.for.mac.localhost --gateway-names gateway.docker.internal,docker.for.mac.gateway.internal,docker.for.mac.http.internal --vm-names docker-for-desktop --listen-backlog 32 --mtu 1500 --allowed-bind-addresses 0.0.0.0 --http /Users/feilong/Library/Group Containers/group.com.docker/http_proxy.json --dhcp /Users/feilong/Library/Group Containers/group.com.docker/dhcp.json --port-max-idle-time 300 --max-connections 2000 --gateway-ip 192.168.65.1 --host-ip 192.168.65.2 --lowest-ip 192.168.65.3 --highest-ip 192.168.65.254 --log-destination asl --udpv4-forwards 123:127.0.0.1:59434 --gc-compact-interval 1800</span><br><span class=\"line\">  501   922   918   0 10:26下午 ??         0:01.17 com.docker.driver.amd64-linux -addr fd:3 -debug</span><br><span class=\"line\">  501   928   922   0 10:26下午 ??         2:40.08 com.docker.hyperkit -A -u -F vms/0/hyperkit.pid -c 2 -m 2048M -s 0:0,hostbridge -s 31,lpc -s 1:0,virtio-vpnkit,path=vpnkit.eth.sock,uuid=246fb3f9-3ad5-4683-837a-33ac39f57f25 -U 5a3669ae-b209-443a-a074-312cd32a258a -s 2:0,ahci-hd,/Users/feilong/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw -s 3,virtio-sock,guest_cid=3,path=vms/0,guest_forwards=2376;1525 -s 4,ahci-cd,/Applications/Docker.app/Contents/Resources/linuxkit/docker-for-mac.iso -s 5,ahci-cd,vms/0/config.iso -s 6,virtio-rnd -s 7,virtio-9p,path=vpnkit.port.sock,tag=port -l com1,autopty=vms/0/tty,asl -f bootrom,/Applications/Docker.app/Contents/Resources/uefi/UEFI.fd,,</span><br><span class=\"line\">  501  2074  1102   0 11:21下午 ??         0:00.50 /Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/vscode-languageclient/lib/utils/electronForkStart /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/dockerfile-language-server-nodejs/lib/server.js --node-ipc --node-ipc --clientProcessId=1102</span><br><span class=\"line\">  501  2100  1065   0 11:24下午 ttys001    0:00.12 docker run -it --<span class=\"built_in\">rm</span> --name <span class=\"built_in\">test</span> busybox</span><br><span class=\"line\">  501  2086  2083   0 11:21下午 ttys002    0:00.19 docker <span class=\"built_in\">exec</span> -it 910aa64a312b3a884f4efb059e47ee601bbd3ba3d62f4c92abd4120cff770828 /bin/sh</span><br><span class=\"line\">  501  2090  2087   0 11:21下午 ttys003    0:00.12 docker <span class=\"built_in\">exec</span> -it 73f8fbcc50651fd4fea9fe0be7fe4066ea78efd7e9b2438fe657a3e7725e7903 /bin/sh</span><br><span class=\"line\">  501  2115  2111   0 11:27下午 ttys004    0:00.00 grep docker</span><br></pre></td></tr></table></figure>\n\n<p>在进程列表中，我们没有看到容器内部运行的进程，说明相对于容器的“外部”，容器“内部”的进程是隔离的。但是我们也可以发现，刚刚创建的名字为test的容器，实质上就是宿主机上面的一个PID为2090的进程。</p>\n<p>所以，我们可以理解docker的进程树是这个状态：</p>\n<p><img src=\"/uploads/2018/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-09-04-%E4%B8%8B%E5%8D%8811.43.31.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-2-网络空间隔离\"><a href=\"#2-2-网络空间隔离\" class=\"headerlink\" title=\"2.2 网络空间隔离\"></a>2.2 网络空间隔离</h3><p>容器其实不能完全和宿主机器隔离网络，要不然的话容器就没办法通过外部进行访问，那么也就没有实际的意义。但是容器之间是网络隔离的，这种隔离的方式，就是通过网络命名空间实现的。</p>\n<p>docker有四种不同的网络模式：Host、Container、None和bridge</p>\n<p>docker默认的是桥接模式。</p>\n<p>docker在创建容器的时候， 不仅会给容器创建IP地址，还会在宿主机上面创建一个虚拟网桥docker0，在运行的时候，将容器和该网桥进行相连。</p>\n<p>在默认的情况下，创建容器的时候，都会创建一对虚拟网卡，两个虚拟网卡组成数据通道，一个在容器内部，另外一个加入到docker0的网桥中。</p>\n<p>打开两个窗口，分别创建redis和redis2容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z feilong]<span class=\"comment\"># docker run -it --rm --name redis  -p 6379:6379 redis:latest /bin/bash</span></span><br><span class=\"line\">root@d89535b59b0b:/data<span class=\"comment\">#</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z feilong]<span class=\"comment\"># docker run -it --rm --name redis2 -p 6378:6379 redis:latest /bin/bash</span></span><br><span class=\"line\">root@7736850135af:/data<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开第三个窗口，查看网桥的状态</span><br><span class=\"line\">&lt;pre class=<span class=\"string\">&quot;prettyprint&quot;</span>&gt;[feilong@izj6c9b96ia369l2i47yq3z ~]$ brctl show</span><br><span class=\"line\">bridge name     bridge <span class=\"built_in\">id</span>               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.024219a15f9d       no              veth8331b03</span><br><span class=\"line\">                                                        vethc5f3cb9</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-09-06-%E4%B8%8B%E5%8D%888.43.46.png\" alt=\"Alt text\"></p>\n<p>docker0 会为每一个容器分配一个新的 IP 地址并将 docker0 的 IP 地址设置为默认的网关。网桥 docker0 通过 iptables 中的配置与宿主机器上的网卡相连，所有符合条件的请求都会通过 iptables 转发到 docker0 并由网桥分发给对应的机器。同时也会在防火墙加上一条新的规则。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z feilong]<span class=\"comment\"># iptables -L</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">DOCKER-USER  all  --  anywhere             anywhere</span><br><span class=\"line\">DOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere</span><br><span class=\"line\">ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</span><br><span class=\"line\">DOCKER     all  --  anywhere             anywhere</span><br><span class=\"line\">ACCEPT     all  --  anywhere             anywhere</span><br><span class=\"line\">ACCEPT     all  --  anywhere             anywhere</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain DOCKER (1 references)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             172.17.0.2           tcp dpt:6379</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             172.17.0.3           tcp dpt:6379</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             172.17.0.4           tcp dpt:http</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-挂载点命名空间\"><a href=\"#2-3-挂载点命名空间\" class=\"headerlink\" title=\"2.3 挂载点命名空间\"></a>2.3 挂载点命名空间</h3><p>docker已经可以通过命名空间将网络和进程进行隔离。挂载命名空间，允许不同的容器，查看到不同的文件结构，这样，每个命名空间的进程所看到的文件目录彼此被隔离。每个容器内的进程只会更改容器内部的文件目录。</p>\n<h3 id=\"2-4-IPC命名空间\"><a href=\"#2-4-IPC命名空间\" class=\"headerlink\" title=\"2.4 IPC命名空间\"></a>2.4 IPC命名空间</h3><p>容器中的进程交互采用的是Linux中常见的进程间交互方式（Interprocess Communication， IPC），包括信号量、消息队列和内存共享等。IPC命名空间和PID命名空间可以组合使用，同一个IPC命名空间的进程可以彼此可见，允许进行交互，不同空间的进程无法交互。</p>\n<h3 id=\"2-5-UTS-命名空间\"><a href=\"#2-5-UTS-命名空间\" class=\"headerlink\" title=\"2.5 UTS 命名空间\"></a>2.5 UTS 命名空间</h3><p>UTS（Unix time-sharing system）命名空间允许每个容器拥有一个独立的主机名和域名，从而可以虚拟出一个独立的主机名和网络空间的环境，就可以跟网络上的一台独立主机一样。</p>\n<p>默认情况下，docker的主机名是容器的id</p>\n<p><img src=\"/uploads/2018/09/WX20180908-004426@2x-1024x293.png\" alt=\"Alt text\"></p>\n<p><img src=\"/uploads/2018/09/WX20180908-004332@2x-1024x55.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-6-用户命名空间\"><a href=\"#2-6-用户命名空间\" class=\"headerlink\" title=\"2.6 用户命名空间\"></a>2.6 用户命名空间</h3><p>每个容器内部都有不同的用户组和组id，也就是说可以在容器内部使用特定的内部用户执行程序，而不是宿主机上的用户。每个容器都有root账号，但是和宿主机都不在一个命名空间。通过使用命名空间隔离，来保证容器内部用户无法操作容器外部的操作权限。</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>6种命名空间让容器之间松耦合，也让容器与宿主机松偶尔。同时，也保证了安全性。容器内部不能操作其他容器内部的东西，docker的这种命名空间隔离的方式，也比较符合Linux的系统设计。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-基本架构\"><a href=\"#1-基本架构\" class=\"headerlink\" title=\"1. 基本架构\"></a>1. 基本架构</h2><p>docker目前采用了标准的C&#x2F;S架构。客户端和服务端既可以运行在一个机器上，又可以通过socket或者restful API来进行通信。</p>\n<h3 id=\"1-1-服务端\"><a href=\"#1-1-服务端\" class=\"headerlink\" title=\"1.1 服务端\"></a>1.1 服务端</h3><p>docker服务端一般都是在宿主机上，来接受客户端的命令。docker默认使用套接字的方式，但是也是允许使用tcp进行端口的监听，可以使用docker daemon -H IP:PORT的方式进行监听。</p>\n<h3 id=\"1-2-客户端\"><a href=\"#1-2-客户端\" class=\"headerlink\" title=\"1.2 客户端\"></a>1.2 客户端</h3><p>docker的客户端主要作用是向服务端发送操作的指令。客户端默认也是采用套接字的方式，向本地的docker服务端发送命令。当然，客户端也是可以使用tcp的方式进行发送指令，使用docker -H tcp:&#x2F;&#x2F;IP:PORT，用来指定接收命令的docker服务端。</p>\n<h2 id=\"2-命名空间\"><a href=\"#2-命名空间\" class=\"headerlink\" title=\"2. 命名空间\"></a>2. 命名空间</h2><p>大家在平时使用Linux或者macos的时候，我们并没有拆分多个环境的需求。但是在服务器上面，加入一台服务器运行多个进程，进程之间是相互影响的，比如共享内存，操作相同的文件。我们其实更希望能够将这些进程分离开，这样情况下，如果服务受到攻击，不会影响其他的服务。</p>\n<p><img src=\"/uploads/2018/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-09-04-%E4%B8%8B%E5%8D%8810.59.44.png\" alt=\"Alt text\"></p>\n<p>docker目前主要有6命名空间的隔离方式</p>\n<h3 id=\"2-1-进程空间隔离\"><a href=\"#2-1-进程空间隔离\" class=\"headerlink\" title=\"2.1 进程空间隔离\"></a>2.1 进程空间隔离</h3><p>进程在操作系统中是一个很重要的概念，也就是大家认为的正在运行中的程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ ps -ef</span><br><span class=\"line\">UID PID PPID C STIME TTY TIME CMD</span><br><span class=\"line\">0 1 0 0 9:31下午 ?? 0:10.07 /sbin/launchd</span><br><span class=\"line\">0 44 1 0 9:31下午 ?? 0:00.65 /usr/sbin/syslogd</span><br><span class=\"line\">0 45 1 0 9:31下午 ?? 0:01.37 /usr/libexec/UserEventAgent (System)</span><br><span class=\"line\">0 48 1 0 9:31下午 ?? 0:00.25 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld</span><br><span class=\"line\">0 49 1 0 9:31下午 ?? 0:02.57 /usr/libexec/kextd</span><br><span class=\"line\">0 50 1 0 9:31下午 ?? 0:02.40 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd</span><br><span class=\"line\">0 52 1 0 9:31下午 ?? 0:00.16 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted</span><br><span class=\"line\">55 55 1 0 9:31下午 ?? 0:00.38 /System/Library/CoreServices/appleeventsd --server</span><br><span class=\"line\">0 56 1 0 9:31下午 ?? 0:00.75 /usr/sbin/systemstats --daemon</span><br></pre></td></tr></table></figure>\n\n<p>可见当前系统运行了很多“程序”。</p>\n<p>我们现在新建一个容器，然后进入容器看下，docker容器里面的进程列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:~ feilong$ docker run -it --<span class=\"built_in\">rm</span> --name <span class=\"built_in\">test</span> busybox</span><br><span class=\"line\">/ <span class=\"comment\"># ps -ef</span></span><br><span class=\"line\">PID   USER     TIME  COMMAND</span><br><span class=\"line\">    1 root      0:00 sh</span><br><span class=\"line\">    6 root      0:00 ps -ef</span><br></pre></td></tr></table></figure>\n\n<p>对比很明显，容器内部只有很少的几个正在运行的进程。</p>\n<p>我们新建一个窗口，然后看下宿主机上面和docker相关的进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ ps -ef  grep docker</span><br><span class=\"line\">    0    82     1   0  9:31下午 ??         0:00.02 /Library/PrivilegedHelperTools/com.docker.vmnetd</span><br><span class=\"line\">  501   918   879   0 10:26下午 ??         0:00.14 /Applications/Docker.app/Contents/MacOS/com.docker.supervisor -watchdog fd:0</span><br><span class=\"line\">  501   920   918   0 10:26下午 ??         0:03.32 com.docker.osxfs serve --address fd:3 --connect vms/0/connect --control fd:4 --log-destination asl</span><br><span class=\"line\">  501   921   918   0 10:26下午 ??         0:00.73 com.docker.vpnkit --ethernet fd:3 --port fd:4 --diagnostics fd:5 --pcap fd:6 --vsock-path vms/0/connect --host-names host.docker.internal,docker.for.mac.host.internal,docker.for.mac.localhost --gateway-names gateway.docker.internal,docker.for.mac.gateway.internal,docker.for.mac.http.internal --vm-names docker-for-desktop --listen-backlog 32 --mtu 1500 --allowed-bind-addresses 0.0.0.0 --http /Users/feilong/Library/Group Containers/group.com.docker/http_proxy.json --dhcp /Users/feilong/Library/Group Containers/group.com.docker/dhcp.json --port-max-idle-time 300 --max-connections 2000 --gateway-ip 192.168.65.1 --host-ip 192.168.65.2 --lowest-ip 192.168.65.3 --highest-ip 192.168.65.254 --log-destination asl --udpv4-forwards 123:127.0.0.1:59434 --gc-compact-interval 1800</span><br><span class=\"line\">  501   922   918   0 10:26下午 ??         0:01.17 com.docker.driver.amd64-linux -addr fd:3 -debug</span><br><span class=\"line\">  501   928   922   0 10:26下午 ??         2:40.08 com.docker.hyperkit -A -u -F vms/0/hyperkit.pid -c 2 -m 2048M -s 0:0,hostbridge -s 31,lpc -s 1:0,virtio-vpnkit,path=vpnkit.eth.sock,uuid=246fb3f9-3ad5-4683-837a-33ac39f57f25 -U 5a3669ae-b209-443a-a074-312cd32a258a -s 2:0,ahci-hd,/Users/feilong/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw -s 3,virtio-sock,guest_cid=3,path=vms/0,guest_forwards=2376;1525 -s 4,ahci-cd,/Applications/Docker.app/Contents/Resources/linuxkit/docker-for-mac.iso -s 5,ahci-cd,vms/0/config.iso -s 6,virtio-rnd -s 7,virtio-9p,path=vpnkit.port.sock,tag=port -l com1,autopty=vms/0/tty,asl -f bootrom,/Applications/Docker.app/Contents/Resources/uefi/UEFI.fd,,</span><br><span class=\"line\">  501  2074  1102   0 11:21下午 ??         0:00.50 /Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/vscode-languageclient/lib/utils/electronForkStart /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/dockerfile-language-server-nodejs/lib/server.js --node-ipc --node-ipc --clientProcessId=1102</span><br><span class=\"line\">  501  2100  1065   0 11:24下午 ttys001    0:00.12 docker run -it --<span class=\"built_in\">rm</span> --name <span class=\"built_in\">test</span> busybox</span><br><span class=\"line\">  501  2086  2083   0 11:21下午 ttys002    0:00.19 docker <span class=\"built_in\">exec</span> -it 910aa64a312b3a884f4efb059e47ee601bbd3ba3d62f4c92abd4120cff770828 /bin/sh</span><br><span class=\"line\">  501  2090  2087   0 11:21下午 ttys003    0:00.12 docker <span class=\"built_in\">exec</span> -it 73f8fbcc50651fd4fea9fe0be7fe4066ea78efd7e9b2438fe657a3e7725e7903 /bin/sh</span><br><span class=\"line\">  501  2115  2111   0 11:27下午 ttys004    0:00.00 grep docker</span><br></pre></td></tr></table></figure>\n\n<p>在进程列表中，我们没有看到容器内部运行的进程，说明相对于容器的“外部”，容器“内部”的进程是隔离的。但是我们也可以发现，刚刚创建的名字为test的容器，实质上就是宿主机上面的一个PID为2090的进程。</p>\n<p>所以，我们可以理解docker的进程树是这个状态：</p>\n<p><img src=\"/uploads/2018/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-09-04-%E4%B8%8B%E5%8D%8811.43.31.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-2-网络空间隔离\"><a href=\"#2-2-网络空间隔离\" class=\"headerlink\" title=\"2.2 网络空间隔离\"></a>2.2 网络空间隔离</h3><p>容器其实不能完全和宿主机器隔离网络，要不然的话容器就没办法通过外部进行访问，那么也就没有实际的意义。但是容器之间是网络隔离的，这种隔离的方式，就是通过网络命名空间实现的。</p>\n<p>docker有四种不同的网络模式：Host、Container、None和bridge</p>\n<p>docker默认的是桥接模式。</p>\n<p>docker在创建容器的时候， 不仅会给容器创建IP地址，还会在宿主机上面创建一个虚拟网桥docker0，在运行的时候，将容器和该网桥进行相连。</p>\n<p>在默认的情况下，创建容器的时候，都会创建一对虚拟网卡，两个虚拟网卡组成数据通道，一个在容器内部，另外一个加入到docker0的网桥中。</p>\n<p>打开两个窗口，分别创建redis和redis2容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z feilong]<span class=\"comment\"># docker run -it --rm --name redis  -p 6379:6379 redis:latest /bin/bash</span></span><br><span class=\"line\">root@d89535b59b0b:/data<span class=\"comment\">#</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z feilong]<span class=\"comment\"># docker run -it --rm --name redis2 -p 6378:6379 redis:latest /bin/bash</span></span><br><span class=\"line\">root@7736850135af:/data<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开第三个窗口，查看网桥的状态</span><br><span class=\"line\">&lt;pre class=<span class=\"string\">&quot;prettyprint&quot;</span>&gt;[feilong@izj6c9b96ia369l2i47yq3z ~]$ brctl show</span><br><span class=\"line\">bridge name     bridge <span class=\"built_in\">id</span>               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.024219a15f9d       no              veth8331b03</span><br><span class=\"line\">                                                        vethc5f3cb9</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-09-06-%E4%B8%8B%E5%8D%888.43.46.png\" alt=\"Alt text\"></p>\n<p>docker0 会为每一个容器分配一个新的 IP 地址并将 docker0 的 IP 地址设置为默认的网关。网桥 docker0 通过 iptables 中的配置与宿主机器上的网卡相连，所有符合条件的请求都会通过 iptables 转发到 docker0 并由网桥分发给对应的机器。同时也会在防火墙加上一条新的规则。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z feilong]<span class=\"comment\"># iptables -L</span></span><br><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">DOCKER-USER  all  --  anywhere             anywhere</span><br><span class=\"line\">DOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere</span><br><span class=\"line\">ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</span><br><span class=\"line\">DOCKER     all  --  anywhere             anywhere</span><br><span class=\"line\">ACCEPT     all  --  anywhere             anywhere</span><br><span class=\"line\">ACCEPT     all  --  anywhere             anywhere</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain DOCKER (1 references)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             172.17.0.2           tcp dpt:6379</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             172.17.0.3           tcp dpt:6379</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             172.17.0.4           tcp dpt:http</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-挂载点命名空间\"><a href=\"#2-3-挂载点命名空间\" class=\"headerlink\" title=\"2.3 挂载点命名空间\"></a>2.3 挂载点命名空间</h3><p>docker已经可以通过命名空间将网络和进程进行隔离。挂载命名空间，允许不同的容器，查看到不同的文件结构，这样，每个命名空间的进程所看到的文件目录彼此被隔离。每个容器内的进程只会更改容器内部的文件目录。</p>\n<h3 id=\"2-4-IPC命名空间\"><a href=\"#2-4-IPC命名空间\" class=\"headerlink\" title=\"2.4 IPC命名空间\"></a>2.4 IPC命名空间</h3><p>容器中的进程交互采用的是Linux中常见的进程间交互方式（Interprocess Communication， IPC），包括信号量、消息队列和内存共享等。IPC命名空间和PID命名空间可以组合使用，同一个IPC命名空间的进程可以彼此可见，允许进行交互，不同空间的进程无法交互。</p>\n<h3 id=\"2-5-UTS-命名空间\"><a href=\"#2-5-UTS-命名空间\" class=\"headerlink\" title=\"2.5 UTS 命名空间\"></a>2.5 UTS 命名空间</h3><p>UTS（Unix time-sharing system）命名空间允许每个容器拥有一个独立的主机名和域名，从而可以虚拟出一个独立的主机名和网络空间的环境，就可以跟网络上的一台独立主机一样。</p>\n<p>默认情况下，docker的主机名是容器的id</p>\n<p><img src=\"/uploads/2018/09/WX20180908-004426@2x-1024x293.png\" alt=\"Alt text\"></p>\n<p><img src=\"/uploads/2018/09/WX20180908-004332@2x-1024x55.png\" alt=\"Alt text\"></p>\n<h3 id=\"2-6-用户命名空间\"><a href=\"#2-6-用户命名空间\" class=\"headerlink\" title=\"2.6 用户命名空间\"></a>2.6 用户命名空间</h3><p>每个容器内部都有不同的用户组和组id，也就是说可以在容器内部使用特定的内部用户执行程序，而不是宿主机上的用户。每个容器都有root账号，但是和宿主机都不在一个命名空间。通过使用命名空间隔离，来保证容器内部用户无法操作容器外部的操作权限。</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>6种命名空间让容器之间松耦合，也让容器与宿主机松偶尔。同时，也保证了安全性。容器内部不能操作其他容器内部的东西，docker的这种命名空间隔离的方式，也比较符合Linux的系统设计。</p>\n"},{"title":"Docker之安全防护与配置","id":"396","date":"2018-09-23T16:49:34.000Z","_content":"\n## 1\\. 风险的来源\n\ndocker的安全性，在很大程度上来自于Linux的本身。目前，我们考虑到的安全性时，主要考虑下面几个方面：\n\n*   Linux内核的命名空间机制提供的容器隔离安全\n*   Linux控制组机制对容器资源的控制能力安全\n*   Linux内核的能力机制所带来的操作权限安全\n*   docker程序（尤其是服务端）本身的抗攻击性\n*   其他安全增强机制（包括APPArmor、SELinux等）对容器安全的影响\n*   通过第三方工具（包括docker bench工具）对docker环境的安全性的评估\n\n## 2\\. 风险的分析\n\n### 2.1 命名空间隔离的安全\n\n当我们在运行docker run的时候，docker会对针对容器创建一个隔离的命名空间，通过这个命名空间，将容器之间的进程和网络进行隔离，这就意味着容器不能独立的访问其他容器的接口或者套接字。\n\n我们知道，所有容器的网络都是通过docker0进行桥接，当然，如果宿主机上面做一些特殊的配置，可以实现 container1->宿主机->container2 网络的交互方式。\n\n那么，命名空间的架构设计本身，是否是足够安全呢？\n\n其实，命名空间出现的历史很长了，从Linux内核2.6.15的版本（大概是2008年）就已经开始引用了命名空间，但是实际上，“命名空间”这个含义要更早，最开始是从2005年开始提出来的，所以设计和实现足够成熟。\n\n当然，和虚拟机相比，命名空间并不是绝对。因为命名空间，实际上是“假隔离”，虚拟机是“真隔离”。运行在容器内的应用，会直接访问宿主机上面的内核和部分文件。所以，归根结底，我们应该保证的是镜像是足够安全的，只有镜像是安全的，才能保证我们能够在Linux运行安全可信的服务。\n\n### 2.2 控制组资源控制的安全\n\nCGroups有一个重要的作用就是资源审计和资源限制\n\n当我们再运行docker run的时候，docker会通过Linux的相关调用，在后台创建一个控制组，用来控制容器对宿主机的资源消耗，比如控制容器使用内存、CPU等。\n\n控制组有很多重要的作用。比如确保每个容器能够合理的使用共享资源，最重要的是可以通过控制组限制资源的使用，这一点在防止DDoS的时候尤其重要。\n\n**_对于PaaS、容器云这样的容器服务平台，运行着成千上万个容器的实例，如果一旦某个容器被DDoS攻击，那么就会控制组的作用就显现出来，这样可以防止单个容器抢占过多资源，导致整个服务平台出现雪崩！_**\n\n### 2.3 内核能力机制\n\n传统的Unix系统对进程的权限其实只有root权限和非root权限两种粗粒度。\n\n后来，随着Linux内核的升级，开始对权限的粒度越来越灵活，例如，可以给用户分配某个文件的修改权限、可以给某个用户操作某个进程的权限等等。\n\n默认情况下，docker在运行容器的时候，只使用Linux内核的一部分能力，而且，容器的一些能力往往也是由宿主机上面的一些服务进行支持，比如网络的管理等。所以docker其实并不需要获取真正的“root权限”，此外，容器还能禁用一些不必要的权限，比如：\n\n*   禁止任何文件挂载操作（挂载实际上是宿主机，而不是容器本身）；\n*   禁止访问宿主机上面的套接字；\n*   禁止访问一些文件系统的操作，比如创建新设备；\n*   禁止模板加载\n\n**_所以，及时攻击者入侵到容器内部，在容器内部获取了root权限，也并不是真正的宿主机上面的“root权限”，能进行的破坏也是有限的。_**\n\n### 2.4 Docker服务端的防护\n\n使用docker最核心的就是docker服务器了。由于现在启动docker服务器需要使用root权限，所以服务端的权限显得尤其重要。\n\n首先，我们应该确保运行docker的用户是可信的人。由于容器的内部一般都是root权限，如果某个恶意的用户，将宿主机上面的/目录映射到容器内部，那么容器理论上就会有修改根目录下面的权限。因此，在创建容器的时候，我们应该详细检查运行的参数。\n\n尽量将容器映射到非root权限的用户目录下面，这样，可以有效减轻容器和宿主机上面因为权限而导致的安全隐患。\n\n允许docker服务端在非root权限下运行，利用安全可靠的子进程限制特殊权限的操作。比如，这些子进程只能负责文件管理、配置等操作。\n\n### 2.5 更多安全特性的使用\n\n除了docker能力机制之外，我们可以使用一些安全软件增加docker的安全性。比如APParmor等。\n\ndocker默认只启用了能力机制。用户还可以启用更多的方案加强docker安全：\n\n*   在内核中启用GRSEC和PAX，这样可以增加更多编译和运行的检查；并且通过地址随机化机制避免恶意探测。启动该特性不需要docker进行任何配置。[社区最佳实践：基于PaX/Grsecurity & STIG & Sheild针对es的Docker场景化加固](https://hardenedlinux.github.io/system-security/2015/09/06/hardening-es-in-docker-with-grsec.html)\n*   使用一些增强安全特性的容器模板，比如带APParmor的模板和Redhat带SELinux的策略的模板。这些模板提供了额外的安全特性。[AppArmor security profiles for Docker](\"https://docs.docker.com/engine/security/apparmor)\n*   用户可以自定义更加严格的访问控制机制来制定安全策略。\n\n此外，将宿主机的文件挂载到容器内部的时候，可以通过设置一些只读（read-only）权限来避免容器对宿主机文件系统的破坏，特别是一些系统运行状态的目录，包括/proc/sys、/proc/irq、/proc/bus等等。\n\n### 2.6 使用第三方检测工具\n\n前面说了很多加强docker安全性的方式，但是注意去检查，会比较繁琐。幸亏现在有一些自动化的检测工具，比较出名的就是docker bench和Clair。\n\n#### 2.6.1 docker bench\n\ndocker bench其实是一个docker的镜像，仓库地址：[https://hub.docker.com/r/docker/docker-bench-security/](https://hub.docker.com/r/docker/docker-bench-security/) 通过运行docker bench，可以对docker的一些配置做自动化安全检测。检测的标准是CIS Docker，检测项包括主机配置、Docker引擎、配置文件权限、镜像管理、容器运行时环境、安全项等6大方面。\n\n```bash\n$ docker run -it --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /var/lib:/var/lib \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /usr/lib/systemd:/usr/lib/systemd \\\n    -v /etc:/etc --label docker_bench_security \\\n    docker/docker-bench-security\n```\n\n![Alt text](/uploads/2018/09/docker-bench-1.png) ![Alt text](/uploads/2018/09/docker-bench-2-1024x650.png)\n\n在输出的结果中，会给出响应的提示信息，然后用户可以根据对应的提示，进行一些配置的更改等操作。一般是避免出现WARN或以上的问题。\n\n## 3\\. 总结\n\ndocker其实自身携带的一些基本的抵御安全风险的机制，配合APParmor等安全机制，可以让docker容器更加安全。任何技术层面的实现，都需要合理的使用才能等到巩固，特别是生产环境，可能遭遇很多位置的安全风险，所以需要配合完善的监控系统来加强管理。\n\nDocker使用的时候需要注意：\n\n*   容器自身携带的隔离，并不是很完善，需要加强对容器的安全审查。\n*   尽量使用官方的镜像，降低安全风险。\n*   采用专门的服务器用来管理docker服务，加强对容器的监控机制。\n*   随着容器的大规模使用，甚至构成容器集群的时候，需要考虑容器网络上必备的安全防护，比如DDoS攻击等。","source":"_posts/docker-safe-and-config.md","raw":"---\ntitle: Docker之安全防护与配置\ntags:\n  - docker\n  - docker安全\nid: '396'\ncategories:\n  - - Docker\ndate: 2018-09-24 00:49:34\n---\n\n## 1\\. 风险的来源\n\ndocker的安全性，在很大程度上来自于Linux的本身。目前，我们考虑到的安全性时，主要考虑下面几个方面：\n\n*   Linux内核的命名空间机制提供的容器隔离安全\n*   Linux控制组机制对容器资源的控制能力安全\n*   Linux内核的能力机制所带来的操作权限安全\n*   docker程序（尤其是服务端）本身的抗攻击性\n*   其他安全增强机制（包括APPArmor、SELinux等）对容器安全的影响\n*   通过第三方工具（包括docker bench工具）对docker环境的安全性的评估\n\n## 2\\. 风险的分析\n\n### 2.1 命名空间隔离的安全\n\n当我们在运行docker run的时候，docker会对针对容器创建一个隔离的命名空间，通过这个命名空间，将容器之间的进程和网络进行隔离，这就意味着容器不能独立的访问其他容器的接口或者套接字。\n\n我们知道，所有容器的网络都是通过docker0进行桥接，当然，如果宿主机上面做一些特殊的配置，可以实现 container1->宿主机->container2 网络的交互方式。\n\n那么，命名空间的架构设计本身，是否是足够安全呢？\n\n其实，命名空间出现的历史很长了，从Linux内核2.6.15的版本（大概是2008年）就已经开始引用了命名空间，但是实际上，“命名空间”这个含义要更早，最开始是从2005年开始提出来的，所以设计和实现足够成熟。\n\n当然，和虚拟机相比，命名空间并不是绝对。因为命名空间，实际上是“假隔离”，虚拟机是“真隔离”。运行在容器内的应用，会直接访问宿主机上面的内核和部分文件。所以，归根结底，我们应该保证的是镜像是足够安全的，只有镜像是安全的，才能保证我们能够在Linux运行安全可信的服务。\n\n### 2.2 控制组资源控制的安全\n\nCGroups有一个重要的作用就是资源审计和资源限制\n\n当我们再运行docker run的时候，docker会通过Linux的相关调用，在后台创建一个控制组，用来控制容器对宿主机的资源消耗，比如控制容器使用内存、CPU等。\n\n控制组有很多重要的作用。比如确保每个容器能够合理的使用共享资源，最重要的是可以通过控制组限制资源的使用，这一点在防止DDoS的时候尤其重要。\n\n**_对于PaaS、容器云这样的容器服务平台，运行着成千上万个容器的实例，如果一旦某个容器被DDoS攻击，那么就会控制组的作用就显现出来，这样可以防止单个容器抢占过多资源，导致整个服务平台出现雪崩！_**\n\n### 2.3 内核能力机制\n\n传统的Unix系统对进程的权限其实只有root权限和非root权限两种粗粒度。\n\n后来，随着Linux内核的升级，开始对权限的粒度越来越灵活，例如，可以给用户分配某个文件的修改权限、可以给某个用户操作某个进程的权限等等。\n\n默认情况下，docker在运行容器的时候，只使用Linux内核的一部分能力，而且，容器的一些能力往往也是由宿主机上面的一些服务进行支持，比如网络的管理等。所以docker其实并不需要获取真正的“root权限”，此外，容器还能禁用一些不必要的权限，比如：\n\n*   禁止任何文件挂载操作（挂载实际上是宿主机，而不是容器本身）；\n*   禁止访问宿主机上面的套接字；\n*   禁止访问一些文件系统的操作，比如创建新设备；\n*   禁止模板加载\n\n**_所以，及时攻击者入侵到容器内部，在容器内部获取了root权限，也并不是真正的宿主机上面的“root权限”，能进行的破坏也是有限的。_**\n\n### 2.4 Docker服务端的防护\n\n使用docker最核心的就是docker服务器了。由于现在启动docker服务器需要使用root权限，所以服务端的权限显得尤其重要。\n\n首先，我们应该确保运行docker的用户是可信的人。由于容器的内部一般都是root权限，如果某个恶意的用户，将宿主机上面的/目录映射到容器内部，那么容器理论上就会有修改根目录下面的权限。因此，在创建容器的时候，我们应该详细检查运行的参数。\n\n尽量将容器映射到非root权限的用户目录下面，这样，可以有效减轻容器和宿主机上面因为权限而导致的安全隐患。\n\n允许docker服务端在非root权限下运行，利用安全可靠的子进程限制特殊权限的操作。比如，这些子进程只能负责文件管理、配置等操作。\n\n### 2.5 更多安全特性的使用\n\n除了docker能力机制之外，我们可以使用一些安全软件增加docker的安全性。比如APParmor等。\n\ndocker默认只启用了能力机制。用户还可以启用更多的方案加强docker安全：\n\n*   在内核中启用GRSEC和PAX，这样可以增加更多编译和运行的检查；并且通过地址随机化机制避免恶意探测。启动该特性不需要docker进行任何配置。[社区最佳实践：基于PaX/Grsecurity & STIG & Sheild针对es的Docker场景化加固](https://hardenedlinux.github.io/system-security/2015/09/06/hardening-es-in-docker-with-grsec.html)\n*   使用一些增强安全特性的容器模板，比如带APParmor的模板和Redhat带SELinux的策略的模板。这些模板提供了额外的安全特性。[AppArmor security profiles for Docker](\"https://docs.docker.com/engine/security/apparmor)\n*   用户可以自定义更加严格的访问控制机制来制定安全策略。\n\n此外，将宿主机的文件挂载到容器内部的时候，可以通过设置一些只读（read-only）权限来避免容器对宿主机文件系统的破坏，特别是一些系统运行状态的目录，包括/proc/sys、/proc/irq、/proc/bus等等。\n\n### 2.6 使用第三方检测工具\n\n前面说了很多加强docker安全性的方式，但是注意去检查，会比较繁琐。幸亏现在有一些自动化的检测工具，比较出名的就是docker bench和Clair。\n\n#### 2.6.1 docker bench\n\ndocker bench其实是一个docker的镜像，仓库地址：[https://hub.docker.com/r/docker/docker-bench-security/](https://hub.docker.com/r/docker/docker-bench-security/) 通过运行docker bench，可以对docker的一些配置做自动化安全检测。检测的标准是CIS Docker，检测项包括主机配置、Docker引擎、配置文件权限、镜像管理、容器运行时环境、安全项等6大方面。\n\n```bash\n$ docker run -it --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /var/lib:/var/lib \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /usr/lib/systemd:/usr/lib/systemd \\\n    -v /etc:/etc --label docker_bench_security \\\n    docker/docker-bench-security\n```\n\n![Alt text](/uploads/2018/09/docker-bench-1.png) ![Alt text](/uploads/2018/09/docker-bench-2-1024x650.png)\n\n在输出的结果中，会给出响应的提示信息，然后用户可以根据对应的提示，进行一些配置的更改等操作。一般是避免出现WARN或以上的问题。\n\n## 3\\. 总结\n\ndocker其实自身携带的一些基本的抵御安全风险的机制，配合APParmor等安全机制，可以让docker容器更加安全。任何技术层面的实现，都需要合理的使用才能等到巩固，特别是生产环境，可能遭遇很多位置的安全风险，所以需要配合完善的监控系统来加强管理。\n\nDocker使用的时候需要注意：\n\n*   容器自身携带的隔离，并不是很完善，需要加强对容器的安全审查。\n*   尽量使用官方的镜像，降低安全风险。\n*   采用专门的服务器用来管理docker服务，加强对容器的监控机制。\n*   随着容器的大规模使用，甚至构成容器集群的时候，需要考虑容器网络上必备的安全防护，比如DDoS攻击等。","slug":"docker-safe-and-config","published":1,"updated":"2022-03-13T01:17:12.409Z","_id":"cl0oi8mev0017417t5dozdhk8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-风险的来源\"><a href=\"#1-风险的来源\" class=\"headerlink\" title=\"1. 风险的来源\"></a>1. 风险的来源</h2><p>docker的安全性，在很大程度上来自于Linux的本身。目前，我们考虑到的安全性时，主要考虑下面几个方面：</p>\n<ul>\n<li>Linux内核的命名空间机制提供的容器隔离安全</li>\n<li>Linux控制组机制对容器资源的控制能力安全</li>\n<li>Linux内核的能力机制所带来的操作权限安全</li>\n<li>docker程序（尤其是服务端）本身的抗攻击性</li>\n<li>其他安全增强机制（包括APPArmor、SELinux等）对容器安全的影响</li>\n<li>通过第三方工具（包括docker bench工具）对docker环境的安全性的评估</li>\n</ul>\n<h2 id=\"2-风险的分析\"><a href=\"#2-风险的分析\" class=\"headerlink\" title=\"2. 风险的分析\"></a>2. 风险的分析</h2><h3 id=\"2-1-命名空间隔离的安全\"><a href=\"#2-1-命名空间隔离的安全\" class=\"headerlink\" title=\"2.1 命名空间隔离的安全\"></a>2.1 命名空间隔离的安全</h3><p>当我们在运行docker run的时候，docker会对针对容器创建一个隔离的命名空间，通过这个命名空间，将容器之间的进程和网络进行隔离，这就意味着容器不能独立的访问其他容器的接口或者套接字。</p>\n<p>我们知道，所有容器的网络都是通过docker0进行桥接，当然，如果宿主机上面做一些特殊的配置，可以实现 container1-&gt;宿主机-&gt;container2 网络的交互方式。</p>\n<p>那么，命名空间的架构设计本身，是否是足够安全呢？</p>\n<p>其实，命名空间出现的历史很长了，从Linux内核2.6.15的版本（大概是2008年）就已经开始引用了命名空间，但是实际上，“命名空间”这个含义要更早，最开始是从2005年开始提出来的，所以设计和实现足够成熟。</p>\n<p>当然，和虚拟机相比，命名空间并不是绝对。因为命名空间，实际上是“假隔离”，虚拟机是“真隔离”。运行在容器内的应用，会直接访问宿主机上面的内核和部分文件。所以，归根结底，我们应该保证的是镜像是足够安全的，只有镜像是安全的，才能保证我们能够在Linux运行安全可信的服务。</p>\n<h3 id=\"2-2-控制组资源控制的安全\"><a href=\"#2-2-控制组资源控制的安全\" class=\"headerlink\" title=\"2.2 控制组资源控制的安全\"></a>2.2 控制组资源控制的安全</h3><p>CGroups有一个重要的作用就是资源审计和资源限制</p>\n<p>当我们再运行docker run的时候，docker会通过Linux的相关调用，在后台创建一个控制组，用来控制容器对宿主机的资源消耗，比如控制容器使用内存、CPU等。</p>\n<p>控制组有很多重要的作用。比如确保每个容器能够合理的使用共享资源，最重要的是可以通过控制组限制资源的使用，这一点在防止DDoS的时候尤其重要。</p>\n<p><strong><em>对于PaaS、容器云这样的容器服务平台，运行着成千上万个容器的实例，如果一旦某个容器被DDoS攻击，那么就会控制组的作用就显现出来，这样可以防止单个容器抢占过多资源，导致整个服务平台出现雪崩！</em></strong></p>\n<h3 id=\"2-3-内核能力机制\"><a href=\"#2-3-内核能力机制\" class=\"headerlink\" title=\"2.3 内核能力机制\"></a>2.3 内核能力机制</h3><p>传统的Unix系统对进程的权限其实只有root权限和非root权限两种粗粒度。</p>\n<p>后来，随着Linux内核的升级，开始对权限的粒度越来越灵活，例如，可以给用户分配某个文件的修改权限、可以给某个用户操作某个进程的权限等等。</p>\n<p>默认情况下，docker在运行容器的时候，只使用Linux内核的一部分能力，而且，容器的一些能力往往也是由宿主机上面的一些服务进行支持，比如网络的管理等。所以docker其实并不需要获取真正的“root权限”，此外，容器还能禁用一些不必要的权限，比如：</p>\n<ul>\n<li>禁止任何文件挂载操作（挂载实际上是宿主机，而不是容器本身）；</li>\n<li>禁止访问宿主机上面的套接字；</li>\n<li>禁止访问一些文件系统的操作，比如创建新设备；</li>\n<li>禁止模板加载</li>\n</ul>\n<p><strong><em>所以，及时攻击者入侵到容器内部，在容器内部获取了root权限，也并不是真正的宿主机上面的“root权限”，能进行的破坏也是有限的。</em></strong></p>\n<h3 id=\"2-4-Docker服务端的防护\"><a href=\"#2-4-Docker服务端的防护\" class=\"headerlink\" title=\"2.4 Docker服务端的防护\"></a>2.4 Docker服务端的防护</h3><p>使用docker最核心的就是docker服务器了。由于现在启动docker服务器需要使用root权限，所以服务端的权限显得尤其重要。</p>\n<p>首先，我们应该确保运行docker的用户是可信的人。由于容器的内部一般都是root权限，如果某个恶意的用户，将宿主机上面的&#x2F;目录映射到容器内部，那么容器理论上就会有修改根目录下面的权限。因此，在创建容器的时候，我们应该详细检查运行的参数。</p>\n<p>尽量将容器映射到非root权限的用户目录下面，这样，可以有效减轻容器和宿主机上面因为权限而导致的安全隐患。</p>\n<p>允许docker服务端在非root权限下运行，利用安全可靠的子进程限制特殊权限的操作。比如，这些子进程只能负责文件管理、配置等操作。</p>\n<h3 id=\"2-5-更多安全特性的使用\"><a href=\"#2-5-更多安全特性的使用\" class=\"headerlink\" title=\"2.5 更多安全特性的使用\"></a>2.5 更多安全特性的使用</h3><p>除了docker能力机制之外，我们可以使用一些安全软件增加docker的安全性。比如APParmor等。</p>\n<p>docker默认只启用了能力机制。用户还可以启用更多的方案加强docker安全：</p>\n<ul>\n<li>在内核中启用GRSEC和PAX，这样可以增加更多编译和运行的检查；并且通过地址随机化机制避免恶意探测。启动该特性不需要docker进行任何配置。<a href=\"https://hardenedlinux.github.io/system-security/2015/09/06/hardening-es-in-docker-with-grsec.html\">社区最佳实践：基于PaX&#x2F;Grsecurity &amp; STIG &amp; Sheild针对es的Docker场景化加固</a></li>\n<li>使用一些增强安全特性的容器模板，比如带APParmor的模板和Redhat带SELinux的策略的模板。这些模板提供了额外的安全特性。<a href=\"%22https://docs.docker.com/engine/security/apparmor\">AppArmor security profiles for Docker</a></li>\n<li>用户可以自定义更加严格的访问控制机制来制定安全策略。</li>\n</ul>\n<p>此外，将宿主机的文件挂载到容器内部的时候，可以通过设置一些只读（read-only）权限来避免容器对宿主机文件系统的破坏，特别是一些系统运行状态的目录，包括&#x2F;proc&#x2F;sys、&#x2F;proc&#x2F;irq、&#x2F;proc&#x2F;bus等等。</p>\n<h3 id=\"2-6-使用第三方检测工具\"><a href=\"#2-6-使用第三方检测工具\" class=\"headerlink\" title=\"2.6 使用第三方检测工具\"></a>2.6 使用第三方检测工具</h3><p>前面说了很多加强docker安全性的方式，但是注意去检查，会比较繁琐。幸亏现在有一些自动化的检测工具，比较出名的就是docker bench和Clair。</p>\n<h4 id=\"2-6-1-docker-bench\"><a href=\"#2-6-1-docker-bench\" class=\"headerlink\" title=\"2.6.1 docker bench\"></a>2.6.1 docker bench</h4><p>docker bench其实是一个docker的镜像，仓库地址：<a href=\"https://hub.docker.com/r/docker/docker-bench-security/\">https://hub.docker.com/r/docker/docker-bench-security/</a> 通过运行docker bench，可以对docker的一些配置做自动化安全检测。检测的标准是CIS Docker，检测项包括主机配置、Docker引擎、配置文件权限、镜像管理、容器运行时环境、安全项等6大方面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it --net host --pid host --userns host --cap-add audit_control \\</span><br><span class=\"line\">    -e DOCKER_CONTENT_TRUST=<span class=\"variable\">$DOCKER_CONTENT_TRUST</span> \\</span><br><span class=\"line\">    -v /var/lib:/var/lib \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -v /usr/lib/systemd:/usr/lib/systemd \\</span><br><span class=\"line\">    -v /etc:/etc --label docker_bench_security \\</span><br><span class=\"line\">    docker/docker-bench-security</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/09/docker-bench-1.png\" alt=\"Alt text\"> <img src=\"/uploads/2018/09/docker-bench-2-1024x650.png\" alt=\"Alt text\"></p>\n<p>在输出的结果中，会给出响应的提示信息，然后用户可以根据对应的提示，进行一些配置的更改等操作。一般是避免出现WARN或以上的问题。</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>docker其实自身携带的一些基本的抵御安全风险的机制，配合APParmor等安全机制，可以让docker容器更加安全。任何技术层面的实现，都需要合理的使用才能等到巩固，特别是生产环境，可能遭遇很多位置的安全风险，所以需要配合完善的监控系统来加强管理。</p>\n<p>Docker使用的时候需要注意：</p>\n<ul>\n<li>容器自身携带的隔离，并不是很完善，需要加强对容器的安全审查。</li>\n<li>尽量使用官方的镜像，降低安全风险。</li>\n<li>采用专门的服务器用来管理docker服务，加强对容器的监控机制。</li>\n<li>随着容器的大规模使用，甚至构成容器集群的时候，需要考虑容器网络上必备的安全防护，比如DDoS攻击等。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-风险的来源\"><a href=\"#1-风险的来源\" class=\"headerlink\" title=\"1. 风险的来源\"></a>1. 风险的来源</h2><p>docker的安全性，在很大程度上来自于Linux的本身。目前，我们考虑到的安全性时，主要考虑下面几个方面：</p>\n<ul>\n<li>Linux内核的命名空间机制提供的容器隔离安全</li>\n<li>Linux控制组机制对容器资源的控制能力安全</li>\n<li>Linux内核的能力机制所带来的操作权限安全</li>\n<li>docker程序（尤其是服务端）本身的抗攻击性</li>\n<li>其他安全增强机制（包括APPArmor、SELinux等）对容器安全的影响</li>\n<li>通过第三方工具（包括docker bench工具）对docker环境的安全性的评估</li>\n</ul>\n<h2 id=\"2-风险的分析\"><a href=\"#2-风险的分析\" class=\"headerlink\" title=\"2. 风险的分析\"></a>2. 风险的分析</h2><h3 id=\"2-1-命名空间隔离的安全\"><a href=\"#2-1-命名空间隔离的安全\" class=\"headerlink\" title=\"2.1 命名空间隔离的安全\"></a>2.1 命名空间隔离的安全</h3><p>当我们在运行docker run的时候，docker会对针对容器创建一个隔离的命名空间，通过这个命名空间，将容器之间的进程和网络进行隔离，这就意味着容器不能独立的访问其他容器的接口或者套接字。</p>\n<p>我们知道，所有容器的网络都是通过docker0进行桥接，当然，如果宿主机上面做一些特殊的配置，可以实现 container1-&gt;宿主机-&gt;container2 网络的交互方式。</p>\n<p>那么，命名空间的架构设计本身，是否是足够安全呢？</p>\n<p>其实，命名空间出现的历史很长了，从Linux内核2.6.15的版本（大概是2008年）就已经开始引用了命名空间，但是实际上，“命名空间”这个含义要更早，最开始是从2005年开始提出来的，所以设计和实现足够成熟。</p>\n<p>当然，和虚拟机相比，命名空间并不是绝对。因为命名空间，实际上是“假隔离”，虚拟机是“真隔离”。运行在容器内的应用，会直接访问宿主机上面的内核和部分文件。所以，归根结底，我们应该保证的是镜像是足够安全的，只有镜像是安全的，才能保证我们能够在Linux运行安全可信的服务。</p>\n<h3 id=\"2-2-控制组资源控制的安全\"><a href=\"#2-2-控制组资源控制的安全\" class=\"headerlink\" title=\"2.2 控制组资源控制的安全\"></a>2.2 控制组资源控制的安全</h3><p>CGroups有一个重要的作用就是资源审计和资源限制</p>\n<p>当我们再运行docker run的时候，docker会通过Linux的相关调用，在后台创建一个控制组，用来控制容器对宿主机的资源消耗，比如控制容器使用内存、CPU等。</p>\n<p>控制组有很多重要的作用。比如确保每个容器能够合理的使用共享资源，最重要的是可以通过控制组限制资源的使用，这一点在防止DDoS的时候尤其重要。</p>\n<p><strong><em>对于PaaS、容器云这样的容器服务平台，运行着成千上万个容器的实例，如果一旦某个容器被DDoS攻击，那么就会控制组的作用就显现出来，这样可以防止单个容器抢占过多资源，导致整个服务平台出现雪崩！</em></strong></p>\n<h3 id=\"2-3-内核能力机制\"><a href=\"#2-3-内核能力机制\" class=\"headerlink\" title=\"2.3 内核能力机制\"></a>2.3 内核能力机制</h3><p>传统的Unix系统对进程的权限其实只有root权限和非root权限两种粗粒度。</p>\n<p>后来，随着Linux内核的升级，开始对权限的粒度越来越灵活，例如，可以给用户分配某个文件的修改权限、可以给某个用户操作某个进程的权限等等。</p>\n<p>默认情况下，docker在运行容器的时候，只使用Linux内核的一部分能力，而且，容器的一些能力往往也是由宿主机上面的一些服务进行支持，比如网络的管理等。所以docker其实并不需要获取真正的“root权限”，此外，容器还能禁用一些不必要的权限，比如：</p>\n<ul>\n<li>禁止任何文件挂载操作（挂载实际上是宿主机，而不是容器本身）；</li>\n<li>禁止访问宿主机上面的套接字；</li>\n<li>禁止访问一些文件系统的操作，比如创建新设备；</li>\n<li>禁止模板加载</li>\n</ul>\n<p><strong><em>所以，及时攻击者入侵到容器内部，在容器内部获取了root权限，也并不是真正的宿主机上面的“root权限”，能进行的破坏也是有限的。</em></strong></p>\n<h3 id=\"2-4-Docker服务端的防护\"><a href=\"#2-4-Docker服务端的防护\" class=\"headerlink\" title=\"2.4 Docker服务端的防护\"></a>2.4 Docker服务端的防护</h3><p>使用docker最核心的就是docker服务器了。由于现在启动docker服务器需要使用root权限，所以服务端的权限显得尤其重要。</p>\n<p>首先，我们应该确保运行docker的用户是可信的人。由于容器的内部一般都是root权限，如果某个恶意的用户，将宿主机上面的&#x2F;目录映射到容器内部，那么容器理论上就会有修改根目录下面的权限。因此，在创建容器的时候，我们应该详细检查运行的参数。</p>\n<p>尽量将容器映射到非root权限的用户目录下面，这样，可以有效减轻容器和宿主机上面因为权限而导致的安全隐患。</p>\n<p>允许docker服务端在非root权限下运行，利用安全可靠的子进程限制特殊权限的操作。比如，这些子进程只能负责文件管理、配置等操作。</p>\n<h3 id=\"2-5-更多安全特性的使用\"><a href=\"#2-5-更多安全特性的使用\" class=\"headerlink\" title=\"2.5 更多安全特性的使用\"></a>2.5 更多安全特性的使用</h3><p>除了docker能力机制之外，我们可以使用一些安全软件增加docker的安全性。比如APParmor等。</p>\n<p>docker默认只启用了能力机制。用户还可以启用更多的方案加强docker安全：</p>\n<ul>\n<li>在内核中启用GRSEC和PAX，这样可以增加更多编译和运行的检查；并且通过地址随机化机制避免恶意探测。启动该特性不需要docker进行任何配置。<a href=\"https://hardenedlinux.github.io/system-security/2015/09/06/hardening-es-in-docker-with-grsec.html\">社区最佳实践：基于PaX&#x2F;Grsecurity &amp; STIG &amp; Sheild针对es的Docker场景化加固</a></li>\n<li>使用一些增强安全特性的容器模板，比如带APParmor的模板和Redhat带SELinux的策略的模板。这些模板提供了额外的安全特性。<a href=\"%22https://docs.docker.com/engine/security/apparmor\">AppArmor security profiles for Docker</a></li>\n<li>用户可以自定义更加严格的访问控制机制来制定安全策略。</li>\n</ul>\n<p>此外，将宿主机的文件挂载到容器内部的时候，可以通过设置一些只读（read-only）权限来避免容器对宿主机文件系统的破坏，特别是一些系统运行状态的目录，包括&#x2F;proc&#x2F;sys、&#x2F;proc&#x2F;irq、&#x2F;proc&#x2F;bus等等。</p>\n<h3 id=\"2-6-使用第三方检测工具\"><a href=\"#2-6-使用第三方检测工具\" class=\"headerlink\" title=\"2.6 使用第三方检测工具\"></a>2.6 使用第三方检测工具</h3><p>前面说了很多加强docker安全性的方式，但是注意去检查，会比较繁琐。幸亏现在有一些自动化的检测工具，比较出名的就是docker bench和Clair。</p>\n<h4 id=\"2-6-1-docker-bench\"><a href=\"#2-6-1-docker-bench\" class=\"headerlink\" title=\"2.6.1 docker bench\"></a>2.6.1 docker bench</h4><p>docker bench其实是一个docker的镜像，仓库地址：<a href=\"https://hub.docker.com/r/docker/docker-bench-security/\">https://hub.docker.com/r/docker/docker-bench-security/</a> 通过运行docker bench，可以对docker的一些配置做自动化安全检测。检测的标准是CIS Docker，检测项包括主机配置、Docker引擎、配置文件权限、镜像管理、容器运行时环境、安全项等6大方面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it --net host --pid host --userns host --cap-add audit_control \\</span><br><span class=\"line\">    -e DOCKER_CONTENT_TRUST=<span class=\"variable\">$DOCKER_CONTENT_TRUST</span> \\</span><br><span class=\"line\">    -v /var/lib:/var/lib \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -v /usr/lib/systemd:/usr/lib/systemd \\</span><br><span class=\"line\">    -v /etc:/etc --label docker_bench_security \\</span><br><span class=\"line\">    docker/docker-bench-security</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/09/docker-bench-1.png\" alt=\"Alt text\"> <img src=\"/uploads/2018/09/docker-bench-2-1024x650.png\" alt=\"Alt text\"></p>\n<p>在输出的结果中，会给出响应的提示信息，然后用户可以根据对应的提示，进行一些配置的更改等操作。一般是避免出现WARN或以上的问题。</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>docker其实自身携带的一些基本的抵御安全风险的机制，配合APParmor等安全机制，可以让docker容器更加安全。任何技术层面的实现，都需要合理的使用才能等到巩固，特别是生产环境，可能遭遇很多位置的安全风险，所以需要配合完善的监控系统来加强管理。</p>\n<p>Docker使用的时候需要注意：</p>\n<ul>\n<li>容器自身携带的隔离，并不是很完善，需要加强对容器的安全审查。</li>\n<li>尽量使用官方的镜像，降低安全风险。</li>\n<li>采用专门的服务器用来管理docker服务，加强对容器的监控机制。</li>\n<li>随着容器的大规模使用，甚至构成容器集群的时候，需要考虑容器网络上必备的安全防护，比如DDoS攻击等。</li>\n</ul>\n"},{"title":"docker之联合文件系统","id":"369","date":"2018-09-16T16:45:44.000Z","_content":"\n## 1\\. 作用\n\n联合文件系统（UnionFS） 是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息当做一次提交，然后层层叠加（有点像git），同时可以将不同的目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。\n\nDebian/Ubuntu上成熟的AUFS（Another Union File System）就是一种联合文件系统的实现。AUFS支持为每个成员目录设定只读权限（readonly）、读写权限（readwrite）或（whiteout-able）权限，同时AUFS里有一个类似分层的概念，对只读权限的分支可以在逻辑上进行增量地修改（不影响其他只读部分）。\n\nDocker镜像自身就是由多个文件层组成，每一层组成有唯一的编号（层ID）\n\n## 2\\. docker存储\n\n联合文件是docker镜像技术的基础。docker镜像就是根据分层技术来进行继承的。\n\n![Alt text](/uploads/2018/09/20160819173838.png)\n\n举个例子，用户基于一些基础镜像，来制作另外的一个镜像。这些镜像共享同一个基础镜像层，提高的存储的效率和空间利用率。\n\n假如，我们使用php7做基础镜像，来制作多个不同的镜像，那么这些镜像，就会公用一个基础镜像作为“底层”，这样做，提高了利用率，因为不用每个自定义镜像都要创建php7的“底层”。这也就是，为什么我们再build一个镜像的时候，会把基础镜像pull下来。当我们创建的自定义镜像还要有变动的时候，至于要创建一个新的层就好了。这样，也就不用我们从头开始构建镜像，节省了构建时间。\n\n`这也是docker十分轻量级和快速的重要原因！`\n\ndocker安装自带了查看镜像层的命令：docker history\n\n下面我们来看下基础镜像和自定义镜像层的比较：\n\n```bash\nlocalhost:~ feilong$ docker pull php:7.0\n7.0: Pulling from library/php\n7.0: Pulling from library/php\n802b00ed6f79: Pull complete\n59f5a5a895f8: Pull complete\n6898b2dbcfeb: Pull complete\n8e0903aaa47e: Pull complete\nb627a118b728: Pull complete\ne2e2cb10942b: Pull complete\ne63e2fa0c7d4: Pull complete\n57c09353077e: Pull complete\nDigest: sha256:f0e774402dd485c11c60f52c05989da088c5debb44d1126cc089970e1bfca002\nStatus: Downloaded newer image for php:7.0\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$ docker history php:7.0\nIMAGE CREATED CREATED BY SIZE COMMENT\na6c560acbfc5 9 hours ago /bin/sh -c #(nop) CMD [\"php\" \"-a\"] 0B\n<missing> 9 hours ago /bin/sh -c #(nop) ENTRYPOINT [\"docker-php-e… 0B\n<missing> 9 hours ago /bin/sh -c #(nop) COPY multi:2cdcedabcf5a3b9… 6.42kB\n<missing> 9 hours ago /bin/sh -c set -eux; savedAptMark=\"$(apt-m… 79.4MB\n<missing> 9 hours ago /bin/sh -c #(nop) COPY file:207c686e3fed4f71… 587B\n<missing> 9 hours ago /bin/sh -c set -xe; fetchDeps=' wget ';… 13.3MB\n<missing> 9 hours ago /bin/sh -c #(nop) ENV PHP_SHA256=ff6f62afeb… 0B\n<missing> 9 hours ago /bin/sh -c #(nop) ENV PHP_URL=https://secur… 0B\n<missing> 9 hours ago /bin/sh -c #(nop) ENV PHP_VERSION=7.0.32 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV GPG_KEYS=1A4E8B7277C4… 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_LDFLAGS=-Wl,-O1 -… 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_CPPFLAGS=-fstack-… 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_CFLAGS=-fstack-pr… 0B\n<missing> 10 days ago /bin/sh -c mkdir -p $PHP_INI_DIR/conf.d 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_INI_DIR=/usr/loca… 0B\n<missing> 10 days ago /bin/sh -c apt-get update && apt-get install… 209MB\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHPIZE_DEPS=autoconf … 0B\n<missing> 10 days ago /bin/sh -c set -eux; { echo 'Package: php… 46B\n<missing> 10 days ago /bin/sh -c #(nop) CMD [\"bash\"] 0B\n<missing> 10 days ago /bin/sh -c #(nop) ADD file:e6ca98733431f75e9… 55.3MB\n```\n\n我pull了一个php:7.0的镜像，可以看到，整个过程分为20层，每个层级都会执行对应的命令，然后我们基于php7在做一些自定义的操作：安装mysqli和redis的扩展，构建一个新的镜像：\n\n```bash\n#Dockerfile\nFROM php:7.0\nRUN apt-get update \\\n    && docker-php-ext-install mysqli \\\n    && curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz \\\n    && tar zxvf redis-4.1.0.tgz \\\n    && cd redis-4.1.0 \\\n    && phpize \\\n    && ./configure \\\n    && make && make install \\\n    && echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini \\\n    && cd .. \\\n    && rm -rf redis-4.1.0.tgz redis-4.1.0\n```\n\n```bash\nlocalhost:feilong_test feilong$ docker build -t feilongtest .\nSending build context to Docker daemon  2.048kB\nStep 1/2 : FROM php:7.0\n ---> a6c560acbfc5\nStep 2/2 : RUN apt-get update     && docker-php-ext-install mysqli     && curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz     && tar zxvf redis-4.1.0.tgz     && cd redis-4.1.0     && phpize     && ./configure     && make && make install     && echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini     && cd ..     && rm -rf redis-4.1.0.tgz redis-4.1.0\n ---> Running in bd2e3fbbde25\nGet:3 http://security.debian.org/debian-security stretch/updates InRelease [94.3 kB]\nGet:4 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [414 kB]\nIgn:1 http://cdn-fastly.deb.debian.org/debian stretch InRelease\nGet:2 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]\nGet:5 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [5148 B]\nGet:6 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]\nGet:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]\nGet:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7099 kB]\n省略\nInstalling shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20151012/\nRemoving intermediate container bd2e3fbbde25\n ---> 41b978fc1549\nSuccessfully built 41b978fc1549\nSuccessfully tagged feilongtest:latest\n```\n\n然后我们看下自己构建的镜像层\n\n```bash\nlocalhost:feilong_test feilong$ docker history feilongtest\nIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n41b978fc1549        48 seconds ago      /bin/sh -c apt-get update     && docker-php-…   18.3MB\na6c560acbfc5        10 hours ago        /bin/sh -c #(nop)  CMD [\"php\" \"-a\"]             0B\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENTRYPOINT [\"docker-php-e…   0B\n<missing>           10 hours ago        /bin/sh -c #(nop) COPY multi:2cdcedabcf5a3b9…   6.42kB\n<missing>           10 hours ago        /bin/sh -c set -eux;   savedAptMark=\"$(apt-m…   79.4MB\n<missing>           10 hours ago        /bin/sh -c #(nop) COPY file:207c686e3fed4f71…   587B\n<missing>           10 hours ago        /bin/sh -c set -xe;   fetchDeps='   wget  ';…   13.3MB\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENV PHP_SHA256=ff6f62afeb…   0B\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENV PHP_URL=https://secur…   0B\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENV PHP_VERSION=7.0.32       0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV GPG_KEYS=1A4E8B7277C4…   0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_LDFLAGS=-Wl,-O1 -…   0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_CPPFLAGS=-fstack-…   0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_CFLAGS=-fstack-pr…   0B\n<missing>           10 days ago         /bin/sh -c mkdir -p $PHP_INI_DIR/conf.d         0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_INI_DIR=/usr/loca…   0B\n<missing>           10 days ago         /bin/sh -c apt-get update && apt-get install…   209MB\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHPIZE_DEPS=autoconf …   0B\n<missing>           10 days ago         /bin/sh -c set -eux;  {   echo 'Package: php…   46B\n<missing>           10 days ago         /bin/sh -c #(nop)  CMD [\"bash\"]                 0B\n<missing>           10 days ago         /bin/sh -c #(nop) ADD file:e6ca98733431f75e9…   55.3MB\n```\n\n可以看出，在dockerfile里面，增加了1步操作，分别是按照mysqli和redis扩展，然后在build镜像的时候，在原有的20层的基础上，继续添加了1层。\n\n基础镜像层的层内容都是不可用自改的、只读的。当docker利用镜像创建容器的时候，会在最顶端创建一个可以读写的层给容器。容器内的数据，都会写到这个读写层里面。当所操作的对象位于比较深的层时，需要先复制到最上层的可读写层。当数据对象较大的时候，往往意味着IO性能比较差。因此，一般推荐奖容器修改数据通过volume方式挂载，而不是直接修改镜像内的数据。\n\nDocker的所有存储，都是在docker文件夹下面，以Centos或者Ubuntu为例，默认的路径一般是/var/lib/docker。（我仅仅以Centos为例）\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z docker]# ll\ntotal 52\ndrwx------ 2 root root 4096 Sep  6 20:09 builder\ndrwx------ 4 root root 4096 Sep  6 20:09 buildkit\ndrwx------ 3 root root 4096 Sep  6 20:09 containerd\ndrwx------ 2 root root 4096 Sep 17 00:07 containers\ndrwx------ 3 root root 4096 Sep  6 20:09 image\ndrwxr-x--- 3 root root 4096 Sep  6 20:09 network\ndrwx------ 4 root root 4096 Sep 17 00:07 overlay2\ndrwx------ 4 root root 4096 Sep  6 20:09 plugins\ndrwx------ 2 root root 4096 Sep  6 20:09 runtimes\ndrwx------ 2 root root 4096 Sep  6 20:09 swarm\ndrwx------ 2 root root 4096 Sep 16 23:56 tmp\ndrwx------ 2 root root 4096 Sep  6 20:09 trust\ndrwx------ 2 root root 4096 Sep  6 20:55 volumes\n```\n\ndocker的镜像层基本上都是在overlay2里面\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z overlay2]# docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nbusybox latest e1ddd7948a1c 6 weeks ago 1.16MB\n[root@izj6c9b96ia369l2i47yq3z docker]# cd overlay2/\n[root@izj6c9b96ia369l2i47yq3z overlay2]# ll\ntotal 8\ndrwx------ 3 root root 4096 Sep 16 23:56 4c819c3673c3416b65c2cf6394818d270363cfd53a0389a5f6c237e1c8ad3ef4\ndrwxr-xr-x 2 root root 4096 Sep 17 00:07 l\n```\n\n现在，我们只有一个busybox的镜像，该目录下面包括diff文件夹，diff文件夹就是我们创建容器之后，初始化的文件夹\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z diff]# ll\ntotal 40\ndrwxr-xr-x 2 root      root      12288 Aug  1 04:20 bin\ndrwxr-xr-x 2 root      root       4096 Aug  1 04:20 dev\ndrwxr-xr-x 3 root      root       4096 Aug  1 04:20 etc\ndrwxr-xr-x 2 nfsnobody nfsnobody  4096 Aug  1 04:20 home\ndrwx------ 2 root      root       4096 Aug  1 04:20 root\ndrwxrwxrwt 2 root      root       4096 Sep 17 00:06 tmp\ndrwxr-xr-x 3 root      root       4096 Aug  1 04:20 usr\ndrwxr-xr-x 4 root      root       4096 Aug  1 04:20 var\n[root@izj6c9b96ia369l2i47yq3z diff]#\n```\n\n为了验证我们说的是否是正确的，我们在tmp的文件夹里面创建一个测试的文件a.txt，然后写入Hello world\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z diff]# touch  tmp/a.txt\n[root@izj6c9b96ia369l2i47yq3z diff]# echo 'Hello world' > tmp/a.txt\n[root@izj6c9b96ia369l2i47yq3z diff]# cat tmp/a.txt\nHello world\n[root@izj6c9b96ia369l2i47yq3z diff]#\n```\n\n如果分析是正确的，那么创建的容器中，也会存在这个文件\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z diff]# docker run -it --rm --name test busybox\n/ # ll\nsh: ll: not found\n/ # ls -l\ntotal 36\ndrwxr-xr-x    2 root     root         12288 Jul 31 20:20 bin\ndrwxr-xr-x    5 root     root           360 Sep 16 16:19 dev\ndrwxr-xr-x    1 root     root          4096 Sep 16 16:19 etc\ndrwxr-xr-x    2 nobody   nogroup       4096 Jul 31 20:20 home\ndr-xr-xr-x  131 root     root             0 Sep 16 16:19 proc\ndrwx------    1 root     root          4096 Sep 16 16:19 root\ndr-xr-xr-x   13 root     root             0 Sep 16 16:19 sys\ndrwxrwxrwt    2 root     root          4096 Sep 16 16:17 tmp\ndrwxr-xr-x    3 root     root          4096 Jul 31 20:20 usr\ndrwxr-xr-x    4 root     root          4096 Jul 31 20:20 var\n/ # ls -l tmp\ntotal 4\n-rw-r--r--    1 root     root            12 Sep 16 16:17 a.txt\n/ # cat tmp/a.txt\nHello world\n/ #\n```\n\n在创建的容器中，我们果然看到了内容为Hello world的tmp/a.txt文件\n\n在创建容器之后，我们会发现多了两个文件夹\n\n![Alt text](/uploads/2018/09/WX20180917-002724@2x-1024x494.png)\n\n这两个文件夹，是用来存储一些容器的数据，如果容器一旦删除，那么这些数据也会随着一块被清理掉，这就是为什么建议我们把一些重要的数据，挂载到外部的原因！\n\n![Alt text](/uploads/2018/09/WX20180917-003010@2x-1024x368.png)\n\n## 3\\. 多种文件系统比较\n\nDocker目前支持多种联合文件系统：AUFS、OverlayFS、btrfs、vfs、zfs和Device Mapper等。\n\nAUFS：最早支持的文件系统，对Debian/Ubuntu支持比较好，虽然没有合并到Linux内核，但是成熟度很高\n\nOverlayFS：类似AUFS，性能更好，上面的例子明显就是OverlayFS，已经合并到内核，将来会取代AUFS\n\nDevice Mapper：Redhat和Docker团队一起开发并用于支持RHEL的文件系统，内核支持，性能略慢，成熟度高\n\n...\n\n## 4\\. 总结\n\ndocker的镜像层级设计，让docker的性能更高，更加符合软件设计，具有很高的复用性，这个也是docker镜像编译迅速的重要原因。\n\n此外，docker容器默认将数据存储到docker文件夹下，如果容器被删除，那么容器数据也将被删除掉，所以，对于容器的重要数据，我们应该映射到宿主机上面，避免由于容器删除，而导致的数据丢失。\n\n另：关于镜像层ID为missing，请参阅论坛：[Layer IDs shown as \\\\<missing> in history](https://forums.docker.com/t/layer-ids-shown-as-missing-in-history/6325)","source":"_posts/docker-unionfs.md","raw":"---\ntitle: docker之联合文件系统\ntags: []\nid: '369'\ncategories:\n  - - Docker\ndate: 2018-09-17 00:45:44\n---\n\n## 1\\. 作用\n\n联合文件系统（UnionFS） 是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息当做一次提交，然后层层叠加（有点像git），同时可以将不同的目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。\n\nDebian/Ubuntu上成熟的AUFS（Another Union File System）就是一种联合文件系统的实现。AUFS支持为每个成员目录设定只读权限（readonly）、读写权限（readwrite）或（whiteout-able）权限，同时AUFS里有一个类似分层的概念，对只读权限的分支可以在逻辑上进行增量地修改（不影响其他只读部分）。\n\nDocker镜像自身就是由多个文件层组成，每一层组成有唯一的编号（层ID）\n\n## 2\\. docker存储\n\n联合文件是docker镜像技术的基础。docker镜像就是根据分层技术来进行继承的。\n\n![Alt text](/uploads/2018/09/20160819173838.png)\n\n举个例子，用户基于一些基础镜像，来制作另外的一个镜像。这些镜像共享同一个基础镜像层，提高的存储的效率和空间利用率。\n\n假如，我们使用php7做基础镜像，来制作多个不同的镜像，那么这些镜像，就会公用一个基础镜像作为“底层”，这样做，提高了利用率，因为不用每个自定义镜像都要创建php7的“底层”。这也就是，为什么我们再build一个镜像的时候，会把基础镜像pull下来。当我们创建的自定义镜像还要有变动的时候，至于要创建一个新的层就好了。这样，也就不用我们从头开始构建镜像，节省了构建时间。\n\n`这也是docker十分轻量级和快速的重要原因！`\n\ndocker安装自带了查看镜像层的命令：docker history\n\n下面我们来看下基础镜像和自定义镜像层的比较：\n\n```bash\nlocalhost:~ feilong$ docker pull php:7.0\n7.0: Pulling from library/php\n7.0: Pulling from library/php\n802b00ed6f79: Pull complete\n59f5a5a895f8: Pull complete\n6898b2dbcfeb: Pull complete\n8e0903aaa47e: Pull complete\nb627a118b728: Pull complete\ne2e2cb10942b: Pull complete\ne63e2fa0c7d4: Pull complete\n57c09353077e: Pull complete\nDigest: sha256:f0e774402dd485c11c60f52c05989da088c5debb44d1126cc089970e1bfca002\nStatus: Downloaded newer image for php:7.0\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$\nlocalhost:~ feilong$ docker history php:7.0\nIMAGE CREATED CREATED BY SIZE COMMENT\na6c560acbfc5 9 hours ago /bin/sh -c #(nop) CMD [\"php\" \"-a\"] 0B\n<missing> 9 hours ago /bin/sh -c #(nop) ENTRYPOINT [\"docker-php-e… 0B\n<missing> 9 hours ago /bin/sh -c #(nop) COPY multi:2cdcedabcf5a3b9… 6.42kB\n<missing> 9 hours ago /bin/sh -c set -eux; savedAptMark=\"$(apt-m… 79.4MB\n<missing> 9 hours ago /bin/sh -c #(nop) COPY file:207c686e3fed4f71… 587B\n<missing> 9 hours ago /bin/sh -c set -xe; fetchDeps=' wget ';… 13.3MB\n<missing> 9 hours ago /bin/sh -c #(nop) ENV PHP_SHA256=ff6f62afeb… 0B\n<missing> 9 hours ago /bin/sh -c #(nop) ENV PHP_URL=https://secur… 0B\n<missing> 9 hours ago /bin/sh -c #(nop) ENV PHP_VERSION=7.0.32 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV GPG_KEYS=1A4E8B7277C4… 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_LDFLAGS=-Wl,-O1 -… 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_CPPFLAGS=-fstack-… 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_CFLAGS=-fstack-pr… 0B\n<missing> 10 days ago /bin/sh -c mkdir -p $PHP_INI_DIR/conf.d 0B\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHP_INI_DIR=/usr/loca… 0B\n<missing> 10 days ago /bin/sh -c apt-get update && apt-get install… 209MB\n<missing> 10 days ago /bin/sh -c #(nop) ENV PHPIZE_DEPS=autoconf … 0B\n<missing> 10 days ago /bin/sh -c set -eux; { echo 'Package: php… 46B\n<missing> 10 days ago /bin/sh -c #(nop) CMD [\"bash\"] 0B\n<missing> 10 days ago /bin/sh -c #(nop) ADD file:e6ca98733431f75e9… 55.3MB\n```\n\n我pull了一个php:7.0的镜像，可以看到，整个过程分为20层，每个层级都会执行对应的命令，然后我们基于php7在做一些自定义的操作：安装mysqli和redis的扩展，构建一个新的镜像：\n\n```bash\n#Dockerfile\nFROM php:7.0\nRUN apt-get update \\\n    && docker-php-ext-install mysqli \\\n    && curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz \\\n    && tar zxvf redis-4.1.0.tgz \\\n    && cd redis-4.1.0 \\\n    && phpize \\\n    && ./configure \\\n    && make && make install \\\n    && echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini \\\n    && cd .. \\\n    && rm -rf redis-4.1.0.tgz redis-4.1.0\n```\n\n```bash\nlocalhost:feilong_test feilong$ docker build -t feilongtest .\nSending build context to Docker daemon  2.048kB\nStep 1/2 : FROM php:7.0\n ---> a6c560acbfc5\nStep 2/2 : RUN apt-get update     && docker-php-ext-install mysqli     && curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz     && tar zxvf redis-4.1.0.tgz     && cd redis-4.1.0     && phpize     && ./configure     && make && make install     && echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini     && cd ..     && rm -rf redis-4.1.0.tgz redis-4.1.0\n ---> Running in bd2e3fbbde25\nGet:3 http://security.debian.org/debian-security stretch/updates InRelease [94.3 kB]\nGet:4 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [414 kB]\nIgn:1 http://cdn-fastly.deb.debian.org/debian stretch InRelease\nGet:2 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]\nGet:5 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [5148 B]\nGet:6 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]\nGet:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]\nGet:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7099 kB]\n省略\nInstalling shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20151012/\nRemoving intermediate container bd2e3fbbde25\n ---> 41b978fc1549\nSuccessfully built 41b978fc1549\nSuccessfully tagged feilongtest:latest\n```\n\n然后我们看下自己构建的镜像层\n\n```bash\nlocalhost:feilong_test feilong$ docker history feilongtest\nIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n41b978fc1549        48 seconds ago      /bin/sh -c apt-get update     && docker-php-…   18.3MB\na6c560acbfc5        10 hours ago        /bin/sh -c #(nop)  CMD [\"php\" \"-a\"]             0B\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENTRYPOINT [\"docker-php-e…   0B\n<missing>           10 hours ago        /bin/sh -c #(nop) COPY multi:2cdcedabcf5a3b9…   6.42kB\n<missing>           10 hours ago        /bin/sh -c set -eux;   savedAptMark=\"$(apt-m…   79.4MB\n<missing>           10 hours ago        /bin/sh -c #(nop) COPY file:207c686e3fed4f71…   587B\n<missing>           10 hours ago        /bin/sh -c set -xe;   fetchDeps='   wget  ';…   13.3MB\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENV PHP_SHA256=ff6f62afeb…   0B\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENV PHP_URL=https://secur…   0B\n<missing>           10 hours ago        /bin/sh -c #(nop)  ENV PHP_VERSION=7.0.32       0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV GPG_KEYS=1A4E8B7277C4…   0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_LDFLAGS=-Wl,-O1 -…   0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_CPPFLAGS=-fstack-…   0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_CFLAGS=-fstack-pr…   0B\n<missing>           10 days ago         /bin/sh -c mkdir -p $PHP_INI_DIR/conf.d         0B\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHP_INI_DIR=/usr/loca…   0B\n<missing>           10 days ago         /bin/sh -c apt-get update && apt-get install…   209MB\n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PHPIZE_DEPS=autoconf …   0B\n<missing>           10 days ago         /bin/sh -c set -eux;  {   echo 'Package: php…   46B\n<missing>           10 days ago         /bin/sh -c #(nop)  CMD [\"bash\"]                 0B\n<missing>           10 days ago         /bin/sh -c #(nop) ADD file:e6ca98733431f75e9…   55.3MB\n```\n\n可以看出，在dockerfile里面，增加了1步操作，分别是按照mysqli和redis扩展，然后在build镜像的时候，在原有的20层的基础上，继续添加了1层。\n\n基础镜像层的层内容都是不可用自改的、只读的。当docker利用镜像创建容器的时候，会在最顶端创建一个可以读写的层给容器。容器内的数据，都会写到这个读写层里面。当所操作的对象位于比较深的层时，需要先复制到最上层的可读写层。当数据对象较大的时候，往往意味着IO性能比较差。因此，一般推荐奖容器修改数据通过volume方式挂载，而不是直接修改镜像内的数据。\n\nDocker的所有存储，都是在docker文件夹下面，以Centos或者Ubuntu为例，默认的路径一般是/var/lib/docker。（我仅仅以Centos为例）\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z docker]# ll\ntotal 52\ndrwx------ 2 root root 4096 Sep  6 20:09 builder\ndrwx------ 4 root root 4096 Sep  6 20:09 buildkit\ndrwx------ 3 root root 4096 Sep  6 20:09 containerd\ndrwx------ 2 root root 4096 Sep 17 00:07 containers\ndrwx------ 3 root root 4096 Sep  6 20:09 image\ndrwxr-x--- 3 root root 4096 Sep  6 20:09 network\ndrwx------ 4 root root 4096 Sep 17 00:07 overlay2\ndrwx------ 4 root root 4096 Sep  6 20:09 plugins\ndrwx------ 2 root root 4096 Sep  6 20:09 runtimes\ndrwx------ 2 root root 4096 Sep  6 20:09 swarm\ndrwx------ 2 root root 4096 Sep 16 23:56 tmp\ndrwx------ 2 root root 4096 Sep  6 20:09 trust\ndrwx------ 2 root root 4096 Sep  6 20:55 volumes\n```\n\ndocker的镜像层基本上都是在overlay2里面\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z overlay2]# docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nbusybox latest e1ddd7948a1c 6 weeks ago 1.16MB\n[root@izj6c9b96ia369l2i47yq3z docker]# cd overlay2/\n[root@izj6c9b96ia369l2i47yq3z overlay2]# ll\ntotal 8\ndrwx------ 3 root root 4096 Sep 16 23:56 4c819c3673c3416b65c2cf6394818d270363cfd53a0389a5f6c237e1c8ad3ef4\ndrwxr-xr-x 2 root root 4096 Sep 17 00:07 l\n```\n\n现在，我们只有一个busybox的镜像，该目录下面包括diff文件夹，diff文件夹就是我们创建容器之后，初始化的文件夹\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z diff]# ll\ntotal 40\ndrwxr-xr-x 2 root      root      12288 Aug  1 04:20 bin\ndrwxr-xr-x 2 root      root       4096 Aug  1 04:20 dev\ndrwxr-xr-x 3 root      root       4096 Aug  1 04:20 etc\ndrwxr-xr-x 2 nfsnobody nfsnobody  4096 Aug  1 04:20 home\ndrwx------ 2 root      root       4096 Aug  1 04:20 root\ndrwxrwxrwt 2 root      root       4096 Sep 17 00:06 tmp\ndrwxr-xr-x 3 root      root       4096 Aug  1 04:20 usr\ndrwxr-xr-x 4 root      root       4096 Aug  1 04:20 var\n[root@izj6c9b96ia369l2i47yq3z diff]#\n```\n\n为了验证我们说的是否是正确的，我们在tmp的文件夹里面创建一个测试的文件a.txt，然后写入Hello world\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z diff]# touch  tmp/a.txt\n[root@izj6c9b96ia369l2i47yq3z diff]# echo 'Hello world' > tmp/a.txt\n[root@izj6c9b96ia369l2i47yq3z diff]# cat tmp/a.txt\nHello world\n[root@izj6c9b96ia369l2i47yq3z diff]#\n```\n\n如果分析是正确的，那么创建的容器中，也会存在这个文件\n\n```bash\n[root@izj6c9b96ia369l2i47yq3z diff]# docker run -it --rm --name test busybox\n/ # ll\nsh: ll: not found\n/ # ls -l\ntotal 36\ndrwxr-xr-x    2 root     root         12288 Jul 31 20:20 bin\ndrwxr-xr-x    5 root     root           360 Sep 16 16:19 dev\ndrwxr-xr-x    1 root     root          4096 Sep 16 16:19 etc\ndrwxr-xr-x    2 nobody   nogroup       4096 Jul 31 20:20 home\ndr-xr-xr-x  131 root     root             0 Sep 16 16:19 proc\ndrwx------    1 root     root          4096 Sep 16 16:19 root\ndr-xr-xr-x   13 root     root             0 Sep 16 16:19 sys\ndrwxrwxrwt    2 root     root          4096 Sep 16 16:17 tmp\ndrwxr-xr-x    3 root     root          4096 Jul 31 20:20 usr\ndrwxr-xr-x    4 root     root          4096 Jul 31 20:20 var\n/ # ls -l tmp\ntotal 4\n-rw-r--r--    1 root     root            12 Sep 16 16:17 a.txt\n/ # cat tmp/a.txt\nHello world\n/ #\n```\n\n在创建的容器中，我们果然看到了内容为Hello world的tmp/a.txt文件\n\n在创建容器之后，我们会发现多了两个文件夹\n\n![Alt text](/uploads/2018/09/WX20180917-002724@2x-1024x494.png)\n\n这两个文件夹，是用来存储一些容器的数据，如果容器一旦删除，那么这些数据也会随着一块被清理掉，这就是为什么建议我们把一些重要的数据，挂载到外部的原因！\n\n![Alt text](/uploads/2018/09/WX20180917-003010@2x-1024x368.png)\n\n## 3\\. 多种文件系统比较\n\nDocker目前支持多种联合文件系统：AUFS、OverlayFS、btrfs、vfs、zfs和Device Mapper等。\n\nAUFS：最早支持的文件系统，对Debian/Ubuntu支持比较好，虽然没有合并到Linux内核，但是成熟度很高\n\nOverlayFS：类似AUFS，性能更好，上面的例子明显就是OverlayFS，已经合并到内核，将来会取代AUFS\n\nDevice Mapper：Redhat和Docker团队一起开发并用于支持RHEL的文件系统，内核支持，性能略慢，成熟度高\n\n...\n\n## 4\\. 总结\n\ndocker的镜像层级设计，让docker的性能更高，更加符合软件设计，具有很高的复用性，这个也是docker镜像编译迅速的重要原因。\n\n此外，docker容器默认将数据存储到docker文件夹下，如果容器被删除，那么容器数据也将被删除掉，所以，对于容器的重要数据，我们应该映射到宿主机上面，避免由于容器删除，而导致的数据丢失。\n\n另：关于镜像层ID为missing，请参阅论坛：[Layer IDs shown as \\\\<missing> in history](https://forums.docker.com/t/layer-ids-shown-as-missing-in-history/6325)","slug":"docker-unionfs","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mf1001a417tgj8l6db5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1. 作用\"></a>1. 作用</h2><p>联合文件系统（UnionFS） 是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息当做一次提交，然后层层叠加（有点像git），同时可以将不同的目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。</p>\n<p>Debian&#x2F;Ubuntu上成熟的AUFS（Another Union File System）就是一种联合文件系统的实现。AUFS支持为每个成员目录设定只读权限（readonly）、读写权限（readwrite）或（whiteout-able）权限，同时AUFS里有一个类似分层的概念，对只读权限的分支可以在逻辑上进行增量地修改（不影响其他只读部分）。</p>\n<p>Docker镜像自身就是由多个文件层组成，每一层组成有唯一的编号（层ID）</p>\n<h2 id=\"2-docker存储\"><a href=\"#2-docker存储\" class=\"headerlink\" title=\"2. docker存储\"></a>2. docker存储</h2><p>联合文件是docker镜像技术的基础。docker镜像就是根据分层技术来进行继承的。</p>\n<p><img src=\"/uploads/2018/09/20160819173838.png\" alt=\"Alt text\"></p>\n<p>举个例子，用户基于一些基础镜像，来制作另外的一个镜像。这些镜像共享同一个基础镜像层，提高的存储的效率和空间利用率。</p>\n<p>假如，我们使用php7做基础镜像，来制作多个不同的镜像，那么这些镜像，就会公用一个基础镜像作为“底层”，这样做，提高了利用率，因为不用每个自定义镜像都要创建php7的“底层”。这也就是，为什么我们再build一个镜像的时候，会把基础镜像pull下来。当我们创建的自定义镜像还要有变动的时候，至于要创建一个新的层就好了。这样，也就不用我们从头开始构建镜像，节省了构建时间。</p>\n<p><code>这也是docker十分轻量级和快速的重要原因！</code></p>\n<p>docker安装自带了查看镜像层的命令：docker history</p>\n<p>下面我们来看下基础镜像和自定义镜像层的比较：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker pull php:7.0</span><br><span class=\"line\">7.0: Pulling from library/php</span><br><span class=\"line\">7.0: Pulling from library/php</span><br><span class=\"line\">802b00ed6f79: Pull complete</span><br><span class=\"line\">59f5a5a895f8: Pull complete</span><br><span class=\"line\">6898b2dbcfeb: Pull complete</span><br><span class=\"line\">8e0903aaa47e: Pull complete</span><br><span class=\"line\">b627a118b728: Pull complete</span><br><span class=\"line\">e2e2cb10942b: Pull complete</span><br><span class=\"line\">e63e2fa0c7d4: Pull complete</span><br><span class=\"line\">57c09353077e: Pull complete</span><br><span class=\"line\">Digest: sha256:f0e774402dd485c11c60f52c05989da088c5debb44d1126cc089970e1bfca002</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> php:7.0</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$ docker <span class=\"built_in\">history</span> php:7.0</span><br><span class=\"line\">IMAGE CREATED CREATED BY SIZE COMMENT</span><br><span class=\"line\">a6c560acbfc5 9 hours ago /bin/sh -c <span class=\"comment\">#(nop) CMD [&quot;php&quot; &quot;-a&quot;] 0B</span></span><br><span class=\"line\">&lt;missing&gt; 9 hours ago /bin/sh -c <span class=\"comment\">#(nop) ENTRYPOINT [&quot;docker-php-e… 0B</span></span><br><span class=\"line\">&lt;missing&gt; 9 hours ago /bin/sh -c <span class=\"comment\">#(nop) COPY multi:2cdcedabcf5a3b9… 6.42kB</span></span><br><span class=\"line\">&lt;missing&gt; 9 hours ago /bin/sh -c <span class=\"built_in\">set</span> -eux; savedAptMark=<span class=\"string\">&quot;<span class=\"subst\">$(apt-m… 79.4MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop)</span> COPY file:207c686e3fed4f71… 587B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c set -xe; fetchDeps=&#x27; wget &#x27;;… 13.3MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_SHA256=ff6f62afeb… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_URL=https://secur… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_VERSION=7.0.32 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV GPG_KEYS=1A4E8B7277C4… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_LDFLAGS=-Wl,-O1 -… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_CPPFLAGS=-fstack-… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_CFLAGS=-fstack-pr… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c mkdir -p <span class=\"variable\">$PHP_INI_DIR</span>/conf.d 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_INI_DIR=/usr/loca… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c apt-get update &amp;&amp; apt-get install… 209MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHPIZE_DEPS=autoconf … 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c set -eux; &#123; echo &#x27;Package: php… 46B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) CMD [&quot;</span>bash<span class=\"string\">&quot;] 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ADD file:e6ca98733431f75e9… 55.3MB</span></span><br></pre></td></tr></table></figure>\n\n<p>我pull了一个php:7.0的镜像，可以看到，整个过程分为20层，每个层级都会执行对应的命令，然后我们基于php7在做一些自定义的操作：安装mysqli和redis的扩展，构建一个新的镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Dockerfile</span></span><br><span class=\"line\">FROM php:7.0</span><br><span class=\"line\">RUN apt-get update \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install mysqli \\</span><br><span class=\"line\">    &amp;&amp; curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz \\</span><br><span class=\"line\">    &amp;&amp; tar zxvf redis-4.1.0.tgz \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">cd</span> redis-4.1.0 \\</span><br><span class=\"line\">    &amp;&amp; phpize \\</span><br><span class=\"line\">    &amp;&amp; ./configure \\</span><br><span class=\"line\">    &amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;extension=redis.so&quot;</span> &gt; /usr/local/etc/php/conf.d/redis.ini \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">cd</span> .. \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">rm</span> -rf redis-4.1.0.tgz redis-4.1.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:feilong_test feilong$ docker build -t feilongtest .</span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/2 : FROM php:7.0</span><br><span class=\"line\"> ---&gt; a6c560acbfc5</span><br><span class=\"line\">Step 2/2 : RUN apt-get update     &amp;&amp; docker-php-ext-install mysqli     &amp;&amp; curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz     &amp;&amp; tar zxvf redis-4.1.0.tgz     &amp;&amp; <span class=\"built_in\">cd</span> redis-4.1.0     &amp;&amp; phpize     &amp;&amp; ./configure     &amp;&amp; make &amp;&amp; make install     &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;extension=redis.so&quot;</span> &gt; /usr/local/etc/php/conf.d/redis.ini     &amp;&amp; <span class=\"built_in\">cd</span> ..     &amp;&amp; <span class=\"built_in\">rm</span> -rf redis-4.1.0.tgz redis-4.1.0</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd2e3fbbde25</span><br><span class=\"line\">Get:3 http://security.debian.org/debian-security stretch/updates InRelease [94.3 kB]</span><br><span class=\"line\">Get:4 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [414 kB]</span><br><span class=\"line\">Ign:1 http://cdn-fastly.deb.debian.org/debian stretch InRelease</span><br><span class=\"line\">Get:2 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]</span><br><span class=\"line\">Get:5 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [5148 B]</span><br><span class=\"line\">Get:6 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]</span><br><span class=\"line\">Get:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]</span><br><span class=\"line\">Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7099 kB]</span><br><span class=\"line\">省略</span><br><span class=\"line\">Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20151012/</span><br><span class=\"line\">Removing intermediate container bd2e3fbbde25</span><br><span class=\"line\"> ---&gt; 41b978fc1549</span><br><span class=\"line\">Successfully built 41b978fc1549</span><br><span class=\"line\">Successfully tagged feilongtest:latest</span><br></pre></td></tr></table></figure>\n\n<p>然后我们看下自己构建的镜像层</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:feilong_test feilong$ docker <span class=\"built_in\">history</span> feilongtest</span><br><span class=\"line\">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class=\"line\">41b978fc1549        48 seconds ago      /bin/sh -c apt-get update     &amp;&amp; docker-php-…   18.3MB</span><br><span class=\"line\">a6c560acbfc5        10 hours ago        /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;php&quot; &quot;-a&quot;]             0B</span></span><br><span class=\"line\">&lt;missing&gt;           10 hours ago        /bin/sh -c <span class=\"comment\">#(nop)  ENTRYPOINT [&quot;docker-php-e…   0B</span></span><br><span class=\"line\">&lt;missing&gt;           10 hours ago        /bin/sh -c <span class=\"comment\">#(nop) COPY multi:2cdcedabcf5a3b9…   6.42kB</span></span><br><span class=\"line\">&lt;missing&gt;           10 hours ago        /bin/sh -c <span class=\"built_in\">set</span> -eux;   savedAptMark=<span class=\"string\">&quot;<span class=\"subst\">$(apt-m…   79.4MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)</span> COPY file:207c686e3fed4f71…   587B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c set -xe;   fetchDeps=&#x27;   wget  &#x27;;…   13.3MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_SHA256=ff6f62afeb…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_URL=https://secur…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_VERSION=7.0.32       0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV GPG_KEYS=1A4E8B7277C4…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_LDFLAGS=-Wl,-O1 -…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_CPPFLAGS=-fstack-…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_CFLAGS=-fstack-pr…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c mkdir -p <span class=\"variable\">$PHP_INI_DIR</span>/conf.d         0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_INI_DIR=/usr/loca…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c apt-get update &amp;&amp; apt-get install…   209MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHPIZE_DEPS=autoconf …   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c set -eux;  &#123;   echo &#x27;Package: php…   46B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  CMD [&quot;</span>bash<span class=\"string\">&quot;]                 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop) ADD file:e6ca98733431f75e9…   55.3MB</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出，在dockerfile里面，增加了1步操作，分别是按照mysqli和redis扩展，然后在build镜像的时候，在原有的20层的基础上，继续添加了1层。</p>\n<p>基础镜像层的层内容都是不可用自改的、只读的。当docker利用镜像创建容器的时候，会在最顶端创建一个可以读写的层给容器。容器内的数据，都会写到这个读写层里面。当所操作的对象位于比较深的层时，需要先复制到最上层的可读写层。当数据对象较大的时候，往往意味着IO性能比较差。因此，一般推荐奖容器修改数据通过volume方式挂载，而不是直接修改镜像内的数据。</p>\n<p>Docker的所有存储，都是在docker文件夹下面，以Centos或者Ubuntu为例，默认的路径一般是&#x2F;var&#x2F;lib&#x2F;docker。（我仅仅以Centos为例）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z docker]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 52</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 builder</span><br><span class=\"line\">drwx------ 4 root root 4096 Sep  6 20:09 buildkit</span><br><span class=\"line\">drwx------ 3 root root 4096 Sep  6 20:09 containerd</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep 17 00:07 containers</span><br><span class=\"line\">drwx------ 3 root root 4096 Sep  6 20:09 image</span><br><span class=\"line\">drwxr-x--- 3 root root 4096 Sep  6 20:09 network</span><br><span class=\"line\">drwx------ 4 root root 4096 Sep 17 00:07 overlay2</span><br><span class=\"line\">drwx------ 4 root root 4096 Sep  6 20:09 plugins</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 runtimes</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 swarm</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep 16 23:56 tmp</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 trust</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:55 volumes</span><br></pre></td></tr></table></figure>\n\n<p>docker的镜像层基本上都是在overlay2里面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z overlay2]<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class=\"line\">busybox latest e1ddd7948a1c 6 weeks ago 1.16MB</span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z docker]<span class=\"comment\"># cd overlay2/</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z overlay2]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwx------ 3 root root 4096 Sep 16 23:56 4c819c3673c3416b65c2cf6394818d270363cfd53a0389a5f6c237e1c8ad3ef4</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Sep 17 00:07 l</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们只有一个busybox的镜像，该目录下面包括diff文件夹，diff文件夹就是我们创建容器之后，初始化的文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 40</span><br><span class=\"line\">drwxr-xr-x 2 root      root      12288 Aug  1 04:20 bin</span><br><span class=\"line\">drwxr-xr-x 2 root      root       4096 Aug  1 04:20 dev</span><br><span class=\"line\">drwxr-xr-x 3 root      root       4096 Aug  1 04:20 etc</span><br><span class=\"line\">drwxr-xr-x 2 nfsnobody nfsnobody  4096 Aug  1 04:20 home</span><br><span class=\"line\">drwx------ 2 root      root       4096 Aug  1 04:20 root</span><br><span class=\"line\">drwxrwxrwt 2 root      root       4096 Sep 17 00:06 tmp</span><br><span class=\"line\">drwxr-xr-x 3 root      root       4096 Aug  1 04:20 usr</span><br><span class=\"line\">drwxr-xr-x 4 root      root       4096 Aug  1 04:20 var</span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>为了验证我们说的是否是正确的，我们在tmp的文件夹里面创建一个测试的文件a.txt，然后写入Hello world</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># touch  tmp/a.txt</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># echo &#x27;Hello world&#x27; &gt; tmp/a.txt</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># cat tmp/a.txt</span></span><br><span class=\"line\">Hello world</span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>如果分析是正确的，那么创建的容器中，也会存在这个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># docker run -it --rm --name test busybox</span></span><br><span class=\"line\">/ <span class=\"comment\"># ll</span></span><br><span class=\"line\">sh: ll: not found</span><br><span class=\"line\">/ <span class=\"comment\"># ls -l</span></span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x    2 root     root         12288 Jul 31 20:20 bin</span><br><span class=\"line\">drwxr-xr-x    5 root     root           360 Sep 16 16:19 dev</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Sep 16 16:19 etc</span><br><span class=\"line\">drwxr-xr-x    2 nobody   nogroup       4096 Jul 31 20:20 home</span><br><span class=\"line\">dr-xr-xr-x  131 root     root             0 Sep 16 16:19 proc</span><br><span class=\"line\">drwx------    1 root     root          4096 Sep 16 16:19 root</span><br><span class=\"line\">dr-xr-xr-x   13 root     root             0 Sep 16 16:19 sys</span><br><span class=\"line\">drwxrwxrwt    2 root     root          4096 Sep 16 16:17 tmp</span><br><span class=\"line\">drwxr-xr-x    3 root     root          4096 Jul 31 20:20 usr</span><br><span class=\"line\">drwxr-xr-x    4 root     root          4096 Jul 31 20:20 var</span><br><span class=\"line\">/ <span class=\"comment\"># ls -l tmp</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r--    1 root     root            12 Sep 16 16:17 a.txt</span><br><span class=\"line\">/ <span class=\"comment\"># cat tmp/a.txt</span></span><br><span class=\"line\">Hello world</span><br><span class=\"line\">/ <span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建的容器中，我们果然看到了内容为Hello world的tmp&#x2F;a.txt文件</p>\n<p>在创建容器之后，我们会发现多了两个文件夹</p>\n<p><img src=\"/uploads/2018/09/WX20180917-002724@2x-1024x494.png\" alt=\"Alt text\"></p>\n<p>这两个文件夹，是用来存储一些容器的数据，如果容器一旦删除，那么这些数据也会随着一块被清理掉，这就是为什么建议我们把一些重要的数据，挂载到外部的原因！</p>\n<p><img src=\"/uploads/2018/09/WX20180917-003010@2x-1024x368.png\" alt=\"Alt text\"></p>\n<h2 id=\"3-多种文件系统比较\"><a href=\"#3-多种文件系统比较\" class=\"headerlink\" title=\"3. 多种文件系统比较\"></a>3. 多种文件系统比较</h2><p>Docker目前支持多种联合文件系统：AUFS、OverlayFS、btrfs、vfs、zfs和Device Mapper等。</p>\n<p>AUFS：最早支持的文件系统，对Debian&#x2F;Ubuntu支持比较好，虽然没有合并到Linux内核，但是成熟度很高</p>\n<p>OverlayFS：类似AUFS，性能更好，上面的例子明显就是OverlayFS，已经合并到内核，将来会取代AUFS</p>\n<p>Device Mapper：Redhat和Docker团队一起开发并用于支持RHEL的文件系统，内核支持，性能略慢，成熟度高</p>\n<p>…</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>docker的镜像层级设计，让docker的性能更高，更加符合软件设计，具有很高的复用性，这个也是docker镜像编译迅速的重要原因。</p>\n<p>此外，docker容器默认将数据存储到docker文件夹下，如果容器被删除，那么容器数据也将被删除掉，所以，对于容器的重要数据，我们应该映射到宿主机上面，避免由于容器删除，而导致的数据丢失。</p>\n<p>另：关于镜像层ID为missing，请参阅论坛：<a href=\"https://forums.docker.com/t/layer-ids-shown-as-missing-in-history/6325\">Layer IDs shown as \\<missing> in history</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1. 作用\"></a>1. 作用</h2><p>联合文件系统（UnionFS） 是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息当做一次提交，然后层层叠加（有点像git），同时可以将不同的目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。</p>\n<p>Debian&#x2F;Ubuntu上成熟的AUFS（Another Union File System）就是一种联合文件系统的实现。AUFS支持为每个成员目录设定只读权限（readonly）、读写权限（readwrite）或（whiteout-able）权限，同时AUFS里有一个类似分层的概念，对只读权限的分支可以在逻辑上进行增量地修改（不影响其他只读部分）。</p>\n<p>Docker镜像自身就是由多个文件层组成，每一层组成有唯一的编号（层ID）</p>\n<h2 id=\"2-docker存储\"><a href=\"#2-docker存储\" class=\"headerlink\" title=\"2. docker存储\"></a>2. docker存储</h2><p>联合文件是docker镜像技术的基础。docker镜像就是根据分层技术来进行继承的。</p>\n<p><img src=\"/uploads/2018/09/20160819173838.png\" alt=\"Alt text\"></p>\n<p>举个例子，用户基于一些基础镜像，来制作另外的一个镜像。这些镜像共享同一个基础镜像层，提高的存储的效率和空间利用率。</p>\n<p>假如，我们使用php7做基础镜像，来制作多个不同的镜像，那么这些镜像，就会公用一个基础镜像作为“底层”，这样做，提高了利用率，因为不用每个自定义镜像都要创建php7的“底层”。这也就是，为什么我们再build一个镜像的时候，会把基础镜像pull下来。当我们创建的自定义镜像还要有变动的时候，至于要创建一个新的层就好了。这样，也就不用我们从头开始构建镜像，节省了构建时间。</p>\n<p><code>这也是docker十分轻量级和快速的重要原因！</code></p>\n<p>docker安装自带了查看镜像层的命令：docker history</p>\n<p>下面我们来看下基础镜像和自定义镜像层的比较：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~ feilong$ docker pull php:7.0</span><br><span class=\"line\">7.0: Pulling from library/php</span><br><span class=\"line\">7.0: Pulling from library/php</span><br><span class=\"line\">802b00ed6f79: Pull complete</span><br><span class=\"line\">59f5a5a895f8: Pull complete</span><br><span class=\"line\">6898b2dbcfeb: Pull complete</span><br><span class=\"line\">8e0903aaa47e: Pull complete</span><br><span class=\"line\">b627a118b728: Pull complete</span><br><span class=\"line\">e2e2cb10942b: Pull complete</span><br><span class=\"line\">e63e2fa0c7d4: Pull complete</span><br><span class=\"line\">57c09353077e: Pull complete</span><br><span class=\"line\">Digest: sha256:f0e774402dd485c11c60f52c05989da088c5debb44d1126cc089970e1bfca002</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> php:7.0</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$</span><br><span class=\"line\">localhost:~ feilong$ docker <span class=\"built_in\">history</span> php:7.0</span><br><span class=\"line\">IMAGE CREATED CREATED BY SIZE COMMENT</span><br><span class=\"line\">a6c560acbfc5 9 hours ago /bin/sh -c <span class=\"comment\">#(nop) CMD [&quot;php&quot; &quot;-a&quot;] 0B</span></span><br><span class=\"line\">&lt;missing&gt; 9 hours ago /bin/sh -c <span class=\"comment\">#(nop) ENTRYPOINT [&quot;docker-php-e… 0B</span></span><br><span class=\"line\">&lt;missing&gt; 9 hours ago /bin/sh -c <span class=\"comment\">#(nop) COPY multi:2cdcedabcf5a3b9… 6.42kB</span></span><br><span class=\"line\">&lt;missing&gt; 9 hours ago /bin/sh -c <span class=\"built_in\">set</span> -eux; savedAptMark=<span class=\"string\">&quot;<span class=\"subst\">$(apt-m… 79.4MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop)</span> COPY file:207c686e3fed4f71… 587B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c set -xe; fetchDeps=&#x27; wget &#x27;;… 13.3MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_SHA256=ff6f62afeb… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_URL=https://secur… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_VERSION=7.0.32 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV GPG_KEYS=1A4E8B7277C4… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_LDFLAGS=-Wl,-O1 -… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_CPPFLAGS=-fstack-… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_CFLAGS=-fstack-pr… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c mkdir -p <span class=\"variable\">$PHP_INI_DIR</span>/conf.d 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_INI_DIR=/usr/loca… 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c apt-get update &amp;&amp; apt-get install… 209MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHPIZE_DEPS=autoconf … 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c set -eux; &#123; echo &#x27;Package: php… 46B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) CMD [&quot;</span>bash<span class=\"string\">&quot;] 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ADD file:e6ca98733431f75e9… 55.3MB</span></span><br></pre></td></tr></table></figure>\n\n<p>我pull了一个php:7.0的镜像，可以看到，整个过程分为20层，每个层级都会执行对应的命令，然后我们基于php7在做一些自定义的操作：安装mysqli和redis的扩展，构建一个新的镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Dockerfile</span></span><br><span class=\"line\">FROM php:7.0</span><br><span class=\"line\">RUN apt-get update \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install mysqli \\</span><br><span class=\"line\">    &amp;&amp; curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz \\</span><br><span class=\"line\">    &amp;&amp; tar zxvf redis-4.1.0.tgz \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">cd</span> redis-4.1.0 \\</span><br><span class=\"line\">    &amp;&amp; phpize \\</span><br><span class=\"line\">    &amp;&amp; ./configure \\</span><br><span class=\"line\">    &amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;extension=redis.so&quot;</span> &gt; /usr/local/etc/php/conf.d/redis.ini \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">cd</span> .. \\</span><br><span class=\"line\">    &amp;&amp; <span class=\"built_in\">rm</span> -rf redis-4.1.0.tgz redis-4.1.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:feilong_test feilong$ docker build -t feilongtest .</span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/2 : FROM php:7.0</span><br><span class=\"line\"> ---&gt; a6c560acbfc5</span><br><span class=\"line\">Step 2/2 : RUN apt-get update     &amp;&amp; docker-php-ext-install mysqli     &amp;&amp; curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz     &amp;&amp; tar zxvf redis-4.1.0.tgz     &amp;&amp; <span class=\"built_in\">cd</span> redis-4.1.0     &amp;&amp; phpize     &amp;&amp; ./configure     &amp;&amp; make &amp;&amp; make install     &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;extension=redis.so&quot;</span> &gt; /usr/local/etc/php/conf.d/redis.ini     &amp;&amp; <span class=\"built_in\">cd</span> ..     &amp;&amp; <span class=\"built_in\">rm</span> -rf redis-4.1.0.tgz redis-4.1.0</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd2e3fbbde25</span><br><span class=\"line\">Get:3 http://security.debian.org/debian-security stretch/updates InRelease [94.3 kB]</span><br><span class=\"line\">Get:4 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [414 kB]</span><br><span class=\"line\">Ign:1 http://cdn-fastly.deb.debian.org/debian stretch InRelease</span><br><span class=\"line\">Get:2 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]</span><br><span class=\"line\">Get:5 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [5148 B]</span><br><span class=\"line\">Get:6 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]</span><br><span class=\"line\">Get:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]</span><br><span class=\"line\">Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7099 kB]</span><br><span class=\"line\">省略</span><br><span class=\"line\">Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20151012/</span><br><span class=\"line\">Removing intermediate container bd2e3fbbde25</span><br><span class=\"line\"> ---&gt; 41b978fc1549</span><br><span class=\"line\">Successfully built 41b978fc1549</span><br><span class=\"line\">Successfully tagged feilongtest:latest</span><br></pre></td></tr></table></figure>\n\n<p>然后我们看下自己构建的镜像层</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:feilong_test feilong$ docker <span class=\"built_in\">history</span> feilongtest</span><br><span class=\"line\">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class=\"line\">41b978fc1549        48 seconds ago      /bin/sh -c apt-get update     &amp;&amp; docker-php-…   18.3MB</span><br><span class=\"line\">a6c560acbfc5        10 hours ago        /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;php&quot; &quot;-a&quot;]             0B</span></span><br><span class=\"line\">&lt;missing&gt;           10 hours ago        /bin/sh -c <span class=\"comment\">#(nop)  ENTRYPOINT [&quot;docker-php-e…   0B</span></span><br><span class=\"line\">&lt;missing&gt;           10 hours ago        /bin/sh -c <span class=\"comment\">#(nop) COPY multi:2cdcedabcf5a3b9…   6.42kB</span></span><br><span class=\"line\">&lt;missing&gt;           10 hours ago        /bin/sh -c <span class=\"built_in\">set</span> -eux;   savedAptMark=<span class=\"string\">&quot;<span class=\"subst\">$(apt-m…   79.4MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)</span> COPY file:207c686e3fed4f71…   587B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c set -xe;   fetchDeps=&#x27;   wget  &#x27;;…   13.3MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_SHA256=ff6f62afeb…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_URL=https://secur…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_VERSION=7.0.32       0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV GPG_KEYS=1A4E8B7277C4…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_LDFLAGS=-Wl,-O1 -…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_CPPFLAGS=-fstack-…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_CFLAGS=-fstack-pr…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c mkdir -p <span class=\"variable\">$PHP_INI_DIR</span>/conf.d         0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_INI_DIR=/usr/loca…   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c apt-get update &amp;&amp; apt-get install…   209MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHPIZE_DEPS=autoconf …   0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c set -eux;  &#123;   echo &#x27;Package: php…   46B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  CMD [&quot;</span>bash<span class=\"string\">&quot;]                 0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;           10 days ago         /bin/sh -c #(nop) ADD file:e6ca98733431f75e9…   55.3MB</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出，在dockerfile里面，增加了1步操作，分别是按照mysqli和redis扩展，然后在build镜像的时候，在原有的20层的基础上，继续添加了1层。</p>\n<p>基础镜像层的层内容都是不可用自改的、只读的。当docker利用镜像创建容器的时候，会在最顶端创建一个可以读写的层给容器。容器内的数据，都会写到这个读写层里面。当所操作的对象位于比较深的层时，需要先复制到最上层的可读写层。当数据对象较大的时候，往往意味着IO性能比较差。因此，一般推荐奖容器修改数据通过volume方式挂载，而不是直接修改镜像内的数据。</p>\n<p>Docker的所有存储，都是在docker文件夹下面，以Centos或者Ubuntu为例，默认的路径一般是&#x2F;var&#x2F;lib&#x2F;docker。（我仅仅以Centos为例）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z docker]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 52</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 builder</span><br><span class=\"line\">drwx------ 4 root root 4096 Sep  6 20:09 buildkit</span><br><span class=\"line\">drwx------ 3 root root 4096 Sep  6 20:09 containerd</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep 17 00:07 containers</span><br><span class=\"line\">drwx------ 3 root root 4096 Sep  6 20:09 image</span><br><span class=\"line\">drwxr-x--- 3 root root 4096 Sep  6 20:09 network</span><br><span class=\"line\">drwx------ 4 root root 4096 Sep 17 00:07 overlay2</span><br><span class=\"line\">drwx------ 4 root root 4096 Sep  6 20:09 plugins</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 runtimes</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 swarm</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep 16 23:56 tmp</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:09 trust</span><br><span class=\"line\">drwx------ 2 root root 4096 Sep  6 20:55 volumes</span><br></pre></td></tr></table></figure>\n\n<p>docker的镜像层基本上都是在overlay2里面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z overlay2]<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class=\"line\">busybox latest e1ddd7948a1c 6 weeks ago 1.16MB</span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z docker]<span class=\"comment\"># cd overlay2/</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z overlay2]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwx------ 3 root root 4096 Sep 16 23:56 4c819c3673c3416b65c2cf6394818d270363cfd53a0389a5f6c237e1c8ad3ef4</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Sep 17 00:07 l</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们只有一个busybox的镜像，该目录下面包括diff文件夹，diff文件夹就是我们创建容器之后，初始化的文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 40</span><br><span class=\"line\">drwxr-xr-x 2 root      root      12288 Aug  1 04:20 bin</span><br><span class=\"line\">drwxr-xr-x 2 root      root       4096 Aug  1 04:20 dev</span><br><span class=\"line\">drwxr-xr-x 3 root      root       4096 Aug  1 04:20 etc</span><br><span class=\"line\">drwxr-xr-x 2 nfsnobody nfsnobody  4096 Aug  1 04:20 home</span><br><span class=\"line\">drwx------ 2 root      root       4096 Aug  1 04:20 root</span><br><span class=\"line\">drwxrwxrwt 2 root      root       4096 Sep 17 00:06 tmp</span><br><span class=\"line\">drwxr-xr-x 3 root      root       4096 Aug  1 04:20 usr</span><br><span class=\"line\">drwxr-xr-x 4 root      root       4096 Aug  1 04:20 var</span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>为了验证我们说的是否是正确的，我们在tmp的文件夹里面创建一个测试的文件a.txt，然后写入Hello world</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># touch  tmp/a.txt</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># echo &#x27;Hello world&#x27; &gt; tmp/a.txt</span></span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># cat tmp/a.txt</span></span><br><span class=\"line\">Hello world</span><br><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>如果分析是正确的，那么创建的容器中，也会存在这个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izj6c9b96ia369l2i47yq3z diff]<span class=\"comment\"># docker run -it --rm --name test busybox</span></span><br><span class=\"line\">/ <span class=\"comment\"># ll</span></span><br><span class=\"line\">sh: ll: not found</span><br><span class=\"line\">/ <span class=\"comment\"># ls -l</span></span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x    2 root     root         12288 Jul 31 20:20 bin</span><br><span class=\"line\">drwxr-xr-x    5 root     root           360 Sep 16 16:19 dev</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Sep 16 16:19 etc</span><br><span class=\"line\">drwxr-xr-x    2 nobody   nogroup       4096 Jul 31 20:20 home</span><br><span class=\"line\">dr-xr-xr-x  131 root     root             0 Sep 16 16:19 proc</span><br><span class=\"line\">drwx------    1 root     root          4096 Sep 16 16:19 root</span><br><span class=\"line\">dr-xr-xr-x   13 root     root             0 Sep 16 16:19 sys</span><br><span class=\"line\">drwxrwxrwt    2 root     root          4096 Sep 16 16:17 tmp</span><br><span class=\"line\">drwxr-xr-x    3 root     root          4096 Jul 31 20:20 usr</span><br><span class=\"line\">drwxr-xr-x    4 root     root          4096 Jul 31 20:20 var</span><br><span class=\"line\">/ <span class=\"comment\"># ls -l tmp</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r--    1 root     root            12 Sep 16 16:17 a.txt</span><br><span class=\"line\">/ <span class=\"comment\"># cat tmp/a.txt</span></span><br><span class=\"line\">Hello world</span><br><span class=\"line\">/ <span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建的容器中，我们果然看到了内容为Hello world的tmp&#x2F;a.txt文件</p>\n<p>在创建容器之后，我们会发现多了两个文件夹</p>\n<p><img src=\"/uploads/2018/09/WX20180917-002724@2x-1024x494.png\" alt=\"Alt text\"></p>\n<p>这两个文件夹，是用来存储一些容器的数据，如果容器一旦删除，那么这些数据也会随着一块被清理掉，这就是为什么建议我们把一些重要的数据，挂载到外部的原因！</p>\n<p><img src=\"/uploads/2018/09/WX20180917-003010@2x-1024x368.png\" alt=\"Alt text\"></p>\n<h2 id=\"3-多种文件系统比较\"><a href=\"#3-多种文件系统比较\" class=\"headerlink\" title=\"3. 多种文件系统比较\"></a>3. 多种文件系统比较</h2><p>Docker目前支持多种联合文件系统：AUFS、OverlayFS、btrfs、vfs、zfs和Device Mapper等。</p>\n<p>AUFS：最早支持的文件系统，对Debian&#x2F;Ubuntu支持比较好，虽然没有合并到Linux内核，但是成熟度很高</p>\n<p>OverlayFS：类似AUFS，性能更好，上面的例子明显就是OverlayFS，已经合并到内核，将来会取代AUFS</p>\n<p>Device Mapper：Redhat和Docker团队一起开发并用于支持RHEL的文件系统，内核支持，性能略慢，成熟度高</p>\n<p>…</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>docker的镜像层级设计，让docker的性能更高，更加符合软件设计，具有很高的复用性，这个也是docker镜像编译迅速的重要原因。</p>\n<p>此外，docker容器默认将数据存储到docker文件夹下，如果容器被删除，那么容器数据也将被删除掉，所以，对于容器的重要数据，我们应该映射到宿主机上面，避免由于容器删除，而导致的数据丢失。</p>\n<p>另：关于镜像层ID为missing，请参阅论坛：<a href=\"https://forums.docker.com/t/layer-ids-shown-as-missing-in-history/6325\">Layer IDs shown as \\<missing> in history</a></p>\n"},{"title":"Docker版本Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错的解决方法","id":"812","date":"2021-10-04T08:26:24.000Z","_content":"\n## 背景\n\n最近开发的时候，需要使用MySQL的数据库，在使用group by的时候，生产环境使用的是5.6版本，但是开发机上面装的docker版本是5.7，在调用接口的时候，发现报错了，通过查询对应的资料，是因为mysql 5.7版本，默认开启了`ONLY_FULL_GROUP_BY`，所以在使用group by的时候，不能存在多余的字段信息。\n\n## 现象回顾\n\n### 表结构准备\n\n```mysql\nCREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) DEFAULT NULL,\n  `sex` varchar(255) DEFAULT NULL,\n  `age` int DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n|id|name|sex|age|\n|:---|:---|:---|:---|\n|1|张三|男|21|\n|2|李四|男|20|\n|3|小花|女|21|\n\n执行SQL\n\n```mysql\nSELECT * FROM `user` GROUP BY age\n```\n\n出现报错`1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'test.user.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by, Time: 0.064000s`\n\n### 原因分析\n\nMySQL的官方文档，给出如下的解释:\n\n> MySQL 5.7.5 and later implements detection of functional dependence. If the [`ONLY_FULL_GROUP_BY`](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by) SQL mode is enabled (which it is by default), MySQL rejects queries for which the select list, `HAVING` condition, or `ORDER BY` list refer to nonaggregated columns that are neither named in the `GROUP BY` clause nor are functionally dependent on them. (Before 5.7.5, MySQL does not detect functional dependency and [`ONLY_FULL_GROUP_BY`](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by) is not enabled by default. For a description of pre-5.7.5 behavior, see the [MySQL 5.6 Reference Manual](https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html).)\n\n官方大致的意思是说，在5.7.5版本之后，将会开启`ONLY_FULL_GROUP_BY`，开启此配置之后，在select、having或者order by的时候，将拒绝使用非聚合列的查询。\n\n针对上述的SQL，也就是在select+group by的时候，只能查询与group by相关列的查询。\n\n## 解决办法\n\n### 方法一：优化SQL\n\n其实个人觉得，最好的办法，就是优化SQL，剔除掉无关的查询操作，将与group by相关的查询去掉:\n\n`SELECT count(1), age FROM user GROUP BY age`\n\n### 方法二：更改配置文件\n\n将容器的内的配置文件，拷贝到宿主机，挂接映射关系，然后在mysqld下增加sql\\_mode的配置 `sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION`\n\ndocker-compose.yml\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  db:\n    image: mysql\n    command: --default-authentication-plugin=mysql_native_password\n    restart: always\n    volumes:\n      - /root/docker-mysql/conf/mysql:/etc/mysql\n      - /root/docker-mysql/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n    container_name: test-mysql\n    ports:\n      - 3307:3306\n```\n\nmy.cnf\n\n```\n[mysqld]\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\ndatadir         = /var/lib/mysql\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\nsecure-file-priv= NULL\n# Custom config should go here\n!includedir /etc/mysql/conf.d/\n```\n\n重启容器，查看效果\n\n```mysql\nmysql> SELECT @@sql_mode;\n+----------------------------------------------------------------------------------------------------+\n @@sql_mode                                                                                         \n+----------------------------------------------------------------------------------------------------+\n STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \n+----------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT * FROM user GROUP BY age;\n+----+--------+------+------+\n id  name    sex   age  \n+----+--------+------+------+\n  1  张三  男     21 \n  2  李四  男     20 \n+----+--------+------+------+\n2 rows in set (0.00 sec)\n```\n\n### 方法三：更改启动命令\n\ndocker-compose.yml\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  db:\n    image: mysql\n    command: mysqld --sql_mode=\"STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\" --default-authentication-plugin=mysql_native_password\n    restart: always\n    volumes:\n      - /root/docker-mysql/conf/mysql:/etc/mysql\n      - /root/docker-mysql/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n    container_name: test-mysql\n    ports:\n      - 3307:3306\n```\n\n销毁容器：`docker-compose down` 重启容器：`docker-compose up -d`\n\n查看效果：\n\n```mysql\nmysql> SELECT @@sql_mode;\n+----------------------------------------------------------------------------------------------------+\n @@sql_mode                                                                                         \n+----------------------------------------------------------------------------------------------------+\n STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \n+----------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> set names utf8;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> SELECT * FROM user GROUP BY age;\n+----+--------+------+------+\n id  name    sex   age  \n+----+--------+------+------+\n  1  张三  男     21 \n  2  李四  男     20 \n+----+--------+------+------+\n2 rows in set (0.00 sec)\n```","source":"_posts/docker版本mysql5-7及以上版本-only-full-group-by报错的解决方法.md","raw":"---\ntitle: Docker版本Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错的解决方法\ntags:\n  - docker\n  - MySQL\nid: '812'\ncategories:\n  - - Docker\n  - - Mysql\ndate: 2021-10-04 16:26:24\n---\n\n## 背景\n\n最近开发的时候，需要使用MySQL的数据库，在使用group by的时候，生产环境使用的是5.6版本，但是开发机上面装的docker版本是5.7，在调用接口的时候，发现报错了，通过查询对应的资料，是因为mysql 5.7版本，默认开启了`ONLY_FULL_GROUP_BY`，所以在使用group by的时候，不能存在多余的字段信息。\n\n## 现象回顾\n\n### 表结构准备\n\n```mysql\nCREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) DEFAULT NULL,\n  `sex` varchar(255) DEFAULT NULL,\n  `age` int DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n|id|name|sex|age|\n|:---|:---|:---|:---|\n|1|张三|男|21|\n|2|李四|男|20|\n|3|小花|女|21|\n\n执行SQL\n\n```mysql\nSELECT * FROM `user` GROUP BY age\n```\n\n出现报错`1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'test.user.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by, Time: 0.064000s`\n\n### 原因分析\n\nMySQL的官方文档，给出如下的解释:\n\n> MySQL 5.7.5 and later implements detection of functional dependence. If the [`ONLY_FULL_GROUP_BY`](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by) SQL mode is enabled (which it is by default), MySQL rejects queries for which the select list, `HAVING` condition, or `ORDER BY` list refer to nonaggregated columns that are neither named in the `GROUP BY` clause nor are functionally dependent on them. (Before 5.7.5, MySQL does not detect functional dependency and [`ONLY_FULL_GROUP_BY`](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by) is not enabled by default. For a description of pre-5.7.5 behavior, see the [MySQL 5.6 Reference Manual](https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html).)\n\n官方大致的意思是说，在5.7.5版本之后，将会开启`ONLY_FULL_GROUP_BY`，开启此配置之后，在select、having或者order by的时候，将拒绝使用非聚合列的查询。\n\n针对上述的SQL，也就是在select+group by的时候，只能查询与group by相关列的查询。\n\n## 解决办法\n\n### 方法一：优化SQL\n\n其实个人觉得，最好的办法，就是优化SQL，剔除掉无关的查询操作，将与group by相关的查询去掉:\n\n`SELECT count(1), age FROM user GROUP BY age`\n\n### 方法二：更改配置文件\n\n将容器的内的配置文件，拷贝到宿主机，挂接映射关系，然后在mysqld下增加sql\\_mode的配置 `sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION`\n\ndocker-compose.yml\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  db:\n    image: mysql\n    command: --default-authentication-plugin=mysql_native_password\n    restart: always\n    volumes:\n      - /root/docker-mysql/conf/mysql:/etc/mysql\n      - /root/docker-mysql/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n    container_name: test-mysql\n    ports:\n      - 3307:3306\n```\n\nmy.cnf\n\n```\n[mysqld]\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\ndatadir         = /var/lib/mysql\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\nsecure-file-priv= NULL\n# Custom config should go here\n!includedir /etc/mysql/conf.d/\n```\n\n重启容器，查看效果\n\n```mysql\nmysql> SELECT @@sql_mode;\n+----------------------------------------------------------------------------------------------------+\n @@sql_mode                                                                                         \n+----------------------------------------------------------------------------------------------------+\n STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \n+----------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT * FROM user GROUP BY age;\n+----+--------+------+------+\n id  name    sex   age  \n+----+--------+------+------+\n  1  张三  男     21 \n  2  李四  男     20 \n+----+--------+------+------+\n2 rows in set (0.00 sec)\n```\n\n### 方法三：更改启动命令\n\ndocker-compose.yml\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  db:\n    image: mysql\n    command: mysqld --sql_mode=\"STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\" --default-authentication-plugin=mysql_native_password\n    restart: always\n    volumes:\n      - /root/docker-mysql/conf/mysql:/etc/mysql\n      - /root/docker-mysql/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n    container_name: test-mysql\n    ports:\n      - 3307:3306\n```\n\n销毁容器：`docker-compose down` 重启容器：`docker-compose up -d`\n\n查看效果：\n\n```mysql\nmysql> SELECT @@sql_mode;\n+----------------------------------------------------------------------------------------------------+\n @@sql_mode                                                                                         \n+----------------------------------------------------------------------------------------------------+\n STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \n+----------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> set names utf8;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> SELECT * FROM user GROUP BY age;\n+----+--------+------+------+\n id  name    sex   age  \n+----+--------+------+------+\n  1  张三  男     21 \n  2  李四  男     20 \n+----+--------+------+------+\n2 rows in set (0.00 sec)\n```","slug":"docker版本mysql5-7及以上版本-only-full-group-by报错的解决方法","published":1,"updated":"2022-03-12T23:58:55.222Z","_id":"cl0oi8mf2001d417telgcd8or","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近开发的时候，需要使用MySQL的数据库，在使用group by的时候，生产环境使用的是5.6版本，但是开发机上面装的docker版本是5.7，在调用接口的时候，发现报错了，通过查询对应的资料，是因为mysql 5.7版本，默认开启了<code>ONLY_FULL_GROUP_BY</code>，所以在使用group by的时候，不能存在多余的字段信息。</p>\n<h2 id=\"现象回顾\"><a href=\"#现象回顾\" class=\"headerlink\" title=\"现象回顾\"></a>现象回顾</h2><h3 id=\"表结构准备\"><a href=\"#表结构准备\" class=\"headerlink\" title=\"表结构准备\"></a>表结构准备</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `name` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `sex` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `age` int DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">sex</th>\n<th align=\"left\">age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">张三</td>\n<td align=\"left\">男</td>\n<td align=\"left\">21</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">李四</td>\n<td align=\"left\">男</td>\n<td align=\"left\">20</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">小花</td>\n<td align=\"left\">女</td>\n<td align=\"left\">21</td>\n</tr>\n</tbody></table>\n<p>执行SQL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM `user` GROUP BY age</span><br></pre></td></tr></table></figure>\n\n<p>出现报错<code>1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;test.user.id&#39; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by, Time: 0.064000s</code></p>\n<h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>MySQL的官方文档，给出如下的解释:</p>\n<blockquote>\n<p>MySQL 5.7.5 and later implements detection of functional dependence. If the <a href=\"https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by\"><code>ONLY_FULL_GROUP_BY</code></a> SQL mode is enabled (which it is by default), MySQL rejects queries for which the select list, <code>HAVING</code> condition, or <code>ORDER BY</code> list refer to nonaggregated columns that are neither named in the <code>GROUP BY</code> clause nor are functionally dependent on them. (Before 5.7.5, MySQL does not detect functional dependency and <a href=\"https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by\"><code>ONLY_FULL_GROUP_BY</code></a> is not enabled by default. For a description of pre-5.7.5 behavior, see the <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html\">MySQL 5.6 Reference Manual</a>.)</p>\n</blockquote>\n<p>官方大致的意思是说，在5.7.5版本之后，将会开启<code>ONLY_FULL_GROUP_BY</code>，开启此配置之后，在select、having或者order by的时候，将拒绝使用非聚合列的查询。</p>\n<p>针对上述的SQL，也就是在select+group by的时候，只能查询与group by相关列的查询。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><h3 id=\"方法一：优化SQL\"><a href=\"#方法一：优化SQL\" class=\"headerlink\" title=\"方法一：优化SQL\"></a>方法一：优化SQL</h3><p>其实个人觉得，最好的办法，就是优化SQL，剔除掉无关的查询操作，将与group by相关的查询去掉:</p>\n<p><code>SELECT count(1), age FROM user GROUP BY age</code></p>\n<h3 id=\"方法二：更改配置文件\"><a href=\"#方法二：更改配置文件\" class=\"headerlink\" title=\"方法二：更改配置文件\"></a>方法二：更改配置文件</h3><p>将容器的内的配置文件，拷贝到宿主机，挂接映射关系，然后在mysqld下增加sql_mode的配置 <code>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</code></p>\n<p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">--default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/conf/mysql:/etc/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/mysql:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">test-mysql</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span></span><br></pre></td></tr></table></figure>\n\n<p>my.cnf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class=\"line\">socket          = /var/run/mysqld/mysqld.sock</span><br><span class=\"line\">datadir         = /var/lib/mysql</span><br><span class=\"line\">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\">secure-file-priv= NULL</span><br><span class=\"line\"># Custom config should go here</span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br></pre></td></tr></table></figure>\n\n<p>重启容器，查看效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @@sql_mode;</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> @@sql_mode                                                                                         </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM user GROUP BY age;</span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\"> id  name    sex   age  </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">  1  张三  男     21 </span><br><span class=\"line\">  2  李四  男     20 </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法三：更改启动命令\"><a href=\"#方法三：更改启动命令\" class=\"headerlink\" title=\"方法三：更改启动命令\"></a>方法三：更改启动命令</h3><p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">mysqld</span> <span class=\"string\">--sql_mode=&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&quot;</span> <span class=\"string\">--default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/conf/mysql:/etc/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/mysql:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">test-mysql</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span></span><br></pre></td></tr></table></figure>\n\n<p>销毁容器：<code>docker-compose down</code> 重启容器：<code>docker-compose up -d</code></p>\n<p>查看效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @@sql_mode;</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> @@sql_mode                                                                                         </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; set names utf8;</span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM user GROUP BY age;</span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\"> id  name    sex   age  </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">  1  张三  男     21 </span><br><span class=\"line\">  2  李四  男     20 </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近开发的时候，需要使用MySQL的数据库，在使用group by的时候，生产环境使用的是5.6版本，但是开发机上面装的docker版本是5.7，在调用接口的时候，发现报错了，通过查询对应的资料，是因为mysql 5.7版本，默认开启了<code>ONLY_FULL_GROUP_BY</code>，所以在使用group by的时候，不能存在多余的字段信息。</p>\n<h2 id=\"现象回顾\"><a href=\"#现象回顾\" class=\"headerlink\" title=\"现象回顾\"></a>现象回顾</h2><h3 id=\"表结构准备\"><a href=\"#表结构准备\" class=\"headerlink\" title=\"表结构准备\"></a>表结构准备</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `name` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `sex` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `age` int DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">sex</th>\n<th align=\"left\">age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">张三</td>\n<td align=\"left\">男</td>\n<td align=\"left\">21</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">李四</td>\n<td align=\"left\">男</td>\n<td align=\"left\">20</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">小花</td>\n<td align=\"left\">女</td>\n<td align=\"left\">21</td>\n</tr>\n</tbody></table>\n<p>执行SQL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM `user` GROUP BY age</span><br></pre></td></tr></table></figure>\n\n<p>出现报错<code>1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;test.user.id&#39; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by, Time: 0.064000s</code></p>\n<h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>MySQL的官方文档，给出如下的解释:</p>\n<blockquote>\n<p>MySQL 5.7.5 and later implements detection of functional dependence. If the <a href=\"https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by\"><code>ONLY_FULL_GROUP_BY</code></a> SQL mode is enabled (which it is by default), MySQL rejects queries for which the select list, <code>HAVING</code> condition, or <code>ORDER BY</code> list refer to nonaggregated columns that are neither named in the <code>GROUP BY</code> clause nor are functionally dependent on them. (Before 5.7.5, MySQL does not detect functional dependency and <a href=\"https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by\"><code>ONLY_FULL_GROUP_BY</code></a> is not enabled by default. For a description of pre-5.7.5 behavior, see the <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html\">MySQL 5.6 Reference Manual</a>.)</p>\n</blockquote>\n<p>官方大致的意思是说，在5.7.5版本之后，将会开启<code>ONLY_FULL_GROUP_BY</code>，开启此配置之后，在select、having或者order by的时候，将拒绝使用非聚合列的查询。</p>\n<p>针对上述的SQL，也就是在select+group by的时候，只能查询与group by相关列的查询。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><h3 id=\"方法一：优化SQL\"><a href=\"#方法一：优化SQL\" class=\"headerlink\" title=\"方法一：优化SQL\"></a>方法一：优化SQL</h3><p>其实个人觉得，最好的办法，就是优化SQL，剔除掉无关的查询操作，将与group by相关的查询去掉:</p>\n<p><code>SELECT count(1), age FROM user GROUP BY age</code></p>\n<h3 id=\"方法二：更改配置文件\"><a href=\"#方法二：更改配置文件\" class=\"headerlink\" title=\"方法二：更改配置文件\"></a>方法二：更改配置文件</h3><p>将容器的内的配置文件，拷贝到宿主机，挂接映射关系，然后在mysqld下增加sql_mode的配置 <code>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</code></p>\n<p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">--default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/conf/mysql:/etc/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/mysql:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">test-mysql</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span></span><br></pre></td></tr></table></figure>\n\n<p>my.cnf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class=\"line\">socket          = /var/run/mysqld/mysqld.sock</span><br><span class=\"line\">datadir         = /var/lib/mysql</span><br><span class=\"line\">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\">secure-file-priv= NULL</span><br><span class=\"line\"># Custom config should go here</span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br></pre></td></tr></table></figure>\n\n<p>重启容器，查看效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @@sql_mode;</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> @@sql_mode                                                                                         </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM user GROUP BY age;</span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\"> id  name    sex   age  </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">  1  张三  男     21 </span><br><span class=\"line\">  2  李四  男     20 </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法三：更改启动命令\"><a href=\"#方法三：更改启动命令\" class=\"headerlink\" title=\"方法三：更改启动命令\"></a>方法三：更改启动命令</h3><p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">mysqld</span> <span class=\"string\">--sql_mode=&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&quot;</span> <span class=\"string\">--default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/conf/mysql:/etc/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/root/docker-mysql/mysql:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">test-mysql</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span></span><br></pre></td></tr></table></figure>\n\n<p>销毁容器：<code>docker-compose down</code> 重启容器：<code>docker-compose up -d</code></p>\n<p>查看效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @@sql_mode;</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> @@sql_mode                                                                                         </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\"> STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION </span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; set names utf8;</span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM user GROUP BY age;</span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\"> id  name    sex   age  </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">  1  张三  男     21 </span><br><span class=\"line\">  2  李四  男     20 </span><br><span class=\"line\">+----+--------+------+------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>"},{"title":"用 iPhone 轻松下载微博小视频","id":"241","comments":0,"date":"2018-02-25T14:25:50.000Z","_content":"\n我经常喜欢看一些比较污的视频，这些视频基本上来自于微博。iPhone和Android有一个很大的不同，就是下载视频比较难。之前使用Pro recorder，但是这个APP有数量限制，一旦到了规定的数量，需要购买会员。下面和大家分享一下如何使用iPhone下载微博上面的小视频另一种方法。\n\n#### 下载Wordflow\n\n打开App Store，搜索workflow，并进行下载\n\n![](/uploads/2018/02/IMG_0863-169x300.png)\n\n#### 下载workflow插件\n\n使用iPhone的自带浏览器Safari 打开连接 [http://workflow.sspai.com/#/main/workflow](http://workflow.sspai.com/#/main/workflow) ，然后找到插件，进行下载\n\n![](/uploads/2018/02/IMG_0864-169x300.png)\n\n点击`获取该workflow`，这个时候会询问是否打开workflow，然后选择确认。\n\n![](/uploads/2018/02/IMG_0865-169x300.png)\n\n选择`get workflow` 进行安装。\n\n#### 下载小视频准备\n\n打开微博你想要下载的小视频，拷贝连接\n\n![](/uploads/2018/02/IMG_0868-169x300.png)\n\n返回workflow的主界面，点击刚刚下载的插件。\n\n![](/uploads/2018/02/IMG_0867-169x300.png)\n\n这个时候，复制的链接已经自动粘贴到了workflow里面。\n\n#### 开始下载\n\n![](/uploads/2018/02/IMG_0872-169x300.png)\n\n点击开始进行下载，这个时候会有一系列的操作自动运行。\n\n选择`Save Video`进行保存操作。\n\n#### 查看视频\n\n进行iPhone相册，查看下载的小视频。\n\n![](/uploads/2018/02/IMG_0871-169x300.png)\n\n#### [workflow中文推荐站](http://workflow.sspai.com/#/main/workflow)","source":"_posts/download-weibo-video.md","raw":"---\ntitle: 用 iPhone 轻松下载微博小视频\ntags: []\nid: '241'\ncategories:\n  - - Life\ncomments: false\ndate: 2018-02-25 22:25:50\n---\n\n我经常喜欢看一些比较污的视频，这些视频基本上来自于微博。iPhone和Android有一个很大的不同，就是下载视频比较难。之前使用Pro recorder，但是这个APP有数量限制，一旦到了规定的数量，需要购买会员。下面和大家分享一下如何使用iPhone下载微博上面的小视频另一种方法。\n\n#### 下载Wordflow\n\n打开App Store，搜索workflow，并进行下载\n\n![](/uploads/2018/02/IMG_0863-169x300.png)\n\n#### 下载workflow插件\n\n使用iPhone的自带浏览器Safari 打开连接 [http://workflow.sspai.com/#/main/workflow](http://workflow.sspai.com/#/main/workflow) ，然后找到插件，进行下载\n\n![](/uploads/2018/02/IMG_0864-169x300.png)\n\n点击`获取该workflow`，这个时候会询问是否打开workflow，然后选择确认。\n\n![](/uploads/2018/02/IMG_0865-169x300.png)\n\n选择`get workflow` 进行安装。\n\n#### 下载小视频准备\n\n打开微博你想要下载的小视频，拷贝连接\n\n![](/uploads/2018/02/IMG_0868-169x300.png)\n\n返回workflow的主界面，点击刚刚下载的插件。\n\n![](/uploads/2018/02/IMG_0867-169x300.png)\n\n这个时候，复制的链接已经自动粘贴到了workflow里面。\n\n#### 开始下载\n\n![](/uploads/2018/02/IMG_0872-169x300.png)\n\n点击开始进行下载，这个时候会有一系列的操作自动运行。\n\n选择`Save Video`进行保存操作。\n\n#### 查看视频\n\n进行iPhone相册，查看下载的小视频。\n\n![](/uploads/2018/02/IMG_0871-169x300.png)\n\n#### [workflow中文推荐站](http://workflow.sspai.com/#/main/workflow)","slug":"download-weibo-video","published":1,"updated":"2022-03-13T01:17:12.527Z","_id":"cl0oi8mf5001g417t423igrbk","layout":"post","photos":[],"link":"","content":"<p>我经常喜欢看一些比较污的视频，这些视频基本上来自于微博。iPhone和Android有一个很大的不同，就是下载视频比较难。之前使用Pro recorder，但是这个APP有数量限制，一旦到了规定的数量，需要购买会员。下面和大家分享一下如何使用iPhone下载微博上面的小视频另一种方法。</p>\n<h4 id=\"下载Wordflow\"><a href=\"#下载Wordflow\" class=\"headerlink\" title=\"下载Wordflow\"></a>下载Wordflow</h4><p>打开App Store，搜索workflow，并进行下载</p>\n<p><img src=\"/uploads/2018/02/IMG_0863-169x300.png\"></p>\n<h4 id=\"下载workflow插件\"><a href=\"#下载workflow插件\" class=\"headerlink\" title=\"下载workflow插件\"></a>下载workflow插件</h4><p>使用iPhone的自带浏览器Safari 打开连接 <a href=\"http://workflow.sspai.com/#/main/workflow\">http://workflow.sspai.com/#/main/workflow</a> ，然后找到插件，进行下载</p>\n<p><img src=\"/uploads/2018/02/IMG_0864-169x300.png\"></p>\n<p>点击<code>获取该workflow</code>，这个时候会询问是否打开workflow，然后选择确认。</p>\n<p><img src=\"/uploads/2018/02/IMG_0865-169x300.png\"></p>\n<p>选择<code>get workflow</code> 进行安装。</p>\n<h4 id=\"下载小视频准备\"><a href=\"#下载小视频准备\" class=\"headerlink\" title=\"下载小视频准备\"></a>下载小视频准备</h4><p>打开微博你想要下载的小视频，拷贝连接</p>\n<p><img src=\"/uploads/2018/02/IMG_0868-169x300.png\"></p>\n<p>返回workflow的主界面，点击刚刚下载的插件。</p>\n<p><img src=\"/uploads/2018/02/IMG_0867-169x300.png\"></p>\n<p>这个时候，复制的链接已经自动粘贴到了workflow里面。</p>\n<h4 id=\"开始下载\"><a href=\"#开始下载\" class=\"headerlink\" title=\"开始下载\"></a>开始下载</h4><p><img src=\"/uploads/2018/02/IMG_0872-169x300.png\"></p>\n<p>点击开始进行下载，这个时候会有一系列的操作自动运行。</p>\n<p>选择<code>Save Video</code>进行保存操作。</p>\n<h4 id=\"查看视频\"><a href=\"#查看视频\" class=\"headerlink\" title=\"查看视频\"></a>查看视频</h4><p>进行iPhone相册，查看下载的小视频。</p>\n<p><img src=\"/uploads/2018/02/IMG_0871-169x300.png\"></p>\n<h4 id=\"workflow中文推荐站\"><a href=\"#workflow中文推荐站\" class=\"headerlink\" title=\"workflow中文推荐站\"></a><a href=\"http://workflow.sspai.com/#/main/workflow\">workflow中文推荐站</a></h4>","site":{"data":{}},"excerpt":"","more":"<p>我经常喜欢看一些比较污的视频，这些视频基本上来自于微博。iPhone和Android有一个很大的不同，就是下载视频比较难。之前使用Pro recorder，但是这个APP有数量限制，一旦到了规定的数量，需要购买会员。下面和大家分享一下如何使用iPhone下载微博上面的小视频另一种方法。</p>\n<h4 id=\"下载Wordflow\"><a href=\"#下载Wordflow\" class=\"headerlink\" title=\"下载Wordflow\"></a>下载Wordflow</h4><p>打开App Store，搜索workflow，并进行下载</p>\n<p><img src=\"/uploads/2018/02/IMG_0863-169x300.png\"></p>\n<h4 id=\"下载workflow插件\"><a href=\"#下载workflow插件\" class=\"headerlink\" title=\"下载workflow插件\"></a>下载workflow插件</h4><p>使用iPhone的自带浏览器Safari 打开连接 <a href=\"http://workflow.sspai.com/#/main/workflow\">http://workflow.sspai.com/#/main/workflow</a> ，然后找到插件，进行下载</p>\n<p><img src=\"/uploads/2018/02/IMG_0864-169x300.png\"></p>\n<p>点击<code>获取该workflow</code>，这个时候会询问是否打开workflow，然后选择确认。</p>\n<p><img src=\"/uploads/2018/02/IMG_0865-169x300.png\"></p>\n<p>选择<code>get workflow</code> 进行安装。</p>\n<h4 id=\"下载小视频准备\"><a href=\"#下载小视频准备\" class=\"headerlink\" title=\"下载小视频准备\"></a>下载小视频准备</h4><p>打开微博你想要下载的小视频，拷贝连接</p>\n<p><img src=\"/uploads/2018/02/IMG_0868-169x300.png\"></p>\n<p>返回workflow的主界面，点击刚刚下载的插件。</p>\n<p><img src=\"/uploads/2018/02/IMG_0867-169x300.png\"></p>\n<p>这个时候，复制的链接已经自动粘贴到了workflow里面。</p>\n<h4 id=\"开始下载\"><a href=\"#开始下载\" class=\"headerlink\" title=\"开始下载\"></a>开始下载</h4><p><img src=\"/uploads/2018/02/IMG_0872-169x300.png\"></p>\n<p>点击开始进行下载，这个时候会有一系列的操作自动运行。</p>\n<p>选择<code>Save Video</code>进行保存操作。</p>\n<h4 id=\"查看视频\"><a href=\"#查看视频\" class=\"headerlink\" title=\"查看视频\"></a>查看视频</h4><p>进行iPhone相册，查看下载的小视频。</p>\n<p><img src=\"/uploads/2018/02/IMG_0871-169x300.png\"></p>\n<h4 id=\"workflow中文推荐站\"><a href=\"#workflow中文推荐站\" class=\"headerlink\" title=\"workflow中文推荐站\"></a><a href=\"http://workflow.sspai.com/#/main/workflow\">workflow中文推荐站</a></h4>"},{"title":"empty和count哪个性能会更好？","id":"694","date":"2020-10-25T12:44:59.000Z","_content":"\n### 疑问\n\n有些事情其实是比较让我感到疑惑的，就是关于使用empty和count函数，对数组判空，哪个性能会更好？\n\n一般来说，我们对数组判空，常用的就是empty和count。即：\n\n```php\nif (empty($arr)) {\n\n}\n\nif (count($arr) == 0) {\n\n}\n```\n\n### 论证\n\n是的，这两种都能实现，但是哪种性能会更好呢？所以，我做了简单对比：\n\n```php\n<?php\n\n$arr = array_fill(0, 100, 1);\n$startTime = markTime();\nfor ($i = 0; $i < 10000000; $i++) {\n    if (empty($arr)) {\n\n    }\n}\n$endTime = markTime();\necho \"使用empty判空花了: \" . (floatval($endTime) - floatval($startTime)) . \"\\n\";\n\n$startTime = markTime();\nfor ($i = 0; $i < 10000000; $i++) {\n    if (count($arr) == 0) {\n\n    }\n}\n$endTime = markTime();\necho \"使用count判空花了: \" . (floatval($endTime) - floatval($startTime)) . \"\\n\";\n\nfunction markTime()\n{\n    list($mic, $sec) = explode(\" \", microtime());\n    return $mic + $sec;\n}\n```\n\n上面的例子，我通过循环1kw次，计算前后执行的时间情况，得到了一下数据：\n\n```shell\n使用empty判空花了: 0.15395402908325\n使用count判空花了: 0.2148220539093\n```\n\n我担心某次的试验结果不准确，所以进行了多次了试验，试验结果都是一样的，那就是`empty`比`count`性能更好。\n\n### 分析\n\n对比下opcode:\n\n```shell\nphp7 -dvld.active=1 test1.php\nFinding entry points\nBranch analysis from position: 0\n1 jumps found. (Code = 62) Position 1 = -2\nfilename:       /Users/feilong/data/service/i.api-big.crep.ke.com/test1.php\nfunction name:  (null)\nnumber of ops:  4\ncompiled vars:  none\nline     #* E I O op                           fetch          ext  return  operands\n-------------------------------------------------------------------------------------\n   3     0  E >   INIT_FCALL                                               'count'\n         1        SEND_VAL                                                 <array>\n         2        DO_ICALL                                                 \n         3      > RETURN                                                   1\n\nbranch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2\npath #1: 0,\n```\n\n```shell\nphp7 -dvld.active=1 count.php\nFinding entry points\nBranch analysis from position: 0\n1 jumps found. (Code = 62) Position 1 = -2\nfilename:       /Users/feilong/data/service/test/count.php\nfunction name:  (null)\nnumber of ops:  4\ncompiled vars:  none\nline     #* E I O op                           fetch          ext  return  operands\n-------------------------------------------------------------------------------------\n   3     0  E >   INIT_FCALL                                               'count'\n         1        SEND_VAL                                                 <array>\n         2        DO_ICALL                                                 \n         3      > RETURN                                                   1\n\nbranch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2\npath #1: 0,\n\nphp7 -dvld.active=1 empty.php\nFinding entry points\nBranch analysis from position: 0\n1 jumps found. (Code = 62) Position 1 = -2\nfilename:       /Users/feilong/data/service/test/empty.php\nfunction name:  (null)\nnumber of ops:  1\ncompiled vars:  none\nline     #* E I O op                           fetch          ext  return  operands\n-------------------------------------------------------------------------------------\n   3     0  E > > RETURN                                                   1\n\nbranch: #  0; line:     3-    3; sop:     0; eop:     0; out0:  -2\npath #1: 0, \n```\n\n通过opcode，可以清晰看出，count的函数，生成的opcode总共是4行`INIT_FCALL`，`SEND_VAL`,`DO_ICALL`, `RETURN`；而empty的opcode只有`RETURN`。这是因为count是使用拓展方式，将函数加载到PHP内核，所以在执行的时候，会进行一些模块的初始化操作，而empty是在代码扫描的阶段，就已经进行了加载。所以执行效率会更高。\n\n本文链接： [https://feilong.tech/2020/10/25/empty\\_and\\_count/](https://feilong.tech/2020/10/25/empty_and_count/)","source":"_posts/empty-and-count.md","raw":"---\ntitle: empty和count哪个性能会更好？\ntags:\n  - PHP\n  - PHP7\n  - PHP源码\nid: '694'\ncategories:\n  - - PHP\n  - - PHP源码\ndate: 2020-10-25 20:44:59\n---\n\n### 疑问\n\n有些事情其实是比较让我感到疑惑的，就是关于使用empty和count函数，对数组判空，哪个性能会更好？\n\n一般来说，我们对数组判空，常用的就是empty和count。即：\n\n```php\nif (empty($arr)) {\n\n}\n\nif (count($arr) == 0) {\n\n}\n```\n\n### 论证\n\n是的，这两种都能实现，但是哪种性能会更好呢？所以，我做了简单对比：\n\n```php\n<?php\n\n$arr = array_fill(0, 100, 1);\n$startTime = markTime();\nfor ($i = 0; $i < 10000000; $i++) {\n    if (empty($arr)) {\n\n    }\n}\n$endTime = markTime();\necho \"使用empty判空花了: \" . (floatval($endTime) - floatval($startTime)) . \"\\n\";\n\n$startTime = markTime();\nfor ($i = 0; $i < 10000000; $i++) {\n    if (count($arr) == 0) {\n\n    }\n}\n$endTime = markTime();\necho \"使用count判空花了: \" . (floatval($endTime) - floatval($startTime)) . \"\\n\";\n\nfunction markTime()\n{\n    list($mic, $sec) = explode(\" \", microtime());\n    return $mic + $sec;\n}\n```\n\n上面的例子，我通过循环1kw次，计算前后执行的时间情况，得到了一下数据：\n\n```shell\n使用empty判空花了: 0.15395402908325\n使用count判空花了: 0.2148220539093\n```\n\n我担心某次的试验结果不准确，所以进行了多次了试验，试验结果都是一样的，那就是`empty`比`count`性能更好。\n\n### 分析\n\n对比下opcode:\n\n```shell\nphp7 -dvld.active=1 test1.php\nFinding entry points\nBranch analysis from position: 0\n1 jumps found. (Code = 62) Position 1 = -2\nfilename:       /Users/feilong/data/service/i.api-big.crep.ke.com/test1.php\nfunction name:  (null)\nnumber of ops:  4\ncompiled vars:  none\nline     #* E I O op                           fetch          ext  return  operands\n-------------------------------------------------------------------------------------\n   3     0  E >   INIT_FCALL                                               'count'\n         1        SEND_VAL                                                 <array>\n         2        DO_ICALL                                                 \n         3      > RETURN                                                   1\n\nbranch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2\npath #1: 0,\n```\n\n```shell\nphp7 -dvld.active=1 count.php\nFinding entry points\nBranch analysis from position: 0\n1 jumps found. (Code = 62) Position 1 = -2\nfilename:       /Users/feilong/data/service/test/count.php\nfunction name:  (null)\nnumber of ops:  4\ncompiled vars:  none\nline     #* E I O op                           fetch          ext  return  operands\n-------------------------------------------------------------------------------------\n   3     0  E >   INIT_FCALL                                               'count'\n         1        SEND_VAL                                                 <array>\n         2        DO_ICALL                                                 \n         3      > RETURN                                                   1\n\nbranch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2\npath #1: 0,\n\nphp7 -dvld.active=1 empty.php\nFinding entry points\nBranch analysis from position: 0\n1 jumps found. (Code = 62) Position 1 = -2\nfilename:       /Users/feilong/data/service/test/empty.php\nfunction name:  (null)\nnumber of ops:  1\ncompiled vars:  none\nline     #* E I O op                           fetch          ext  return  operands\n-------------------------------------------------------------------------------------\n   3     0  E > > RETURN                                                   1\n\nbranch: #  0; line:     3-    3; sop:     0; eop:     0; out0:  -2\npath #1: 0, \n```\n\n通过opcode，可以清晰看出，count的函数，生成的opcode总共是4行`INIT_FCALL`，`SEND_VAL`,`DO_ICALL`, `RETURN`；而empty的opcode只有`RETURN`。这是因为count是使用拓展方式，将函数加载到PHP内核，所以在执行的时候，会进行一些模块的初始化操作，而empty是在代码扫描的阶段，就已经进行了加载。所以执行效率会更高。\n\n本文链接： [https://feilong.tech/2020/10/25/empty\\_and\\_count/](https://feilong.tech/2020/10/25/empty_and_count/)","slug":"empty-and-count","published":1,"updated":"2022-03-12T23:52:58.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mf7001j417tg08a3y5l","content":"<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><p>有些事情其实是比较让我感到疑惑的，就是关于使用empty和count函数，对数组判空，哪个性能会更好？</p>\n<p>一般来说，我们对数组判空，常用的就是empty和count。即：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"variable\">$arr</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$arr</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"论证\"><a href=\"#论证\" class=\"headerlink\" title=\"论证\"></a>论证</h3><p>是的，这两种都能实现，但是哪种性能会更好呢？所以，我做了简单对比：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"title function_ invoke__\">array_fill</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"variable\">$startTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"variable\">$arr</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$endTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;使用empty判空花了: &quot;</span> . (<span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$endTime</span>) - <span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$startTime</span>)) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$startTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$arr</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$endTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;使用count判空花了: &quot;</span> . (<span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$endTime</span>) - <span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$startTime</span>)) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">markTime</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">list</span>(<span class=\"variable\">$mic</span>, <span class=\"variable\">$sec</span>) = <span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&quot; &quot;</span>, <span class=\"title function_ invoke__\">microtime</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$mic</span> + <span class=\"variable\">$sec</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子，我通过循环1kw次，计算前后执行的时间情况，得到了一下数据：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用empty判空花了: 0.15395402908325</span><br><span class=\"line\">使用count判空花了: 0.2148220539093</span><br></pre></td></tr></table></figure>\n\n<p>我担心某次的试验结果不准确，所以进行了多次了试验，试验结果都是一样的，那就是<code>empty</code>比<code>count</code>性能更好。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>对比下opcode:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php7 -dvld.active=1 test1.php</span><br><span class=\"line\">Finding entry points</span><br><span class=\"line\">Branch analysis from position: 0</span><br><span class=\"line\">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class=\"line\">filename:       /Users/feilong/data/service/i.api-big.crep.ke.com/test1.php</span><br><span class=\"line\">function name:  (null)</span><br><span class=\"line\">number of ops:  4</span><br><span class=\"line\">compiled vars:  none</span><br><span class=\"line\">line     #* E I O op                           fetch          ext  return  operands</span><br><span class=\"line\">-------------------------------------------------------------------------------------</span><br><span class=\"line\">   3     0  E &gt;   INIT_FCALL                                               &#x27;count&#x27;</span><br><span class=\"line\">         1        SEND_VAL                                                 &lt;array&gt;</span><br><span class=\"line\">         2        DO_ICALL                                                 </span><br><span class=\"line\">         3      &gt; RETURN                                                   1</span><br><span class=\"line\"></span><br><span class=\"line\">branch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2</span><br><span class=\"line\">path #1: 0,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php7 -dvld.active=1 count.php</span><br><span class=\"line\">Finding entry points</span><br><span class=\"line\">Branch analysis from position: 0</span><br><span class=\"line\">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class=\"line\">filename:       /Users/feilong/data/service/test/count.php</span><br><span class=\"line\">function name:  (null)</span><br><span class=\"line\">number of ops:  4</span><br><span class=\"line\">compiled vars:  none</span><br><span class=\"line\">line     #* E I O op                           fetch          ext  return  operands</span><br><span class=\"line\">-------------------------------------------------------------------------------------</span><br><span class=\"line\">   3     0  E &gt;   INIT_FCALL                                               &#x27;count&#x27;</span><br><span class=\"line\">         1        SEND_VAL                                                 &lt;array&gt;</span><br><span class=\"line\">         2        DO_ICALL                                                 </span><br><span class=\"line\">         3      &gt; RETURN                                                   1</span><br><span class=\"line\"></span><br><span class=\"line\">branch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2</span><br><span class=\"line\">path #1: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">php7 -dvld.active=1 empty.php</span><br><span class=\"line\">Finding entry points</span><br><span class=\"line\">Branch analysis from position: 0</span><br><span class=\"line\">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class=\"line\">filename:       /Users/feilong/data/service/test/empty.php</span><br><span class=\"line\">function name:  (null)</span><br><span class=\"line\">number of ops:  1</span><br><span class=\"line\">compiled vars:  none</span><br><span class=\"line\">line     #* E I O op                           fetch          ext  return  operands</span><br><span class=\"line\">-------------------------------------------------------------------------------------</span><br><span class=\"line\">   3     0  E &gt; &gt; RETURN                                                   1</span><br><span class=\"line\"></span><br><span class=\"line\">branch: #  0; line:     3-    3; sop:     0; eop:     0; out0:  -2</span><br><span class=\"line\">path #1: 0, </span><br></pre></td></tr></table></figure>\n\n<p>通过opcode，可以清晰看出，count的函数，生成的opcode总共是4行<code>INIT_FCALL</code>，<code>SEND_VAL</code>,<code>DO_ICALL</code>, <code>RETURN</code>；而empty的opcode只有<code>RETURN</code>。这是因为count是使用拓展方式，将函数加载到PHP内核，所以在执行的时候，会进行一些模块的初始化操作，而empty是在代码扫描的阶段，就已经进行了加载。所以执行效率会更高。</p>\n<p>本文链接： <a href=\"https://feilong.tech/2020/10/25/empty_and_count/\">https://feilong.tech/2020/10/25/empty_and_count&#x2F;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><p>有些事情其实是比较让我感到疑惑的，就是关于使用empty和count函数，对数组判空，哪个性能会更好？</p>\n<p>一般来说，我们对数组判空，常用的就是empty和count。即：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"variable\">$arr</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$arr</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"论证\"><a href=\"#论证\" class=\"headerlink\" title=\"论证\"></a>论证</h3><p>是的，这两种都能实现，但是哪种性能会更好呢？所以，我做了简单对比：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"title function_ invoke__\">array_fill</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"variable\">$startTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"variable\">$arr</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$endTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;使用empty判空花了: &quot;</span> . (<span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$endTime</span>) - <span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$startTime</span>)) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$startTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$arr</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$endTime</span> = <span class=\"title function_ invoke__\">markTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;使用count判空花了: &quot;</span> . (<span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$endTime</span>) - <span class=\"title function_ invoke__\">floatval</span>(<span class=\"variable\">$startTime</span>)) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">markTime</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">list</span>(<span class=\"variable\">$mic</span>, <span class=\"variable\">$sec</span>) = <span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&quot; &quot;</span>, <span class=\"title function_ invoke__\">microtime</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$mic</span> + <span class=\"variable\">$sec</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子，我通过循环1kw次，计算前后执行的时间情况，得到了一下数据：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用empty判空花了: 0.15395402908325</span><br><span class=\"line\">使用count判空花了: 0.2148220539093</span><br></pre></td></tr></table></figure>\n\n<p>我担心某次的试验结果不准确，所以进行了多次了试验，试验结果都是一样的，那就是<code>empty</code>比<code>count</code>性能更好。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>对比下opcode:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php7 -dvld.active=1 test1.php</span><br><span class=\"line\">Finding entry points</span><br><span class=\"line\">Branch analysis from position: 0</span><br><span class=\"line\">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class=\"line\">filename:       /Users/feilong/data/service/i.api-big.crep.ke.com/test1.php</span><br><span class=\"line\">function name:  (null)</span><br><span class=\"line\">number of ops:  4</span><br><span class=\"line\">compiled vars:  none</span><br><span class=\"line\">line     #* E I O op                           fetch          ext  return  operands</span><br><span class=\"line\">-------------------------------------------------------------------------------------</span><br><span class=\"line\">   3     0  E &gt;   INIT_FCALL                                               &#x27;count&#x27;</span><br><span class=\"line\">         1        SEND_VAL                                                 &lt;array&gt;</span><br><span class=\"line\">         2        DO_ICALL                                                 </span><br><span class=\"line\">         3      &gt; RETURN                                                   1</span><br><span class=\"line\"></span><br><span class=\"line\">branch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2</span><br><span class=\"line\">path #1: 0,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php7 -dvld.active=1 count.php</span><br><span class=\"line\">Finding entry points</span><br><span class=\"line\">Branch analysis from position: 0</span><br><span class=\"line\">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class=\"line\">filename:       /Users/feilong/data/service/test/count.php</span><br><span class=\"line\">function name:  (null)</span><br><span class=\"line\">number of ops:  4</span><br><span class=\"line\">compiled vars:  none</span><br><span class=\"line\">line     #* E I O op                           fetch          ext  return  operands</span><br><span class=\"line\">-------------------------------------------------------------------------------------</span><br><span class=\"line\">   3     0  E &gt;   INIT_FCALL                                               &#x27;count&#x27;</span><br><span class=\"line\">         1        SEND_VAL                                                 &lt;array&gt;</span><br><span class=\"line\">         2        DO_ICALL                                                 </span><br><span class=\"line\">         3      &gt; RETURN                                                   1</span><br><span class=\"line\"></span><br><span class=\"line\">branch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2</span><br><span class=\"line\">path #1: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">php7 -dvld.active=1 empty.php</span><br><span class=\"line\">Finding entry points</span><br><span class=\"line\">Branch analysis from position: 0</span><br><span class=\"line\">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class=\"line\">filename:       /Users/feilong/data/service/test/empty.php</span><br><span class=\"line\">function name:  (null)</span><br><span class=\"line\">number of ops:  1</span><br><span class=\"line\">compiled vars:  none</span><br><span class=\"line\">line     #* E I O op                           fetch          ext  return  operands</span><br><span class=\"line\">-------------------------------------------------------------------------------------</span><br><span class=\"line\">   3     0  E &gt; &gt; RETURN                                                   1</span><br><span class=\"line\"></span><br><span class=\"line\">branch: #  0; line:     3-    3; sop:     0; eop:     0; out0:  -2</span><br><span class=\"line\">path #1: 0, </span><br></pre></td></tr></table></figure>\n\n<p>通过opcode，可以清晰看出，count的函数，生成的opcode总共是4行<code>INIT_FCALL</code>，<code>SEND_VAL</code>,<code>DO_ICALL</code>, <code>RETURN</code>；而empty的opcode只有<code>RETURN</code>。这是因为count是使用拓展方式，将函数加载到PHP内核，所以在执行的时候，会进行一些模块的初始化操作，而empty是在代码扫描的阶段，就已经进行了加载。所以执行效率会更高。</p>\n<p>本文链接： <a href=\"https://feilong.tech/2020/10/25/empty_and_count/\">https://feilong.tech/2020/10/25/empty_and_count&#x2F;</a></p>\n"},{"title":"基于以太坊实现局域网多节点挖矿","id":"212","comments":0,"date":"2018-01-25T09:32:35.000Z","_content":"\n上一篇文章简要介绍了本地实现私有链挖矿和转账，现在这篇文章主要实现局域网下实现多个节点实现挖矿\n\n### 前提，已经安装了go-ethereum，如果没有安装请移步[基于以太坊创建私有链进行挖矿、交易](http://feilong.tech/?p=206)\n\n### 机器：Ubuntu(两个节点)，Mac(一个节点)\n\n### 创建创世节点\n\n#### 创建节点json文件\n\n```bash\n$ mkdir my_eth2\n$ cd my_eth2\n$ vim genesis.json\n{\n  \"config\": {\n        \"chainId\": 10,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    },\n  \"coinbase\"   : \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\" : \"0x20000\",\n  \"extraData\"  : \"\",\n  \"gasLimit\"   : \"0x2fefd8\",\n  \"nonce\"      : \"0x0000000000000042\",\n  \"mixhash\"    : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\"  : \"0x00\",\n  \"alloc\"      : {}\n}\n```\n\n#### 生成节点(以下使用节点1代指)\n\n```bash\n$ geth --datadir data00 init genesis.json\nWARN [01-2517:04:25] No etherbase set and no accounts found as default\nINFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/chaindata cache=16 handles=16\nINFO [01-2517:04:25] Writing custom genesis block\nINFO [01-2517:04:25] Successfully wrote genesis state         database=chaindata                                  hash=5e1fc7…d790e0\nINFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/lightchaindata cache=16 handles=16\nINFO [01-2517:04:25] Writing custom genesis block\nINFO [01-2517:04:25] Successfully wrote genesis state         database=lightchaindata                                  hash=5e1fc7…d790e0\n```\n\n#### 启动节点1\n\n```bash\n$ geth --datadir ./data00 --networkid 5201314 console\n```\n\n#### 创建账号\n\n```bash\n> personal.newAccount(\"123\")\n\"0x0b514e769e4e1990f8fb0f0f9d876d7f2b9fa5ba\"\n```\n\n### 本地创建第二个节点(以下使用节点2代指)\n\n#### 新开窗口，创建节点2\n\n```bash\n$ geth --datadir data01 init genesis.json\nWARN [01-2517:07:33] No etherbase set and no accounts found as default\nINFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/chaindata cache=16 handles=16\nINFO [01-2517:07:33] Writing custom genesis block\nINFO [01-2517:07:33] Successfully wrote genesis state         database=chaindata                                  hash=5e1fc7…d790e0\nINFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/lightchaindata cache=16 handles=16\nINFO [01-2517:07:33] Writing custom genesis block\nINFO [01-2517:07:33] Successfully wrote genesis state         database=lightchaindata                                  hash=5e1fc7…d790e0\n```\n\n#### 运行节点2\n\n```bash\n$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console\n```\n\n#### 创建节点2的账号\n\n```bash\n > personal.newAccount(\"123\")\n\"0x3babf1eeb8d5d29acc4d1f6408529b36b4e6f880\"\n```\n\n### 在Mac上创建新节点，以下使用(节点3代指)\n\n`创世节点的json文件要和Ubuntu一致`\n\n#### 初始化节点3\n\n```bash\n$ geth --datadir data00 init genesis.json\nWARN [01-2517:14:10] No etherbase set and no accounts found as default\nINFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/chaindata cache=16 handles=16\nINFO [01-2517:14:10] Writing custom genesis block\nINFO [01-2517:14:10] Successfully wrote genesis state         database=chaindata                                      hash=5e1fc7…d790e0\nINFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/lightchaindata cache=16 handles=16\nINFO [01-2517:14:10] Writing custom genesis block\nINFO [01-2517:14:10] Successfully wrote genesis state         database=lightchaindata                                      hash=5e1fc7…d790e0\n```\n\n#### 运行节点3\n\n```bash\n$ geth --datadir data00 --networkid 5201314 --ipcdisable --port 61911 --rpcport 8200 console #使用61911端口，保证networkid一致\n```\n\n#### 创建账号\n\n```bash\n> personal.newAccount(\"123\")\n\"0xf81b1d6c0e0835790c7e4af8a02301a67e5a0dcb\"\n```\n\n### 节点1和节点2建立联系\n\n#### 节点2运行 `> admin.nodeInfo.enode` 查看node信息\n\n```bash\n> admin.nodeInfo.enode\n\"enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910\"\n```\n\n#### 节点1添加节点2\n\n```bash\n> admin.addPeer(\"enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910\")\ntrue\n```\n\n#### 节点1和节点2运行`> net`\n\n```bash\n> net\n{\n  listening: true,\n  peerCount: 1, #说明添加成功\n  version: \"5201314\",\n  getListening: function(callback),\n  getPeerCount: function(callback),\n  getVersion: function(callback)\n}\n```\n\n### 节点1和节点3建立联系\n\n#### 节点3运行 `> admin.nodeInfo.enode` 查看node信息\n\n```bash\n>  admin.nodeInfo.enode\n\"enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911\"\n```\n\n#### 节点1添加节点3\n\n```bash\n> admin.addPeer(\"enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911\")\ntrue\n```\n\n#### 分别查看节点1和节点3链接情况\n\n节点1\n\n```bash\n> net\n{\n  listening: true,\n  peerCount: 2, ##节点1连接两个节点\n  version: \"5201314\",\n  getListening: function(callback),\n  getPeerCount: function(callback),\n  getVersion: function(callback)\n}\n```\n\n节点3\n\n```bash\n> net\n{\n  listening: true,\n  peerCount: 1,\n  version: \"5201314\",\n  getListening: function(callback),\n  getPeerCount: function(callback),\n  getVersion: function(callback)\n}\n```\n\n### 节点挖矿测试\n\n#### 使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\n\n### 遇到的坑\n\n*   要保证创世节点的json文件一致\n*   保证在统一局域网内，使用Telnet命令测试\n*   节点2和节点3的端口注意不要重复","source":"_posts/eth-2.md","raw":"---\ntitle: 基于以太坊实现局域网多节点挖矿\ntags:\n  - 以太坊\n  - 区块链\n  - 私有链\nid: '212'\ncategories:\n  - - Linux\n  - - 以太坊\ncomments: false\ndate: 2018-01-25 17:32:35\n---\n\n上一篇文章简要介绍了本地实现私有链挖矿和转账，现在这篇文章主要实现局域网下实现多个节点实现挖矿\n\n### 前提，已经安装了go-ethereum，如果没有安装请移步[基于以太坊创建私有链进行挖矿、交易](http://feilong.tech/?p=206)\n\n### 机器：Ubuntu(两个节点)，Mac(一个节点)\n\n### 创建创世节点\n\n#### 创建节点json文件\n\n```bash\n$ mkdir my_eth2\n$ cd my_eth2\n$ vim genesis.json\n{\n  \"config\": {\n        \"chainId\": 10,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    },\n  \"coinbase\"   : \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\" : \"0x20000\",\n  \"extraData\"  : \"\",\n  \"gasLimit\"   : \"0x2fefd8\",\n  \"nonce\"      : \"0x0000000000000042\",\n  \"mixhash\"    : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\"  : \"0x00\",\n  \"alloc\"      : {}\n}\n```\n\n#### 生成节点(以下使用节点1代指)\n\n```bash\n$ geth --datadir data00 init genesis.json\nWARN [01-2517:04:25] No etherbase set and no accounts found as default\nINFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/chaindata cache=16 handles=16\nINFO [01-2517:04:25] Writing custom genesis block\nINFO [01-2517:04:25] Successfully wrote genesis state         database=chaindata                                  hash=5e1fc7…d790e0\nINFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/lightchaindata cache=16 handles=16\nINFO [01-2517:04:25] Writing custom genesis block\nINFO [01-2517:04:25] Successfully wrote genesis state         database=lightchaindata                                  hash=5e1fc7…d790e0\n```\n\n#### 启动节点1\n\n```bash\n$ geth --datadir ./data00 --networkid 5201314 console\n```\n\n#### 创建账号\n\n```bash\n> personal.newAccount(\"123\")\n\"0x0b514e769e4e1990f8fb0f0f9d876d7f2b9fa5ba\"\n```\n\n### 本地创建第二个节点(以下使用节点2代指)\n\n#### 新开窗口，创建节点2\n\n```bash\n$ geth --datadir data01 init genesis.json\nWARN [01-2517:07:33] No etherbase set and no accounts found as default\nINFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/chaindata cache=16 handles=16\nINFO [01-2517:07:33] Writing custom genesis block\nINFO [01-2517:07:33] Successfully wrote genesis state         database=chaindata                                  hash=5e1fc7…d790e0\nINFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/lightchaindata cache=16 handles=16\nINFO [01-2517:07:33] Writing custom genesis block\nINFO [01-2517:07:33] Successfully wrote genesis state         database=lightchaindata                                  hash=5e1fc7…d790e0\n```\n\n#### 运行节点2\n\n```bash\n$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console\n```\n\n#### 创建节点2的账号\n\n```bash\n > personal.newAccount(\"123\")\n\"0x3babf1eeb8d5d29acc4d1f6408529b36b4e6f880\"\n```\n\n### 在Mac上创建新节点，以下使用(节点3代指)\n\n`创世节点的json文件要和Ubuntu一致`\n\n#### 初始化节点3\n\n```bash\n$ geth --datadir data00 init genesis.json\nWARN [01-2517:14:10] No etherbase set and no accounts found as default\nINFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/chaindata cache=16 handles=16\nINFO [01-2517:14:10] Writing custom genesis block\nINFO [01-2517:14:10] Successfully wrote genesis state         database=chaindata                                      hash=5e1fc7…d790e0\nINFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/lightchaindata cache=16 handles=16\nINFO [01-2517:14:10] Writing custom genesis block\nINFO [01-2517:14:10] Successfully wrote genesis state         database=lightchaindata                                      hash=5e1fc7…d790e0\n```\n\n#### 运行节点3\n\n```bash\n$ geth --datadir data00 --networkid 5201314 --ipcdisable --port 61911 --rpcport 8200 console #使用61911端口，保证networkid一致\n```\n\n#### 创建账号\n\n```bash\n> personal.newAccount(\"123\")\n\"0xf81b1d6c0e0835790c7e4af8a02301a67e5a0dcb\"\n```\n\n### 节点1和节点2建立联系\n\n#### 节点2运行 `> admin.nodeInfo.enode` 查看node信息\n\n```bash\n> admin.nodeInfo.enode\n\"enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910\"\n```\n\n#### 节点1添加节点2\n\n```bash\n> admin.addPeer(\"enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910\")\ntrue\n```\n\n#### 节点1和节点2运行`> net`\n\n```bash\n> net\n{\n  listening: true,\n  peerCount: 1, #说明添加成功\n  version: \"5201314\",\n  getListening: function(callback),\n  getPeerCount: function(callback),\n  getVersion: function(callback)\n}\n```\n\n### 节点1和节点3建立联系\n\n#### 节点3运行 `> admin.nodeInfo.enode` 查看node信息\n\n```bash\n>  admin.nodeInfo.enode\n\"enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911\"\n```\n\n#### 节点1添加节点3\n\n```bash\n> admin.addPeer(\"enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911\")\ntrue\n```\n\n#### 分别查看节点1和节点3链接情况\n\n节点1\n\n```bash\n> net\n{\n  listening: true,\n  peerCount: 2, ##节点1连接两个节点\n  version: \"5201314\",\n  getListening: function(callback),\n  getPeerCount: function(callback),\n  getVersion: function(callback)\n}\n```\n\n节点3\n\n```bash\n> net\n{\n  listening: true,\n  peerCount: 1,\n  version: \"5201314\",\n  getListening: function(callback),\n  getPeerCount: function(callback),\n  getVersion: function(callback)\n}\n```\n\n### 节点挖矿测试\n\n#### 使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\n\n### 遇到的坑\n\n*   要保证创世节点的json文件一致\n*   保证在统一局域网内，使用Telnet命令测试\n*   节点2和节点3的端口注意不要重复","slug":"eth-2","published":1,"updated":"2022-03-12T23:52:58.743Z","layout":"post","photos":[],"link":"","_id":"cl0oi8mf8001m417terkhc0az","content":"<p>上一篇文章简要介绍了本地实现私有链挖矿和转账，现在这篇文章主要实现局域网下实现多个节点实现挖矿</p>\n<h3 id=\"前提，已经安装了go-ethereum，如果没有安装请移步基于以太坊创建私有链进行挖矿、交易\"><a href=\"#前提，已经安装了go-ethereum，如果没有安装请移步基于以太坊创建私有链进行挖矿、交易\" class=\"headerlink\" title=\"前提，已经安装了go-ethereum，如果没有安装请移步基于以太坊创建私有链进行挖矿、交易\"></a>前提，已经安装了go-ethereum，如果没有安装请移步<a href=\"http://feilong.tech/?p=206\">基于以太坊创建私有链进行挖矿、交易</a></h3><h3 id=\"机器：Ubuntu-两个节点-，Mac-一个节点\"><a href=\"#机器：Ubuntu-两个节点-，Mac-一个节点\" class=\"headerlink\" title=\"机器：Ubuntu(两个节点)，Mac(一个节点)\"></a>机器：Ubuntu(两个节点)，Mac(一个节点)</h3><h3 id=\"创建创世节点\"><a href=\"#创建创世节点\" class=\"headerlink\" title=\"创建创世节点\"></a>创建创世节点</h3><h4 id=\"创建节点json文件\"><a href=\"#创建节点json文件\" class=\"headerlink\" title=\"创建节点json文件\"></a>创建节点json文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> my_eth2</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_eth2</span><br><span class=\"line\">$ vim genesis.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;config&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;chainId&quot;</span>: 10,</span><br><span class=\"line\">        <span class=\"string\">&quot;homesteadBlock&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;eip155Block&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;eip158Block&quot;</span>: 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;coinbase&quot;</span>   : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;difficulty&quot;</span> : <span class=\"string\">&quot;0x20000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;extraData&quot;</span>  : <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gasLimit&quot;</span>   : <span class=\"string\">&quot;0x2fefd8&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;nonce&quot;</span>      : <span class=\"string\">&quot;0x0000000000000042&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;mixhash&quot;</span>    : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;parentHash&quot;</span> : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;timestamp&quot;</span>  : <span class=\"string\">&quot;0x00&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;alloc&quot;</span>      : &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成节点-以下使用节点1代指\"><a href=\"#生成节点-以下使用节点1代指\" class=\"headerlink\" title=\"生成节点(以下使用节点1代指)\"></a>生成节点(以下使用节点1代指)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 init genesis.json</span><br><span class=\"line\">WARN [01-2517:04:25] No etherbase <span class=\"built_in\">set</span> and no accounts found as default</span><br><span class=\"line\">INFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/chaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:04:25] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:04:25] Successfully wrote genesis state         database=chaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br><span class=\"line\">INFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/lightchaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:04:25] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:04:25] Successfully wrote genesis state         database=lightchaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动节点1\"><a href=\"#启动节点1\" class=\"headerlink\" title=\"启动节点1\"></a>启动节点1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir ./data00 --networkid 5201314 console</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0x0b514e769e4e1990f8fb0f0f9d876d7f2b9fa5ba&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地创建第二个节点-以下使用节点2代指\"><a href=\"#本地创建第二个节点-以下使用节点2代指\" class=\"headerlink\" title=\"本地创建第二个节点(以下使用节点2代指)\"></a>本地创建第二个节点(以下使用节点2代指)</h3><h4 id=\"新开窗口，创建节点2\"><a href=\"#新开窗口，创建节点2\" class=\"headerlink\" title=\"新开窗口，创建节点2\"></a>新开窗口，创建节点2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 init genesis.json</span><br><span class=\"line\">WARN [01-2517:07:33] No etherbase <span class=\"built_in\">set</span> and no accounts found as default</span><br><span class=\"line\">INFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/chaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:07:33] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:07:33] Successfully wrote genesis state         database=chaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br><span class=\"line\">INFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/lightchaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:07:33] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:07:33] Successfully wrote genesis state         database=lightchaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行节点2\"><a href=\"#运行节点2\" class=\"headerlink\" title=\"运行节点2\"></a>运行节点2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建节点2的账号\"><a href=\"#创建节点2的账号\" class=\"headerlink\" title=\"创建节点2的账号\"></a>创建节点2的账号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0x3babf1eeb8d5d29acc4d1f6408529b36b4e6f880&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在Mac上创建新节点，以下使用-节点3代指\"><a href=\"#在Mac上创建新节点，以下使用-节点3代指\" class=\"headerlink\" title=\"在Mac上创建新节点，以下使用(节点3代指)\"></a>在Mac上创建新节点，以下使用(节点3代指)</h3><p><code>创世节点的json文件要和Ubuntu一致</code></p>\n<h4 id=\"初始化节点3\"><a href=\"#初始化节点3\" class=\"headerlink\" title=\"初始化节点3\"></a>初始化节点3</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 init genesis.json</span><br><span class=\"line\">WARN [01-2517:14:10] No etherbase <span class=\"built_in\">set</span> and no accounts found as default</span><br><span class=\"line\">INFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/chaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:14:10] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:14:10] Successfully wrote genesis state         database=chaindata                                      <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br><span class=\"line\">INFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/lightchaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:14:10] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:14:10] Successfully wrote genesis state         database=lightchaindata                                      <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行节点3\"><a href=\"#运行节点3\" class=\"headerlink\" title=\"运行节点3\"></a>运行节点3</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 --networkid 5201314 --ipcdisable --port 61911 --rpcport 8200 console <span class=\"comment\">#使用61911端口，保证networkid一致</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建账号-1\"><a href=\"#创建账号-1\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0xf81b1d6c0e0835790c7e4af8a02301a67e5a0dcb&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点1和节点2建立联系\"><a href=\"#节点1和节点2建立联系\" class=\"headerlink\" title=\"节点1和节点2建立联系\"></a>节点1和节点2建立联系</h3><h4 id=\"节点2运行-gt-admin-nodeInfo-enode-查看node信息\"><a href=\"#节点2运行-gt-admin-nodeInfo-enode-查看node信息\" class=\"headerlink\" title=\"节点2运行 &gt; admin.nodeInfo.enode 查看node信息\"></a>节点2运行 <code>&gt; admin.nodeInfo.enode</code> 查看node信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.nodeInfo.enode</span><br><span class=\"line\"><span class=\"string\">&quot;enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点1添加节点2\"><a href=\"#节点1添加节点2\" class=\"headerlink\" title=\"节点1添加节点2\"></a>节点1添加节点2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.addPeer(<span class=\"string\">&quot;enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点1和节点2运行-gt-net\"><a href=\"#节点1和节点2运行-gt-net\" class=\"headerlink\" title=\"节点1和节点2运行&gt; net\"></a>节点1和节点2运行<code>&gt; net</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listening: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  peerCount: 1, <span class=\"comment\">#说明添加成功</span></span><br><span class=\"line\">  version: <span class=\"string\">&quot;5201314&quot;</span>,</span><br><span class=\"line\">  getListening: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getPeerCount: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getVersion: <span class=\"keyword\">function</span>(callback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点1和节点3建立联系\"><a href=\"#节点1和节点3建立联系\" class=\"headerlink\" title=\"节点1和节点3建立联系\"></a>节点1和节点3建立联系</h3><h4 id=\"节点3运行-gt-admin-nodeInfo-enode-查看node信息\"><a href=\"#节点3运行-gt-admin-nodeInfo-enode-查看node信息\" class=\"headerlink\" title=\"节点3运行 &gt; admin.nodeInfo.enode 查看node信息\"></a>节点3运行 <code>&gt; admin.nodeInfo.enode</code> 查看node信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  admin.nodeInfo.enode</span><br><span class=\"line\"><span class=\"string\">&quot;enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点1添加节点3\"><a href=\"#节点1添加节点3\" class=\"headerlink\" title=\"节点1添加节点3\"></a>节点1添加节点3</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.addPeer(<span class=\"string\">&quot;enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分别查看节点1和节点3链接情况\"><a href=\"#分别查看节点1和节点3链接情况\" class=\"headerlink\" title=\"分别查看节点1和节点3链接情况\"></a>分别查看节点1和节点3链接情况</h4><p>节点1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listening: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  peerCount: 2, <span class=\"comment\">##节点1连接两个节点</span></span><br><span class=\"line\">  version: <span class=\"string\">&quot;5201314&quot;</span>,</span><br><span class=\"line\">  getListening: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getPeerCount: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getVersion: <span class=\"keyword\">function</span>(callback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>节点3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listening: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  peerCount: 1,</span><br><span class=\"line\">  version: <span class=\"string\">&quot;5201314&quot;</span>,</span><br><span class=\"line\">  getListening: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getPeerCount: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getVersion: <span class=\"keyword\">function</span>(callback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点挖矿测试\"><a href=\"#节点挖矿测试\" class=\"headerlink\" title=\"节点挖矿测试\"></a>节点挖矿测试</h3><h4 id=\"使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\"><a href=\"#使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\" class=\"headerlink\" title=\"使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\"></a>使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）</h4><h3 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h3><ul>\n<li>要保证创世节点的json文件一致</li>\n<li>保证在统一局域网内，使用Telnet命令测试</li>\n<li>节点2和节点3的端口注意不要重复</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇文章简要介绍了本地实现私有链挖矿和转账，现在这篇文章主要实现局域网下实现多个节点实现挖矿</p>\n<h3 id=\"前提，已经安装了go-ethereum，如果没有安装请移步基于以太坊创建私有链进行挖矿、交易\"><a href=\"#前提，已经安装了go-ethereum，如果没有安装请移步基于以太坊创建私有链进行挖矿、交易\" class=\"headerlink\" title=\"前提，已经安装了go-ethereum，如果没有安装请移步基于以太坊创建私有链进行挖矿、交易\"></a>前提，已经安装了go-ethereum，如果没有安装请移步<a href=\"http://feilong.tech/?p=206\">基于以太坊创建私有链进行挖矿、交易</a></h3><h3 id=\"机器：Ubuntu-两个节点-，Mac-一个节点\"><a href=\"#机器：Ubuntu-两个节点-，Mac-一个节点\" class=\"headerlink\" title=\"机器：Ubuntu(两个节点)，Mac(一个节点)\"></a>机器：Ubuntu(两个节点)，Mac(一个节点)</h3><h3 id=\"创建创世节点\"><a href=\"#创建创世节点\" class=\"headerlink\" title=\"创建创世节点\"></a>创建创世节点</h3><h4 id=\"创建节点json文件\"><a href=\"#创建节点json文件\" class=\"headerlink\" title=\"创建节点json文件\"></a>创建节点json文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> my_eth2</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_eth2</span><br><span class=\"line\">$ vim genesis.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;config&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;chainId&quot;</span>: 10,</span><br><span class=\"line\">        <span class=\"string\">&quot;homesteadBlock&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;eip155Block&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;eip158Block&quot;</span>: 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;coinbase&quot;</span>   : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;difficulty&quot;</span> : <span class=\"string\">&quot;0x20000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;extraData&quot;</span>  : <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gasLimit&quot;</span>   : <span class=\"string\">&quot;0x2fefd8&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;nonce&quot;</span>      : <span class=\"string\">&quot;0x0000000000000042&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;mixhash&quot;</span>    : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;parentHash&quot;</span> : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;timestamp&quot;</span>  : <span class=\"string\">&quot;0x00&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;alloc&quot;</span>      : &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成节点-以下使用节点1代指\"><a href=\"#生成节点-以下使用节点1代指\" class=\"headerlink\" title=\"生成节点(以下使用节点1代指)\"></a>生成节点(以下使用节点1代指)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 init genesis.json</span><br><span class=\"line\">WARN [01-2517:04:25] No etherbase <span class=\"built_in\">set</span> and no accounts found as default</span><br><span class=\"line\">INFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/chaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:04:25] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:04:25] Successfully wrote genesis state         database=chaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br><span class=\"line\">INFO [01-2517:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/lightchaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:04:25] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:04:25] Successfully wrote genesis state         database=lightchaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动节点1\"><a href=\"#启动节点1\" class=\"headerlink\" title=\"启动节点1\"></a>启动节点1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir ./data00 --networkid 5201314 console</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0x0b514e769e4e1990f8fb0f0f9d876d7f2b9fa5ba&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地创建第二个节点-以下使用节点2代指\"><a href=\"#本地创建第二个节点-以下使用节点2代指\" class=\"headerlink\" title=\"本地创建第二个节点(以下使用节点2代指)\"></a>本地创建第二个节点(以下使用节点2代指)</h3><h4 id=\"新开窗口，创建节点2\"><a href=\"#新开窗口，创建节点2\" class=\"headerlink\" title=\"新开窗口，创建节点2\"></a>新开窗口，创建节点2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 init genesis.json</span><br><span class=\"line\">WARN [01-2517:07:33] No etherbase <span class=\"built_in\">set</span> and no accounts found as default</span><br><span class=\"line\">INFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/chaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:07:33] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:07:33] Successfully wrote genesis state         database=chaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br><span class=\"line\">INFO [01-2517:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/lightchaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:07:33] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:07:33] Successfully wrote genesis state         database=lightchaindata                                  <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行节点2\"><a href=\"#运行节点2\" class=\"headerlink\" title=\"运行节点2\"></a>运行节点2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建节点2的账号\"><a href=\"#创建节点2的账号\" class=\"headerlink\" title=\"创建节点2的账号\"></a>创建节点2的账号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0x3babf1eeb8d5d29acc4d1f6408529b36b4e6f880&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在Mac上创建新节点，以下使用-节点3代指\"><a href=\"#在Mac上创建新节点，以下使用-节点3代指\" class=\"headerlink\" title=\"在Mac上创建新节点，以下使用(节点3代指)\"></a>在Mac上创建新节点，以下使用(节点3代指)</h3><p><code>创世节点的json文件要和Ubuntu一致</code></p>\n<h4 id=\"初始化节点3\"><a href=\"#初始化节点3\" class=\"headerlink\" title=\"初始化节点3\"></a>初始化节点3</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 init genesis.json</span><br><span class=\"line\">WARN [01-2517:14:10] No etherbase <span class=\"built_in\">set</span> and no accounts found as default</span><br><span class=\"line\">INFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/chaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:14:10] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:14:10] Successfully wrote genesis state         database=chaindata                                      <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br><span class=\"line\">INFO [01-2517:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/lightchaindata cache=16 handles=16</span><br><span class=\"line\">INFO [01-2517:14:10] Writing custom genesis block</span><br><span class=\"line\">INFO [01-2517:14:10] Successfully wrote genesis state         database=lightchaindata                                      <span class=\"built_in\">hash</span>=5e1fc7…d790e0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行节点3\"><a href=\"#运行节点3\" class=\"headerlink\" title=\"运行节点3\"></a>运行节点3</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 --networkid 5201314 --ipcdisable --port 61911 --rpcport 8200 console <span class=\"comment\">#使用61911端口，保证networkid一致</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建账号-1\"><a href=\"#创建账号-1\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0xf81b1d6c0e0835790c7e4af8a02301a67e5a0dcb&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点1和节点2建立联系\"><a href=\"#节点1和节点2建立联系\" class=\"headerlink\" title=\"节点1和节点2建立联系\"></a>节点1和节点2建立联系</h3><h4 id=\"节点2运行-gt-admin-nodeInfo-enode-查看node信息\"><a href=\"#节点2运行-gt-admin-nodeInfo-enode-查看node信息\" class=\"headerlink\" title=\"节点2运行 &gt; admin.nodeInfo.enode 查看node信息\"></a>节点2运行 <code>&gt; admin.nodeInfo.enode</code> 查看node信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.nodeInfo.enode</span><br><span class=\"line\"><span class=\"string\">&quot;enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点1添加节点2\"><a href=\"#节点1添加节点2\" class=\"headerlink\" title=\"节点1添加节点2\"></a>节点1添加节点2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.addPeer(<span class=\"string\">&quot;enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点1和节点2运行-gt-net\"><a href=\"#节点1和节点2运行-gt-net\" class=\"headerlink\" title=\"节点1和节点2运行&gt; net\"></a>节点1和节点2运行<code>&gt; net</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listening: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  peerCount: 1, <span class=\"comment\">#说明添加成功</span></span><br><span class=\"line\">  version: <span class=\"string\">&quot;5201314&quot;</span>,</span><br><span class=\"line\">  getListening: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getPeerCount: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getVersion: <span class=\"keyword\">function</span>(callback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点1和节点3建立联系\"><a href=\"#节点1和节点3建立联系\" class=\"headerlink\" title=\"节点1和节点3建立联系\"></a>节点1和节点3建立联系</h3><h4 id=\"节点3运行-gt-admin-nodeInfo-enode-查看node信息\"><a href=\"#节点3运行-gt-admin-nodeInfo-enode-查看node信息\" class=\"headerlink\" title=\"节点3运行 &gt; admin.nodeInfo.enode 查看node信息\"></a>节点3运行 <code>&gt; admin.nodeInfo.enode</code> 查看node信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  admin.nodeInfo.enode</span><br><span class=\"line\"><span class=\"string\">&quot;enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点1添加节点3\"><a href=\"#节点1添加节点3\" class=\"headerlink\" title=\"节点1添加节点3\"></a>节点1添加节点3</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.addPeer(<span class=\"string\">&quot;enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分别查看节点1和节点3链接情况\"><a href=\"#分别查看节点1和节点3链接情况\" class=\"headerlink\" title=\"分别查看节点1和节点3链接情况\"></a>分别查看节点1和节点3链接情况</h4><p>节点1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listening: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  peerCount: 2, <span class=\"comment\">##节点1连接两个节点</span></span><br><span class=\"line\">  version: <span class=\"string\">&quot;5201314&quot;</span>,</span><br><span class=\"line\">  getListening: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getPeerCount: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getVersion: <span class=\"keyword\">function</span>(callback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>节点3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listening: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  peerCount: 1,</span><br><span class=\"line\">  version: <span class=\"string\">&quot;5201314&quot;</span>,</span><br><span class=\"line\">  getListening: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getPeerCount: <span class=\"keyword\">function</span>(callback),</span><br><span class=\"line\">  getVersion: <span class=\"keyword\">function</span>(callback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点挖矿测试\"><a href=\"#节点挖矿测试\" class=\"headerlink\" title=\"节点挖矿测试\"></a>节点挖矿测试</h3><h4 id=\"使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\"><a href=\"#使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\" class=\"headerlink\" title=\"使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）\"></a>使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）</h4><h3 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h3><ul>\n<li>要保证创世节点的json文件一致</li>\n<li>保证在统一局域网内，使用Telnet命令测试</li>\n<li>节点2和节点3的端口注意不要重复</li>\n</ul>\n"},{"title":"【以太坊】编译智能合约","id":"764","date":"2021-05-24T14:22:19.000Z","_content":"\n#### 智能合约\n\n说到以太坊开发，就肯定绕不开智能合约。\n\n智能合约，其实是一种协议，就相当于是一种规则，他规定了交易、转账等。智能合约也可以理解成是“一段代码”，开发在通过执行“这段代码”，获得一个结果，这个结果可能是转账结果，或者其他等等。\n\n在开发以太坊的时候，开发者需要先编写智能合约，然后将智能合约部署到对应的以太坊节点，以太坊被部署到不同的服务器上，节点共同维护以太坊公链，调用者通过调用以太坊接口，访问智能合约，获得对应的结果。\n\n![](/uploads/2021/05/企业微信20210524-220210.png)\n\n#### remix\n\n以太坊也给开发者准备了响应的开发工具————remix，线上地址：[remix-online](https://remix.ethereum.org/#optimize=false&runs=200&evmVersion=null \"remix-online\")，同时也提供了IDE开发工具，[remix-desktop](https://github.com/ethereum/remix-desktop \"remix-desktop\")\n\n![](/uploads/2021/05/企业微信20210524-221218.png)\n\n##### 使用方式\n\n和普通的IDE工具一样，remix也支持语法高亮和代码提示，以及报错信息\n\n![](/uploads/2021/05/企业微信20210524-222130.png)\n\n开启自动编译之后，就能实时的预览编辑结果，方便我们及时更正语法错误。\n\n##### 简单的智能合约\n\n我们编写一个简单的加法智能合约\n\n```solidity\ncontract Test {\n    function add(uint8 arg1, uint8 arg2) public pure returns (uint8) {\n        return arg1 + arg2;\n    }\n}\n```\n\n![](/uploads/2021/05/企业微信20210524-221218.png)\n\n一个简单的智能合约就实现了。\n\n本文地址： [https://feilong.tech/2021/05/24/eth-contract-demo/](https://feilong.tech/2021/05/24/eth-contract-demo/)","source":"_posts/eth-contract-demo.md","raw":"---\ntitle: 【以太坊】编译智能合约\ntags:\n  - 以太坊\n  - 区块链\nid: '764'\ncategories:\n  - - Go\n  - - PHP\n  - - 以太坊\ndate: 2021-05-24 22:22:19\n---\n\n#### 智能合约\n\n说到以太坊开发，就肯定绕不开智能合约。\n\n智能合约，其实是一种协议，就相当于是一种规则，他规定了交易、转账等。智能合约也可以理解成是“一段代码”，开发在通过执行“这段代码”，获得一个结果，这个结果可能是转账结果，或者其他等等。\n\n在开发以太坊的时候，开发者需要先编写智能合约，然后将智能合约部署到对应的以太坊节点，以太坊被部署到不同的服务器上，节点共同维护以太坊公链，调用者通过调用以太坊接口，访问智能合约，获得对应的结果。\n\n![](/uploads/2021/05/企业微信20210524-220210.png)\n\n#### remix\n\n以太坊也给开发者准备了响应的开发工具————remix，线上地址：[remix-online](https://remix.ethereum.org/#optimize=false&runs=200&evmVersion=null \"remix-online\")，同时也提供了IDE开发工具，[remix-desktop](https://github.com/ethereum/remix-desktop \"remix-desktop\")\n\n![](/uploads/2021/05/企业微信20210524-221218.png)\n\n##### 使用方式\n\n和普通的IDE工具一样，remix也支持语法高亮和代码提示，以及报错信息\n\n![](/uploads/2021/05/企业微信20210524-222130.png)\n\n开启自动编译之后，就能实时的预览编辑结果，方便我们及时更正语法错误。\n\n##### 简单的智能合约\n\n我们编写一个简单的加法智能合约\n\n```solidity\ncontract Test {\n    function add(uint8 arg1, uint8 arg2) public pure returns (uint8) {\n        return arg1 + arg2;\n    }\n}\n```\n\n![](/uploads/2021/05/企业微信20210524-221218.png)\n\n一个简单的智能合约就实现了。\n\n本文地址： [https://feilong.tech/2021/05/24/eth-contract-demo/](https://feilong.tech/2021/05/24/eth-contract-demo/)","slug":"eth-contract-demo","published":1,"updated":"2022-03-13T01:18:42.687Z","_id":"cl0oi8mfc001r417tacy4gtcj","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"智能合约\"><a href=\"#智能合约\" class=\"headerlink\" title=\"智能合约\"></a>智能合约</h4><p>说到以太坊开发，就肯定绕不开智能合约。</p>\n<p>智能合约，其实是一种协议，就相当于是一种规则，他规定了交易、转账等。智能合约也可以理解成是“一段代码”，开发在通过执行“这段代码”，获得一个结果，这个结果可能是转账结果，或者其他等等。</p>\n<p>在开发以太坊的时候，开发者需要先编写智能合约，然后将智能合约部署到对应的以太坊节点，以太坊被部署到不同的服务器上，节点共同维护以太坊公链，调用者通过调用以太坊接口，访问智能合约，获得对应的结果。</p>\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-220210.png\"></p>\n<h4 id=\"remix\"><a href=\"#remix\" class=\"headerlink\" title=\"remix\"></a>remix</h4><p>以太坊也给开发者准备了响应的开发工具————remix，线上地址：<a href=\"https://remix.ethereum.org/#optimize=false&runs=200&evmVersion=null\" title=\"remix-online\">remix-online</a>，同时也提供了IDE开发工具，<a href=\"https://github.com/ethereum/remix-desktop\" title=\"remix-desktop\">remix-desktop</a></p>\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-221218.png\"></p>\n<h5 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h5><p>和普通的IDE工具一样，remix也支持语法高亮和代码提示，以及报错信息</p>\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-222130.png\"></p>\n<p>开启自动编译之后，就能实时的预览编辑结果，方便我们及时更正语法错误。</p>\n<h5 id=\"简单的智能合约\"><a href=\"#简单的智能合约\" class=\"headerlink\" title=\"简单的智能合约\"></a>简单的智能合约</h5><p>我们编写一个简单的加法智能合约</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Test &#123;</span><br><span class=\"line\">    function add(uint8 arg1, uint8 arg2) public pure returns (uint8) &#123;</span><br><span class=\"line\">        return arg1 + arg2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-221218.png\"></p>\n<p>一个简单的智能合约就实现了。</p>\n<p>本文地址： <a href=\"https://feilong.tech/2021/05/24/eth-contract-demo/\">https://feilong.tech/2021/05/24/eth-contract-demo/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"智能合约\"><a href=\"#智能合约\" class=\"headerlink\" title=\"智能合约\"></a>智能合约</h4><p>说到以太坊开发，就肯定绕不开智能合约。</p>\n<p>智能合约，其实是一种协议，就相当于是一种规则，他规定了交易、转账等。智能合约也可以理解成是“一段代码”，开发在通过执行“这段代码”，获得一个结果，这个结果可能是转账结果，或者其他等等。</p>\n<p>在开发以太坊的时候，开发者需要先编写智能合约，然后将智能合约部署到对应的以太坊节点，以太坊被部署到不同的服务器上，节点共同维护以太坊公链，调用者通过调用以太坊接口，访问智能合约，获得对应的结果。</p>\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-220210.png\"></p>\n<h4 id=\"remix\"><a href=\"#remix\" class=\"headerlink\" title=\"remix\"></a>remix</h4><p>以太坊也给开发者准备了响应的开发工具————remix，线上地址：<a href=\"https://remix.ethereum.org/#optimize=false&runs=200&evmVersion=null\" title=\"remix-online\">remix-online</a>，同时也提供了IDE开发工具，<a href=\"https://github.com/ethereum/remix-desktop\" title=\"remix-desktop\">remix-desktop</a></p>\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-221218.png\"></p>\n<h5 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h5><p>和普通的IDE工具一样，remix也支持语法高亮和代码提示，以及报错信息</p>\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-222130.png\"></p>\n<p>开启自动编译之后，就能实时的预览编辑结果，方便我们及时更正语法错误。</p>\n<h5 id=\"简单的智能合约\"><a href=\"#简单的智能合约\" class=\"headerlink\" title=\"简单的智能合约\"></a>简单的智能合约</h5><p>我们编写一个简单的加法智能合约</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Test &#123;</span><br><span class=\"line\">    function add(uint8 arg1, uint8 arg2) public pure returns (uint8) &#123;</span><br><span class=\"line\">        return arg1 + arg2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2021/05/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120210524-221218.png\"></p>\n<p>一个简单的智能合约就实现了。</p>\n<p>本文地址： <a href=\"https://feilong.tech/2021/05/24/eth-contract-demo/\">https://feilong.tech/2021/05/24/eth-contract-demo/</a></p>\n"},{"title":"基于以太坊创建私有链进行挖矿、交易","id":"206","comments":0,"date":"2018-01-23T06:18:36.000Z","_content":"\n要说2018年什么最火，无疑就是区块链。比特币的疯狂上涨，每个比特币超过了1万美金。随之而来的就是区块链的技术。 以太坊（Ethereum）并不是一个机构，而是一款能够在区块链上实现智能合约、开源的底层系统。本文主要是通过以太坊，创建私有链，实现挖矿和交易。\n\n#### 安装golang\n\n##### 克隆项目\n\n```bash\n$ git clone https://github.com/golang/go.git\n```\n\n##### 安装go 1.4\n\ngolang 是自编译，所以如果安装版本 >=1.5 需要先编译1.4版本，然后再安装其他版本\n\n```bash\n$ cp -r go/ $HOME/go1.4 #复制一份文件夹，用于编译1.4版本\n$ cd $HOME/go1.4\n$ git checkout release-branch.go1.4\n$ cd src\n$ ./make.bash # 进行编译\n```\n\n编译之后，开始安装go 1.9版本\n\n```bash\n$ cd $HOME/install/go\n$ git checkout release-branch.go1.9\n$ cd src/\n$ ./all.bash #安装1.9版本\n##### Building Go bootstrap tool.\ncmd/dist\n\n##### Building Go toolchain using /home/test/go1.4.\nbootstrap/cmd/internal/dwarf\nbootstrap/cmd/internal/objabi\nbootstrap/cmd/internal/src\nbootstrap/cmd/internal/sys\nbootstrap/cmd/internal/obj\nbootstrap/cmd/internal/obj/arm\nbootstrap/cmd/internal/obj/arm64\nbootstrap/cmd/internal/obj/mips\nbootstrap/cmd/internal/obj/ppc64\nbootstrap/cmd/internal/obj/s390x\n... ##各种编译安装信息\n##### API check\nGo version is \"go1.9.2\", ignoring -next /home/test/install/go/api/next.txt\n\nALL TESTS PASSED\n\n---\nInstalled Go for linux/amd64 in /home/test/install/go\nInstalled commands in /home/test/install/go/bin\n*** You need to add /home/test/install/go/bin to your PATH.\n```\n\n配置环境变量\n\n```bash\n$ export PATH=$PATH:/home/test/install/go/bin\n```\n\n查看安装版本\n\n```bash\n$ go version\ngo version go1.9.2 linux/amd64\n```\n\n##### 克隆go-ethereum\n\n```bash\n$ git clone https://github.com/ethereum/go-ethereum.git\n```\n\n##### 安装以太坊\n\n```bash\n$ make geth\n\nbuild/env.sh go run build/ci.go install ./cmd/geth\n>>> /home/test/install/go/bin/go install -ldflags -X main.gitCommit=5d4267911a7791bfa60f275a97347372fbf0ce99 -v ./cmd/geth\ngithub.com/ethereum/go-ethereum/common/hexutil\ngithub.com/ethereum/go-ethereum/crypto/sha3\ngithub.com/ethereum/go-ethereum/common\n...\ngithub.com/ethereum/go-ethereum/vendor/github.com/gizak/termui\ngithub.com/ethereum/go-ethereum/vendor/github.com/naoina/go-stringutil\ngithub.com/ethereum/go-ethereum/vendor/github.com/naoina/toml/ast\ngithub.com/ethereum/go-ethereum/vendor/github.com/naoina/toml\ngithub.com/ethereum/go-ethereum/cmd/geth\nDone building.\nRun \"/home/test/install/go-ethereum/build/bin/geth\" to launch geth.\n```\n\n##### 创建连接\n\n```bash\n$ ln -s  /home/test/install/go-ethereum/build/bin/geth /usr/local/bin/geth\n```\n\n#### 创建私有链\n\n##### 创建创世区块\n\n```json\n{\n    \"config\": {\n        \"chainId\": 15,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    },\n    \"coinbase\" : \"0x0000000000000000000000000000000000000000\",\n    \"difficulty\" : \"0x40000\",\n    \"extraData\" : \"\",\n    \"gasLimit\" : \"0xffffffff\",\n    \"nonce\" : \"0x0000000000000042\",\n    \"mixhash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"timestamp\" : \"0x00\",\n    \"alloc\": { }\n}\n```\n\n```bash\n$ mkdir my_chain\n$ cd my_chain\n$ vim genesis.json # json文件的内容是上面的json字符串\n```\n\n##### 创建创世节点，并且初始化数据\n\n```bash\n$ geth --datadir data00 init genesis.json\n```\n\n`data00`就是用来保存创世节点的数据\n\n##### 启动节点，指定networkid\n\n```bash\n$ geth --datadir ./data00 --networkid 5201314 console #使用console 支持命令行模式\n```\n\n![](/uploads/2018/01/00.png)\n\n##### 创建节点的账号\n\n```bash\n# 在console命令模式下\n> personal.newAccount(\"123\")\n\"0x9ff8676095e5999bf82eafeab98192e33ad74364\"\n```\n\n##### 开始进行挖矿\n\n```bash\n> miner.start()\nINFO [01-2300:14:37] Updated mining threads                   threads=0\nINFO [01-2300:14:37] Transaction pool price threshold updated price=18000000000\nINFO [01-2300:14:37] Etherbase automatically configured       address=0x9FF8676095e5999bf82EafEaB98192E33ad74364\nnull\n> INFO [01-2300:14:37] Starting mining operation\nINFO [01-2300:14:37] Commit new mining work                   number=1 txs=0 uncles=0 elapsed=146.511µs\nINFO [01-2300:14:43] Generating DAG in progress               epoch=0 percentage=0 elapsed=4.529s\nINFO [01-2300:14:48] Generating DAG in progress               epoch=0 percentage=1 elapsed=8.913s\nINFO [01-2300:14:52] Generating DAG in progress               epoch=0 percentage=2 elapsed=13.169s\nINFO [01-2300:14:56] Generating DAG in progress               epoch=0 percentage=3 elapsed=17.298s\nINFO [01-2300:15:01] Generating DAG in progress               epoch=0 percentage=4 elapsed=21.964s\n...\n```\n\n等到percentage加载到100的时候就开始进行挖矿\n\n![](/uploads/2018/01/%E6%8C%96%E7%9F%BF.png)\n\n##### 结束挖矿\n\n```bash\n> miner.stop()\n```\n\n##### 查看挖矿的金额\n\n```bash\n> eth.getBalance(eth.accounts[0])\n5000000000000000000\n```\n\n##### 新开一个窗口，创建第二个节点\n\n```bash\n$ geth --datadir data01 init genesis.json\n```\n\n##### 运行第二个节点\n\nnetworkid需要和第一个账号相同\n\n```bash\n$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console #使用命令行模式\n```\n\n##### 创建账号\n\n```bash\n> personal.newAccount(\"456\")\n\"0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1\"\n```\n\n##### 开始进行挖矿\n\n```bash\n> miner.start()\n```\n\n##### 结束挖矿\n\n```bash\n> miner.stop()\n```\n\n#### 用户交易\n\n##### 回到第一个节点\n\n查看节点信息\n\n```bash\n> admin.nodeInfo.enode\n\"enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303\"\n```\n\n##### 切换到第二个节点窗口\n\n建立联系, 添加第一个节点enode\n\n```bash\n admin.addPeer(\"enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303\")\ntrue\n```\n\n##### 切换到第一个控制台\n\n查看建立的联系数量\n\n```bash\n> net.peerCount\n1\n```\n\npeerCount=1，说明已经建立了联系\n\n##### 开始进行交易\n\n切换到一个控制台，交易之前，需要先解锁账号才行\n\n```bash\n> personal.unlockAccount(eth.accounts[0], \"123\")\ntrue\n```\n\n返回true说明已经解锁成功\n\n```bash\n> eth.sendTransaction({from: \"0x9ff8676095e5999bf82eafeab98192e33ad74364\", to: \"0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1\", value: web3.toWei(1, \"ether\")})\n```\n\nto和form分别是接受和发送的账号，也就是personal.listAccounts里面的账号\n\n查看确认下交易信息\n\n```bash\n> eth.pendingTransactions\n[{\n    blockHash: null,\n    blockNumber: null,\n    from: \"0x9ff8676095e5999bf82eafeab98192e33ad74364\",\n    gas: 90000,\n    gasPrice: 18000000000,\n    hash: \"0x6146513432b27b6a27f54b64fcf0a30dc90290452dfd25e282a05aaf423f4afa\",\n    input: \"0x\",\n    nonce: 0,\n    r: \"0x77644ff132f800da9b2d8133c796916f956061a491b55e3cbbd0d710f5157199\",\n    s: \"0x9dbe268e152e5fc15421efa5b00e5d4a601ef4cb2655b577901fd96c5d3c959\",\n    to: \"0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1\",\n    transactionIndex: 0,\n    v: \"0x42\",\n    value: 1000000000000000000\n}]\n```\n\n开始进行挖矿，使交易生效\n\n```bash\n> miner.start()\n```\n\n##### 确认交易是否成功\n\n在一个和第二个控制台分别运行命令，确认是否交易成功\n\n```bash\n> eth.getBalance(eth.accounts[0])\n```\n\n#### 总结\n\n##### 挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\n\n![](/uploads/2018/01/CPU%E5%90%83%E6%BB%A1.png)\n\n![](/uploads/2018/01/io%E8%AF%BB%E5%86%99.png)\n\n##### 还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\n\n#### 参考文献\n\n[blockchain随笔](http://www.cnblogs.com/zl03jsj/category/997608.html)","source":"_posts/eth.md","raw":"---\ntitle: 基于以太坊创建私有链进行挖矿、交易\ntags:\n  - blockchain\n  - 以太坊\n  - 比特币\nid: '206'\ncategories:\n  - - Linux\n  - - 以太坊\ncomments: false\ndate: 2018-01-23 14:18:36\n---\n\n要说2018年什么最火，无疑就是区块链。比特币的疯狂上涨，每个比特币超过了1万美金。随之而来的就是区块链的技术。 以太坊（Ethereum）并不是一个机构，而是一款能够在区块链上实现智能合约、开源的底层系统。本文主要是通过以太坊，创建私有链，实现挖矿和交易。\n\n#### 安装golang\n\n##### 克隆项目\n\n```bash\n$ git clone https://github.com/golang/go.git\n```\n\n##### 安装go 1.4\n\ngolang 是自编译，所以如果安装版本 >=1.5 需要先编译1.4版本，然后再安装其他版本\n\n```bash\n$ cp -r go/ $HOME/go1.4 #复制一份文件夹，用于编译1.4版本\n$ cd $HOME/go1.4\n$ git checkout release-branch.go1.4\n$ cd src\n$ ./make.bash # 进行编译\n```\n\n编译之后，开始安装go 1.9版本\n\n```bash\n$ cd $HOME/install/go\n$ git checkout release-branch.go1.9\n$ cd src/\n$ ./all.bash #安装1.9版本\n##### Building Go bootstrap tool.\ncmd/dist\n\n##### Building Go toolchain using /home/test/go1.4.\nbootstrap/cmd/internal/dwarf\nbootstrap/cmd/internal/objabi\nbootstrap/cmd/internal/src\nbootstrap/cmd/internal/sys\nbootstrap/cmd/internal/obj\nbootstrap/cmd/internal/obj/arm\nbootstrap/cmd/internal/obj/arm64\nbootstrap/cmd/internal/obj/mips\nbootstrap/cmd/internal/obj/ppc64\nbootstrap/cmd/internal/obj/s390x\n... ##各种编译安装信息\n##### API check\nGo version is \"go1.9.2\", ignoring -next /home/test/install/go/api/next.txt\n\nALL TESTS PASSED\n\n---\nInstalled Go for linux/amd64 in /home/test/install/go\nInstalled commands in /home/test/install/go/bin\n*** You need to add /home/test/install/go/bin to your PATH.\n```\n\n配置环境变量\n\n```bash\n$ export PATH=$PATH:/home/test/install/go/bin\n```\n\n查看安装版本\n\n```bash\n$ go version\ngo version go1.9.2 linux/amd64\n```\n\n##### 克隆go-ethereum\n\n```bash\n$ git clone https://github.com/ethereum/go-ethereum.git\n```\n\n##### 安装以太坊\n\n```bash\n$ make geth\n\nbuild/env.sh go run build/ci.go install ./cmd/geth\n>>> /home/test/install/go/bin/go install -ldflags -X main.gitCommit=5d4267911a7791bfa60f275a97347372fbf0ce99 -v ./cmd/geth\ngithub.com/ethereum/go-ethereum/common/hexutil\ngithub.com/ethereum/go-ethereum/crypto/sha3\ngithub.com/ethereum/go-ethereum/common\n...\ngithub.com/ethereum/go-ethereum/vendor/github.com/gizak/termui\ngithub.com/ethereum/go-ethereum/vendor/github.com/naoina/go-stringutil\ngithub.com/ethereum/go-ethereum/vendor/github.com/naoina/toml/ast\ngithub.com/ethereum/go-ethereum/vendor/github.com/naoina/toml\ngithub.com/ethereum/go-ethereum/cmd/geth\nDone building.\nRun \"/home/test/install/go-ethereum/build/bin/geth\" to launch geth.\n```\n\n##### 创建连接\n\n```bash\n$ ln -s  /home/test/install/go-ethereum/build/bin/geth /usr/local/bin/geth\n```\n\n#### 创建私有链\n\n##### 创建创世区块\n\n```json\n{\n    \"config\": {\n        \"chainId\": 15,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    },\n    \"coinbase\" : \"0x0000000000000000000000000000000000000000\",\n    \"difficulty\" : \"0x40000\",\n    \"extraData\" : \"\",\n    \"gasLimit\" : \"0xffffffff\",\n    \"nonce\" : \"0x0000000000000042\",\n    \"mixhash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"timestamp\" : \"0x00\",\n    \"alloc\": { }\n}\n```\n\n```bash\n$ mkdir my_chain\n$ cd my_chain\n$ vim genesis.json # json文件的内容是上面的json字符串\n```\n\n##### 创建创世节点，并且初始化数据\n\n```bash\n$ geth --datadir data00 init genesis.json\n```\n\n`data00`就是用来保存创世节点的数据\n\n##### 启动节点，指定networkid\n\n```bash\n$ geth --datadir ./data00 --networkid 5201314 console #使用console 支持命令行模式\n```\n\n![](/uploads/2018/01/00.png)\n\n##### 创建节点的账号\n\n```bash\n# 在console命令模式下\n> personal.newAccount(\"123\")\n\"0x9ff8676095e5999bf82eafeab98192e33ad74364\"\n```\n\n##### 开始进行挖矿\n\n```bash\n> miner.start()\nINFO [01-2300:14:37] Updated mining threads                   threads=0\nINFO [01-2300:14:37] Transaction pool price threshold updated price=18000000000\nINFO [01-2300:14:37] Etherbase automatically configured       address=0x9FF8676095e5999bf82EafEaB98192E33ad74364\nnull\n> INFO [01-2300:14:37] Starting mining operation\nINFO [01-2300:14:37] Commit new mining work                   number=1 txs=0 uncles=0 elapsed=146.511µs\nINFO [01-2300:14:43] Generating DAG in progress               epoch=0 percentage=0 elapsed=4.529s\nINFO [01-2300:14:48] Generating DAG in progress               epoch=0 percentage=1 elapsed=8.913s\nINFO [01-2300:14:52] Generating DAG in progress               epoch=0 percentage=2 elapsed=13.169s\nINFO [01-2300:14:56] Generating DAG in progress               epoch=0 percentage=3 elapsed=17.298s\nINFO [01-2300:15:01] Generating DAG in progress               epoch=0 percentage=4 elapsed=21.964s\n...\n```\n\n等到percentage加载到100的时候就开始进行挖矿\n\n![](/uploads/2018/01/%E6%8C%96%E7%9F%BF.png)\n\n##### 结束挖矿\n\n```bash\n> miner.stop()\n```\n\n##### 查看挖矿的金额\n\n```bash\n> eth.getBalance(eth.accounts[0])\n5000000000000000000\n```\n\n##### 新开一个窗口，创建第二个节点\n\n```bash\n$ geth --datadir data01 init genesis.json\n```\n\n##### 运行第二个节点\n\nnetworkid需要和第一个账号相同\n\n```bash\n$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console #使用命令行模式\n```\n\n##### 创建账号\n\n```bash\n> personal.newAccount(\"456\")\n\"0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1\"\n```\n\n##### 开始进行挖矿\n\n```bash\n> miner.start()\n```\n\n##### 结束挖矿\n\n```bash\n> miner.stop()\n```\n\n#### 用户交易\n\n##### 回到第一个节点\n\n查看节点信息\n\n```bash\n> admin.nodeInfo.enode\n\"enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303\"\n```\n\n##### 切换到第二个节点窗口\n\n建立联系, 添加第一个节点enode\n\n```bash\n admin.addPeer(\"enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303\")\ntrue\n```\n\n##### 切换到第一个控制台\n\n查看建立的联系数量\n\n```bash\n> net.peerCount\n1\n```\n\npeerCount=1，说明已经建立了联系\n\n##### 开始进行交易\n\n切换到一个控制台，交易之前，需要先解锁账号才行\n\n```bash\n> personal.unlockAccount(eth.accounts[0], \"123\")\ntrue\n```\n\n返回true说明已经解锁成功\n\n```bash\n> eth.sendTransaction({from: \"0x9ff8676095e5999bf82eafeab98192e33ad74364\", to: \"0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1\", value: web3.toWei(1, \"ether\")})\n```\n\nto和form分别是接受和发送的账号，也就是personal.listAccounts里面的账号\n\n查看确认下交易信息\n\n```bash\n> eth.pendingTransactions\n[{\n    blockHash: null,\n    blockNumber: null,\n    from: \"0x9ff8676095e5999bf82eafeab98192e33ad74364\",\n    gas: 90000,\n    gasPrice: 18000000000,\n    hash: \"0x6146513432b27b6a27f54b64fcf0a30dc90290452dfd25e282a05aaf423f4afa\",\n    input: \"0x\",\n    nonce: 0,\n    r: \"0x77644ff132f800da9b2d8133c796916f956061a491b55e3cbbd0d710f5157199\",\n    s: \"0x9dbe268e152e5fc15421efa5b00e5d4a601ef4cb2655b577901fd96c5d3c959\",\n    to: \"0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1\",\n    transactionIndex: 0,\n    v: \"0x42\",\n    value: 1000000000000000000\n}]\n```\n\n开始进行挖矿，使交易生效\n\n```bash\n> miner.start()\n```\n\n##### 确认交易是否成功\n\n在一个和第二个控制台分别运行命令，确认是否交易成功\n\n```bash\n> eth.getBalance(eth.accounts[0])\n```\n\n#### 总结\n\n##### 挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\n\n![](/uploads/2018/01/CPU%E5%90%83%E6%BB%A1.png)\n\n![](/uploads/2018/01/io%E8%AF%BB%E5%86%99.png)\n\n##### 还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\n\n#### 参考文献\n\n[blockchain随笔](http://www.cnblogs.com/zl03jsj/category/997608.html)","slug":"eth","published":1,"updated":"2022-03-13T01:17:12.505Z","_id":"cl0oi8mfe001u417t1daugjgm","layout":"post","photos":[],"link":"","content":"<p>要说2018年什么最火，无疑就是区块链。比特币的疯狂上涨，每个比特币超过了1万美金。随之而来的就是区块链的技术。 以太坊（Ethereum）并不是一个机构，而是一款能够在区块链上实现智能合约、开源的底层系统。本文主要是通过以太坊，创建私有链，实现挖矿和交易。</p>\n<h4 id=\"安装golang\"><a href=\"#安装golang\" class=\"headerlink\" title=\"安装golang\"></a>安装golang</h4><h5 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/golang/go.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装go-1-4\"><a href=\"#安装go-1-4\" class=\"headerlink\" title=\"安装go 1.4\"></a>安装go 1.4</h5><p>golang 是自编译，所以如果安装版本 &gt;&#x3D;1.5 需要先编译1.4版本，然后再安装其他版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span> -r go/ <span class=\"variable\">$HOME</span>/go1.4 <span class=\"comment\">#复制一份文件夹，用于编译1.4版本</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/go1.4</span><br><span class=\"line\">$ git checkout release-branch.go1.4</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> src</span><br><span class=\"line\">$ ./make.bash <span class=\"comment\"># 进行编译</span></span><br></pre></td></tr></table></figure>\n\n<p>编译之后，开始安装go 1.9版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/install/go</span><br><span class=\"line\">$ git checkout release-branch.go1.9</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> src/</span><br><span class=\"line\">$ ./all.bash <span class=\"comment\">#安装1.9版本</span></span><br><span class=\"line\"><span class=\"comment\">##### Building Go bootstrap tool.</span></span><br><span class=\"line\">cmd/dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##### Building Go toolchain using /home/test/go1.4.</span></span><br><span class=\"line\">bootstrap/cmd/internal/dwarf</span><br><span class=\"line\">bootstrap/cmd/internal/objabi</span><br><span class=\"line\">bootstrap/cmd/internal/src</span><br><span class=\"line\">bootstrap/cmd/internal/sys</span><br><span class=\"line\">bootstrap/cmd/internal/obj</span><br><span class=\"line\">bootstrap/cmd/internal/obj/arm</span><br><span class=\"line\">bootstrap/cmd/internal/obj/arm64</span><br><span class=\"line\">bootstrap/cmd/internal/obj/mips</span><br><span class=\"line\">bootstrap/cmd/internal/obj/ppc64</span><br><span class=\"line\">bootstrap/cmd/internal/obj/s390x</span><br><span class=\"line\">... <span class=\"comment\">##各种编译安装信息</span></span><br><span class=\"line\"><span class=\"comment\">##### API check</span></span><br><span class=\"line\">Go version is <span class=\"string\">&quot;go1.9.2&quot;</span>, ignoring -next /home/test/install/go/api/next.txt</span><br><span class=\"line\"></span><br><span class=\"line\">ALL TESTS PASSED</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">Installed Go <span class=\"keyword\">for</span> linux/amd64 <span class=\"keyword\">in</span> /home/test/install/go</span><br><span class=\"line\">Installed commands <span class=\"keyword\">in</span> /home/test/install/go/bin</span><br><span class=\"line\">*** You need to add /home/test/install/go/bin to your PATH.</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/test/install/go/bin</span><br></pre></td></tr></table></figure>\n\n<p>查看安装版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go version</span><br><span class=\"line\">go version go1.9.2 linux/amd64</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"克隆go-ethereum\"><a href=\"#克隆go-ethereum\" class=\"headerlink\" title=\"克隆go-ethereum\"></a>克隆go-ethereum</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ethereum/go-ethereum.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装以太坊\"><a href=\"#安装以太坊\" class=\"headerlink\" title=\"安装以太坊\"></a>安装以太坊</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make geth</span><br><span class=\"line\"></span><br><span class=\"line\">build/env.sh go run build/ci.go install ./cmd/geth</span><br><span class=\"line\">&gt;&gt;&gt; /home/test/install/go/bin/go install -ldflags -X main.gitCommit=5d4267911a7791bfa60f275a97347372fbf0ce99 -v ./cmd/geth</span><br><span class=\"line\">github.com/ethereum/go-ethereum/common/hexutil</span><br><span class=\"line\">github.com/ethereum/go-ethereum/crypto/sha3</span><br><span class=\"line\">github.com/ethereum/go-ethereum/common</span><br><span class=\"line\">...</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/gizak/termui</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/naoina/go-stringutil</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/naoina/toml/ast</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/naoina/toml</span><br><span class=\"line\">github.com/ethereum/go-ethereum/cmd/geth</span><br><span class=\"line\">Done building.</span><br><span class=\"line\">Run <span class=\"string\">&quot;/home/test/install/go-ethereum/build/bin/geth&quot;</span> to launch geth.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建连接\"><a href=\"#创建连接\" class=\"headerlink\" title=\"创建连接\"></a>创建连接</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ln</span> -s  /home/test/install/go-ethereum/build/bin/geth /usr/local/bin/geth</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建私有链\"><a href=\"#创建私有链\" class=\"headerlink\" title=\"创建私有链\"></a>创建私有链</h4><h5 id=\"创建创世区块\"><a href=\"#创建创世区块\" class=\"headerlink\" title=\"创建创世区块\"></a>创建创世区块</h5><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;chainId&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">15</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;homesteadBlock&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;eip155Block&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;eip158Block&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;coinbase&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;difficulty&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x40000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extraData&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;gasLimit&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0xffffffff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nonce&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000042&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;mixhash&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;parentHash&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timestamp&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x00&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;alloc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> my_chain</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_chain</span><br><span class=\"line\">$ vim genesis.json <span class=\"comment\"># json文件的内容是上面的json字符串</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建创世节点，并且初始化数据\"><a href=\"#创建创世节点，并且初始化数据\" class=\"headerlink\" title=\"创建创世节点，并且初始化数据\"></a>创建创世节点，并且初始化数据</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 init genesis.json</span><br></pre></td></tr></table></figure>\n\n<p><code>data00</code>就是用来保存创世节点的数据</p>\n<h5 id=\"启动节点，指定networkid\"><a href=\"#启动节点，指定networkid\" class=\"headerlink\" title=\"启动节点，指定networkid\"></a>启动节点，指定networkid</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir ./data00 --networkid 5201314 console <span class=\"comment\">#使用console 支持命令行模式</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/00.png\"></p>\n<h5 id=\"创建节点的账号\"><a href=\"#创建节点的账号\" class=\"headerlink\" title=\"创建节点的账号\"></a>创建节点的账号</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在console命令模式下</span></span><br><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"开始进行挖矿\"><a href=\"#开始进行挖矿\" class=\"headerlink\" title=\"开始进行挖矿\"></a>开始进行挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br><span class=\"line\">INFO [01-2300:14:37] Updated mining threads                   threads=0</span><br><span class=\"line\">INFO [01-2300:14:37] Transaction pool price threshold updated price=18000000000</span><br><span class=\"line\">INFO [01-2300:14:37] Etherbase automatically configured       address=0x9FF8676095e5999bf82EafEaB98192E33ad74364</span><br><span class=\"line\">null</span><br><span class=\"line\">&gt; INFO [01-2300:14:37] Starting mining operation</span><br><span class=\"line\">INFO [01-2300:14:37] Commit new mining work                   number=1 txs=0 uncles=0 elapsed=146.511µs</span><br><span class=\"line\">INFO [01-2300:14:43] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=0 elapsed=4.529s</span><br><span class=\"line\">INFO [01-2300:14:48] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=1 elapsed=8.913s</span><br><span class=\"line\">INFO [01-2300:14:52] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=2 elapsed=13.169s</span><br><span class=\"line\">INFO [01-2300:14:56] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=3 elapsed=17.298s</span><br><span class=\"line\">INFO [01-2300:15:01] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=4 elapsed=21.964s</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>等到percentage加载到100的时候就开始进行挖矿</p>\n<p><img src=\"/uploads/2018/01/%E6%8C%96%E7%9F%BF.png\"></p>\n<h5 id=\"结束挖矿\"><a href=\"#结束挖矿\" class=\"headerlink\" title=\"结束挖矿\"></a>结束挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.stop()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看挖矿的金额\"><a href=\"#查看挖矿的金额\" class=\"headerlink\" title=\"查看挖矿的金额\"></a>查看挖矿的金额</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br><span class=\"line\">5000000000000000000</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新开一个窗口，创建第二个节点\"><a href=\"#新开一个窗口，创建第二个节点\" class=\"headerlink\" title=\"新开一个窗口，创建第二个节点\"></a>新开一个窗口，创建第二个节点</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 init genesis.json</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行第二个节点\"><a href=\"#运行第二个节点\" class=\"headerlink\" title=\"运行第二个节点\"></a>运行第二个节点</h5><p>networkid需要和第一个账号相同</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console <span class=\"comment\">#使用命令行模式</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;456&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"开始进行挖矿-1\"><a href=\"#开始进行挖矿-1\" class=\"headerlink\" title=\"开始进行挖矿\"></a>开始进行挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结束挖矿-1\"><a href=\"#结束挖矿-1\" class=\"headerlink\" title=\"结束挖矿\"></a>结束挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.stop()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用户交易\"><a href=\"#用户交易\" class=\"headerlink\" title=\"用户交易\"></a>用户交易</h4><h5 id=\"回到第一个节点\"><a href=\"#回到第一个节点\" class=\"headerlink\" title=\"回到第一个节点\"></a>回到第一个节点</h5><p>查看节点信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.nodeInfo.enode</span><br><span class=\"line\"><span class=\"string\">&quot;enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切换到第二个节点窗口\"><a href=\"#切换到第二个节点窗口\" class=\"headerlink\" title=\"切换到第二个节点窗口\"></a>切换到第二个节点窗口</h5><p>建立联系, 添加第一个节点enode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> admin.addPeer(<span class=\"string\">&quot;enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切换到第一个控制台\"><a href=\"#切换到第一个控制台\" class=\"headerlink\" title=\"切换到第一个控制台\"></a>切换到第一个控制台</h5><p>查看建立的联系数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net.peerCount</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>peerCount&#x3D;1，说明已经建立了联系</p>\n<h5 id=\"开始进行交易\"><a href=\"#开始进行交易\" class=\"headerlink\" title=\"开始进行交易\"></a>开始进行交易</h5><p>切换到一个控制台，交易之前，需要先解锁账号才行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[0], <span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>返回true说明已经解锁成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from: <span class=\"string\">&quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;</span>, to: <span class=\"string\">&quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;</span>, value: web3.toWei(1, <span class=\"string\">&quot;ether&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>to和form分别是接受和发送的账号，也就是personal.listAccounts里面的账号</p>\n<p>查看确认下交易信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.pendingTransactions</span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    blockHash: null,</span><br><span class=\"line\">    blockNumber: null,</span><br><span class=\"line\">    from: <span class=\"string\">&quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;</span>,</span><br><span class=\"line\">    gas: 90000,</span><br><span class=\"line\">    gasPrice: 18000000000,</span><br><span class=\"line\">    <span class=\"built_in\">hash</span>: <span class=\"string\">&quot;0x6146513432b27b6a27f54b64fcf0a30dc90290452dfd25e282a05aaf423f4afa&quot;</span>,</span><br><span class=\"line\">    input: <span class=\"string\">&quot;0x&quot;</span>,</span><br><span class=\"line\">    nonce: 0,</span><br><span class=\"line\">    r: <span class=\"string\">&quot;0x77644ff132f800da9b2d8133c796916f956061a491b55e3cbbd0d710f5157199&quot;</span>,</span><br><span class=\"line\">    s: <span class=\"string\">&quot;0x9dbe268e152e5fc15421efa5b00e5d4a601ef4cb2655b577901fd96c5d3c959&quot;</span>,</span><br><span class=\"line\">    to: <span class=\"string\">&quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;</span>,</span><br><span class=\"line\">    transactionIndex: 0,</span><br><span class=\"line\">    v: <span class=\"string\">&quot;0x42&quot;</span>,</span><br><span class=\"line\">    value: 1000000000000000000</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>开始进行挖矿，使交易生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"确认交易是否成功\"><a href=\"#确认交易是否成功\" class=\"headerlink\" title=\"确认交易是否成功\"></a>确认交易是否成功</h5><p>在一个和第二个控制台分别运行命令，确认是否交易成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\"><a href=\"#挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\" class=\"headerlink\" title=\"挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\"></a>挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。</h5><p><img src=\"/uploads/2018/01/CPU%E5%90%83%E6%BB%A1.png\"></p>\n<p><img src=\"/uploads/2018/01/io%E8%AF%BB%E5%86%99.png\"></p>\n<h5 id=\"还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\"><a href=\"#还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\" class=\"headerlink\" title=\"还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\"></a>还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。</h5><h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><p><a href=\"http://www.cnblogs.com/zl03jsj/category/997608.html\">blockchain随笔</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>要说2018年什么最火，无疑就是区块链。比特币的疯狂上涨，每个比特币超过了1万美金。随之而来的就是区块链的技术。 以太坊（Ethereum）并不是一个机构，而是一款能够在区块链上实现智能合约、开源的底层系统。本文主要是通过以太坊，创建私有链，实现挖矿和交易。</p>\n<h4 id=\"安装golang\"><a href=\"#安装golang\" class=\"headerlink\" title=\"安装golang\"></a>安装golang</h4><h5 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/golang/go.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装go-1-4\"><a href=\"#安装go-1-4\" class=\"headerlink\" title=\"安装go 1.4\"></a>安装go 1.4</h5><p>golang 是自编译，所以如果安装版本 &gt;&#x3D;1.5 需要先编译1.4版本，然后再安装其他版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span> -r go/ <span class=\"variable\">$HOME</span>/go1.4 <span class=\"comment\">#复制一份文件夹，用于编译1.4版本</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/go1.4</span><br><span class=\"line\">$ git checkout release-branch.go1.4</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> src</span><br><span class=\"line\">$ ./make.bash <span class=\"comment\"># 进行编译</span></span><br></pre></td></tr></table></figure>\n\n<p>编译之后，开始安装go 1.9版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/install/go</span><br><span class=\"line\">$ git checkout release-branch.go1.9</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> src/</span><br><span class=\"line\">$ ./all.bash <span class=\"comment\">#安装1.9版本</span></span><br><span class=\"line\"><span class=\"comment\">##### Building Go bootstrap tool.</span></span><br><span class=\"line\">cmd/dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##### Building Go toolchain using /home/test/go1.4.</span></span><br><span class=\"line\">bootstrap/cmd/internal/dwarf</span><br><span class=\"line\">bootstrap/cmd/internal/objabi</span><br><span class=\"line\">bootstrap/cmd/internal/src</span><br><span class=\"line\">bootstrap/cmd/internal/sys</span><br><span class=\"line\">bootstrap/cmd/internal/obj</span><br><span class=\"line\">bootstrap/cmd/internal/obj/arm</span><br><span class=\"line\">bootstrap/cmd/internal/obj/arm64</span><br><span class=\"line\">bootstrap/cmd/internal/obj/mips</span><br><span class=\"line\">bootstrap/cmd/internal/obj/ppc64</span><br><span class=\"line\">bootstrap/cmd/internal/obj/s390x</span><br><span class=\"line\">... <span class=\"comment\">##各种编译安装信息</span></span><br><span class=\"line\"><span class=\"comment\">##### API check</span></span><br><span class=\"line\">Go version is <span class=\"string\">&quot;go1.9.2&quot;</span>, ignoring -next /home/test/install/go/api/next.txt</span><br><span class=\"line\"></span><br><span class=\"line\">ALL TESTS PASSED</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">Installed Go <span class=\"keyword\">for</span> linux/amd64 <span class=\"keyword\">in</span> /home/test/install/go</span><br><span class=\"line\">Installed commands <span class=\"keyword\">in</span> /home/test/install/go/bin</span><br><span class=\"line\">*** You need to add /home/test/install/go/bin to your PATH.</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/test/install/go/bin</span><br></pre></td></tr></table></figure>\n\n<p>查看安装版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go version</span><br><span class=\"line\">go version go1.9.2 linux/amd64</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"克隆go-ethereum\"><a href=\"#克隆go-ethereum\" class=\"headerlink\" title=\"克隆go-ethereum\"></a>克隆go-ethereum</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ethereum/go-ethereum.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装以太坊\"><a href=\"#安装以太坊\" class=\"headerlink\" title=\"安装以太坊\"></a>安装以太坊</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make geth</span><br><span class=\"line\"></span><br><span class=\"line\">build/env.sh go run build/ci.go install ./cmd/geth</span><br><span class=\"line\">&gt;&gt;&gt; /home/test/install/go/bin/go install -ldflags -X main.gitCommit=5d4267911a7791bfa60f275a97347372fbf0ce99 -v ./cmd/geth</span><br><span class=\"line\">github.com/ethereum/go-ethereum/common/hexutil</span><br><span class=\"line\">github.com/ethereum/go-ethereum/crypto/sha3</span><br><span class=\"line\">github.com/ethereum/go-ethereum/common</span><br><span class=\"line\">...</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/gizak/termui</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/naoina/go-stringutil</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/naoina/toml/ast</span><br><span class=\"line\">github.com/ethereum/go-ethereum/vendor/github.com/naoina/toml</span><br><span class=\"line\">github.com/ethereum/go-ethereum/cmd/geth</span><br><span class=\"line\">Done building.</span><br><span class=\"line\">Run <span class=\"string\">&quot;/home/test/install/go-ethereum/build/bin/geth&quot;</span> to launch geth.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建连接\"><a href=\"#创建连接\" class=\"headerlink\" title=\"创建连接\"></a>创建连接</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ln</span> -s  /home/test/install/go-ethereum/build/bin/geth /usr/local/bin/geth</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建私有链\"><a href=\"#创建私有链\" class=\"headerlink\" title=\"创建私有链\"></a>创建私有链</h4><h5 id=\"创建创世区块\"><a href=\"#创建创世区块\" class=\"headerlink\" title=\"创建创世区块\"></a>创建创世区块</h5><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;chainId&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">15</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;homesteadBlock&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;eip155Block&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;eip158Block&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;coinbase&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;difficulty&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x40000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extraData&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;gasLimit&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0xffffffff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nonce&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000042&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;mixhash&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;parentHash&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timestamp&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;0x00&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;alloc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> my_chain</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_chain</span><br><span class=\"line\">$ vim genesis.json <span class=\"comment\"># json文件的内容是上面的json字符串</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建创世节点，并且初始化数据\"><a href=\"#创建创世节点，并且初始化数据\" class=\"headerlink\" title=\"创建创世节点，并且初始化数据\"></a>创建创世节点，并且初始化数据</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data00 init genesis.json</span><br></pre></td></tr></table></figure>\n\n<p><code>data00</code>就是用来保存创世节点的数据</p>\n<h5 id=\"启动节点，指定networkid\"><a href=\"#启动节点，指定networkid\" class=\"headerlink\" title=\"启动节点，指定networkid\"></a>启动节点，指定networkid</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir ./data00 --networkid 5201314 console <span class=\"comment\">#使用console 支持命令行模式</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/00.png\"></p>\n<h5 id=\"创建节点的账号\"><a href=\"#创建节点的账号\" class=\"headerlink\" title=\"创建节点的账号\"></a>创建节点的账号</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在console命令模式下</span></span><br><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"开始进行挖矿\"><a href=\"#开始进行挖矿\" class=\"headerlink\" title=\"开始进行挖矿\"></a>开始进行挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br><span class=\"line\">INFO [01-2300:14:37] Updated mining threads                   threads=0</span><br><span class=\"line\">INFO [01-2300:14:37] Transaction pool price threshold updated price=18000000000</span><br><span class=\"line\">INFO [01-2300:14:37] Etherbase automatically configured       address=0x9FF8676095e5999bf82EafEaB98192E33ad74364</span><br><span class=\"line\">null</span><br><span class=\"line\">&gt; INFO [01-2300:14:37] Starting mining operation</span><br><span class=\"line\">INFO [01-2300:14:37] Commit new mining work                   number=1 txs=0 uncles=0 elapsed=146.511µs</span><br><span class=\"line\">INFO [01-2300:14:43] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=0 elapsed=4.529s</span><br><span class=\"line\">INFO [01-2300:14:48] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=1 elapsed=8.913s</span><br><span class=\"line\">INFO [01-2300:14:52] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=2 elapsed=13.169s</span><br><span class=\"line\">INFO [01-2300:14:56] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=3 elapsed=17.298s</span><br><span class=\"line\">INFO [01-2300:15:01] Generating DAG <span class=\"keyword\">in</span> progress               epoch=0 percentage=4 elapsed=21.964s</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>等到percentage加载到100的时候就开始进行挖矿</p>\n<p><img src=\"/uploads/2018/01/%E6%8C%96%E7%9F%BF.png\"></p>\n<h5 id=\"结束挖矿\"><a href=\"#结束挖矿\" class=\"headerlink\" title=\"结束挖矿\"></a>结束挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.stop()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看挖矿的金额\"><a href=\"#查看挖矿的金额\" class=\"headerlink\" title=\"查看挖矿的金额\"></a>查看挖矿的金额</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br><span class=\"line\">5000000000000000000</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新开一个窗口，创建第二个节点\"><a href=\"#新开一个窗口，创建第二个节点\" class=\"headerlink\" title=\"新开一个窗口，创建第二个节点\"></a>新开一个窗口，创建第二个节点</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 init genesis.json</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行第二个节点\"><a href=\"#运行第二个节点\" class=\"headerlink\" title=\"运行第二个节点\"></a>运行第二个节点</h5><p>networkid需要和第一个账号相同</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console <span class=\"comment\">#使用命令行模式</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;456&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"开始进行挖矿-1\"><a href=\"#开始进行挖矿-1\" class=\"headerlink\" title=\"开始进行挖矿\"></a>开始进行挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结束挖矿-1\"><a href=\"#结束挖矿-1\" class=\"headerlink\" title=\"结束挖矿\"></a>结束挖矿</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.stop()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用户交易\"><a href=\"#用户交易\" class=\"headerlink\" title=\"用户交易\"></a>用户交易</h4><h5 id=\"回到第一个节点\"><a href=\"#回到第一个节点\" class=\"headerlink\" title=\"回到第一个节点\"></a>回到第一个节点</h5><p>查看节点信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; admin.nodeInfo.enode</span><br><span class=\"line\"><span class=\"string\">&quot;enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切换到第二个节点窗口\"><a href=\"#切换到第二个节点窗口\" class=\"headerlink\" title=\"切换到第二个节点窗口\"></a>切换到第二个节点窗口</h5><p>建立联系, 添加第一个节点enode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> admin.addPeer(<span class=\"string\">&quot;enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切换到第一个控制台\"><a href=\"#切换到第一个控制台\" class=\"headerlink\" title=\"切换到第一个控制台\"></a>切换到第一个控制台</h5><p>查看建立的联系数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; net.peerCount</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>peerCount&#x3D;1，说明已经建立了联系</p>\n<h5 id=\"开始进行交易\"><a href=\"#开始进行交易\" class=\"headerlink\" title=\"开始进行交易\"></a>开始进行交易</h5><p>切换到一个控制台，交易之前，需要先解锁账号才行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[0], <span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>返回true说明已经解锁成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from: <span class=\"string\">&quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;</span>, to: <span class=\"string\">&quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;</span>, value: web3.toWei(1, <span class=\"string\">&quot;ether&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>to和form分别是接受和发送的账号，也就是personal.listAccounts里面的账号</p>\n<p>查看确认下交易信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.pendingTransactions</span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    blockHash: null,</span><br><span class=\"line\">    blockNumber: null,</span><br><span class=\"line\">    from: <span class=\"string\">&quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;</span>,</span><br><span class=\"line\">    gas: 90000,</span><br><span class=\"line\">    gasPrice: 18000000000,</span><br><span class=\"line\">    <span class=\"built_in\">hash</span>: <span class=\"string\">&quot;0x6146513432b27b6a27f54b64fcf0a30dc90290452dfd25e282a05aaf423f4afa&quot;</span>,</span><br><span class=\"line\">    input: <span class=\"string\">&quot;0x&quot;</span>,</span><br><span class=\"line\">    nonce: 0,</span><br><span class=\"line\">    r: <span class=\"string\">&quot;0x77644ff132f800da9b2d8133c796916f956061a491b55e3cbbd0d710f5157199&quot;</span>,</span><br><span class=\"line\">    s: <span class=\"string\">&quot;0x9dbe268e152e5fc15421efa5b00e5d4a601ef4cb2655b577901fd96c5d3c959&quot;</span>,</span><br><span class=\"line\">    to: <span class=\"string\">&quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;</span>,</span><br><span class=\"line\">    transactionIndex: 0,</span><br><span class=\"line\">    v: <span class=\"string\">&quot;0x42&quot;</span>,</span><br><span class=\"line\">    value: 1000000000000000000</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>开始进行挖矿，使交易生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"确认交易是否成功\"><a href=\"#确认交易是否成功\" class=\"headerlink\" title=\"确认交易是否成功\"></a>确认交易是否成功</h5><p>在一个和第二个控制台分别运行命令，确认是否交易成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\"><a href=\"#挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\" class=\"headerlink\" title=\"挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。\"></a>挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。</h5><p><img src=\"/uploads/2018/01/CPU%E5%90%83%E6%BB%A1.png\"></p>\n<p><img src=\"/uploads/2018/01/io%E8%AF%BB%E5%86%99.png\"></p>\n<h5 id=\"还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\"><a href=\"#还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\" class=\"headerlink\" title=\"还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。\"></a>还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。</h5><h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><p><a href=\"http://www.cnblogs.com/zl03jsj/category/997608.html\">blockchain随笔</a></p>\n"},{"title":"Git 分支（branch）的使用整理","id":"62","date":"2017-08-24T11:42:06.000Z","_content":"\n> 平时git branch用的比较少，大多数用的git add/commit/pull/push用的比较多，不过也特意找了一些资料 完整资料请点击[这里](http://blog.jobbole.com/78960/)或者[这里](http://www.open-open.com/lib/view/open1328069889514.html)\n> \n> 每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。\n<!-- more -->\n#### 1）我们在github创建一个test的项目，创建过程自行操作\n\n![](/uploads/2017/08/1469950279275.png)\n\n#### 2）我们把项目`` `git clone` ``到本地\n\n```bash\n $ git clone https://github.com/tyl569/test.git ./\n Cloning into '.'...\n warning: You appear to have cloned an empty repository.\n Checking connectivity... done.\n```\n\n#### 3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world. 当做项目好了。\n\n```tex\nhello ,world.\n```\n\n#### 4）ok，接下来就是套路操作了。\n\n```bash\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n$ git add .\n$ git commit -m 初次提交项目\n[master (root-commit) 97b26e5] 初次提交项目\n 1 file changed, 1 insertion(+)\n create mode 100644 test.txt\n\n$ git push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 240 bytes  0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      master -> master\n```\n\n#### 5）可以从`` `git push` ``结果看到，这是一个新的分支。\n\n#### 6）创建一个新的分支，并且切换到新的分支上面。\n\n```bash\n$ git branch new\n$ git checkout new\nSwitched to branch 'new'\n## 提示已经切换到new分支\n```\n\n#### 7）此时在本地项目做一些改动，然后提交到github上面。\n\n```bash\n# git add/commit等操作省略\n$ git push\nfatal: The current branch new has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin new\n```\n\n#### 在`` `git push` ``的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\n\n```bash\n$ git push --set-upstream origin new\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 283 bytes  0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      new -> new\nBranch new set up to track remote branch new from origin.\n```\n\n#### 8）查看github，会看到合并分支的请求\n\n![](/uploads/2017/08/1469951539710.png)\n\n#### 查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户``` `pull``或者``clone` ```的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\n\n![](/uploads/2017/08/1469951597308.png) ![](/uploads/2017/08/1469951611981.png)\n\n#### 9）如果功能在new分支上面开发完之后，合并分支。\n\n```bash\n$  git checkout master\n$ git merge new\nUpdating 97b26e5..96d3fe8\nFast-forward\n test.txt  5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n```\n\n#### 10）这个时候，就会把new分支的改动，合并到master分支了，然后`` `push` ``\n\n```bash\ngit push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n   97b26e5..96d3fe8  master -> master\n```\n\n![](/uploads/2017/08/1469952187908.png) ![](/uploads/2017/08/1469952201409.png)\n\n* * *\n\n### 分支合并的作用：\n\n> *   可以独立开发某个功能或者模块\n> *   如果功能没有搞完，也可以`` `push` ``，对项目没有影响","source":"_posts/git-branch.md","raw":"---\ntitle: Git 分支（branch）的使用整理\ntags: []\nid: '62'\ncategories:\n  - - Git\ndate: 2017-08-24 19:42:06\n---\n\n> 平时git branch用的比较少，大多数用的git add/commit/pull/push用的比较多，不过也特意找了一些资料 完整资料请点击[这里](http://blog.jobbole.com/78960/)或者[这里](http://www.open-open.com/lib/view/open1328069889514.html)\n> \n> 每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。\n<!-- more -->\n#### 1）我们在github创建一个test的项目，创建过程自行操作\n\n![](/uploads/2017/08/1469950279275.png)\n\n#### 2）我们把项目`` `git clone` ``到本地\n\n```bash\n $ git clone https://github.com/tyl569/test.git ./\n Cloning into '.'...\n warning: You appear to have cloned an empty repository.\n Checking connectivity... done.\n```\n\n#### 3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world. 当做项目好了。\n\n```tex\nhello ,world.\n```\n\n#### 4）ok，接下来就是套路操作了。\n\n```bash\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n$ git add .\n$ git commit -m 初次提交项目\n[master (root-commit) 97b26e5] 初次提交项目\n 1 file changed, 1 insertion(+)\n create mode 100644 test.txt\n\n$ git push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 240 bytes  0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      master -> master\n```\n\n#### 5）可以从`` `git push` ``结果看到，这是一个新的分支。\n\n#### 6）创建一个新的分支，并且切换到新的分支上面。\n\n```bash\n$ git branch new\n$ git checkout new\nSwitched to branch 'new'\n## 提示已经切换到new分支\n```\n\n#### 7）此时在本地项目做一些改动，然后提交到github上面。\n\n```bash\n# git add/commit等操作省略\n$ git push\nfatal: The current branch new has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin new\n```\n\n#### 在`` `git push` ``的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\n\n```bash\n$ git push --set-upstream origin new\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 283 bytes  0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      new -> new\nBranch new set up to track remote branch new from origin.\n```\n\n#### 8）查看github，会看到合并分支的请求\n\n![](/uploads/2017/08/1469951539710.png)\n\n#### 查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户``` `pull``或者``clone` ```的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\n\n![](/uploads/2017/08/1469951597308.png) ![](/uploads/2017/08/1469951611981.png)\n\n#### 9）如果功能在new分支上面开发完之后，合并分支。\n\n```bash\n$  git checkout master\n$ git merge new\nUpdating 97b26e5..96d3fe8\nFast-forward\n test.txt  5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n```\n\n#### 10）这个时候，就会把new分支的改动，合并到master分支了，然后`` `push` ``\n\n```bash\ngit push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n   97b26e5..96d3fe8  master -> master\n```\n\n![](/uploads/2017/08/1469952187908.png) ![](/uploads/2017/08/1469952201409.png)\n\n* * *\n\n### 分支合并的作用：\n\n> *   可以独立开发某个功能或者模块\n> *   如果功能没有搞完，也可以`` `push` ``，对项目没有影响","slug":"git-branch","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mfh001z417tfvash8g9","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>平时git branch用的比较少，大多数用的git add&#x2F;commit&#x2F;pull&#x2F;push用的比较多，不过也特意找了一些资料 完整资料请点击<a href=\"http://blog.jobbole.com/78960/\">这里</a>或者<a href=\"http://www.open-open.com/lib/view/open1328069889514.html\">这里</a></p>\n<p>每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h4 id=\"1）我们在github创建一个test的项目，创建过程自行操作\"><a href=\"#1）我们在github创建一个test的项目，创建过程自行操作\" class=\"headerlink\" title=\"1）我们在github创建一个test的项目，创建过程自行操作\"></a>1）我们在github创建一个test的项目，创建过程自行操作</h4><p><img src=\"/uploads/2017/08/1469950279275.png\"></p>\n<h4 id=\"2）我们把项目-git-clone-到本地\"><a href=\"#2）我们把项目-git-clone-到本地\" class=\"headerlink\" title=\"2）我们把项目`git clone`到本地\"></a>2）我们把项目<code>`git clone`</code>到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tyl569/test.git ./</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;.&#x27;</span>...</span><br><span class=\"line\">warning: You appear to have cloned an empty repository.</span><br><span class=\"line\">Checking connectivity... <span class=\"keyword\">done</span>.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\"><a href=\"#3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\" class=\"headerlink\" title=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world. 当做项目好了。\"></a>3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world. 当做项目好了。</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello ,world.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）ok，接下来就是套路操作了。\"><a href=\"#4）ok，接下来就是套路操作了。\" class=\"headerlink\" title=\"4）ok，接下来就是套路操作了。\"></a>4）ok，接下来就是套路操作了。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">Initial commit</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">        test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">&quot;git add&quot;</span> to track)</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m 初次提交项目</span><br><span class=\"line\">[master (root-commit) 97b26e5] 初次提交项目</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>: tyl569</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tyl569@github.com&#x27;</span>:</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Counting objects: 3, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (3/3), 240 bytes  0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/tyl569/test.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5）可以从-git-push-结果看到，这是一个新的分支。\"><a href=\"#5）可以从-git-push-结果看到，这是一个新的分支。\" class=\"headerlink\" title=\"5）可以从`git push`结果看到，这是一个新的分支。\"></a>5）可以从<code>`git push`</code>结果看到，这是一个新的分支。</h4><h4 id=\"6）创建一个新的分支，并且切换到新的分支上面。\"><a href=\"#6）创建一个新的分支，并且切换到新的分支上面。\" class=\"headerlink\" title=\"6）创建一个新的分支，并且切换到新的分支上面。\"></a>6）创建一个新的分支，并且切换到新的分支上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch new</span><br><span class=\"line\">$ git checkout new</span><br><span class=\"line\">Switched to branch <span class=\"string\">&#x27;new&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">## 提示已经切换到new分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7）此时在本地项目做一些改动，然后提交到github上面。\"><a href=\"#7）此时在本地项目做一些改动，然后提交到github上面。\" class=\"headerlink\" title=\"7）此时在本地项目做一些改动，然后提交到github上面。\"></a>7）此时在本地项目做一些改动，然后提交到github上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git add/commit等操作省略</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\">fatal: The current branch new has no upstream branch.</span><br><span class=\"line\">To push the current branch and <span class=\"built_in\">set</span> the remote as upstream, use</span><br><span class=\"line\"></span><br><span class=\"line\">    git push --set-upstream origin new</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-git-push-的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"><a href=\"#在-git-push-的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\" class=\"headerlink\" title=\"在`git push`的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"></a>在<code>`git push`</code>的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --set-upstream origin new</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>: tyl569</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tyl569@github.com&#x27;</span>:</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Counting objects: 3, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (3/3), 283 bytes  0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/tyl569/test.git</span><br><span class=\"line\"> * [new branch]      new -&gt; new</span><br><span class=\"line\">Branch new <span class=\"built_in\">set</span> up to track remote branch new from origin.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8）查看github，会看到合并分支的请求\"><a href=\"#8）查看github，会看到合并分支的请求\" class=\"headerlink\" title=\"8）查看github，会看到合并分支的请求\"></a>8）查看github，会看到合并分支的请求</h4><p><img src=\"/uploads/2017/08/1469951539710.png\"></p>\n<h4 id=\"查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户-pull-或者-clone-的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"><a href=\"#查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户-pull-或者-clone-的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\" class=\"headerlink\" title=\"查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户`pull``或者``clone`的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"></a>查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户<code>`pull``或者``clone`</code>的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。</h4><p><img src=\"/uploads/2017/08/1469951597308.png\"> <img src=\"/uploads/2017/08/1469951611981.png\"></p>\n<h4 id=\"9）如果功能在new分支上面开发完之后，合并分支。\"><a href=\"#9）如果功能在new分支上面开发完之后，合并分支。\" class=\"headerlink\" title=\"9）如果功能在new分支上面开发完之后，合并分支。\"></a>9）如果功能在new分支上面开发完之后，合并分支。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git checkout master</span><br><span class=\"line\">$ git merge new</span><br><span class=\"line\">Updating 97b26e5..96d3fe8</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> test.txt  5 ++++-</span><br><span class=\"line\"> 1 file changed, 4 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后-push\"><a href=\"#10）这个时候，就会把new分支的改动，合并到master分支了，然后-push\" class=\"headerlink\" title=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后`push`\"></a>10）这个时候，就会把new分支的改动，合并到master分支了，然后<code>`push`</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>: tyl569</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tyl569@github.com&#x27;</span>:</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/tyl569/test.git</span><br><span class=\"line\">   97b26e5..96d3fe8  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/1469952187908.png\"> <img src=\"/uploads/2017/08/1469952201409.png\"></p>\n<hr>\n<h3 id=\"分支合并的作用：\"><a href=\"#分支合并的作用：\" class=\"headerlink\" title=\"分支合并的作用：\"></a>分支合并的作用：</h3><blockquote>\n<ul>\n<li>可以独立开发某个功能或者模块</li>\n<li>如果功能没有搞完，也可以<code>`push`</code>，对项目没有影响</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>平时git branch用的比较少，大多数用的git add&#x2F;commit&#x2F;pull&#x2F;push用的比较多，不过也特意找了一些资料 完整资料请点击<a href=\"http://blog.jobbole.com/78960/\">这里</a>或者<a href=\"http://www.open-open.com/lib/view/open1328069889514.html\">这里</a></p>\n<p>每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。</p>\n</blockquote>","more":"<h4 id=\"1）我们在github创建一个test的项目，创建过程自行操作\"><a href=\"#1）我们在github创建一个test的项目，创建过程自行操作\" class=\"headerlink\" title=\"1）我们在github创建一个test的项目，创建过程自行操作\"></a>1）我们在github创建一个test的项目，创建过程自行操作</h4><p><img src=\"/uploads/2017/08/1469950279275.png\"></p>\n<h4 id=\"2）我们把项目-git-clone-到本地\"><a href=\"#2）我们把项目-git-clone-到本地\" class=\"headerlink\" title=\"2）我们把项目`git clone`到本地\"></a>2）我们把项目<code>`git clone`</code>到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tyl569/test.git ./</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;.&#x27;</span>...</span><br><span class=\"line\">warning: You appear to have cloned an empty repository.</span><br><span class=\"line\">Checking connectivity... <span class=\"keyword\">done</span>.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\"><a href=\"#3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\" class=\"headerlink\" title=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world. 当做项目好了。\"></a>3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world. 当做项目好了。</h4><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello ,world.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）ok，接下来就是套路操作了。\"><a href=\"#4）ok，接下来就是套路操作了。\" class=\"headerlink\" title=\"4）ok，接下来就是套路操作了。\"></a>4）ok，接下来就是套路操作了。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">Initial commit</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">        test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">&quot;git add&quot;</span> to track)</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m 初次提交项目</span><br><span class=\"line\">[master (root-commit) 97b26e5] 初次提交项目</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>: tyl569</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tyl569@github.com&#x27;</span>:</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Counting objects: 3, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (3/3), 240 bytes  0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/tyl569/test.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5）可以从-git-push-结果看到，这是一个新的分支。\"><a href=\"#5）可以从-git-push-结果看到，这是一个新的分支。\" class=\"headerlink\" title=\"5）可以从`git push`结果看到，这是一个新的分支。\"></a>5）可以从<code>`git push`</code>结果看到，这是一个新的分支。</h4><h4 id=\"6）创建一个新的分支，并且切换到新的分支上面。\"><a href=\"#6）创建一个新的分支，并且切换到新的分支上面。\" class=\"headerlink\" title=\"6）创建一个新的分支，并且切换到新的分支上面。\"></a>6）创建一个新的分支，并且切换到新的分支上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch new</span><br><span class=\"line\">$ git checkout new</span><br><span class=\"line\">Switched to branch <span class=\"string\">&#x27;new&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">## 提示已经切换到new分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7）此时在本地项目做一些改动，然后提交到github上面。\"><a href=\"#7）此时在本地项目做一些改动，然后提交到github上面。\" class=\"headerlink\" title=\"7）此时在本地项目做一些改动，然后提交到github上面。\"></a>7）此时在本地项目做一些改动，然后提交到github上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git add/commit等操作省略</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\">fatal: The current branch new has no upstream branch.</span><br><span class=\"line\">To push the current branch and <span class=\"built_in\">set</span> the remote as upstream, use</span><br><span class=\"line\"></span><br><span class=\"line\">    git push --set-upstream origin new</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-git-push-的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"><a href=\"#在-git-push-的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\" class=\"headerlink\" title=\"在`git push`的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"></a>在<code>`git push`</code>的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --set-upstream origin new</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>: tyl569</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tyl569@github.com&#x27;</span>:</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Counting objects: 3, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (3/3), 283 bytes  0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/tyl569/test.git</span><br><span class=\"line\"> * [new branch]      new -&gt; new</span><br><span class=\"line\">Branch new <span class=\"built_in\">set</span> up to track remote branch new from origin.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8）查看github，会看到合并分支的请求\"><a href=\"#8）查看github，会看到合并分支的请求\" class=\"headerlink\" title=\"8）查看github，会看到合并分支的请求\"></a>8）查看github，会看到合并分支的请求</h4><p><img src=\"/uploads/2017/08/1469951539710.png\"></p>\n<h4 id=\"查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户-pull-或者-clone-的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"><a href=\"#查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户-pull-或者-clone-的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\" class=\"headerlink\" title=\"查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户`pull``或者``clone`的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"></a>查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户<code>`pull``或者``clone`</code>的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。</h4><p><img src=\"/uploads/2017/08/1469951597308.png\"> <img src=\"/uploads/2017/08/1469951611981.png\"></p>\n<h4 id=\"9）如果功能在new分支上面开发完之后，合并分支。\"><a href=\"#9）如果功能在new分支上面开发完之后，合并分支。\" class=\"headerlink\" title=\"9）如果功能在new分支上面开发完之后，合并分支。\"></a>9）如果功能在new分支上面开发完之后，合并分支。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git checkout master</span><br><span class=\"line\">$ git merge new</span><br><span class=\"line\">Updating 97b26e5..96d3fe8</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> test.txt  5 ++++-</span><br><span class=\"line\"> 1 file changed, 4 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后-push\"><a href=\"#10）这个时候，就会把new分支的改动，合并到master分支了，然后-push\" class=\"headerlink\" title=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后`push`\"></a>10）这个时候，就会把new分支的改动，合并到master分支了，然后<code>`push`</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>: tyl569</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tyl569@github.com&#x27;</span>:</span><br><span class=\"line\">git: <span class=\"string\">&#x27;credential-osxkeychain&#x27;</span> is not a git <span class=\"built_in\">command</span>. See <span class=\"string\">&#x27;git --help&#x27;</span>.</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/tyl569/test.git</span><br><span class=\"line\">   97b26e5..96d3fe8  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/1469952187908.png\"> <img src=\"/uploads/2017/08/1469952201409.png\"></p>\n<hr>\n<h3 id=\"分支合并的作用：\"><a href=\"#分支合并的作用：\" class=\"headerlink\" title=\"分支合并的作用：\"></a>分支合并的作用：</h3><blockquote>\n<ul>\n<li>可以独立开发某个功能或者模块</li>\n<li>如果功能没有搞完，也可以<code>`push`</code>，对项目没有影响</li>\n</ul>\n</blockquote>"},{"title":"Git Push 出现错误处理","id":"63","date":"2017-08-24T11:42:45.000Z","_content":"\n#### 这几次一直使用`git push`出现如下错误，百度一直没有找到好的解决办法\n\n```bash\nremote: error: insufficient permission for adding an object to repository database ./objects\nremote: fatal: failed to write object\nerror: unpack failed: unpack-objects abnormal exit\nTo git@GIT-ADDRESS\n ! [remote rejected] develop -> develop (unpacker error)\nerror: failed to push some refs to 'git@GIT-ADDRESS'\n```\n<!-- more -->\n#### 基本上每次都是绕开：\n\n```bash\n$ git remote set-url origin HTTPS\n#HTTPS 为https的项目地址\n$ git push\n#输入用户名\n#输入密码\n```\n\n#### 今天终于找到了解决办法：\n\n```bash\n#切换为ssh\n$ git config --global push.default matching\n$ git push\n```\n\n#### 拓展：\n\n```bash\n$ git push origin master\n```\n\n上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。\n\n```bash\n$ git push origin\n# git push\n```\n\n上面命令表示，将当前分支推送到origin主机的对应分支。\n\n不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。\n\n```bash\n$ git config --global push.default matching\n# 或者\n$ git config --global push.default simple\n```\n\n```bash\n$ git push --force origin\n```\n\n上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。","source":"_posts/git-push-error.md","raw":"---\ntitle: Git Push 出现错误处理\ntags: []\nid: '63'\ncategories:\n  - - Git\ndate: 2017-08-24 19:42:45\n---\n\n#### 这几次一直使用`git push`出现如下错误，百度一直没有找到好的解决办法\n\n```bash\nremote: error: insufficient permission for adding an object to repository database ./objects\nremote: fatal: failed to write object\nerror: unpack failed: unpack-objects abnormal exit\nTo git@GIT-ADDRESS\n ! [remote rejected] develop -> develop (unpacker error)\nerror: failed to push some refs to 'git@GIT-ADDRESS'\n```\n<!-- more -->\n#### 基本上每次都是绕开：\n\n```bash\n$ git remote set-url origin HTTPS\n#HTTPS 为https的项目地址\n$ git push\n#输入用户名\n#输入密码\n```\n\n#### 今天终于找到了解决办法：\n\n```bash\n#切换为ssh\n$ git config --global push.default matching\n$ git push\n```\n\n#### 拓展：\n\n```bash\n$ git push origin master\n```\n\n上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。\n\n```bash\n$ git push origin\n# git push\n```\n\n上面命令表示，将当前分支推送到origin主机的对应分支。\n\n不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。\n\n```bash\n$ git config --global push.default matching\n# 或者\n$ git config --global push.default simple\n```\n\n```bash\n$ git push --force origin\n```\n\n上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。","slug":"git-push-error","published":1,"updated":"2022-03-12T23:52:58.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mfi0022417t32bihrv1","content":"<h4 id=\"这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\"><a href=\"#这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\" class=\"headerlink\" title=\"这几次一直使用git push出现如下错误，百度一直没有找到好的解决办法\"></a>这几次一直使用<code>git push</code>出现如下错误，百度一直没有找到好的解决办法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: error: insufficient permission <span class=\"keyword\">for</span> adding an object to repository database ./objects</span><br><span class=\"line\">remote: fatal: failed to write object</span><br><span class=\"line\">error: unpack failed: unpack-objects abnormal <span class=\"built_in\">exit</span></span><br><span class=\"line\">To git@GIT-ADDRESS</span><br><span class=\"line\"> ! [remote rejected] develop -&gt; develop (unpacker error)</span><br><span class=\"line\">error: failed to push some refs to <span class=\"string\">&#x27;git@GIT-ADDRESS&#x27;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"基本上每次都是绕开：\"><a href=\"#基本上每次都是绕开：\" class=\"headerlink\" title=\"基本上每次都是绕开：\"></a>基本上每次都是绕开：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote set-url origin HTTPS</span><br><span class=\"line\"><span class=\"comment\">#HTTPS 为https的项目地址</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"comment\">#输入用户名</span></span><br><span class=\"line\"><span class=\"comment\">#输入密码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"今天终于找到了解决办法：\"><a href=\"#今天终于找到了解决办法：\" class=\"headerlink\" title=\"今天终于找到了解决办法：\"></a>今天终于找到了解决办法：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切换为ssh</span></span><br><span class=\"line\">$ git config --global push.default matching</span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin</span><br><span class=\"line\"><span class=\"comment\"># git push</span></span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>\n<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global push.default matching</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ git config --global push.default simple</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --force origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\"><a href=\"#这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\" class=\"headerlink\" title=\"这几次一直使用git push出现如下错误，百度一直没有找到好的解决办法\"></a>这几次一直使用<code>git push</code>出现如下错误，百度一直没有找到好的解决办法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: error: insufficient permission <span class=\"keyword\">for</span> adding an object to repository database ./objects</span><br><span class=\"line\">remote: fatal: failed to write object</span><br><span class=\"line\">error: unpack failed: unpack-objects abnormal <span class=\"built_in\">exit</span></span><br><span class=\"line\">To git@GIT-ADDRESS</span><br><span class=\"line\"> ! [remote rejected] develop -&gt; develop (unpacker error)</span><br><span class=\"line\">error: failed to push some refs to <span class=\"string\">&#x27;git@GIT-ADDRESS&#x27;</span></span><br></pre></td></tr></table></figure>","more":"<h4 id=\"基本上每次都是绕开：\"><a href=\"#基本上每次都是绕开：\" class=\"headerlink\" title=\"基本上每次都是绕开：\"></a>基本上每次都是绕开：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote set-url origin HTTPS</span><br><span class=\"line\"><span class=\"comment\">#HTTPS 为https的项目地址</span></span><br><span class=\"line\">$ git push</span><br><span class=\"line\"><span class=\"comment\">#输入用户名</span></span><br><span class=\"line\"><span class=\"comment\">#输入密码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"今天终于找到了解决办法：\"><a href=\"#今天终于找到了解决办法：\" class=\"headerlink\" title=\"今天终于找到了解决办法：\"></a>今天终于找到了解决办法：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切换为ssh</span></span><br><span class=\"line\">$ git config --global push.default matching</span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin</span><br><span class=\"line\"><span class=\"comment\"># git push</span></span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>\n<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global push.default matching</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ git config --global push.default simple</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --force origin</span><br></pre></td></tr></table></figure>\n\n<p>上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>"},{"title":"Git SSH和HTTPS互相切换","id":"141","date":"2017-08-24T12:19:12.000Z","_content":"\n#### 先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现\n<!-- more -->\n#### 1) 查看当前remote版本\n\n```bash\n$ git remote -v\norigin  git@your domain:tylerteng/project.git (fetch)\norigin  git@your domain:tylerteng/project.git (push)\n```\n\n#### 2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\n\n```bash\n$ git remote set-url origin https://your domain/tylerteng/project.git\n```\n\n#### 3) 然后你再进行push等操作，就是按照HTTPS进行提交\n\n```bash\n$ git push\nUsername for 'https://your domain':\nPassword for 'https://tylerteng@your domain':\n```","source":"_posts/git-ssh-https.md","raw":"---\ntitle: Git SSH和HTTPS互相切换\ntags: []\nid: '141'\ncategories:\n  - - Git\ndate: 2017-08-24 20:19:12\n---\n\n#### 先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现\n<!-- more -->\n#### 1) 查看当前remote版本\n\n```bash\n$ git remote -v\norigin  git@your domain:tylerteng/project.git (fetch)\norigin  git@your domain:tylerteng/project.git (push)\n```\n\n#### 2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\n\n```bash\n$ git remote set-url origin https://your domain/tylerteng/project.git\n```\n\n#### 3) 然后你再进行push等操作，就是按照HTTPS进行提交\n\n```bash\n$ git push\nUsername for 'https://your domain':\nPassword for 'https://tylerteng@your domain':\n```","slug":"git-ssh-https","published":1,"updated":"2022-03-12T23:52:58.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mfk0027417t4r7y5r31","content":"<h4 id=\"先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\"><a href=\"#先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\" class=\"headerlink\" title=\"先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现\"></a>先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现</h4><span id=\"more\"></span>\n<h4 id=\"1-查看当前remote版本\"><a href=\"#1-查看当前remote版本\" class=\"headerlink\" title=\"1) 查看当前remote版本\"></a>1) 查看当前remote版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@your domain:tylerteng/project.git (fetch)</span><br><span class=\"line\">origin  git@your domain:tylerteng/project.git (push)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\"><a href=\"#2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\" class=\"headerlink\" title=\"2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\"></a>2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote set-url origin https://your domain/tylerteng/project.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-然后你再进行push等操作，就是按照HTTPS进行提交\"><a href=\"#3-然后你再进行push等操作，就是按照HTTPS进行提交\" class=\"headerlink\" title=\"3) 然后你再进行push等操作，就是按照HTTPS进行提交\"></a>3) 然后你再进行push等操作，就是按照HTTPS进行提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://your domain&#x27;</span>:</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tylerteng@your domain&#x27;</span>:</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\"><a href=\"#先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\" class=\"headerlink\" title=\"先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现\"></a>先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现</h4>","more":"<h4 id=\"1-查看当前remote版本\"><a href=\"#1-查看当前remote版本\" class=\"headerlink\" title=\"1) 查看当前remote版本\"></a>1) 查看当前remote版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@your domain:tylerteng/project.git (fetch)</span><br><span class=\"line\">origin  git@your domain:tylerteng/project.git (push)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\"><a href=\"#2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\" class=\"headerlink\" title=\"2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\"></a>2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote set-url origin https://your domain/tylerteng/project.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-然后你再进行push等操作，就是按照HTTPS进行提交\"><a href=\"#3-然后你再进行push等操作，就是按照HTTPS进行提交\" class=\"headerlink\" title=\"3) 然后你再进行push等操作，就是按照HTTPS进行提交\"></a>3) 然后你再进行push等操作，就是按照HTTPS进行提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://your domain&#x27;</span>:</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://tylerteng@your domain&#x27;</span>:</span><br></pre></td></tr></table></figure>"},{"title":"贪心算法","id":"634","date":"2019-09-30T06:20:34.000Z","_content":"\n### 描述\n\n所谓的贪心算法，是在对问题求解的时候，总是做出在当前看来是最好的选择。也就是说，不从整体最优上进行考虑，所做的仅仅是在某种意义上的局部最优解。\n\n贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。贪心算法不是对所有问题都能得到最优解，选择的贪心策略必须具备无后效性，即其他过程，不会影响以前的状态，完全是局部的。\n\n### 基本思路\n\n*   建立数学模型来描述问题\n*   把求解的问题分成若干个子问题\n*   对每一个子问题求解，得到子问题的局部最优解\n*   把子问题的局部最优解合成原来界问题的一个解\n\n### 实例\n\n#### 两地调度（LeetCode: 1029）\n\n公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs\\[i\\]\\[0\\]，飞往 B 市的费用为 costs\\[i\\]\\[1\\]。\n\n返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达\n\n示例：\n\n输入：\\[\\[10,20\\],\\[30,200\\],\\[400,50\\],\\[30,20\\]\\] 输出：110 解释： 第一个人去 A 市，费用为 10。 第二个人去 A 市，费用为 30。 第三个人去 B 市，费用为 50。 第四个人去 B 市，费用为 20。\n\n最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。\n\n#### 算法思路\n\n假设，第一个人去A的成本是a1,去B的成本是b1,那么他去A或者去B的成本差距就是a1-b1，这个成本的差距可证可负，如果成本差距是正数，那么说明这个人去A的价格要比去B的价格贵。\n\n同理，第二个人去A的成本是a2，去B的成本B2，那么他去A和B的成本差距就是a2-b2\n\n...\n\n**那么所有人去A和B的成本差的总和就是(a1-b1)+(a2-b2)....+(a2n-b2n)，根据题目的要求，如果安排的成本是最小，那么把成本差从小到大进行排序，那么直接让前n个人去A，另外n个人去B，就能得到满足题干的解了。**\n\n员工\n\nA\n\nB\n\n成本差\n\n1\n\n10\n\nb1\n\na1-b1\n\n2\n\na2\n\nb2\n\na2-b2\n\n3\n\na3\n\nb3\n\na3-b3\n\n4\n\na4\n\nb4\n\na4-b4\n\n5\n\na5\n\nb5\n\na5-b5\n\n2n\n\na2n\n\nb2n\n\na2n-b2n\n\n将题干引入模型：\n\n员工\n\nA\n\nB\n\n成本差\n\n1\n\n10\n\n20\n\n\\-10\n\n2\n\n30\n\n200\n\n\\-170\n\n3\n\n400\n\n50\n\n350\n\n4\n\n30\n\n20\n\n10\n\n成本差分别是 -10，-170，350，10 排序之后的结果： -170，-10，10，350 那么直接让用户2和用户1去A，让用户4和用户3去B。 最低费用是 30+10+50+20=110\n\n#### 算法实现\n\n```php\nclass Solution {\n\n    /**\n     * @param Integer[][] $costs\n     * @return Integer\n     */\n    function twoCitySchedCost($costs) {\n        $additional = [];\n        $diff = [];\n        foreach ($costs as &$cost) {\n            $cost['diff'] = $cost[0]-$cost[1];\n            $diff[] = $cost[0]-$cost[1];\n            unset ($cost);\n        }\n        array_multisort($diff, SORT_ASC,$costs );\n        $total = 0;\n        $n = count($costs) / 2;\n        for ($i=0; $i< $n; $i++) {\n            $total += $costs[$i][0] + $costs[$i+$n][1];\n        }\n        return $total;\n    }\n}\n```","source":"_posts/greedy.md","raw":"---\ntitle: 贪心算法\ntags:\n  - PHP\n  - 算法\n  - 贪心算法\nid: '634'\ncategories:\n  - - 算法\ndate: 2019-09-30 14:20:34\n---\n\n### 描述\n\n所谓的贪心算法，是在对问题求解的时候，总是做出在当前看来是最好的选择。也就是说，不从整体最优上进行考虑，所做的仅仅是在某种意义上的局部最优解。\n\n贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。贪心算法不是对所有问题都能得到最优解，选择的贪心策略必须具备无后效性，即其他过程，不会影响以前的状态，完全是局部的。\n\n### 基本思路\n\n*   建立数学模型来描述问题\n*   把求解的问题分成若干个子问题\n*   对每一个子问题求解，得到子问题的局部最优解\n*   把子问题的局部最优解合成原来界问题的一个解\n\n### 实例\n\n#### 两地调度（LeetCode: 1029）\n\n公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs\\[i\\]\\[0\\]，飞往 B 市的费用为 costs\\[i\\]\\[1\\]。\n\n返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达\n\n示例：\n\n输入：\\[\\[10,20\\],\\[30,200\\],\\[400,50\\],\\[30,20\\]\\] 输出：110 解释： 第一个人去 A 市，费用为 10。 第二个人去 A 市，费用为 30。 第三个人去 B 市，费用为 50。 第四个人去 B 市，费用为 20。\n\n最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。\n\n#### 算法思路\n\n假设，第一个人去A的成本是a1,去B的成本是b1,那么他去A或者去B的成本差距就是a1-b1，这个成本的差距可证可负，如果成本差距是正数，那么说明这个人去A的价格要比去B的价格贵。\n\n同理，第二个人去A的成本是a2，去B的成本B2，那么他去A和B的成本差距就是a2-b2\n\n...\n\n**那么所有人去A和B的成本差的总和就是(a1-b1)+(a2-b2)....+(a2n-b2n)，根据题目的要求，如果安排的成本是最小，那么把成本差从小到大进行排序，那么直接让前n个人去A，另外n个人去B，就能得到满足题干的解了。**\n\n员工\n\nA\n\nB\n\n成本差\n\n1\n\n10\n\nb1\n\na1-b1\n\n2\n\na2\n\nb2\n\na2-b2\n\n3\n\na3\n\nb3\n\na3-b3\n\n4\n\na4\n\nb4\n\na4-b4\n\n5\n\na5\n\nb5\n\na5-b5\n\n2n\n\na2n\n\nb2n\n\na2n-b2n\n\n将题干引入模型：\n\n员工\n\nA\n\nB\n\n成本差\n\n1\n\n10\n\n20\n\n\\-10\n\n2\n\n30\n\n200\n\n\\-170\n\n3\n\n400\n\n50\n\n350\n\n4\n\n30\n\n20\n\n10\n\n成本差分别是 -10，-170，350，10 排序之后的结果： -170，-10，10，350 那么直接让用户2和用户1去A，让用户4和用户3去B。 最低费用是 30+10+50+20=110\n\n#### 算法实现\n\n```php\nclass Solution {\n\n    /**\n     * @param Integer[][] $costs\n     * @return Integer\n     */\n    function twoCitySchedCost($costs) {\n        $additional = [];\n        $diff = [];\n        foreach ($costs as &$cost) {\n            $cost['diff'] = $cost[0]-$cost[1];\n            $diff[] = $cost[0]-$cost[1];\n            unset ($cost);\n        }\n        array_multisort($diff, SORT_ASC,$costs );\n        $total = 0;\n        $n = count($costs) / 2;\n        for ($i=0; $i< $n; $i++) {\n            $total += $costs[$i][0] + $costs[$i+$n][1];\n        }\n        return $total;\n    }\n}\n```","slug":"greedy","published":1,"updated":"2022-03-12T23:52:58.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mfm002a417t2ryh9g8b","content":"<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>所谓的贪心算法，是在对问题求解的时候，总是做出在当前看来是最好的选择。也就是说，不从整体最优上进行考虑，所做的仅仅是在某种意义上的局部最优解。</p>\n<p>贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。贪心算法不是对所有问题都能得到最优解，选择的贪心策略必须具备无后效性，即其他过程，不会影响以前的状态，完全是局部的。</p>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><ul>\n<li>建立数学模型来描述问题</li>\n<li>把求解的问题分成若干个子问题</li>\n<li>对每一个子问题求解，得到子问题的局部最优解</li>\n<li>把子问题的局部最优解合成原来界问题的一个解</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"两地调度（LeetCode-1029）\"><a href=\"#两地调度（LeetCode-1029）\" class=\"headerlink\" title=\"两地调度（LeetCode: 1029）\"></a>两地调度（LeetCode: 1029）</h4><p>公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。</p>\n<p>返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达</p>\n<p>示例：</p>\n<p>输入：[[10,20],[30,200],[400,50],[30,20]] 输出：110 解释： 第一个人去 A 市，费用为 10。 第二个人去 A 市，费用为 30。 第三个人去 B 市，费用为 50。 第四个人去 B 市，费用为 20。</p>\n<p>最低总费用为 10 + 30 + 50 + 20 &#x3D; 110，每个城市都有一半的人在面试。</p>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>假设，第一个人去A的成本是a1,去B的成本是b1,那么他去A或者去B的成本差距就是a1-b1，这个成本的差距可证可负，如果成本差距是正数，那么说明这个人去A的价格要比去B的价格贵。</p>\n<p>同理，第二个人去A的成本是a2，去B的成本B2，那么他去A和B的成本差距就是a2-b2</p>\n<p>…</p>\n<p><strong>那么所有人去A和B的成本差的总和就是(a1-b1)+(a2-b2)….+(a2n-b2n)，根据题目的要求，如果安排的成本是最小，那么把成本差从小到大进行排序，那么直接让前n个人去A，另外n个人去B，就能得到满足题干的解了。</strong></p>\n<p>员工</p>\n<p>A</p>\n<p>B</p>\n<p>成本差</p>\n<p>1</p>\n<p>10</p>\n<p>b1</p>\n<p>a1-b1</p>\n<p>2</p>\n<p>a2</p>\n<p>b2</p>\n<p>a2-b2</p>\n<p>3</p>\n<p>a3</p>\n<p>b3</p>\n<p>a3-b3</p>\n<p>4</p>\n<p>a4</p>\n<p>b4</p>\n<p>a4-b4</p>\n<p>5</p>\n<p>a5</p>\n<p>b5</p>\n<p>a5-b5</p>\n<p>2n</p>\n<p>a2n</p>\n<p>b2n</p>\n<p>a2n-b2n</p>\n<p>将题干引入模型：</p>\n<p>员工</p>\n<p>A</p>\n<p>B</p>\n<p>成本差</p>\n<p>1</p>\n<p>10</p>\n<p>20</p>\n<p>-10</p>\n<p>2</p>\n<p>30</p>\n<p>200</p>\n<p>-170</p>\n<p>3</p>\n<p>400</p>\n<p>50</p>\n<p>350</p>\n<p>4</p>\n<p>30</p>\n<p>20</p>\n<p>10</p>\n<p>成本差分别是 -10，-170，350，10 排序之后的结果： -170，-10，10，350 那么直接让用户2和用户1去A，让用户4和用户3去B。 最低费用是 30+10+50+20&#x3D;110</p>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Integer[][] $costs</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoCitySchedCost</span>(<span class=\"params\"><span class=\"variable\">$costs</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$additional</span> = [];</span><br><span class=\"line\">        <span class=\"variable\">$diff</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"variable\">$costs</span> <span class=\"keyword\">as</span> &amp;<span class=\"variable\">$cost</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$cost</span>[<span class=\"string\">&#x27;diff&#x27;</span>] = <span class=\"variable\">$cost</span>[<span class=\"number\">0</span>]-<span class=\"variable\">$cost</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"variable\">$diff</span>[] = <span class=\"variable\">$cost</span>[<span class=\"number\">0</span>]-<span class=\"variable\">$cost</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">unset</span> (<span class=\"variable\">$cost</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">array_multisort</span>(<span class=\"variable\">$diff</span>, SORT_ASC,<span class=\"variable\">$costs</span> );</span><br><span class=\"line\">        <span class=\"variable\">$total</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"variable\">$n</span> = <span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$costs</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=<span class=\"number\">0</span>; <span class=\"variable\">$i</span>&lt; <span class=\"variable\">$n</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$total</span> += <span class=\"variable\">$costs</span>[<span class=\"variable\">$i</span>][<span class=\"number\">0</span>] + <span class=\"variable\">$costs</span>[<span class=\"variable\">$i</span>+<span class=\"variable\">$n</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$total</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>所谓的贪心算法，是在对问题求解的时候，总是做出在当前看来是最好的选择。也就是说，不从整体最优上进行考虑，所做的仅仅是在某种意义上的局部最优解。</p>\n<p>贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。贪心算法不是对所有问题都能得到最优解，选择的贪心策略必须具备无后效性，即其他过程，不会影响以前的状态，完全是局部的。</p>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><ul>\n<li>建立数学模型来描述问题</li>\n<li>把求解的问题分成若干个子问题</li>\n<li>对每一个子问题求解，得到子问题的局部最优解</li>\n<li>把子问题的局部最优解合成原来界问题的一个解</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"两地调度（LeetCode-1029）\"><a href=\"#两地调度（LeetCode-1029）\" class=\"headerlink\" title=\"两地调度（LeetCode: 1029）\"></a>两地调度（LeetCode: 1029）</h4><p>公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。</p>\n<p>返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达</p>\n<p>示例：</p>\n<p>输入：[[10,20],[30,200],[400,50],[30,20]] 输出：110 解释： 第一个人去 A 市，费用为 10。 第二个人去 A 市，费用为 30。 第三个人去 B 市，费用为 50。 第四个人去 B 市，费用为 20。</p>\n<p>最低总费用为 10 + 30 + 50 + 20 &#x3D; 110，每个城市都有一半的人在面试。</p>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>假设，第一个人去A的成本是a1,去B的成本是b1,那么他去A或者去B的成本差距就是a1-b1，这个成本的差距可证可负，如果成本差距是正数，那么说明这个人去A的价格要比去B的价格贵。</p>\n<p>同理，第二个人去A的成本是a2，去B的成本B2，那么他去A和B的成本差距就是a2-b2</p>\n<p>…</p>\n<p><strong>那么所有人去A和B的成本差的总和就是(a1-b1)+(a2-b2)….+(a2n-b2n)，根据题目的要求，如果安排的成本是最小，那么把成本差从小到大进行排序，那么直接让前n个人去A，另外n个人去B，就能得到满足题干的解了。</strong></p>\n<p>员工</p>\n<p>A</p>\n<p>B</p>\n<p>成本差</p>\n<p>1</p>\n<p>10</p>\n<p>b1</p>\n<p>a1-b1</p>\n<p>2</p>\n<p>a2</p>\n<p>b2</p>\n<p>a2-b2</p>\n<p>3</p>\n<p>a3</p>\n<p>b3</p>\n<p>a3-b3</p>\n<p>4</p>\n<p>a4</p>\n<p>b4</p>\n<p>a4-b4</p>\n<p>5</p>\n<p>a5</p>\n<p>b5</p>\n<p>a5-b5</p>\n<p>2n</p>\n<p>a2n</p>\n<p>b2n</p>\n<p>a2n-b2n</p>\n<p>将题干引入模型：</p>\n<p>员工</p>\n<p>A</p>\n<p>B</p>\n<p>成本差</p>\n<p>1</p>\n<p>10</p>\n<p>20</p>\n<p>-10</p>\n<p>2</p>\n<p>30</p>\n<p>200</p>\n<p>-170</p>\n<p>3</p>\n<p>400</p>\n<p>50</p>\n<p>350</p>\n<p>4</p>\n<p>30</p>\n<p>20</p>\n<p>10</p>\n<p>成本差分别是 -10，-170，350，10 排序之后的结果： -170，-10，10，350 那么直接让用户2和用户1去A，让用户4和用户3去B。 最低费用是 30+10+50+20&#x3D;110</p>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Integer[][] $costs</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoCitySchedCost</span>(<span class=\"params\"><span class=\"variable\">$costs</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$additional</span> = [];</span><br><span class=\"line\">        <span class=\"variable\">$diff</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"variable\">$costs</span> <span class=\"keyword\">as</span> &amp;<span class=\"variable\">$cost</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$cost</span>[<span class=\"string\">&#x27;diff&#x27;</span>] = <span class=\"variable\">$cost</span>[<span class=\"number\">0</span>]-<span class=\"variable\">$cost</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"variable\">$diff</span>[] = <span class=\"variable\">$cost</span>[<span class=\"number\">0</span>]-<span class=\"variable\">$cost</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">unset</span> (<span class=\"variable\">$cost</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">array_multisort</span>(<span class=\"variable\">$diff</span>, SORT_ASC,<span class=\"variable\">$costs</span> );</span><br><span class=\"line\">        <span class=\"variable\">$total</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"variable\">$n</span> = <span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$costs</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=<span class=\"number\">0</span>; <span class=\"variable\">$i</span>&lt; <span class=\"variable\">$n</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$total</span> += <span class=\"variable\">$costs</span>[<span class=\"variable\">$i</span>][<span class=\"number\">0</span>] + <span class=\"variable\">$costs</span>[<span class=\"variable\">$i</span>+<span class=\"variable\">$n</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$total</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"【以太坊】Mac安装abigen遇到的坑","id":"760","date":"2021-05-19T00:30:41.000Z","_content":"\n### 安装devtools报错\n\n想要开发以太坊，就需要开发智能合约，需要安装aligen，Mac版本需要通过安装devtools的方式安装abigen\n\n```bash\n$ make devtools\nenv GOBIN= go install golang.org/x/tools/cmd/stringer@latest\nenv GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest\ngo: downloading github.com/kevinburke/go-bindata v3.11.0\n\ngo install github.com/kevinburke/go-bindata/go-bindata@latest: zip for github.com/kevinburke/go-bindata@v3.11.0 has unexpected file github.com/kevinburke/go-bindata@v0.0.0-20180804232615-06af60a4461b/.gitignore\n```\n\n这个原因是和镜像云有关系，导致不能安装go-bindata，我之前使用的是阿里云的镜像库，切换成官方的镜像，重新安装一下\n\n```bash\n$ go env -w  GOPROXY=https://goproxy.io,direct\n$ make devtools\nenv GOBIN= go install golang.org/x/tools/cmd/stringer@latest\nenv GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest\ngo: downloading github.com/kevinburke/go-bindata v3.22.0+incompatible\nenv GOBIN= go install github.com/fjl/gencodec@latest\ngo: downloading github.com/fjl/gencodec v0.0.0-20191126094850-e283372f291f\ngo: downloading github.com/garslo/gogen v0.0.0-20170306192744-1d203ffc1f61\ngo: downloading golang.org/x/tools v0.0.0-20191126055441-b0650ceb63d9\nenv GOBIN= go install github.com/golang/protobuf/protoc-gen-go@latest\ngo: downloading github.com/golang/protobuf v1.5.2\ngo: downloading google.golang.org/protobuf v1.26.0\nenv GOBIN= go install ./cmd/abigen\n# gopkg.in/olebedev/go-duktape.v3\nIn file included from _cgo_export.c:4:\ndebugger.go:23:13: warning: unused function '_duk_debugger_attach' [-Wunused-function]\nPlease install solc\nPlease install protoc\n```\n\n看到最后两句意思应该是缺少了`solc`和`protoc`\n\n```bash\n$ npm install -g solc-cli solc protoc\n```\n\n```bash\n$ brew install protoc-gen-go\n```\n\n重试下\n\n```bash\n$ make devtools\nIn file included from _cgo_export.c:4:\ndebugger.go:23:13: warning: unused function '_duk_debugger_attach' [-Wunused-function]\n```\n\n还是有报错，\n\n没办法，只能换个思路，\n\n后来通过官网发现，有现成的build工具 [https://geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/)\n\n![](/uploads/2021/05/WX20210519-082736.png)\n\n所以又重新下载解压了一次\n\n```bash\n$ wget -c https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz\n--2021-05-19 08:18:56--  https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz\nResolving gethstore.blob.core.windows.net... 40.113.27.176\nConnecting to gethstore.blob.core.windows.net40.113.27.176:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 45363864 (43M) [application/octet-stream]\nSaving to: ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’\n\ngeth-alltools-darwin-amd64-1.10.4-unsta 100%[=============================================================================>]  43.26M   324KB/s    in 3m 19s\n\n2021-05-19 08:22:16 (223 KB/s) - ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’ saved [45363864/45363864]\n\n$ tar zxvf geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz\n$ cd geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6\n$ ./abigen --help\nabigen [global options] command [command options] [arguments...]\n\nVERSION:\n   1.10.4-unstable-b3a1fda6-20210518\n\nCOMMANDS:\n   help                               Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --abi value                        Path to the Ethereum contract ABI json to bind, - for STDIN\n   --bin value                        Path to the Ethereum contract bytecode (generate deploy method)\n   --type value                       Struct name for the binding (default = package name)\n   --combined-json value              Path to the combined-json file generated by compiler\n   --sol value                        Path to the Ethereum contract Solidity source to build and bind\n   --solc value                       Solidity compiler to use if source builds are requested (default: \"solc\")\n   --vy value                         Path to the Ethereum contract Vyper source to build and bind\n   --vyper value                      Vyper compiler to use if source builds are requested (default: \"vyper\")\n   --exc value                        Comma separated types to exclude from binding\n   --pkg value                        Package name to generate the binding into\n   --out value                        Output file for the generated binding (default = stdout)\n   --lang value                       Destination language for the bindings (go, java, objc) (default: \"go\")\n   --alias value                      Comma separated aliases for function and event renaming, e.g. original1=alias1, original2=alias2\n   --help, -h                         show help\n   --version, -v                      print the version\n```\n\n安装成功了\n\n本文链接： [https://feilong.tech/2021/05/19/install-abigen](https://feilong.tech/2021/05/19/install-abigen)","source":"_posts/install-abigen.md","raw":"---\ntitle: 【以太坊】Mac安装abigen遇到的坑\ntags:\n  - 以太坊\nid: '760'\ncategories:\n  - - Go\n  - - 以太坊\ndate: 2021-05-19 08:30:41\n---\n\n### 安装devtools报错\n\n想要开发以太坊，就需要开发智能合约，需要安装aligen，Mac版本需要通过安装devtools的方式安装abigen\n\n```bash\n$ make devtools\nenv GOBIN= go install golang.org/x/tools/cmd/stringer@latest\nenv GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest\ngo: downloading github.com/kevinburke/go-bindata v3.11.0\n\ngo install github.com/kevinburke/go-bindata/go-bindata@latest: zip for github.com/kevinburke/go-bindata@v3.11.0 has unexpected file github.com/kevinburke/go-bindata@v0.0.0-20180804232615-06af60a4461b/.gitignore\n```\n\n这个原因是和镜像云有关系，导致不能安装go-bindata，我之前使用的是阿里云的镜像库，切换成官方的镜像，重新安装一下\n\n```bash\n$ go env -w  GOPROXY=https://goproxy.io,direct\n$ make devtools\nenv GOBIN= go install golang.org/x/tools/cmd/stringer@latest\nenv GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest\ngo: downloading github.com/kevinburke/go-bindata v3.22.0+incompatible\nenv GOBIN= go install github.com/fjl/gencodec@latest\ngo: downloading github.com/fjl/gencodec v0.0.0-20191126094850-e283372f291f\ngo: downloading github.com/garslo/gogen v0.0.0-20170306192744-1d203ffc1f61\ngo: downloading golang.org/x/tools v0.0.0-20191126055441-b0650ceb63d9\nenv GOBIN= go install github.com/golang/protobuf/protoc-gen-go@latest\ngo: downloading github.com/golang/protobuf v1.5.2\ngo: downloading google.golang.org/protobuf v1.26.0\nenv GOBIN= go install ./cmd/abigen\n# gopkg.in/olebedev/go-duktape.v3\nIn file included from _cgo_export.c:4:\ndebugger.go:23:13: warning: unused function '_duk_debugger_attach' [-Wunused-function]\nPlease install solc\nPlease install protoc\n```\n\n看到最后两句意思应该是缺少了`solc`和`protoc`\n\n```bash\n$ npm install -g solc-cli solc protoc\n```\n\n```bash\n$ brew install protoc-gen-go\n```\n\n重试下\n\n```bash\n$ make devtools\nIn file included from _cgo_export.c:4:\ndebugger.go:23:13: warning: unused function '_duk_debugger_attach' [-Wunused-function]\n```\n\n还是有报错，\n\n没办法，只能换个思路，\n\n后来通过官网发现，有现成的build工具 [https://geth.ethereum.org/downloads/](https://geth.ethereum.org/downloads/)\n\n![](/uploads/2021/05/WX20210519-082736.png)\n\n所以又重新下载解压了一次\n\n```bash\n$ wget -c https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz\n--2021-05-19 08:18:56--  https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz\nResolving gethstore.blob.core.windows.net... 40.113.27.176\nConnecting to gethstore.blob.core.windows.net40.113.27.176:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 45363864 (43M) [application/octet-stream]\nSaving to: ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’\n\ngeth-alltools-darwin-amd64-1.10.4-unsta 100%[=============================================================================>]  43.26M   324KB/s    in 3m 19s\n\n2021-05-19 08:22:16 (223 KB/s) - ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’ saved [45363864/45363864]\n\n$ tar zxvf geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz\n$ cd geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6\n$ ./abigen --help\nabigen [global options] command [command options] [arguments...]\n\nVERSION:\n   1.10.4-unstable-b3a1fda6-20210518\n\nCOMMANDS:\n   help                               Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --abi value                        Path to the Ethereum contract ABI json to bind, - for STDIN\n   --bin value                        Path to the Ethereum contract bytecode (generate deploy method)\n   --type value                       Struct name for the binding (default = package name)\n   --combined-json value              Path to the combined-json file generated by compiler\n   --sol value                        Path to the Ethereum contract Solidity source to build and bind\n   --solc value                       Solidity compiler to use if source builds are requested (default: \"solc\")\n   --vy value                         Path to the Ethereum contract Vyper source to build and bind\n   --vyper value                      Vyper compiler to use if source builds are requested (default: \"vyper\")\n   --exc value                        Comma separated types to exclude from binding\n   --pkg value                        Package name to generate the binding into\n   --out value                        Output file for the generated binding (default = stdout)\n   --lang value                       Destination language for the bindings (go, java, objc) (default: \"go\")\n   --alias value                      Comma separated aliases for function and event renaming, e.g. original1=alias1, original2=alias2\n   --help, -h                         show help\n   --version, -v                      print the version\n```\n\n安装成功了\n\n本文链接： [https://feilong.tech/2021/05/19/install-abigen](https://feilong.tech/2021/05/19/install-abigen)","slug":"install-abigen","published":1,"updated":"2022-03-13T01:18:42.687Z","_id":"cl0oi8mfp002i417tbudmas2q","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"安装devtools报错\"><a href=\"#安装devtools报错\" class=\"headerlink\" title=\"安装devtools报错\"></a>安装devtools报错</h3><p>想要开发以太坊，就需要开发智能合约，需要安装aligen，Mac版本需要通过安装devtools的方式安装abigen</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make devtools</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install golang.org/x/tools/cmd/stringer@latest</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest</span><br><span class=\"line\">go: downloading github.com/kevinburke/go-bindata v3.11.0</span><br><span class=\"line\"></span><br><span class=\"line\">go install github.com/kevinburke/go-bindata/go-bindata@latest: zip <span class=\"keyword\">for</span> github.com/kevinburke/go-bindata@v3.11.0 has unexpected file github.com/kevinburke/go-bindata@v0.0.0-20180804232615-06af60a4461b/.gitignore</span><br></pre></td></tr></table></figure>\n\n<p>这个原因是和镜像云有关系，导致不能安装go-bindata，我之前使用的是阿里云的镜像库，切换成官方的镜像，重新安装一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go <span class=\"built_in\">env</span> -w  GOPROXY=https://goproxy.io,direct</span><br><span class=\"line\">$ make devtools</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install golang.org/x/tools/cmd/stringer@latest</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest</span><br><span class=\"line\">go: downloading github.com/kevinburke/go-bindata v3.22.0+incompatible</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/fjl/gencodec@latest</span><br><span class=\"line\">go: downloading github.com/fjl/gencodec v0.0.0-20191126094850-e283372f291f</span><br><span class=\"line\">go: downloading github.com/garslo/gogen v0.0.0-20170306192744-1d203ffc1f61</span><br><span class=\"line\">go: downloading golang.org/x/tools v0.0.0-20191126055441-b0650ceb63d9</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/golang/protobuf/protoc-gen-go@latest</span><br><span class=\"line\">go: downloading github.com/golang/protobuf v1.5.2</span><br><span class=\"line\">go: downloading google.golang.org/protobuf v1.26.0</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install ./cmd/abigen</span><br><span class=\"line\"><span class=\"comment\"># gopkg.in/olebedev/go-duktape.v3</span></span><br><span class=\"line\">In file included from _cgo_export.c:4:</span><br><span class=\"line\">debugger.go:23:13: warning: unused <span class=\"keyword\">function</span> <span class=\"string\">&#x27;_duk_debugger_attach&#x27;</span> [-Wunused-<span class=\"keyword\">function</span>]</span><br><span class=\"line\">Please install solc</span><br><span class=\"line\">Please install protoc</span><br></pre></td></tr></table></figure>\n\n<p>看到最后两句意思应该是缺少了<code>solc</code>和<code>protoc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g solc-cli solc protoc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install protoc-gen-go</span><br></pre></td></tr></table></figure>\n\n<p>重试下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make devtools</span><br><span class=\"line\">In file included from _cgo_export.c:4:</span><br><span class=\"line\">debugger.go:23:13: warning: unused <span class=\"keyword\">function</span> <span class=\"string\">&#x27;_duk_debugger_attach&#x27;</span> [-Wunused-<span class=\"keyword\">function</span>]</span><br></pre></td></tr></table></figure>\n\n<p>还是有报错，</p>\n<p>没办法，只能换个思路，</p>\n<p>后来通过官网发现，有现成的build工具 <a href=\"https://geth.ethereum.org/downloads/\">https://geth.ethereum.org/downloads/</a></p>\n<p><img src=\"/uploads/2021/05/WX20210519-082736.png\"></p>\n<p>所以又重新下载解压了一次</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -c https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz</span><br><span class=\"line\">--2021-05-19 08:18:56--  https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz</span><br><span class=\"line\">Resolving gethstore.blob.core.windows.net... 40.113.27.176</span><br><span class=\"line\">Connecting to gethstore.blob.core.windows.net40.113.27.176:443... connected.</span><br><span class=\"line\">HTTP request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: 45363864 (43M) [application/octet-stream]</span><br><span class=\"line\">Saving to: ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’</span><br><span class=\"line\"></span><br><span class=\"line\">geth-alltools-darwin-amd64-1.10.4-unsta 100%[=============================================================================&gt;]  43.26M   324KB/s    <span class=\"keyword\">in</span> 3m 19s</span><br><span class=\"line\"></span><br><span class=\"line\">2021-05-19 08:22:16 (223 KB/s) - ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’ saved [45363864/45363864]</span><br><span class=\"line\"></span><br><span class=\"line\">$ tar zxvf geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6</span><br><span class=\"line\">$ ./abigen --<span class=\"built_in\">help</span></span><br><span class=\"line\">abigen [global options] <span class=\"built_in\">command</span> [<span class=\"built_in\">command</span> options] [arguments...]</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION:</span><br><span class=\"line\">   1.10.4-unstable-b3a1fda6-20210518</span><br><span class=\"line\"></span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">   <span class=\"built_in\">help</span>                               Shows a list of commands or <span class=\"built_in\">help</span> <span class=\"keyword\">for</span> one <span class=\"built_in\">command</span></span><br><span class=\"line\"></span><br><span class=\"line\">GLOBAL OPTIONS:</span><br><span class=\"line\">   --abi value                        Path to the Ethereum contract ABI json to <span class=\"built_in\">bind</span>, - <span class=\"keyword\">for</span> STDIN</span><br><span class=\"line\">   --bin value                        Path to the Ethereum contract bytecode (generate deploy method)</span><br><span class=\"line\">   --<span class=\"built_in\">type</span> value                       Struct name <span class=\"keyword\">for</span> the binding (default = package name)</span><br><span class=\"line\">   --combined-json value              Path to the combined-json file generated by compiler</span><br><span class=\"line\">   --sol value                        Path to the Ethereum contract Solidity <span class=\"built_in\">source</span> to build and <span class=\"built_in\">bind</span></span><br><span class=\"line\">   --solc value                       Solidity compiler to use <span class=\"keyword\">if</span> <span class=\"built_in\">source</span> builds are requested (default: <span class=\"string\">&quot;solc&quot;</span>)</span><br><span class=\"line\">   --vy value                         Path to the Ethereum contract Vyper <span class=\"built_in\">source</span> to build and <span class=\"built_in\">bind</span></span><br><span class=\"line\">   --vyper value                      Vyper compiler to use <span class=\"keyword\">if</span> <span class=\"built_in\">source</span> builds are requested (default: <span class=\"string\">&quot;vyper&quot;</span>)</span><br><span class=\"line\">   --exc value                        Comma separated types to exclude from binding</span><br><span class=\"line\">   --pkg value                        Package name to generate the binding into</span><br><span class=\"line\">   --out value                        Output file <span class=\"keyword\">for</span> the generated binding (default = stdout)</span><br><span class=\"line\">   --lang value                       Destination language <span class=\"keyword\">for</span> the bindings (go, java, objc) (default: <span class=\"string\">&quot;go&quot;</span>)</span><br><span class=\"line\">   --<span class=\"built_in\">alias</span> value                      Comma separated aliases <span class=\"keyword\">for</span> <span class=\"keyword\">function</span> and event renaming, e.g. original1=alias1, original2=alias2</span><br><span class=\"line\">   --<span class=\"built_in\">help</span>, -h                         show <span class=\"built_in\">help</span></span><br><span class=\"line\">   --version, -v                      <span class=\"built_in\">print</span> the version</span><br></pre></td></tr></table></figure>\n\n<p>安装成功了</p>\n<p>本文链接： <a href=\"https://feilong.tech/2021/05/19/install-abigen\">https://feilong.tech/2021/05/19/install-abigen</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装devtools报错\"><a href=\"#安装devtools报错\" class=\"headerlink\" title=\"安装devtools报错\"></a>安装devtools报错</h3><p>想要开发以太坊，就需要开发智能合约，需要安装aligen，Mac版本需要通过安装devtools的方式安装abigen</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make devtools</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install golang.org/x/tools/cmd/stringer@latest</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest</span><br><span class=\"line\">go: downloading github.com/kevinburke/go-bindata v3.11.0</span><br><span class=\"line\"></span><br><span class=\"line\">go install github.com/kevinburke/go-bindata/go-bindata@latest: zip <span class=\"keyword\">for</span> github.com/kevinburke/go-bindata@v3.11.0 has unexpected file github.com/kevinburke/go-bindata@v0.0.0-20180804232615-06af60a4461b/.gitignore</span><br></pre></td></tr></table></figure>\n\n<p>这个原因是和镜像云有关系，导致不能安装go-bindata，我之前使用的是阿里云的镜像库，切换成官方的镜像，重新安装一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go <span class=\"built_in\">env</span> -w  GOPROXY=https://goproxy.io,direct</span><br><span class=\"line\">$ make devtools</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install golang.org/x/tools/cmd/stringer@latest</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest</span><br><span class=\"line\">go: downloading github.com/kevinburke/go-bindata v3.22.0+incompatible</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/fjl/gencodec@latest</span><br><span class=\"line\">go: downloading github.com/fjl/gencodec v0.0.0-20191126094850-e283372f291f</span><br><span class=\"line\">go: downloading github.com/garslo/gogen v0.0.0-20170306192744-1d203ffc1f61</span><br><span class=\"line\">go: downloading golang.org/x/tools v0.0.0-20191126055441-b0650ceb63d9</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install github.com/golang/protobuf/protoc-gen-go@latest</span><br><span class=\"line\">go: downloading github.com/golang/protobuf v1.5.2</span><br><span class=\"line\">go: downloading google.golang.org/protobuf v1.26.0</span><br><span class=\"line\"><span class=\"built_in\">env</span> GOBIN= go install ./cmd/abigen</span><br><span class=\"line\"><span class=\"comment\"># gopkg.in/olebedev/go-duktape.v3</span></span><br><span class=\"line\">In file included from _cgo_export.c:4:</span><br><span class=\"line\">debugger.go:23:13: warning: unused <span class=\"keyword\">function</span> <span class=\"string\">&#x27;_duk_debugger_attach&#x27;</span> [-Wunused-<span class=\"keyword\">function</span>]</span><br><span class=\"line\">Please install solc</span><br><span class=\"line\">Please install protoc</span><br></pre></td></tr></table></figure>\n\n<p>看到最后两句意思应该是缺少了<code>solc</code>和<code>protoc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g solc-cli solc protoc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install protoc-gen-go</span><br></pre></td></tr></table></figure>\n\n<p>重试下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make devtools</span><br><span class=\"line\">In file included from _cgo_export.c:4:</span><br><span class=\"line\">debugger.go:23:13: warning: unused <span class=\"keyword\">function</span> <span class=\"string\">&#x27;_duk_debugger_attach&#x27;</span> [-Wunused-<span class=\"keyword\">function</span>]</span><br></pre></td></tr></table></figure>\n\n<p>还是有报错，</p>\n<p>没办法，只能换个思路，</p>\n<p>后来通过官网发现，有现成的build工具 <a href=\"https://geth.ethereum.org/downloads/\">https://geth.ethereum.org/downloads/</a></p>\n<p><img src=\"/uploads/2021/05/WX20210519-082736.png\"></p>\n<p>所以又重新下载解压了一次</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -c https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz</span><br><span class=\"line\">--2021-05-19 08:18:56--  https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz</span><br><span class=\"line\">Resolving gethstore.blob.core.windows.net... 40.113.27.176</span><br><span class=\"line\">Connecting to gethstore.blob.core.windows.net40.113.27.176:443... connected.</span><br><span class=\"line\">HTTP request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: 45363864 (43M) [application/octet-stream]</span><br><span class=\"line\">Saving to: ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’</span><br><span class=\"line\"></span><br><span class=\"line\">geth-alltools-darwin-amd64-1.10.4-unsta 100%[=============================================================================&gt;]  43.26M   324KB/s    <span class=\"keyword\">in</span> 3m 19s</span><br><span class=\"line\"></span><br><span class=\"line\">2021-05-19 08:22:16 (223 KB/s) - ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’ saved [45363864/45363864]</span><br><span class=\"line\"></span><br><span class=\"line\">$ tar zxvf geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6</span><br><span class=\"line\">$ ./abigen --<span class=\"built_in\">help</span></span><br><span class=\"line\">abigen [global options] <span class=\"built_in\">command</span> [<span class=\"built_in\">command</span> options] [arguments...]</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION:</span><br><span class=\"line\">   1.10.4-unstable-b3a1fda6-20210518</span><br><span class=\"line\"></span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">   <span class=\"built_in\">help</span>                               Shows a list of commands or <span class=\"built_in\">help</span> <span class=\"keyword\">for</span> one <span class=\"built_in\">command</span></span><br><span class=\"line\"></span><br><span class=\"line\">GLOBAL OPTIONS:</span><br><span class=\"line\">   --abi value                        Path to the Ethereum contract ABI json to <span class=\"built_in\">bind</span>, - <span class=\"keyword\">for</span> STDIN</span><br><span class=\"line\">   --bin value                        Path to the Ethereum contract bytecode (generate deploy method)</span><br><span class=\"line\">   --<span class=\"built_in\">type</span> value                       Struct name <span class=\"keyword\">for</span> the binding (default = package name)</span><br><span class=\"line\">   --combined-json value              Path to the combined-json file generated by compiler</span><br><span class=\"line\">   --sol value                        Path to the Ethereum contract Solidity <span class=\"built_in\">source</span> to build and <span class=\"built_in\">bind</span></span><br><span class=\"line\">   --solc value                       Solidity compiler to use <span class=\"keyword\">if</span> <span class=\"built_in\">source</span> builds are requested (default: <span class=\"string\">&quot;solc&quot;</span>)</span><br><span class=\"line\">   --vy value                         Path to the Ethereum contract Vyper <span class=\"built_in\">source</span> to build and <span class=\"built_in\">bind</span></span><br><span class=\"line\">   --vyper value                      Vyper compiler to use <span class=\"keyword\">if</span> <span class=\"built_in\">source</span> builds are requested (default: <span class=\"string\">&quot;vyper&quot;</span>)</span><br><span class=\"line\">   --exc value                        Comma separated types to exclude from binding</span><br><span class=\"line\">   --pkg value                        Package name to generate the binding into</span><br><span class=\"line\">   --out value                        Output file <span class=\"keyword\">for</span> the generated binding (default = stdout)</span><br><span class=\"line\">   --lang value                       Destination language <span class=\"keyword\">for</span> the bindings (go, java, objc) (default: <span class=\"string\">&quot;go&quot;</span>)</span><br><span class=\"line\">   --<span class=\"built_in\">alias</span> value                      Comma separated aliases <span class=\"keyword\">for</span> <span class=\"keyword\">function</span> and event renaming, e.g. original1=alias1, original2=alias2</span><br><span class=\"line\">   --<span class=\"built_in\">help</span>, -h                         show <span class=\"built_in\">help</span></span><br><span class=\"line\">   --version, -v                      <span class=\"built_in\">print</span> the version</span><br></pre></td></tr></table></figure>\n\n<p>安装成功了</p>\n<p>本文链接： <a href=\"https://feilong.tech/2021/05/19/install-abigen\">https://feilong.tech/2021/05/19/install-abigen</a></p>\n"},{"title":"记面试N个PHP程序员的经历","id":"264","comments":0,"date":"2018-03-23T11:42:44.000Z","_content":"\n最近公司扩招，由于公司的业务扩张，所以需要再招几个PHPer。北京这边本来PHPer很少，算上我也就两个，另一个算是我的半个师傅。一面肯定不能让他来做，所以我就自己来进行一面。下面说下我这几天面试的感悟。\n\n#### 1、笔试篇\n\n![](/uploads/2018/03/timg.png)\n\n由于自己是第一次面试别人，所以前一天下午，就让人力的同事把简历打印出来，提前准备准备，我也是针对这几个人的简历，除了几道题，可以说，这几道题是完全和简历的内容相符的。这些笔试题包括 PHP的输出、include等函数的区别、session与cookie的关系、截取字符串、HTML、js以及MySQL的基本知识。也就是简单的不能简单的问题了。\n\n到了第二天，看了几个人的笔试结果，结果是非常差，就连基本的知识点都没写出来或者写错了。看了笔试题，我内心还是比较火大的，因为笔试算是对一个面试者技能第一眼体现。就相当于相亲一样，第一印象往往是非常关键的。所以，笔试是进入一面的敲门砖。还记得我第一次参加笔试，答完笔试题就被告知“等消息”，我终于体会到面试官的感觉了。就连基本的笔试题都答不出来，你有什么资格面试！\n\n#### 2、简历篇\n\n![](/uploads/2018/03/timg-1-1024x768.jpg)\n\n##### 1、简历大同小异，没有亮点\n\n由于是第一次面试，虽然笔试结果并不理想，但是我还是一个人一个人的面。我拿着简历，让面试者自我介绍，这个估计是所有面试的基本过程。大多数的简历上面写的内容：\n\n*   对项目的bug进行修复，维护系统\n*   进行需求分析，跟进开发工作\n*   后期的维护工作\n*   系统的增删改查\n*   ......\n\n简历内容完全是大同小异，根本就没有亮点。作为面试官，我最想看到的就是简历上面要有一些与众不同的亮点，**比如做了遇到了哪些技术难点，已经一些解决问题的思路，这样要比写已经基本的项目经验更优吸引力**。就算这个问题到了最后，没有找到一个完美的解决方案，这也算是一个亮点。\n\n##### 2、对技术的了解程度\n\n最好了解你简历里面提到的技术。这一点很重要。 基本上每个人的简历上面都会写`熟悉redis、memcache或者MongoDB`，但是每次询问到这些技术的时候，大多数回答：我们用了这些技术。但是确完全没有更深入的答案。只是停留在使用的上面。如果 `你能够提到redis哨兵的作用、redis原理、MongoDB与关系型数据库的优势和劣势`，这无疑是加分项。因为，使用谁都会!\n\n#### 面试篇\n\n##### 1、别妄想打感情牌\n\n别打算用感情打动面试官，没用的！！！面试官代表着公司的利益，如果面试官招到的人不合格，那么公司对面试官的评价会受到直接的影响。所以面试官能不能找到一个合格人员，也和自己的利益息息相关。 我面试了一个人，基础真的很差，简历也非常简单，基本上一无所长，“我真的很想加入你们的公司....”。结果很明显，这样完全是没有意义的。就算你侥幸过了一面，但是还有二面。如果二面的面试官一看，这个人什么都不会，那么势必会怀疑一面面试官的能力，怀疑他没有尽职尽责的筛选，耽误别人的时间。\n\n##### 2、基础一定要扎实\n\n如果过了一面，二面面试官除了会问一些项目经验，可能会问的更加深入。比如一些原理、内核或者系统设计相关知识。所以想要成为一个高阶的PHP程序员，还需要对PHP的内核、数据库的原理、数据结构都要具备才行。\n\n#### 总结\n\n吃程序员这碗饭的人太多了，所以想要找到一个高薪的工作，一定要让自己脱颖而出才行。一个优秀的程序员，肯定不是一个只懂写代码的程序员，更应该是一个有好奇心、喜欢探索、喜欢分享的人。希望自己有一天也能成为像鸟哥、reeze那样的人！！！","source":"_posts/interview-phpers.md","raw":"---\ntitle: 记面试N个PHP程序员的经历\ntags:\n  - PHP\n  - 面试\nid: '264'\ncategories:\n  - - 自我反思\ncomments: false\ndate: 2018-03-23 19:42:44\n---\n\n最近公司扩招，由于公司的业务扩张，所以需要再招几个PHPer。北京这边本来PHPer很少，算上我也就两个，另一个算是我的半个师傅。一面肯定不能让他来做，所以我就自己来进行一面。下面说下我这几天面试的感悟。\n\n#### 1、笔试篇\n\n![](/uploads/2018/03/timg.png)\n\n由于自己是第一次面试别人，所以前一天下午，就让人力的同事把简历打印出来，提前准备准备，我也是针对这几个人的简历，除了几道题，可以说，这几道题是完全和简历的内容相符的。这些笔试题包括 PHP的输出、include等函数的区别、session与cookie的关系、截取字符串、HTML、js以及MySQL的基本知识。也就是简单的不能简单的问题了。\n\n到了第二天，看了几个人的笔试结果，结果是非常差，就连基本的知识点都没写出来或者写错了。看了笔试题，我内心还是比较火大的，因为笔试算是对一个面试者技能第一眼体现。就相当于相亲一样，第一印象往往是非常关键的。所以，笔试是进入一面的敲门砖。还记得我第一次参加笔试，答完笔试题就被告知“等消息”，我终于体会到面试官的感觉了。就连基本的笔试题都答不出来，你有什么资格面试！\n\n#### 2、简历篇\n\n![](/uploads/2018/03/timg-1-1024x768.jpg)\n\n##### 1、简历大同小异，没有亮点\n\n由于是第一次面试，虽然笔试结果并不理想，但是我还是一个人一个人的面。我拿着简历，让面试者自我介绍，这个估计是所有面试的基本过程。大多数的简历上面写的内容：\n\n*   对项目的bug进行修复，维护系统\n*   进行需求分析，跟进开发工作\n*   后期的维护工作\n*   系统的增删改查\n*   ......\n\n简历内容完全是大同小异，根本就没有亮点。作为面试官，我最想看到的就是简历上面要有一些与众不同的亮点，**比如做了遇到了哪些技术难点，已经一些解决问题的思路，这样要比写已经基本的项目经验更优吸引力**。就算这个问题到了最后，没有找到一个完美的解决方案，这也算是一个亮点。\n\n##### 2、对技术的了解程度\n\n最好了解你简历里面提到的技术。这一点很重要。 基本上每个人的简历上面都会写`熟悉redis、memcache或者MongoDB`，但是每次询问到这些技术的时候，大多数回答：我们用了这些技术。但是确完全没有更深入的答案。只是停留在使用的上面。如果 `你能够提到redis哨兵的作用、redis原理、MongoDB与关系型数据库的优势和劣势`，这无疑是加分项。因为，使用谁都会!\n\n#### 面试篇\n\n##### 1、别妄想打感情牌\n\n别打算用感情打动面试官，没用的！！！面试官代表着公司的利益，如果面试官招到的人不合格，那么公司对面试官的评价会受到直接的影响。所以面试官能不能找到一个合格人员，也和自己的利益息息相关。 我面试了一个人，基础真的很差，简历也非常简单，基本上一无所长，“我真的很想加入你们的公司....”。结果很明显，这样完全是没有意义的。就算你侥幸过了一面，但是还有二面。如果二面的面试官一看，这个人什么都不会，那么势必会怀疑一面面试官的能力，怀疑他没有尽职尽责的筛选，耽误别人的时间。\n\n##### 2、基础一定要扎实\n\n如果过了一面，二面面试官除了会问一些项目经验，可能会问的更加深入。比如一些原理、内核或者系统设计相关知识。所以想要成为一个高阶的PHP程序员，还需要对PHP的内核、数据库的原理、数据结构都要具备才行。\n\n#### 总结\n\n吃程序员这碗饭的人太多了，所以想要找到一个高薪的工作，一定要让自己脱颖而出才行。一个优秀的程序员，肯定不是一个只懂写代码的程序员，更应该是一个有好奇心、喜欢探索、喜欢分享的人。希望自己有一天也能成为像鸟哥、reeze那样的人！！！","slug":"interview-phpers","published":1,"updated":"2022-03-13T01:17:12.526Z","_id":"cl0oi8mfr002n417t9flkg7x6","layout":"post","photos":[],"link":"","content":"<p>最近公司扩招，由于公司的业务扩张，所以需要再招几个PHPer。北京这边本来PHPer很少，算上我也就两个，另一个算是我的半个师傅。一面肯定不能让他来做，所以我就自己来进行一面。下面说下我这几天面试的感悟。</p>\n<h4 id=\"1、笔试篇\"><a href=\"#1、笔试篇\" class=\"headerlink\" title=\"1、笔试篇\"></a>1、笔试篇</h4><p><img src=\"/uploads/2018/03/timg.png\"></p>\n<p>由于自己是第一次面试别人，所以前一天下午，就让人力的同事把简历打印出来，提前准备准备，我也是针对这几个人的简历，除了几道题，可以说，这几道题是完全和简历的内容相符的。这些笔试题包括 PHP的输出、include等函数的区别、session与cookie的关系、截取字符串、HTML、js以及MySQL的基本知识。也就是简单的不能简单的问题了。</p>\n<p>到了第二天，看了几个人的笔试结果，结果是非常差，就连基本的知识点都没写出来或者写错了。看了笔试题，我内心还是比较火大的，因为笔试算是对一个面试者技能第一眼体现。就相当于相亲一样，第一印象往往是非常关键的。所以，笔试是进入一面的敲门砖。还记得我第一次参加笔试，答完笔试题就被告知“等消息”，我终于体会到面试官的感觉了。就连基本的笔试题都答不出来，你有什么资格面试！</p>\n<h4 id=\"2、简历篇\"><a href=\"#2、简历篇\" class=\"headerlink\" title=\"2、简历篇\"></a>2、简历篇</h4><p><img src=\"/uploads/2018/03/timg-1-1024x768.jpg\"></p>\n<h5 id=\"1、简历大同小异，没有亮点\"><a href=\"#1、简历大同小异，没有亮点\" class=\"headerlink\" title=\"1、简历大同小异，没有亮点\"></a>1、简历大同小异，没有亮点</h5><p>由于是第一次面试，虽然笔试结果并不理想，但是我还是一个人一个人的面。我拿着简历，让面试者自我介绍，这个估计是所有面试的基本过程。大多数的简历上面写的内容：</p>\n<ul>\n<li>对项目的bug进行修复，维护系统</li>\n<li>进行需求分析，跟进开发工作</li>\n<li>后期的维护工作</li>\n<li>系统的增删改查</li>\n<li>……</li>\n</ul>\n<p>简历内容完全是大同小异，根本就没有亮点。作为面试官，我最想看到的就是简历上面要有一些与众不同的亮点，<strong>比如做了遇到了哪些技术难点，已经一些解决问题的思路，这样要比写已经基本的项目经验更优吸引力</strong>。就算这个问题到了最后，没有找到一个完美的解决方案，这也算是一个亮点。</p>\n<h5 id=\"2、对技术的了解程度\"><a href=\"#2、对技术的了解程度\" class=\"headerlink\" title=\"2、对技术的了解程度\"></a>2、对技术的了解程度</h5><p>最好了解你简历里面提到的技术。这一点很重要。 基本上每个人的简历上面都会写<code>熟悉redis、memcache或者MongoDB</code>，但是每次询问到这些技术的时候，大多数回答：我们用了这些技术。但是确完全没有更深入的答案。只是停留在使用的上面。如果 <code>你能够提到redis哨兵的作用、redis原理、MongoDB与关系型数据库的优势和劣势</code>，这无疑是加分项。因为，使用谁都会!</p>\n<h4 id=\"面试篇\"><a href=\"#面试篇\" class=\"headerlink\" title=\"面试篇\"></a>面试篇</h4><h5 id=\"1、别妄想打感情牌\"><a href=\"#1、别妄想打感情牌\" class=\"headerlink\" title=\"1、别妄想打感情牌\"></a>1、别妄想打感情牌</h5><p>别打算用感情打动面试官，没用的！！！面试官代表着公司的利益，如果面试官招到的人不合格，那么公司对面试官的评价会受到直接的影响。所以面试官能不能找到一个合格人员，也和自己的利益息息相关。 我面试了一个人，基础真的很差，简历也非常简单，基本上一无所长，“我真的很想加入你们的公司….”。结果很明显，这样完全是没有意义的。就算你侥幸过了一面，但是还有二面。如果二面的面试官一看，这个人什么都不会，那么势必会怀疑一面面试官的能力，怀疑他没有尽职尽责的筛选，耽误别人的时间。</p>\n<h5 id=\"2、基础一定要扎实\"><a href=\"#2、基础一定要扎实\" class=\"headerlink\" title=\"2、基础一定要扎实\"></a>2、基础一定要扎实</h5><p>如果过了一面，二面面试官除了会问一些项目经验，可能会问的更加深入。比如一些原理、内核或者系统设计相关知识。所以想要成为一个高阶的PHP程序员，还需要对PHP的内核、数据库的原理、数据结构都要具备才行。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>吃程序员这碗饭的人太多了，所以想要找到一个高薪的工作，一定要让自己脱颖而出才行。一个优秀的程序员，肯定不是一个只懂写代码的程序员，更应该是一个有好奇心、喜欢探索、喜欢分享的人。希望自己有一天也能成为像鸟哥、reeze那样的人！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近公司扩招，由于公司的业务扩张，所以需要再招几个PHPer。北京这边本来PHPer很少，算上我也就两个，另一个算是我的半个师傅。一面肯定不能让他来做，所以我就自己来进行一面。下面说下我这几天面试的感悟。</p>\n<h4 id=\"1、笔试篇\"><a href=\"#1、笔试篇\" class=\"headerlink\" title=\"1、笔试篇\"></a>1、笔试篇</h4><p><img src=\"/uploads/2018/03/timg.png\"></p>\n<p>由于自己是第一次面试别人，所以前一天下午，就让人力的同事把简历打印出来，提前准备准备，我也是针对这几个人的简历，除了几道题，可以说，这几道题是完全和简历的内容相符的。这些笔试题包括 PHP的输出、include等函数的区别、session与cookie的关系、截取字符串、HTML、js以及MySQL的基本知识。也就是简单的不能简单的问题了。</p>\n<p>到了第二天，看了几个人的笔试结果，结果是非常差，就连基本的知识点都没写出来或者写错了。看了笔试题，我内心还是比较火大的，因为笔试算是对一个面试者技能第一眼体现。就相当于相亲一样，第一印象往往是非常关键的。所以，笔试是进入一面的敲门砖。还记得我第一次参加笔试，答完笔试题就被告知“等消息”，我终于体会到面试官的感觉了。就连基本的笔试题都答不出来，你有什么资格面试！</p>\n<h4 id=\"2、简历篇\"><a href=\"#2、简历篇\" class=\"headerlink\" title=\"2、简历篇\"></a>2、简历篇</h4><p><img src=\"/uploads/2018/03/timg-1-1024x768.jpg\"></p>\n<h5 id=\"1、简历大同小异，没有亮点\"><a href=\"#1、简历大同小异，没有亮点\" class=\"headerlink\" title=\"1、简历大同小异，没有亮点\"></a>1、简历大同小异，没有亮点</h5><p>由于是第一次面试，虽然笔试结果并不理想，但是我还是一个人一个人的面。我拿着简历，让面试者自我介绍，这个估计是所有面试的基本过程。大多数的简历上面写的内容：</p>\n<ul>\n<li>对项目的bug进行修复，维护系统</li>\n<li>进行需求分析，跟进开发工作</li>\n<li>后期的维护工作</li>\n<li>系统的增删改查</li>\n<li>……</li>\n</ul>\n<p>简历内容完全是大同小异，根本就没有亮点。作为面试官，我最想看到的就是简历上面要有一些与众不同的亮点，<strong>比如做了遇到了哪些技术难点，已经一些解决问题的思路，这样要比写已经基本的项目经验更优吸引力</strong>。就算这个问题到了最后，没有找到一个完美的解决方案，这也算是一个亮点。</p>\n<h5 id=\"2、对技术的了解程度\"><a href=\"#2、对技术的了解程度\" class=\"headerlink\" title=\"2、对技术的了解程度\"></a>2、对技术的了解程度</h5><p>最好了解你简历里面提到的技术。这一点很重要。 基本上每个人的简历上面都会写<code>熟悉redis、memcache或者MongoDB</code>，但是每次询问到这些技术的时候，大多数回答：我们用了这些技术。但是确完全没有更深入的答案。只是停留在使用的上面。如果 <code>你能够提到redis哨兵的作用、redis原理、MongoDB与关系型数据库的优势和劣势</code>，这无疑是加分项。因为，使用谁都会!</p>\n<h4 id=\"面试篇\"><a href=\"#面试篇\" class=\"headerlink\" title=\"面试篇\"></a>面试篇</h4><h5 id=\"1、别妄想打感情牌\"><a href=\"#1、别妄想打感情牌\" class=\"headerlink\" title=\"1、别妄想打感情牌\"></a>1、别妄想打感情牌</h5><p>别打算用感情打动面试官，没用的！！！面试官代表着公司的利益，如果面试官招到的人不合格，那么公司对面试官的评价会受到直接的影响。所以面试官能不能找到一个合格人员，也和自己的利益息息相关。 我面试了一个人，基础真的很差，简历也非常简单，基本上一无所长，“我真的很想加入你们的公司….”。结果很明显，这样完全是没有意义的。就算你侥幸过了一面，但是还有二面。如果二面的面试官一看，这个人什么都不会，那么势必会怀疑一面面试官的能力，怀疑他没有尽职尽责的筛选，耽误别人的时间。</p>\n<h5 id=\"2、基础一定要扎实\"><a href=\"#2、基础一定要扎实\" class=\"headerlink\" title=\"2、基础一定要扎实\"></a>2、基础一定要扎实</h5><p>如果过了一面，二面面试官除了会问一些项目经验，可能会问的更加深入。比如一些原理、内核或者系统设计相关知识。所以想要成为一个高阶的PHP程序员，还需要对PHP的内核、数据库的原理、数据结构都要具备才行。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>吃程序员这碗饭的人太多了，所以想要找到一个高薪的工作，一定要让自己脱颖而出才行。一个优秀的程序员，肯定不是一个只懂写代码的程序员，更应该是一个有好奇心、喜欢探索、喜欢分享的人。希望自己有一天也能成为像鸟哥、reeze那样的人！！！</p>\n"},{"title":"关于limit_req和limit_conn的区别","id":"217","comments":0,"date":"2018-01-26T15:34:13.000Z","_content":"\n#### request和connection区别\n\n在nginx里面，limit\\_req和limit\\_conn都是用来限流的但是两者不在一个层次上，在此之前，需要先清楚request和connect的区别。 request是请求，是http层面的。connection是链接，指的是tcp层面。所以，从含义上面可以知道两者不在一个层次。 我们在打开一个网页的时候，请求过程一般就是先经过tcp三次握手，然后在进行http请求。也就是一个connection建立之后，可以有很多request。\n\n一个connection建立，只要服务器处理的过来，可以处理任意多的request都是没有问题的\n\n好了，现在知道区别了。\n\n#### limit\\_conn\n\n```nginx\nhttp {\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    limit_conn one 1; #最多可以进行1个connection\n    client_body_buffer_size 256M;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n    sendfile        on;\n\n    keepalive_timeout  65;\n    include servers/*.conf;\n}\n```\n\n上面的配置文件的含义很明白，nginx只接受最多一个connect，我们使用ab命令查看下\n\n```bash\n$ ab -n10  http://sdeno-api/info/php #默认通过一个connect送10个request\n```\n\n![](/uploads/2018/01/limit_conn_00.png)\n\n从截图看来，在一个并发下，处理10个request下完全没有问题\n\n接下来我们使用2个并发，2个请求试下，也就是两个用户，每个用户发送一个request\n\n```bash\n$ ab -n2 -c2 http://sdeno-api/info/php\n```\n\n![](/uploads/2018/01/limit_conn_01.png)\n\n从截图中可以看到，由于nginx设置了至多限制一个并发，所以导致两个用户的请求只能有一个被处理掉，另外一个返回http 503\n\n#### limit\\_req\n\n下面更改下nginx.conf配置文件\n\n```nginx\nhttp {\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;\n    limit_conn one 20;\n    limit_req zone=req_one burst=5;\n    client_body_buffer_size 256M;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n    sendfile        on;\n\n    keepalive_timeout  65;\n    include servers/*.conf;\n}\n```\n\n上面的配置的含义是请求速率限制为1r/s，然后再缓存5个request，然后再依次处理请求（令牌桶算法）\n\n```bash\n$ ab -n10 -c10 http://sdeno-api/info/php\n```\n\n![](/uploads/2018/01/limit_conn_02-1.png)\n\n我们使用压测命令，10个并发，10个请求，根据配置的文件，当有请求过来，nginx先处理一个请求，然后将5个请求缓存下来(burst=5)，根据设置的速率1r/s进行处理，也就是一共能够处理6个请求，其余的请求则被丢掉。\n\n接下来我们再继续更改下nginx配置文件\n\n```bash\n$ ab -n10 -c10 http://sdeno-api/info/php\n```\n\n```nginx\nhttp {\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;\n    limit_conn one 20;\n    limit_req zone=req_one burst=5 nodelay;\n    client_body_buffer_size 256M;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n    sendfile        on;\n\n    keepalive_timeout  65;\n    include servers/*.conf;\n}\n```\n\n![](/uploads/2018/01/limit_conn_03.png)\n\n咦？增加了nodelay好像和不加有点不同。这是因为请求过来的时候，会爆发出一个峰值的处理能力，处理的总的请求数是burst+1，其余的请求丢弃。\n\n#### 总结\n\n*   request和connect是完全不同层面的含义，一个属于http，一个属于tcp\n    \n*   `limit_req zone=req_zone burst=5` 依照在limti\\_req\\_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，在缓冲队列中的请求会等待慢慢处理，超过了burst缓冲队列长度和rate处理能力的请求被直接丢弃，表现为对收到的请求有延时\n    \n*   `limit_req zone=req_zone burst=5 nodelay` 依照在limti\\_req\\_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，当请求到来时，会爆发出一个峰值处理能力，对于峰值处理数量之外的请求，直接丢弃。\n    \n\n#### 参考文献\n\n*   [Nginx下limit\\_req模块burst参数超详细解析](http://blog.csdn.net/hellow__world/article/details/78658041)","source":"_posts/limit-req-limit-conn.md","raw":"---\ntitle: 关于limit_req和limit_conn的区别\ntags:\n  - http\n  - nginx\n  - tcp\nid: '217'\ncategories:\n  - - Linux\n  - - Nginx\ncomments: false\ndate: 2018-01-26 23:34:13\n---\n\n#### request和connection区别\n\n在nginx里面，limit\\_req和limit\\_conn都是用来限流的但是两者不在一个层次上，在此之前，需要先清楚request和connect的区别。 request是请求，是http层面的。connection是链接，指的是tcp层面。所以，从含义上面可以知道两者不在一个层次。 我们在打开一个网页的时候，请求过程一般就是先经过tcp三次握手，然后在进行http请求。也就是一个connection建立之后，可以有很多request。\n\n一个connection建立，只要服务器处理的过来，可以处理任意多的request都是没有问题的\n\n好了，现在知道区别了。\n\n#### limit\\_conn\n\n```nginx\nhttp {\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    limit_conn one 1; #最多可以进行1个connection\n    client_body_buffer_size 256M;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n    sendfile        on;\n\n    keepalive_timeout  65;\n    include servers/*.conf;\n}\n```\n\n上面的配置文件的含义很明白，nginx只接受最多一个connect，我们使用ab命令查看下\n\n```bash\n$ ab -n10  http://sdeno-api/info/php #默认通过一个connect送10个request\n```\n\n![](/uploads/2018/01/limit_conn_00.png)\n\n从截图看来，在一个并发下，处理10个request下完全没有问题\n\n接下来我们使用2个并发，2个请求试下，也就是两个用户，每个用户发送一个request\n\n```bash\n$ ab -n2 -c2 http://sdeno-api/info/php\n```\n\n![](/uploads/2018/01/limit_conn_01.png)\n\n从截图中可以看到，由于nginx设置了至多限制一个并发，所以导致两个用户的请求只能有一个被处理掉，另外一个返回http 503\n\n#### limit\\_req\n\n下面更改下nginx.conf配置文件\n\n```nginx\nhttp {\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;\n    limit_conn one 20;\n    limit_req zone=req_one burst=5;\n    client_body_buffer_size 256M;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n    sendfile        on;\n\n    keepalive_timeout  65;\n    include servers/*.conf;\n}\n```\n\n上面的配置的含义是请求速率限制为1r/s，然后再缓存5个request，然后再依次处理请求（令牌桶算法）\n\n```bash\n$ ab -n10 -c10 http://sdeno-api/info/php\n```\n\n![](/uploads/2018/01/limit_conn_02-1.png)\n\n我们使用压测命令，10个并发，10个请求，根据配置的文件，当有请求过来，nginx先处理一个请求，然后将5个请求缓存下来(burst=5)，根据设置的速率1r/s进行处理，也就是一共能够处理6个请求，其余的请求则被丢掉。\n\n接下来我们再继续更改下nginx配置文件\n\n```bash\n$ ab -n10 -c10 http://sdeno-api/info/php\n```\n\n```nginx\nhttp {\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;\n    limit_conn one 20;\n    limit_req zone=req_one burst=5 nodelay;\n    client_body_buffer_size 256M;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n    sendfile        on;\n\n    keepalive_timeout  65;\n    include servers/*.conf;\n}\n```\n\n![](/uploads/2018/01/limit_conn_03.png)\n\n咦？增加了nodelay好像和不加有点不同。这是因为请求过来的时候，会爆发出一个峰值的处理能力，处理的总的请求数是burst+1，其余的请求丢弃。\n\n#### 总结\n\n*   request和connect是完全不同层面的含义，一个属于http，一个属于tcp\n    \n*   `limit_req zone=req_zone burst=5` 依照在limti\\_req\\_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，在缓冲队列中的请求会等待慢慢处理，超过了burst缓冲队列长度和rate处理能力的请求被直接丢弃，表现为对收到的请求有延时\n    \n*   `limit_req zone=req_zone burst=5 nodelay` 依照在limti\\_req\\_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，当请求到来时，会爆发出一个峰值处理能力，对于峰值处理数量之外的请求，直接丢弃。\n    \n\n#### 参考文献\n\n*   [Nginx下limit\\_req模块burst参数超详细解析](http://blog.csdn.net/hellow__world/article/details/78658041)","slug":"limit-req-limit-conn","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mfs002q417t312f574e","layout":"post","photos":[],"link":"","content":"<h4 id=\"request和connection区别\"><a href=\"#request和connection区别\" class=\"headerlink\" title=\"request和connection区别\"></a>request和connection区别</h4><p>在nginx里面，limit_req和limit_conn都是用来限流的但是两者不在一个层次上，在此之前，需要先清楚request和connect的区别。 request是请求，是http层面的。connection是链接，指的是tcp层面。所以，从含义上面可以知道两者不在一个层次。 我们在打开一个网页的时候，请求过程一般就是先经过tcp三次握手，然后在进行http请求。也就是一个connection建立之后，可以有很多request。</p>\n<p>一个connection建立，只要服务器处理的过来，可以处理任意多的request都是没有问题的</p>\n<p>好了，现在知道区别了。</p>\n<h4 id=\"limit-conn\"><a href=\"#limit-conn\" class=\"headerlink\" title=\"limit_conn\"></a>limit_conn</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">1</span>; <span class=\"comment\">#最多可以进行1个connection</span></span><br><span class=\"line\">    <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的配置文件的含义很明白，nginx只接受最多一个connect，我们使用ab命令查看下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n10  http://sdeno-api/info/php <span class=\"comment\">#默认通过一个connect送10个request</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_00.png\"></p>\n<p>从截图看来，在一个并发下，处理10个request下完全没有问题</p>\n<p>接下来我们使用2个并发，2个请求试下，也就是两个用户，每个用户发送一个request</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n2 -c2 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_01.png\"></p>\n<p>从截图中可以看到，由于nginx设置了至多限制一个并发，所以导致两个用户的请求只能有一个被处理掉，另外一个返回http 503</p>\n<h4 id=\"limit-req\"><a href=\"#limit-req\" class=\"headerlink\" title=\"limit_req\"></a>limit_req</h4><p>下面更改下nginx.conf配置文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_one:<span class=\"number\">20m</span> rate=1r/s;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_one burst=<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的配置的含义是请求速率限制为1r&#x2F;s，然后再缓存5个request，然后再依次处理请求（令牌桶算法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n10 -c10 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_02-1.png\"></p>\n<p>我们使用压测命令，10个并发，10个请求，根据配置的文件，当有请求过来，nginx先处理一个请求，然后将5个请求缓存下来(burst&#x3D;5)，根据设置的速率1r&#x2F;s进行处理，也就是一共能够处理6个请求，其余的请求则被丢掉。</p>\n<p>接下来我们再继续更改下nginx配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n10 -c10 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_one:<span class=\"number\">20m</span> rate=1r/s;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_one burst=<span class=\"number\">5</span> nodelay;</span><br><span class=\"line\">    <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_03.png\"></p>\n<p>咦？增加了nodelay好像和不加有点不同。这是因为请求过来的时候，会爆发出一个峰值的处理能力，处理的总的请求数是burst+1，其余的请求丢弃。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><p>request和connect是完全不同层面的含义，一个属于http，一个属于tcp</p>\n</li>\n<li><p><code>limit_req zone=req_zone burst=5</code> 依照在limti_req_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，在缓冲队列中的请求会等待慢慢处理，超过了burst缓冲队列长度和rate处理能力的请求被直接丢弃，表现为对收到的请求有延时</p>\n</li>\n<li><p><code>limit_req zone=req_zone burst=5 nodelay</code> 依照在limti_req_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，当请求到来时，会爆发出一个峰值处理能力，对于峰值处理数量之外的请求，直接丢弃。</p>\n</li>\n</ul>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li><a href=\"http://blog.csdn.net/hellow__world/article/details/78658041\">Nginx下limit_req模块burst参数超详细解析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"request和connection区别\"><a href=\"#request和connection区别\" class=\"headerlink\" title=\"request和connection区别\"></a>request和connection区别</h4><p>在nginx里面，limit_req和limit_conn都是用来限流的但是两者不在一个层次上，在此之前，需要先清楚request和connect的区别。 request是请求，是http层面的。connection是链接，指的是tcp层面。所以，从含义上面可以知道两者不在一个层次。 我们在打开一个网页的时候，请求过程一般就是先经过tcp三次握手，然后在进行http请求。也就是一个connection建立之后，可以有很多request。</p>\n<p>一个connection建立，只要服务器处理的过来，可以处理任意多的request都是没有问题的</p>\n<p>好了，现在知道区别了。</p>\n<h4 id=\"limit-conn\"><a href=\"#limit-conn\" class=\"headerlink\" title=\"limit_conn\"></a>limit_conn</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">1</span>; <span class=\"comment\">#最多可以进行1个connection</span></span><br><span class=\"line\">    <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的配置文件的含义很明白，nginx只接受最多一个connect，我们使用ab命令查看下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n10  http://sdeno-api/info/php <span class=\"comment\">#默认通过一个connect送10个request</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_00.png\"></p>\n<p>从截图看来，在一个并发下，处理10个request下完全没有问题</p>\n<p>接下来我们使用2个并发，2个请求试下，也就是两个用户，每个用户发送一个request</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n2 -c2 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_01.png\"></p>\n<p>从截图中可以看到，由于nginx设置了至多限制一个并发，所以导致两个用户的请求只能有一个被处理掉，另外一个返回http 503</p>\n<h4 id=\"limit-req\"><a href=\"#limit-req\" class=\"headerlink\" title=\"limit_req\"></a>limit_req</h4><p>下面更改下nginx.conf配置文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_one:<span class=\"number\">20m</span> rate=1r/s;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_one burst=<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的配置的含义是请求速率限制为1r&#x2F;s，然后再缓存5个request，然后再依次处理请求（令牌桶算法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n10 -c10 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_02-1.png\"></p>\n<p>我们使用压测命令，10个并发，10个请求，根据配置的文件，当有请求过来，nginx先处理一个请求，然后将5个请求缓存下来(burst&#x3D;5)，根据设置的速率1r&#x2F;s进行处理，也就是一共能够处理6个请求，其余的请求则被丢掉。</p>\n<p>接下来我们再继续更改下nginx配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n10 -c10 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_one:<span class=\"number\">20m</span> rate=1r/s;</span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_one burst=<span class=\"number\">5</span> nodelay;</span><br><span class=\"line\">    <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/limit_conn_03.png\"></p>\n<p>咦？增加了nodelay好像和不加有点不同。这是因为请求过来的时候，会爆发出一个峰值的处理能力，处理的总的请求数是burst+1，其余的请求丢弃。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><p>request和connect是完全不同层面的含义，一个属于http，一个属于tcp</p>\n</li>\n<li><p><code>limit_req zone=req_zone burst=5</code> 依照在limti_req_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，在缓冲队列中的请求会等待慢慢处理，超过了burst缓冲队列长度和rate处理能力的请求被直接丢弃，表现为对收到的请求有延时</p>\n</li>\n<li><p><code>limit_req zone=req_zone burst=5 nodelay</code> 依照在limti_req_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，当请求到来时，会爆发出一个峰值处理能力，对于峰值处理数量之外的请求，直接丢弃。</p>\n</li>\n</ul>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li><a href=\"http://blog.csdn.net/hellow__world/article/details/78658041\">Nginx下limit_req模块burst参数超详细解析</a></li>\n</ul>\n"},{"title":"Linux 将用户加入用户组","id":"119","date":"2017-08-24T11:57:24.000Z","_content":"\n#### 准备工作\n\n两个账户：tengyunlong test 如果没有账户使用 adduser进行创建\n\n```bash\n$ adduser test\n$ usermod -a -G test test # 将test用户加入到test用户组\n$ groups test #查看test的所有分组\n$ test : test \n```\n<!-- more -->\n使用test用户在/home/test/路径下新建test.txt使此文件允许test分组和test用户读写\n\n```bash\ntotal 36\ndrwxr-xr-x 2 test test 4096 Jun  1 15:51 ./\ndrwxr-xr-x 4 root root 4096 Jun  1 15:49 ../\n-rw-r--r-- 1 test test  220 Jun  1 15:49 .bash_logout\n-rw-r--r-- 1 test test 3637 Jun  1 15:49 .bashrc\n-rw-r--r-- 1 test test 8980 Jun  1 15:49 examples.desktop\n-rw-r--r-- 1 test test  675 Jun  1 15:49 .profile\n-rw-rw-r-- 1 test test    8 Jun  1 15:53 test.txt\n```\n\n#### 添加分组\n\n使用root账户将 tengyunlong加到test分组\n\n```bash\n$ usermod -a -G test tengyunlong\n$ groups tengyunlong\ntengyunlong : tengyunlong adm cdrom sudo dip plugdev lpadmin sambashare test #可以看到tengyunlong加到test分组了\n```\n\n#### 运行测试\n\n切换tengyunlong账户，进入/home/test目录下\n\n```bash\n$ ll\ntotal 36\ndrwxr-xr-x 2 test test 4096 Jun  1 15:51 ./\ndrwxr-xr-x 4 root root 4096 Jun  1 15:49 ../\n-rw-r--r-- 1 test test  220 Jun  1 15:49 .bash_logout\n-rw-r--r-- 1 test test 3637 Jun  1 15:49 .bashrc\n-rw-r--r-- 1 test test 8980 Jun  1 15:49 examples.desktop\n-rw-r--r-- 1 test test  675 Jun  1 15:49 .profile\n-rw-rw-r-- 1 test test    8 Jun  1 15:53 test.txt\n$  echo 'sssssssssss'> test.txt\n$ cat test.txt \nsssssssssss #可以看到内容被写入了\n```","source":"_posts/linux-add-user-group.md","raw":"---\ntitle: Linux 将用户加入用户组\ntags: []\nid: '119'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:57:24\n---\n\n#### 准备工作\n\n两个账户：tengyunlong test 如果没有账户使用 adduser进行创建\n\n```bash\n$ adduser test\n$ usermod -a -G test test # 将test用户加入到test用户组\n$ groups test #查看test的所有分组\n$ test : test \n```\n<!-- more -->\n使用test用户在/home/test/路径下新建test.txt使此文件允许test分组和test用户读写\n\n```bash\ntotal 36\ndrwxr-xr-x 2 test test 4096 Jun  1 15:51 ./\ndrwxr-xr-x 4 root root 4096 Jun  1 15:49 ../\n-rw-r--r-- 1 test test  220 Jun  1 15:49 .bash_logout\n-rw-r--r-- 1 test test 3637 Jun  1 15:49 .bashrc\n-rw-r--r-- 1 test test 8980 Jun  1 15:49 examples.desktop\n-rw-r--r-- 1 test test  675 Jun  1 15:49 .profile\n-rw-rw-r-- 1 test test    8 Jun  1 15:53 test.txt\n```\n\n#### 添加分组\n\n使用root账户将 tengyunlong加到test分组\n\n```bash\n$ usermod -a -G test tengyunlong\n$ groups tengyunlong\ntengyunlong : tengyunlong adm cdrom sudo dip plugdev lpadmin sambashare test #可以看到tengyunlong加到test分组了\n```\n\n#### 运行测试\n\n切换tengyunlong账户，进入/home/test目录下\n\n```bash\n$ ll\ntotal 36\ndrwxr-xr-x 2 test test 4096 Jun  1 15:51 ./\ndrwxr-xr-x 4 root root 4096 Jun  1 15:49 ../\n-rw-r--r-- 1 test test  220 Jun  1 15:49 .bash_logout\n-rw-r--r-- 1 test test 3637 Jun  1 15:49 .bashrc\n-rw-r--r-- 1 test test 8980 Jun  1 15:49 examples.desktop\n-rw-r--r-- 1 test test  675 Jun  1 15:49 .profile\n-rw-rw-r-- 1 test test    8 Jun  1 15:53 test.txt\n$  echo 'sssssssssss'> test.txt\n$ cat test.txt \nsssssssssss #可以看到内容被写入了\n```","slug":"linux-add-user-group","published":1,"updated":"2022-03-12T23:52:58.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mft002u417t6nhp51kz","content":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>两个账户：tengyunlong test 如果没有账户使用 adduser进行创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adduser <span class=\"built_in\">test</span></span><br><span class=\"line\">$ usermod -a -G <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 将test用户加入到test用户组</span></span><br><span class=\"line\">$ <span class=\"built_in\">groups</span> <span class=\"built_in\">test</span> <span class=\"comment\">#查看test的所有分组</span></span><br><span class=\"line\">$ <span class=\"built_in\">test</span> : <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>使用test用户在&#x2F;home&#x2F;test&#x2F;路径下新建test.txt使此文件允许test分组和test用户读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 4096 Jun  1 15:51 ./</span><br><span class=\"line\">drwxr-xr-x 4 root root 4096 Jun  1 15:49 ../</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  220 Jun  1 15:49 .bash_logout</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 3637 Jun  1 15:49 .bashrc</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 8980 Jun  1 15:49 examples.desktop</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  675 Jun  1 15:49 .profile</span><br><span class=\"line\">-rw-rw-r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>    8 Jun  1 15:53 test.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加分组\"><a href=\"#添加分组\" class=\"headerlink\" title=\"添加分组\"></a>添加分组</h4><p>使用root账户将 tengyunlong加到test分组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ usermod -a -G <span class=\"built_in\">test</span> tengyunlong</span><br><span class=\"line\">$ <span class=\"built_in\">groups</span> tengyunlong</span><br><span class=\"line\">tengyunlong : tengyunlong adm cdrom sudo dip plugdev lpadmin sambashare <span class=\"built_in\">test</span> <span class=\"comment\">#可以看到tengyunlong加到test分组了</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h4><p>切换tengyunlong账户，进入&#x2F;home&#x2F;test目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 4096 Jun  1 15:51 ./</span><br><span class=\"line\">drwxr-xr-x 4 root root 4096 Jun  1 15:49 ../</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  220 Jun  1 15:49 .bash_logout</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 3637 Jun  1 15:49 .bashrc</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 8980 Jun  1 15:49 examples.desktop</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  675 Jun  1 15:49 .profile</span><br><span class=\"line\">-rw-rw-r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>    8 Jun  1 15:53 test.txt</span><br><span class=\"line\">$  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;sssssssssss&#x27;</span>&gt; test.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">sssssssssss <span class=\"comment\">#可以看到内容被写入了</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>两个账户：tengyunlong test 如果没有账户使用 adduser进行创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adduser <span class=\"built_in\">test</span></span><br><span class=\"line\">$ usermod -a -G <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 将test用户加入到test用户组</span></span><br><span class=\"line\">$ <span class=\"built_in\">groups</span> <span class=\"built_in\">test</span> <span class=\"comment\">#查看test的所有分组</span></span><br><span class=\"line\">$ <span class=\"built_in\">test</span> : <span class=\"built_in\">test</span> </span><br></pre></td></tr></table></figure>","more":"<p>使用test用户在&#x2F;home&#x2F;test&#x2F;路径下新建test.txt使此文件允许test分组和test用户读写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 4096 Jun  1 15:51 ./</span><br><span class=\"line\">drwxr-xr-x 4 root root 4096 Jun  1 15:49 ../</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  220 Jun  1 15:49 .bash_logout</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 3637 Jun  1 15:49 .bashrc</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 8980 Jun  1 15:49 examples.desktop</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  675 Jun  1 15:49 .profile</span><br><span class=\"line\">-rw-rw-r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>    8 Jun  1 15:53 test.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加分组\"><a href=\"#添加分组\" class=\"headerlink\" title=\"添加分组\"></a>添加分组</h4><p>使用root账户将 tengyunlong加到test分组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ usermod -a -G <span class=\"built_in\">test</span> tengyunlong</span><br><span class=\"line\">$ <span class=\"built_in\">groups</span> tengyunlong</span><br><span class=\"line\">tengyunlong : tengyunlong adm cdrom sudo dip plugdev lpadmin sambashare <span class=\"built_in\">test</span> <span class=\"comment\">#可以看到tengyunlong加到test分组了</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h4><p>切换tengyunlong账户，进入&#x2F;home&#x2F;test目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 4096 Jun  1 15:51 ./</span><br><span class=\"line\">drwxr-xr-x 4 root root 4096 Jun  1 15:49 ../</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  220 Jun  1 15:49 .bash_logout</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 3637 Jun  1 15:49 .bashrc</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span> 8980 Jun  1 15:49 examples.desktop</span><br><span class=\"line\">-rw-r--r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>  675 Jun  1 15:49 .profile</span><br><span class=\"line\">-rw-rw-r-- 1 <span class=\"built_in\">test</span> <span class=\"built_in\">test</span>    8 Jun  1 15:53 test.txt</span><br><span class=\"line\">$  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;sssssssssss&#x27;</span>&gt; test.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">sssssssssss <span class=\"comment\">#可以看到内容被写入了</span></span><br></pre></td></tr></table></figure>"},{"title":"Linux alias 永久生效","id":"120","date":"2017-08-24T11:57:53.000Z","_content":"\n#### alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\n\n#### 比如设置 `alias db='mysql -uroot -proot'`,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\n<!-- more -->\n#### alias永久生效\n\n#### 在`/home`用户目录下面有个隐藏文件_`.bashrc`_, 使用vim打开，然后在文档后面追加alias命令即可\n\n```bash\n$ vim /home/ubuntu/.bashrc\n\n##在结尾追加alias命令，如alias db = 'mysql -uroot -proot'\n\n$ source ~/.bashrc ##使alias生效\n```","source":"_posts/linux-alias.md","raw":"---\ntitle: Linux alias 永久生效\ntags: []\nid: '120'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:57:53\n---\n\n#### alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\n\n#### 比如设置 `alias db='mysql -uroot -proot'`,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\n<!-- more -->\n#### alias永久生效\n\n#### 在`/home`用户目录下面有个隐藏文件_`.bashrc`_, 使用vim打开，然后在文档后面追加alias命令即可\n\n```bash\n$ vim /home/ubuntu/.bashrc\n\n##在结尾追加alias命令，如alias db = 'mysql -uroot -proot'\n\n$ source ~/.bashrc ##使alias生效\n```","slug":"linux-alias","published":1,"updated":"2022-03-12T23:52:58.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mfv002y417t8ug3frv7","content":"<h4 id=\"alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"><a href=\"#alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\" class=\"headerlink\" title=\"alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"></a>alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间</h4><h4 id=\"比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"><a href=\"#比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\" class=\"headerlink\" title=\"比如设置 alias db=&#39;mysql -uroot -proot&#39;,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"></a>比如设置 <code>alias db=&#39;mysql -uroot -proot&#39;</code>,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。</h4><span id=\"more\"></span>\n<h4 id=\"alias永久生效\"><a href=\"#alias永久生效\" class=\"headerlink\" title=\"alias永久生效\"></a>alias永久生效</h4><h4 id=\"在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\"><a href=\"#在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\" class=\"headerlink\" title=\"在/home用户目录下面有个隐藏文件_.bashrc_, 使用vim打开，然后在文档后面追加alias命令即可\"></a>在<code>/home</code>用户目录下面有个隐藏文件_<code>.bashrc</code>_, 使用vim打开，然后在文档后面追加alias命令即可</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /home/ubuntu/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##在结尾追加alias命令，如alias db = &#x27;mysql -uroot -proot&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc <span class=\"comment\">##使alias生效</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"><a href=\"#alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\" class=\"headerlink\" title=\"alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"></a>alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间</h4><h4 id=\"比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"><a href=\"#比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\" class=\"headerlink\" title=\"比如设置 alias db=&#39;mysql -uroot -proot&#39;,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"></a>比如设置 <code>alias db=&#39;mysql -uroot -proot&#39;</code>,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。</h4>","more":"<h4 id=\"alias永久生效\"><a href=\"#alias永久生效\" class=\"headerlink\" title=\"alias永久生效\"></a>alias永久生效</h4><h4 id=\"在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\"><a href=\"#在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\" class=\"headerlink\" title=\"在/home用户目录下面有个隐藏文件_.bashrc_, 使用vim打开，然后在文档后面追加alias命令即可\"></a>在<code>/home</code>用户目录下面有个隐藏文件_<code>.bashrc</code>_, 使用vim打开，然后在文档后面追加alias命令即可</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /home/ubuntu/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##在结尾追加alias命令，如alias db = &#x27;mysql -uroot -proot&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc <span class=\"comment\">##使alias生效</span></span><br></pre></td></tr></table></figure>"},{"title":"Linux后台运行脚本","id":"121","date":"2017-08-24T11:58:19.000Z","_content":"\n### Linux后台运行脚本\n\n#### 我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\n<!-- more -->\n### 测试方法：持续写入内容，然后查看写入的内容结果\n\n#### 为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\n\n*   **创建一个test.c和test.txt**\n    \n    ```bash\n    $ touch test.c\n    $ touch test.txt\n    ```\n    \n*   **编写代码**\n    \n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include <unistd.h>\nint main() {\n        FILE *fp = fopen(\"test.txt\", \"a+\");\n        if (fp == 0) {\n                printf(\"Can not open file \\n\");\n                return 0;\n        }\n        int ix = 0;\n        for (;; ix++) {\n                fseek(fp, 0, SEEK_END);\n                char s_add_arr[10];\n                memset(s_add_arr, '\\0', 10);\n                sprintf(s_add_arr, \"%i this is test \\n\", ix);\n                fwrite(s_add_arr, strlen(s_add_arr), 1, fp);\n                sleep(1);\n        }\n        fclose(fp);\n        return 0;\n}\n```\n\n*   **编译c++文件**\n\n```bash\n$ gcc -o test test.c\n```\n\n*   **此时会生成一个test的可运行程序**\n\n![](/uploads/2017/08/1489635678506.png)\n\n*   **测试脚本是否可行**\n\n```bash\n$ ./test\n```\n\n*   **打开一个新窗口，使用vim命令查看是否有写入内容** ![](/uploads/2017/08/1489635664287.png) ![](/uploads/2017/08/1489635678506.png)\n\n### nuhup\n\n*   **运行脚本**\n\n```bash\n$ nohup ./test > myout.file 2>&1 &\n[2] 3172\n[1]   Terminated              nohup ./test\n```\n\n*   **查看进程**\n\n```bash\n$ jobs\n[2]+  Running                 nohup ./test > myout.file 2>&1 &\n```\n\n*   **查看test.txt是否写进内容**\n\n```bash\n$ vim test.txt\n```\n\n### supervisor\n\n#### 之前写过supervisor安装配置方法，具体参见 [Linux 安装supervisor (CentOs or RedHat)](http://feilong.tech/?p=118)\n\n### screen\n\n#### 只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\n\n*   **运行脚本**\n\n```bash\n$ screen -S test ./test ##screen -S 会话命名 command，然后Ctrl+a+d放到后台\n[detached from 4070.test]\n$ screen -ls ## 查看会话\nThere is a screen on:\n        4070.test       (03/15/2017 10:27:19 PM)        (Detached)\n1 Socket in /var/run/screen/S-tengyunlong.\n```\n\n*   **查看test.txt内容是否写入**","source":"_posts/linux-hang-up.md","raw":"---\ntitle: Linux后台运行脚本\ntags: []\nid: '121'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:58:19\n---\n\n### Linux后台运行脚本\n\n#### 我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\n<!-- more -->\n### 测试方法：持续写入内容，然后查看写入的内容结果\n\n#### 为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\n\n*   **创建一个test.c和test.txt**\n    \n    ```bash\n    $ touch test.c\n    $ touch test.txt\n    ```\n    \n*   **编写代码**\n    \n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include <unistd.h>\nint main() {\n        FILE *fp = fopen(\"test.txt\", \"a+\");\n        if (fp == 0) {\n                printf(\"Can not open file \\n\");\n                return 0;\n        }\n        int ix = 0;\n        for (;; ix++) {\n                fseek(fp, 0, SEEK_END);\n                char s_add_arr[10];\n                memset(s_add_arr, '\\0', 10);\n                sprintf(s_add_arr, \"%i this is test \\n\", ix);\n                fwrite(s_add_arr, strlen(s_add_arr), 1, fp);\n                sleep(1);\n        }\n        fclose(fp);\n        return 0;\n}\n```\n\n*   **编译c++文件**\n\n```bash\n$ gcc -o test test.c\n```\n\n*   **此时会生成一个test的可运行程序**\n\n![](/uploads/2017/08/1489635678506.png)\n\n*   **测试脚本是否可行**\n\n```bash\n$ ./test\n```\n\n*   **打开一个新窗口，使用vim命令查看是否有写入内容** ![](/uploads/2017/08/1489635664287.png) ![](/uploads/2017/08/1489635678506.png)\n\n### nuhup\n\n*   **运行脚本**\n\n```bash\n$ nohup ./test > myout.file 2>&1 &\n[2] 3172\n[1]   Terminated              nohup ./test\n```\n\n*   **查看进程**\n\n```bash\n$ jobs\n[2]+  Running                 nohup ./test > myout.file 2>&1 &\n```\n\n*   **查看test.txt是否写进内容**\n\n```bash\n$ vim test.txt\n```\n\n### supervisor\n\n#### 之前写过supervisor安装配置方法，具体参见 [Linux 安装supervisor (CentOs or RedHat)](http://feilong.tech/?p=118)\n\n### screen\n\n#### 只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\n\n*   **运行脚本**\n\n```bash\n$ screen -S test ./test ##screen -S 会话命名 command，然后Ctrl+a+d放到后台\n[detached from 4070.test]\n$ screen -ls ## 查看会话\nThere is a screen on:\n        4070.test       (03/15/2017 10:27:19 PM)        (Detached)\n1 Socket in /var/run/screen/S-tengyunlong.\n```\n\n*   **查看test.txt内容是否写入**","slug":"linux-hang-up","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mfw0032417t8atq64wo","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Linux后台运行脚本\"><a href=\"#Linux后台运行脚本\" class=\"headerlink\" title=\"Linux后台运行脚本\"></a>Linux后台运行脚本</h3><h4 id=\"我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\"><a href=\"#我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\" class=\"headerlink\" title=\"我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\"></a>我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen</h4><span id=\"more\"></span>\n<h3 id=\"测试方法：持续写入内容，然后查看写入的内容结果\"><a href=\"#测试方法：持续写入内容，然后查看写入的内容结果\" class=\"headerlink\" title=\"测试方法：持续写入内容，然后查看写入的内容结果\"></a>测试方法：持续写入内容，然后查看写入的内容结果</h3><h4 id=\"为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\"><a href=\"#为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\" class=\"headerlink\" title=\"为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\"></a>为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。</h4><ul>\n<li><p><strong>创建一个test.c和test.txt</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">touch</span> test.c</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> test.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编写代码</strong></p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FILE *fp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;test.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Can not open file \\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ix = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;; ix++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fseek</span>(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">                <span class=\"type\">char</span> s_add_arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(s_add_arr, <span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">                <span class=\"built_in\">sprintf</span>(s_add_arr, <span class=\"string\">&quot;%i this is test \\n&quot;</span>, ix);</span><br><span class=\"line\">                <span class=\"built_in\">fwrite</span>(s_add_arr, <span class=\"built_in\">strlen</span>(s_add_arr), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">                <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>编译c++文件</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o <span class=\"built_in\">test</span> test.c</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>此时会生成一个test的可运行程序</strong></li>\n</ul>\n<p><img src=\"/uploads/2017/08/1489635678506.png\"></p>\n<ul>\n<li><strong>测试脚本是否可行</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>打开一个新窗口，使用vim命令查看是否有写入内容</strong> <img src=\"/uploads/2017/08/1489635664287.png\"> <img src=\"/uploads/2017/08/1489635678506.png\"></li>\n</ul>\n<h3 id=\"nuhup\"><a href=\"#nuhup\" class=\"headerlink\" title=\"nuhup\"></a>nuhup</h3><ul>\n<li><strong>运行脚本</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">nohup</span> ./test &gt; myout.file 2&gt;&amp;1 &amp;</span><br><span class=\"line\">[2] 3172</span><br><span class=\"line\">[1]   Terminated              <span class=\"built_in\">nohup</span> ./test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看进程</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">jobs</span></span><br><span class=\"line\">[2]+  Running                 <span class=\"built_in\">nohup</span> ./test &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看test.txt是否写进内容</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a>supervisor</h3><h4 id=\"之前写过supervisor安装配置方法，具体参见-Linux-安装supervisor-CentOs-or-RedHat\"><a href=\"#之前写过supervisor安装配置方法，具体参见-Linux-安装supervisor-CentOs-or-RedHat\" class=\"headerlink\" title=\"之前写过supervisor安装配置方法，具体参见 Linux 安装supervisor (CentOs or RedHat)\"></a>之前写过supervisor安装配置方法，具体参见 <a href=\"http://feilong.tech/?p=118\">Linux 安装supervisor (CentOs or RedHat)</a></h4><h3 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h3><h4 id=\"只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen-r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\"><a href=\"#只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen-r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\" class=\"headerlink\" title=\"只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\"></a>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。</h4><ul>\n<li><strong>运行脚本</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ screen -S <span class=\"built_in\">test</span> ./test <span class=\"comment\">##screen -S 会话命名 command，然后Ctrl+a+d放到后台</span></span><br><span class=\"line\">[detached from 4070.<span class=\"built_in\">test</span>]</span><br><span class=\"line\">$ screen -<span class=\"built_in\">ls</span> <span class=\"comment\">## 查看会话</span></span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">        4070.<span class=\"built_in\">test</span>       (03/15/2017 10:27:19 PM)        (Detached)</span><br><span class=\"line\">1 Socket <span class=\"keyword\">in</span> /var/run/screen/S-tengyunlong.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看test.txt内容是否写入</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Linux后台运行脚本\"><a href=\"#Linux后台运行脚本\" class=\"headerlink\" title=\"Linux后台运行脚本\"></a>Linux后台运行脚本</h3><h4 id=\"我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\"><a href=\"#我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\" class=\"headerlink\" title=\"我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen\"></a>我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen</h4>","more":"<h3 id=\"测试方法：持续写入内容，然后查看写入的内容结果\"><a href=\"#测试方法：持续写入内容，然后查看写入的内容结果\" class=\"headerlink\" title=\"测试方法：持续写入内容，然后查看写入的内容结果\"></a>测试方法：持续写入内容，然后查看写入的内容结果</h3><h4 id=\"为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\"><a href=\"#为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\" class=\"headerlink\" title=\"为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。\"></a>为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。</h4><ul>\n<li><p><strong>创建一个test.c和test.txt</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">touch</span> test.c</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> test.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>编写代码</strong></p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FILE *fp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;test.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Can not open file \\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ix = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;; ix++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fseek</span>(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">                <span class=\"type\">char</span> s_add_arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(s_add_arr, <span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">                <span class=\"built_in\">sprintf</span>(s_add_arr, <span class=\"string\">&quot;%i this is test \\n&quot;</span>, ix);</span><br><span class=\"line\">                <span class=\"built_in\">fwrite</span>(s_add_arr, <span class=\"built_in\">strlen</span>(s_add_arr), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">                <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>编译c++文件</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o <span class=\"built_in\">test</span> test.c</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>此时会生成一个test的可运行程序</strong></li>\n</ul>\n<p><img src=\"/uploads/2017/08/1489635678506.png\"></p>\n<ul>\n<li><strong>测试脚本是否可行</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>打开一个新窗口，使用vim命令查看是否有写入内容</strong> <img src=\"/uploads/2017/08/1489635664287.png\"> <img src=\"/uploads/2017/08/1489635678506.png\"></li>\n</ul>\n<h3 id=\"nuhup\"><a href=\"#nuhup\" class=\"headerlink\" title=\"nuhup\"></a>nuhup</h3><ul>\n<li><strong>运行脚本</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">nohup</span> ./test &gt; myout.file 2&gt;&amp;1 &amp;</span><br><span class=\"line\">[2] 3172</span><br><span class=\"line\">[1]   Terminated              <span class=\"built_in\">nohup</span> ./test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看进程</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">jobs</span></span><br><span class=\"line\">[2]+  Running                 <span class=\"built_in\">nohup</span> ./test &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看test.txt是否写进内容</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a>supervisor</h3><h4 id=\"之前写过supervisor安装配置方法，具体参见-Linux-安装supervisor-CentOs-or-RedHat\"><a href=\"#之前写过supervisor安装配置方法，具体参见-Linux-安装supervisor-CentOs-or-RedHat\" class=\"headerlink\" title=\"之前写过supervisor安装配置方法，具体参见 Linux 安装supervisor (CentOs or RedHat)\"></a>之前写过supervisor安装配置方法，具体参见 <a href=\"http://feilong.tech/?p=118\">Linux 安装supervisor (CentOs or RedHat)</a></h4><h3 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h3><h4 id=\"只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen-r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\"><a href=\"#只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen-r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\" class=\"headerlink\" title=\"只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。\"></a>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。</h4><ul>\n<li><strong>运行脚本</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ screen -S <span class=\"built_in\">test</span> ./test <span class=\"comment\">##screen -S 会话命名 command，然后Ctrl+a+d放到后台</span></span><br><span class=\"line\">[detached from 4070.<span class=\"built_in\">test</span>]</span><br><span class=\"line\">$ screen -<span class=\"built_in\">ls</span> <span class=\"comment\">## 查看会话</span></span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">        4070.<span class=\"built_in\">test</span>       (03/15/2017 10:27:19 PM)        (Detached)</span><br><span class=\"line\">1 Socket <span class=\"keyword\">in</span> /var/run/screen/S-tengyunlong.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看test.txt内容是否写入</strong></li>\n</ul>"},{"title":"Linux 安装supervisor (CentOs or RedHat)","id":"118","date":"2017-08-24T11:56:46.000Z","_content":"\n#### supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\n\n#### supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\n<!-- more -->\n#### 安装supervisor\n\n```bash\n$ yum install python-setuptools\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151312.png)\n\n```bash\n$ easy_install supervisor\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151521.png)\n\n#### 测试是否安装成功\n\n```bash\n$ echo_supervisord_conf\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151708.png)\n\n#### 创建配置文件\n\n##### 创建主配置文件\n\n```bash\n$ mkdir -m 755 -p /etc/supervisor/\n$ echo_supervisord_conf > /etc/supervisor/supervisord.conf\n```\n\n##### 创建项目配置目录\n\n```bash\n$ mkdir -m 755 conf.d\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108152106.png)\n\n#### 创建测试\n\n##### 在/home/tengyunlong/supervisor\\_simple目录下创建test.c\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include <unistd.h>\nint main() {\n    FILE *fp = fopen(\"/home/slightech/supervisor_simple/a.txt\", \"a+\");\n    if (fp == 0) {\n        printf(\"Can not open file \\n\");\n        return 0;\n    }\n    int ix = 0;\n    for (;; ix++) {\n        fseek(fp, 0, SEEK_END);\n        char s_add_arr[10];\n        memset(s_add_arr, '\\0', 10);\n        sprintf(s_add_arr, \"%i\\n\", ix);\n        fwrite(s_add_arr, strlen(s_add_arr), 1, fp);\n        sleep(1);\n    }\n    fclose(fp);\n    return 0;\n}\n```\n\n##### 编译为test\n\n```bash\n$ gcc -o test test.c\n```\n\n#### 更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\n\n![](/uploads/2017/08/QQ%E5%9B%BE%E7%89%8720161108153215.png)\n\n#### 在/etc/supervisor/conf.d 创建test.conf文件\n\n```bash\n[program:test]\ncommand=/home/slightech/supervisor_simple/test\n;directory= ;directory to cwd to before exec (def no cwd)\nautostart=true ; start at supervisord start (default: true)\nautorestart=unexpected ; whether/when to restart (default: unexpected)\nstartsecs=1 ; number of secs prog must stay running (def. 1)\nredirect_stderr=true ; redirect proc stderr to stdout (default false) 错误重定向\nstdout_logfile=/var/log/supervisor/test.log ; stout log path, NONE of none ;default AUTO,log输出\n```\n\n#### 启动supervisor服务\n\n```bash\n$ supervisord -c /etc/supervisor/supervisord.conf\n```\n\n#### 使用pstree查看进程\n\n```bash\n$ pstree  grep supervisor\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108153954.png)\n\n#### 查看监控的进程，发现test running\n\n```bash\n$ supervisorctl -c /etc/supervisor/supervisord.conf\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108154215.png)\n\n#### 命令\n\n```bash\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stopstartrestart all #停止启动重启 所有进程\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] #登录控制台\n```\n\n#### 参见[supervisor初体验](http://www.jianshu.com/p/9abffc905645)\n\n#### 本文地址： [http://feilong.tech/2017/08/24/linux-install-supervisor/](http://feilong.tech/2017/08/24/linux-install-supervisor/)","source":"_posts/linux-install-supervisor.md","raw":"---\ntitle: Linux 安装supervisor (CentOs or RedHat)\ntags: []\nid: '118'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:56:46\n---\n\n#### supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\n\n#### supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\n<!-- more -->\n#### 安装supervisor\n\n```bash\n$ yum install python-setuptools\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151312.png)\n\n```bash\n$ easy_install supervisor\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151521.png)\n\n#### 测试是否安装成功\n\n```bash\n$ echo_supervisord_conf\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151708.png)\n\n#### 创建配置文件\n\n##### 创建主配置文件\n\n```bash\n$ mkdir -m 755 -p /etc/supervisor/\n$ echo_supervisord_conf > /etc/supervisor/supervisord.conf\n```\n\n##### 创建项目配置目录\n\n```bash\n$ mkdir -m 755 conf.d\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108152106.png)\n\n#### 创建测试\n\n##### 在/home/tengyunlong/supervisor\\_simple目录下创建test.c\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include <unistd.h>\nint main() {\n    FILE *fp = fopen(\"/home/slightech/supervisor_simple/a.txt\", \"a+\");\n    if (fp == 0) {\n        printf(\"Can not open file \\n\");\n        return 0;\n    }\n    int ix = 0;\n    for (;; ix++) {\n        fseek(fp, 0, SEEK_END);\n        char s_add_arr[10];\n        memset(s_add_arr, '\\0', 10);\n        sprintf(s_add_arr, \"%i\\n\", ix);\n        fwrite(s_add_arr, strlen(s_add_arr), 1, fp);\n        sleep(1);\n    }\n    fclose(fp);\n    return 0;\n}\n```\n\n##### 编译为test\n\n```bash\n$ gcc -o test test.c\n```\n\n#### 更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\n\n![](/uploads/2017/08/QQ%E5%9B%BE%E7%89%8720161108153215.png)\n\n#### 在/etc/supervisor/conf.d 创建test.conf文件\n\n```bash\n[program:test]\ncommand=/home/slightech/supervisor_simple/test\n;directory= ;directory to cwd to before exec (def no cwd)\nautostart=true ; start at supervisord start (default: true)\nautorestart=unexpected ; whether/when to restart (default: unexpected)\nstartsecs=1 ; number of secs prog must stay running (def. 1)\nredirect_stderr=true ; redirect proc stderr to stdout (default false) 错误重定向\nstdout_logfile=/var/log/supervisor/test.log ; stout log path, NONE of none ;default AUTO,log输出\n```\n\n#### 启动supervisor服务\n\n```bash\n$ supervisord -c /etc/supervisor/supervisord.conf\n```\n\n#### 使用pstree查看进程\n\n```bash\n$ pstree  grep supervisor\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108153954.png)\n\n#### 查看监控的进程，发现test running\n\n```bash\n$ supervisorctl -c /etc/supervisor/supervisord.conf\n```\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108154215.png)\n\n#### 命令\n\n```bash\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stopstartrestart all #停止启动重启 所有进程\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] #登录控制台\n```\n\n#### 参见[supervisor初体验](http://www.jianshu.com/p/9abffc905645)\n\n#### 本文地址： [http://feilong.tech/2017/08/24/linux-install-supervisor/](http://feilong.tech/2017/08/24/linux-install-supervisor/)","slug":"linux-install-supervisor","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mfy0036417tftuq4ub2","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"><a href=\"#supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\" class=\"headerlink\" title=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"></a>supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。</h4><h4 id=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"><a href=\"#supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\" class=\"headerlink\" title=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"></a>supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</h4><span id=\"more\"></span>\n<h4 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install python-setuptools</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151312.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ easy_install supervisor</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151521.png\"></p>\n<h4 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo_supervisord_conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151708.png\"></p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><h5 id=\"创建主配置文件\"><a href=\"#创建主配置文件\" class=\"headerlink\" title=\"创建主配置文件\"></a>创建主配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -m 755 -p /etc/supervisor/</span><br><span class=\"line\">$ echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建项目配置目录\"><a href=\"#创建项目配置目录\" class=\"headerlink\" title=\"创建项目配置目录\"></a>创建项目配置目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -m 755 conf.d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108152106.png\"></p>\n<h4 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h4><h5 id=\"在-x2F-home-x2F-tengyunlong-x2F-supervisor-simple目录下创建test-c\"><a href=\"#在-x2F-home-x2F-tengyunlong-x2F-supervisor-simple目录下创建test-c\" class=\"headerlink\" title=\"在&#x2F;home&#x2F;tengyunlong&#x2F;supervisor_simple目录下创建test.c\"></a>在&#x2F;home&#x2F;tengyunlong&#x2F;supervisor_simple目录下创建test.c</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FILE *fp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;/home/slightech/supervisor_simple/a.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Can not open file \\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ix = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;; ix++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fseek</span>(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">        <span class=\"type\">char</span> s_add_arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(s_add_arr, <span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(s_add_arr, <span class=\"string\">&quot;%i\\n&quot;</span>, ix);</span><br><span class=\"line\">        <span class=\"built_in\">fwrite</span>(s_add_arr, <span class=\"built_in\">strlen</span>(s_add_arr), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编译为test\"><a href=\"#编译为test\" class=\"headerlink\" title=\"编译为test\"></a>编译为test</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o <span class=\"built_in\">test</span> test.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\"><a href=\"#更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\" class=\"headerlink\" title=\"更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\"></a>更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式</h4><p><img src=\"/uploads/2017/08/QQ%E5%9B%BE%E7%89%8720161108153215.png\"></p>\n<h4 id=\"在-x2F-etc-x2F-supervisor-x2F-conf-d-创建test-conf文件\"><a href=\"#在-x2F-etc-x2F-supervisor-x2F-conf-d-创建test-conf文件\" class=\"headerlink\" title=\"在&#x2F;etc&#x2F;supervisor&#x2F;conf.d 创建test.conf文件\"></a>在&#x2F;etc&#x2F;supervisor&#x2F;conf.d 创建test.conf文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:<span class=\"built_in\">test</span>]</span><br><span class=\"line\"><span class=\"built_in\">command</span>=/home/slightech/supervisor_simple/test</span><br><span class=\"line\">;directory= ;directory to cwd to before <span class=\"built_in\">exec</span> (def no cwd)</span><br><span class=\"line\">autostart=<span class=\"literal\">true</span> ; start at supervisord start (default: <span class=\"literal\">true</span>)</span><br><span class=\"line\">autorestart=unexpected ; whether/when to restart (default: unexpected)</span><br><span class=\"line\">startsecs=1 ; number of secs prog must stay running (def. 1)</span><br><span class=\"line\">redirect_stderr=<span class=\"literal\">true</span> ; redirect proc stderr to stdout (default <span class=\"literal\">false</span>) 错误重定向</span><br><span class=\"line\">stdout_logfile=/var/log/supervisor/test.log ; stout <span class=\"built_in\">log</span> path, NONE of none ;default AUTO,<span class=\"built_in\">log</span>输出</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动supervisor服务\"><a href=\"#启动supervisor服务\" class=\"headerlink\" title=\"启动supervisor服务\"></a>启动supervisor服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用pstree查看进程\"><a href=\"#使用pstree查看进程\" class=\"headerlink\" title=\"使用pstree查看进程\"></a>使用pstree查看进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pstree  grep supervisor</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108153954.png\"></p>\n<h4 id=\"查看监控的进程，发现test-running\"><a href=\"#查看监控的进程，发现test-running\" class=\"headerlink\" title=\"查看监控的进程，发现test running\"></a>查看监控的进程，发现test running</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisorctl -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108154215.png\"></p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stopstartrestart all <span class=\"comment\">#停止启动重启 所有进程</span></span><br><span class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] <span class=\"comment\">#登录控制台</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参见supervisor初体验\"><a href=\"#参见supervisor初体验\" class=\"headerlink\" title=\"参见supervisor初体验\"></a>参见<a href=\"http://www.jianshu.com/p/9abffc905645\">supervisor初体验</a></h4><h4 id=\"本文地址：-http-feilong-tech-2017-08-24-linux-install-supervisor\"><a href=\"#本文地址：-http-feilong-tech-2017-08-24-linux-install-supervisor\" class=\"headerlink\" title=\"本文地址： http://feilong.tech/2017/08/24/linux-install-supervisor/\"></a>本文地址： <a href=\"http://feilong.tech/2017/08/24/linux-install-supervisor/\">http://feilong.tech/2017/08/24/linux-install-supervisor/</a></h4>","site":{"data":{}},"excerpt":"<h4 id=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"><a href=\"#supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\" class=\"headerlink\" title=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"></a>supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。</h4><h4 id=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"><a href=\"#supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\" class=\"headerlink\" title=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"></a>supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</h4>","more":"<h4 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install python-setuptools</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151312.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ easy_install supervisor</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151521.png\"></p>\n<h4 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo_supervisord_conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151708.png\"></p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><h5 id=\"创建主配置文件\"><a href=\"#创建主配置文件\" class=\"headerlink\" title=\"创建主配置文件\"></a>创建主配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -m 755 -p /etc/supervisor/</span><br><span class=\"line\">$ echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建项目配置目录\"><a href=\"#创建项目配置目录\" class=\"headerlink\" title=\"创建项目配置目录\"></a>创建项目配置目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -m 755 conf.d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108152106.png\"></p>\n<h4 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h4><h5 id=\"在-x2F-home-x2F-tengyunlong-x2F-supervisor-simple目录下创建test-c\"><a href=\"#在-x2F-home-x2F-tengyunlong-x2F-supervisor-simple目录下创建test-c\" class=\"headerlink\" title=\"在&#x2F;home&#x2F;tengyunlong&#x2F;supervisor_simple目录下创建test.c\"></a>在&#x2F;home&#x2F;tengyunlong&#x2F;supervisor_simple目录下创建test.c</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FILE *fp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;/home/slightech/supervisor_simple/a.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Can not open file \\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ix = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;; ix++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fseek</span>(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">        <span class=\"type\">char</span> s_add_arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(s_add_arr, <span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(s_add_arr, <span class=\"string\">&quot;%i\\n&quot;</span>, ix);</span><br><span class=\"line\">        <span class=\"built_in\">fwrite</span>(s_add_arr, <span class=\"built_in\">strlen</span>(s_add_arr), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编译为test\"><a href=\"#编译为test\" class=\"headerlink\" title=\"编译为test\"></a>编译为test</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o <span class=\"built_in\">test</span> test.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\"><a href=\"#更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\" class=\"headerlink\" title=\"更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\"></a>更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式</h4><p><img src=\"/uploads/2017/08/QQ%E5%9B%BE%E7%89%8720161108153215.png\"></p>\n<h4 id=\"在-x2F-etc-x2F-supervisor-x2F-conf-d-创建test-conf文件\"><a href=\"#在-x2F-etc-x2F-supervisor-x2F-conf-d-创建test-conf文件\" class=\"headerlink\" title=\"在&#x2F;etc&#x2F;supervisor&#x2F;conf.d 创建test.conf文件\"></a>在&#x2F;etc&#x2F;supervisor&#x2F;conf.d 创建test.conf文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:<span class=\"built_in\">test</span>]</span><br><span class=\"line\"><span class=\"built_in\">command</span>=/home/slightech/supervisor_simple/test</span><br><span class=\"line\">;directory= ;directory to cwd to before <span class=\"built_in\">exec</span> (def no cwd)</span><br><span class=\"line\">autostart=<span class=\"literal\">true</span> ; start at supervisord start (default: <span class=\"literal\">true</span>)</span><br><span class=\"line\">autorestart=unexpected ; whether/when to restart (default: unexpected)</span><br><span class=\"line\">startsecs=1 ; number of secs prog must stay running (def. 1)</span><br><span class=\"line\">redirect_stderr=<span class=\"literal\">true</span> ; redirect proc stderr to stdout (default <span class=\"literal\">false</span>) 错误重定向</span><br><span class=\"line\">stdout_logfile=/var/log/supervisor/test.log ; stout <span class=\"built_in\">log</span> path, NONE of none ;default AUTO,<span class=\"built_in\">log</span>输出</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动supervisor服务\"><a href=\"#启动supervisor服务\" class=\"headerlink\" title=\"启动supervisor服务\"></a>启动supervisor服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用pstree查看进程\"><a href=\"#使用pstree查看进程\" class=\"headerlink\" title=\"使用pstree查看进程\"></a>使用pstree查看进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pstree  grep supervisor</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108153954.png\"></p>\n<h4 id=\"查看监控的进程，发现test-running\"><a href=\"#查看监控的进程，发现test-running\" class=\"headerlink\" title=\"查看监控的进程，发现test running\"></a>查看监控的进程，发现test running</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisorctl -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108154215.png\"></p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stopstartrestart all <span class=\"comment\">#停止启动重启 所有进程</span></span><br><span class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] <span class=\"comment\">#登录控制台</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参见supervisor初体验\"><a href=\"#参见supervisor初体验\" class=\"headerlink\" title=\"参见supervisor初体验\"></a>参见<a href=\"http://www.jianshu.com/p/9abffc905645\">supervisor初体验</a></h4><h4 id=\"本文地址：-http-feilong-tech-2017-08-24-linux-install-supervisor\"><a href=\"#本文地址：-http-feilong-tech-2017-08-24-linux-install-supervisor\" class=\"headerlink\" title=\"本文地址： http://feilong.tech/2017/08/24/linux-install-supervisor/\"></a>本文地址： <a href=\"http://feilong.tech/2017/08/24/linux-install-supervisor/\">http://feilong.tech/2017/08/24/linux-install-supervisor/</a></h4>"},{"title":"Linux自定义PHP的环境变量","id":"254","comments":0,"date":"2018-03-07T09:41:46.000Z","_content":"\n很多时候，我们会使用 PHP的`$_SERVER`数组，通过这个数组，可以获取一些服务器的变量信息。但是不同的模式下，这个全局数组是不一样的。比如，在web模式下，`$_SERVER` 是获取的fastcgi\\_params，在cli模式下，获取的是环境变量(也就是常见的Linux 的export设置的)\n\n举个例子，我们要设置$\\_SERVER\\['AAAAA'\\]='test\\_data'\n\n刚开始，不管web模式下，还是cli模式下，都是没有这个值的。\n\nweb模式 ![](/uploads/2018/03/WX20180307-173333-300x55.png)\n\ncli模式 ![](/uploads/2018/03/WX20180307-173521.png)\n\n#### 更改nginx 的环境变量\n\n找到fastcgi\\_params文件，一般是和nginx.conf在同一个目录，\n\n![](/uploads/2018/03/WX20180307-173138.png)\n\n```bash\n$ sudo nginx -s reload \n```\n\n然后刷新页面 ![](/uploads/2018/03/WX20180307-173727.png)\n\n#### 更改cli模式先的环境变量\n\n```bash\n$ vim ~/.bashrc\n```\n\n![](/uploads/2018/03/WX20180307-173048.png)\n\n```bash\n$ source ~/.bashrc\n$ php -r 'var_dump($_SERVER[\"AAAAA\"]);';\n```\n\n![](/uploads/2018/03/WX20180307-173922.png)","source":"_posts/linux-php-const.md","raw":"---\ntitle: Linux自定义PHP的环境变量\ntags:\n  - Linux\n  - nginx\n  - PHP\nid: '254'\ncategories:\n  - - Linux\n  - - Nginx\n  - - PHP\ncomments: false\ndate: 2018-03-07 17:41:46\n---\n\n很多时候，我们会使用 PHP的`$_SERVER`数组，通过这个数组，可以获取一些服务器的变量信息。但是不同的模式下，这个全局数组是不一样的。比如，在web模式下，`$_SERVER` 是获取的fastcgi\\_params，在cli模式下，获取的是环境变量(也就是常见的Linux 的export设置的)\n\n举个例子，我们要设置$\\_SERVER\\['AAAAA'\\]='test\\_data'\n\n刚开始，不管web模式下，还是cli模式下，都是没有这个值的。\n\nweb模式 ![](/uploads/2018/03/WX20180307-173333-300x55.png)\n\ncli模式 ![](/uploads/2018/03/WX20180307-173521.png)\n\n#### 更改nginx 的环境变量\n\n找到fastcgi\\_params文件，一般是和nginx.conf在同一个目录，\n\n![](/uploads/2018/03/WX20180307-173138.png)\n\n```bash\n$ sudo nginx -s reload \n```\n\n然后刷新页面 ![](/uploads/2018/03/WX20180307-173727.png)\n\n#### 更改cli模式先的环境变量\n\n```bash\n$ vim ~/.bashrc\n```\n\n![](/uploads/2018/03/WX20180307-173048.png)\n\n```bash\n$ source ~/.bashrc\n$ php -r 'var_dump($_SERVER[\"AAAAA\"]);';\n```\n\n![](/uploads/2018/03/WX20180307-173922.png)","slug":"linux-php-const","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mfz003a417t0u5w8jxz","layout":"post","photos":[],"link":"","content":"<p>很多时候，我们会使用 PHP的<code>$_SERVER</code>数组，通过这个数组，可以获取一些服务器的变量信息。但是不同的模式下，这个全局数组是不一样的。比如，在web模式下，<code>$_SERVER</code> 是获取的fastcgi_params，在cli模式下，获取的是环境变量(也就是常见的Linux 的export设置的)</p>\n<p>举个例子，我们要设置$_SERVER[‘AAAAA’]&#x3D;’test_data’</p>\n<p>刚开始，不管web模式下，还是cli模式下，都是没有这个值的。</p>\n<p>web模式 <img src=\"/uploads/2018/03/WX20180307-173333-300x55.png\"></p>\n<p>cli模式 <img src=\"/uploads/2018/03/WX20180307-173521.png\"></p>\n<h4 id=\"更改nginx-的环境变量\"><a href=\"#更改nginx-的环境变量\" class=\"headerlink\" title=\"更改nginx 的环境变量\"></a>更改nginx 的环境变量</h4><p>找到fastcgi_params文件，一般是和nginx.conf在同一个目录，</p>\n<p><img src=\"/uploads/2018/03/WX20180307-173138.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo nginx -s reload </span><br></pre></td></tr></table></figure>\n\n<p>然后刷新页面 <img src=\"/uploads/2018/03/WX20180307-173727.png\"></p>\n<h4 id=\"更改cli模式先的环境变量\"><a href=\"#更改cli模式先的环境变量\" class=\"headerlink\" title=\"更改cli模式先的环境变量\"></a>更改cli模式先的环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/03/WX20180307-173048.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</span><br><span class=\"line\">$ php -r <span class=\"string\">&#x27;var_dump($_SERVER[&quot;AAAAA&quot;]);&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/03/WX20180307-173922.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很多时候，我们会使用 PHP的<code>$_SERVER</code>数组，通过这个数组，可以获取一些服务器的变量信息。但是不同的模式下，这个全局数组是不一样的。比如，在web模式下，<code>$_SERVER</code> 是获取的fastcgi_params，在cli模式下，获取的是环境变量(也就是常见的Linux 的export设置的)</p>\n<p>举个例子，我们要设置$_SERVER[‘AAAAA’]&#x3D;’test_data’</p>\n<p>刚开始，不管web模式下，还是cli模式下，都是没有这个值的。</p>\n<p>web模式 <img src=\"/uploads/2018/03/WX20180307-173333-300x55.png\"></p>\n<p>cli模式 <img src=\"/uploads/2018/03/WX20180307-173521.png\"></p>\n<h4 id=\"更改nginx-的环境变量\"><a href=\"#更改nginx-的环境变量\" class=\"headerlink\" title=\"更改nginx 的环境变量\"></a>更改nginx 的环境变量</h4><p>找到fastcgi_params文件，一般是和nginx.conf在同一个目录，</p>\n<p><img src=\"/uploads/2018/03/WX20180307-173138.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo nginx -s reload </span><br></pre></td></tr></table></figure>\n\n<p>然后刷新页面 <img src=\"/uploads/2018/03/WX20180307-173727.png\"></p>\n<h4 id=\"更改cli模式先的环境变量\"><a href=\"#更改cli模式先的环境变量\" class=\"headerlink\" title=\"更改cli模式先的环境变量\"></a>更改cli模式先的环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/03/WX20180307-173048.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</span><br><span class=\"line\">$ php -r <span class=\"string\">&#x27;var_dump($_SERVER[&quot;AAAAA&quot;]);&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/03/WX20180307-173922.png\"></p>\n"},{"title":"Linux登录提示\"-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作\"","id":"636","date":"2019-09-30T08:04:31.000Z","_content":"\n### 背景\n\n自己在每次登录服务器的时候，都会出现 **\\-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作** 的提示信息，根据猜测，应该是登录的时候，执行了什么特殊的命令。通过百度查询了下，应该是登录的时候，执行了 ulimit 的命令。\n\n### 原因猜测\n\n一般登录的时候，都会调用 .bashrc 或者 .bash\\_profile做一些初始化的操作。但是我找到对应的home下面的文件，并！没有！所以猜测，应该调用了全局的profile。\n\n```bash\n$ cat /etc/profile\n....\nulimit -SHn 65535\n```\n\n果然最下面有一个ulimit的执行命令，把命令注释掉，重新登录，问题解决了\n\n### 关于ulimit\n\nulimit的命令主要是用来控制shell程序的资源\n\n```bash\n$ help ulimit\nulimit: ulimit [-SHacdefilmnpqrstuvx] [限制]\n    修改 shell 资源限制。\n\n    在允许此类控制的系统上，提供对于 shell 及其创建的进程所可用的\n    资源的控制。\n\n    选项：\n      -S    使用 `soft'（软）资源限制\n      -H    使用 `hard'（硬）资源限制\n      -a    所有当前限制都被报告\n      -b    套接字缓存尺寸\n      -c    创建的核文件的最大尺寸\n      -d    一个进程的数据区的最大尺寸\n      -e    最高的调度优先级（`nice'）\n      -f    有 shell 及其子进程可以写的最大文件尺寸\n      -i    最多的可以挂起的信号数\n      -l    一个进程可以锁定的最大内存尺寸\n      -m    最大的内存进驻尺寸\n      -n    最多的打开的文件描述符个数\n      -p    管道缓冲区尺寸\n      -q    POSIX 信息队列的最大字节数\n      -r    实时调度的最大优先级\n      -s    最大栈尺寸\n      -t    最大的CPU时间，以秒为单位\n      -u    最大用户进程数\n      -v    虚拟内存尺寸\n      -x    最大的锁数量\n\n    如果提供了 LIMIT 变量，则它为指定资源的新的值；特别的 LIMIT 值为\n    `soft'、`hard'和`unlimited'，分别表示当前的软限制，硬限制和无限制。\n    否则打印指定资源的当前限制值，不带选项则假定为 -f\n\n    取值都是1024字节为单位，除了 -t 以秒为单位，-p 以512字节为单位，\n    -u 以无范围的进程数量。\n\n    退出状态：\n    返回成功，除非使用了无效的选项或者错误发生。\n```\n\n通过ulimit，我们可以限制某个用户的使用的资源个数，比如我们限制用户打开文件的个数为2\n\n```bash\n$ ulimit -n 2\n$ touch a.php\n$ touch b.php\n$ touch b.php\n```\n\n打开3个控制台，分别使用vim命令打开三个文件，当打开打开三个文件的时候，就出现了\n\n```bash\n$ vim c-bash: /dev/null: Too many open files\n-bash: 重定向错误: 无法复制文件描述符: Invalid argument\n-bash: 2: Invalid argument\n-bash: /dev/null: Too many open files\n-bash: 重定向错误: 无法复制文件描述符: Invalid argument\n-bash: 2: Invalid argument\n```","source":"_posts/linux-ulimit-warning.md","raw":"---\ntitle: 'Linux登录提示\"-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作\"'\ntags:\n  - cli\n  - Linux\n  - shell\n  - ulimit\nid: '636'\ncategories:\n  - - Linux\ndate: 2019-09-30 16:04:31\n---\n\n### 背景\n\n自己在每次登录服务器的时候，都会出现 **\\-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作** 的提示信息，根据猜测，应该是登录的时候，执行了什么特殊的命令。通过百度查询了下，应该是登录的时候，执行了 ulimit 的命令。\n\n### 原因猜测\n\n一般登录的时候，都会调用 .bashrc 或者 .bash\\_profile做一些初始化的操作。但是我找到对应的home下面的文件，并！没有！所以猜测，应该调用了全局的profile。\n\n```bash\n$ cat /etc/profile\n....\nulimit -SHn 65535\n```\n\n果然最下面有一个ulimit的执行命令，把命令注释掉，重新登录，问题解决了\n\n### 关于ulimit\n\nulimit的命令主要是用来控制shell程序的资源\n\n```bash\n$ help ulimit\nulimit: ulimit [-SHacdefilmnpqrstuvx] [限制]\n    修改 shell 资源限制。\n\n    在允许此类控制的系统上，提供对于 shell 及其创建的进程所可用的\n    资源的控制。\n\n    选项：\n      -S    使用 `soft'（软）资源限制\n      -H    使用 `hard'（硬）资源限制\n      -a    所有当前限制都被报告\n      -b    套接字缓存尺寸\n      -c    创建的核文件的最大尺寸\n      -d    一个进程的数据区的最大尺寸\n      -e    最高的调度优先级（`nice'）\n      -f    有 shell 及其子进程可以写的最大文件尺寸\n      -i    最多的可以挂起的信号数\n      -l    一个进程可以锁定的最大内存尺寸\n      -m    最大的内存进驻尺寸\n      -n    最多的打开的文件描述符个数\n      -p    管道缓冲区尺寸\n      -q    POSIX 信息队列的最大字节数\n      -r    实时调度的最大优先级\n      -s    最大栈尺寸\n      -t    最大的CPU时间，以秒为单位\n      -u    最大用户进程数\n      -v    虚拟内存尺寸\n      -x    最大的锁数量\n\n    如果提供了 LIMIT 变量，则它为指定资源的新的值；特别的 LIMIT 值为\n    `soft'、`hard'和`unlimited'，分别表示当前的软限制，硬限制和无限制。\n    否则打印指定资源的当前限制值，不带选项则假定为 -f\n\n    取值都是1024字节为单位，除了 -t 以秒为单位，-p 以512字节为单位，\n    -u 以无范围的进程数量。\n\n    退出状态：\n    返回成功，除非使用了无效的选项或者错误发生。\n```\n\n通过ulimit，我们可以限制某个用户的使用的资源个数，比如我们限制用户打开文件的个数为2\n\n```bash\n$ ulimit -n 2\n$ touch a.php\n$ touch b.php\n$ touch b.php\n```\n\n打开3个控制台，分别使用vim命令打开三个文件，当打开打开三个文件的时候，就出现了\n\n```bash\n$ vim c-bash: /dev/null: Too many open files\n-bash: 重定向错误: 无法复制文件描述符: Invalid argument\n-bash: 2: Invalid argument\n-bash: /dev/null: Too many open files\n-bash: 重定向错误: 无法复制文件描述符: Invalid argument\n-bash: 2: Invalid argument\n```","slug":"linux-ulimit-warning","published":1,"updated":"2022-03-12T23:52:58.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mg0003e417t2m3h6ima","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>自己在每次登录服务器的时候，都会出现 <strong>-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作</strong> 的提示信息，根据猜测，应该是登录的时候，执行了什么特殊的命令。通过百度查询了下，应该是登录的时候，执行了 ulimit 的命令。</p>\n<h3 id=\"原因猜测\"><a href=\"#原因猜测\" class=\"headerlink\" title=\"原因猜测\"></a>原因猜测</h3><p>一般登录的时候，都会调用 .bashrc 或者 .bash_profile做一些初始化的操作。但是我找到对应的home下面的文件，并！没有！所以猜测，应该调用了全局的profile。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> /etc/profile</span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 65535</span><br></pre></td></tr></table></figure>\n\n<p>果然最下面有一个ulimit的执行命令，把命令注释掉，重新登录，问题解决了</p>\n<h3 id=\"关于ulimit\"><a href=\"#关于ulimit\" class=\"headerlink\" title=\"关于ulimit\"></a>关于ulimit</h3><p>ulimit的命令主要是用来控制shell程序的资源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">help</span> <span class=\"built_in\">ulimit</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span>: <span class=\"built_in\">ulimit</span> [-SHacdefilmnpqrstuvx] [限制]</span><br><span class=\"line\">    修改 shell 资源限制。</span><br><span class=\"line\"></span><br><span class=\"line\">    在允许此类控制的系统上，提供对于 shell 及其创建的进程所可用的</span><br><span class=\"line\">    资源的控制。</span><br><span class=\"line\"></span><br><span class=\"line\">    选项：</span><br><span class=\"line\">      -S    使用 `soft<span class=\"string\">&#x27;（软）资源限制</span></span><br><span class=\"line\"><span class=\"string\">      -H    使用 `hard&#x27;</span>（硬）资源限制</span><br><span class=\"line\">      -a    所有当前限制都被报告</span><br><span class=\"line\">      -b    套接字缓存尺寸</span><br><span class=\"line\">      -c    创建的核文件的最大尺寸</span><br><span class=\"line\">      -d    一个进程的数据区的最大尺寸</span><br><span class=\"line\">      -e    最高的调度优先级（`<span class=\"built_in\">nice</span><span class=\"string\">&#x27;）</span></span><br><span class=\"line\"><span class=\"string\">      -f    有 shell 及其子进程可以写的最大文件尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -i    最多的可以挂起的信号数</span></span><br><span class=\"line\"><span class=\"string\">      -l    一个进程可以锁定的最大内存尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -m    最大的内存进驻尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -n    最多的打开的文件描述符个数</span></span><br><span class=\"line\"><span class=\"string\">      -p    管道缓冲区尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -q    POSIX 信息队列的最大字节数</span></span><br><span class=\"line\"><span class=\"string\">      -r    实时调度的最大优先级</span></span><br><span class=\"line\"><span class=\"string\">      -s    最大栈尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -t    最大的CPU时间，以秒为单位</span></span><br><span class=\"line\"><span class=\"string\">      -u    最大用户进程数</span></span><br><span class=\"line\"><span class=\"string\">      -v    虚拟内存尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -x    最大的锁数量</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    如果提供了 LIMIT 变量，则它为指定资源的新的值；特别的 LIMIT 值为</span></span><br><span class=\"line\"><span class=\"string\">    `soft&#x27;</span>、`hard<span class=\"string\">&#x27;和`unlimited&#x27;</span>，分别表示当前的软限制，硬限制和无限制。</span><br><span class=\"line\">    否则打印指定资源的当前限制值，不带选项则假定为 -f</span><br><span class=\"line\"></span><br><span class=\"line\">    取值都是1024字节为单位，除了 -t 以秒为单位，-p 以512字节为单位，</span><br><span class=\"line\">    -u 以无范围的进程数量。</span><br><span class=\"line\"></span><br><span class=\"line\">    退出状态：</span><br><span class=\"line\">    返回成功，除非使用了无效的选项或者错误发生。</span><br></pre></td></tr></table></figure>\n\n<p>通过ulimit，我们可以限制某个用户的使用的资源个数，比如我们限制用户打开文件的个数为2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -n 2</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> a.php</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> b.php</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> b.php</span><br></pre></td></tr></table></figure>\n\n<p>打开3个控制台，分别使用vim命令打开三个文件，当打开打开三个文件的时候，就出现了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim c-bash: /dev/null: Too many open files</span><br><span class=\"line\">-bash: 重定向错误: 无法复制文件描述符: Invalid argument</span><br><span class=\"line\">-bash: 2: Invalid argument</span><br><span class=\"line\">-bash: /dev/null: Too many open files</span><br><span class=\"line\">-bash: 重定向错误: 无法复制文件描述符: Invalid argument</span><br><span class=\"line\">-bash: 2: Invalid argument</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>自己在每次登录服务器的时候，都会出现 <strong>-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作</strong> 的提示信息，根据猜测，应该是登录的时候，执行了什么特殊的命令。通过百度查询了下，应该是登录的时候，执行了 ulimit 的命令。</p>\n<h3 id=\"原因猜测\"><a href=\"#原因猜测\" class=\"headerlink\" title=\"原因猜测\"></a>原因猜测</h3><p>一般登录的时候，都会调用 .bashrc 或者 .bash_profile做一些初始化的操作。但是我找到对应的home下面的文件，并！没有！所以猜测，应该调用了全局的profile。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> /etc/profile</span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -SHn 65535</span><br></pre></td></tr></table></figure>\n\n<p>果然最下面有一个ulimit的执行命令，把命令注释掉，重新登录，问题解决了</p>\n<h3 id=\"关于ulimit\"><a href=\"#关于ulimit\" class=\"headerlink\" title=\"关于ulimit\"></a>关于ulimit</h3><p>ulimit的命令主要是用来控制shell程序的资源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">help</span> <span class=\"built_in\">ulimit</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span>: <span class=\"built_in\">ulimit</span> [-SHacdefilmnpqrstuvx] [限制]</span><br><span class=\"line\">    修改 shell 资源限制。</span><br><span class=\"line\"></span><br><span class=\"line\">    在允许此类控制的系统上，提供对于 shell 及其创建的进程所可用的</span><br><span class=\"line\">    资源的控制。</span><br><span class=\"line\"></span><br><span class=\"line\">    选项：</span><br><span class=\"line\">      -S    使用 `soft<span class=\"string\">&#x27;（软）资源限制</span></span><br><span class=\"line\"><span class=\"string\">      -H    使用 `hard&#x27;</span>（硬）资源限制</span><br><span class=\"line\">      -a    所有当前限制都被报告</span><br><span class=\"line\">      -b    套接字缓存尺寸</span><br><span class=\"line\">      -c    创建的核文件的最大尺寸</span><br><span class=\"line\">      -d    一个进程的数据区的最大尺寸</span><br><span class=\"line\">      -e    最高的调度优先级（`<span class=\"built_in\">nice</span><span class=\"string\">&#x27;）</span></span><br><span class=\"line\"><span class=\"string\">      -f    有 shell 及其子进程可以写的最大文件尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -i    最多的可以挂起的信号数</span></span><br><span class=\"line\"><span class=\"string\">      -l    一个进程可以锁定的最大内存尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -m    最大的内存进驻尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -n    最多的打开的文件描述符个数</span></span><br><span class=\"line\"><span class=\"string\">      -p    管道缓冲区尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -q    POSIX 信息队列的最大字节数</span></span><br><span class=\"line\"><span class=\"string\">      -r    实时调度的最大优先级</span></span><br><span class=\"line\"><span class=\"string\">      -s    最大栈尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -t    最大的CPU时间，以秒为单位</span></span><br><span class=\"line\"><span class=\"string\">      -u    最大用户进程数</span></span><br><span class=\"line\"><span class=\"string\">      -v    虚拟内存尺寸</span></span><br><span class=\"line\"><span class=\"string\">      -x    最大的锁数量</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    如果提供了 LIMIT 变量，则它为指定资源的新的值；特别的 LIMIT 值为</span></span><br><span class=\"line\"><span class=\"string\">    `soft&#x27;</span>、`hard<span class=\"string\">&#x27;和`unlimited&#x27;</span>，分别表示当前的软限制，硬限制和无限制。</span><br><span class=\"line\">    否则打印指定资源的当前限制值，不带选项则假定为 -f</span><br><span class=\"line\"></span><br><span class=\"line\">    取值都是1024字节为单位，除了 -t 以秒为单位，-p 以512字节为单位，</span><br><span class=\"line\">    -u 以无范围的进程数量。</span><br><span class=\"line\"></span><br><span class=\"line\">    退出状态：</span><br><span class=\"line\">    返回成功，除非使用了无效的选项或者错误发生。</span><br></pre></td></tr></table></figure>\n\n<p>通过ulimit，我们可以限制某个用户的使用的资源个数，比如我们限制用户打开文件的个数为2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -n 2</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> a.php</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> b.php</span><br><span class=\"line\">$ <span class=\"built_in\">touch</span> b.php</span><br></pre></td></tr></table></figure>\n\n<p>打开3个控制台，分别使用vim命令打开三个文件，当打开打开三个文件的时候，就出现了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim c-bash: /dev/null: Too many open files</span><br><span class=\"line\">-bash: 重定向错误: 无法复制文件描述符: Invalid argument</span><br><span class=\"line\">-bash: 2: Invalid argument</span><br><span class=\"line\">-bash: /dev/null: Too many open files</span><br><span class=\"line\">-bash: 重定向错误: 无法复制文件描述符: Invalid argument</span><br><span class=\"line\">-bash: 2: Invalid argument</span><br></pre></td></tr></table></figure>"},{"title":"Linux之统计ip排行","id":"443","date":"2019-06-06T14:52:13.000Z","_content":"\n面试或者笔试中，经常会出现一道题，那就是，统计nginx日志中，访问量前N个的IP地址。 自问我对Linux还算是比较了解，知道过几个命令，但是组装起来用，确实是一门学问。 以下是我盲写的执行结果 ![](/uploads/2019/06/WX20190606-223650@2x.png) 执行结果，好像并不进入人意，不可能访问量最高的ip是9次。 上面的命令拆分起来，可以理解为： 打印第一列->去重，并且统计->倒叙排列->取前10条 看起来，好像没什么问题，但是问题出在了uniq上面了 uniq其实只用了去掉相邻的重复记录的，也就是，我们在使用uniq的时候，其实是应该先按照排序，然后再进行去重操作 改正后的命令如下 ![](/uploads/2019/06/WX20190606-224835@2x.png) 相比起前一个命令，第2个sort还增加了 -n，这是因为，我们使用uniq的时候，进行了计数，我们再根据计数(-n)进行倒叙排列(-r)，最后前10条(head -10)记录.","source":"_posts/linux之统计ip排行.md","raw":"---\ntitle: Linux之统计ip排行\ntags: []\nid: '443'\ncategories:\n  - - Linux\n  - - Nginx\ndate: 2019-06-06 22:52:13\n---\n\n面试或者笔试中，经常会出现一道题，那就是，统计nginx日志中，访问量前N个的IP地址。 自问我对Linux还算是比较了解，知道过几个命令，但是组装起来用，确实是一门学问。 以下是我盲写的执行结果 ![](/uploads/2019/06/WX20190606-223650@2x.png) 执行结果，好像并不进入人意，不可能访问量最高的ip是9次。 上面的命令拆分起来，可以理解为： 打印第一列->去重，并且统计->倒叙排列->取前10条 看起来，好像没什么问题，但是问题出在了uniq上面了 uniq其实只用了去掉相邻的重复记录的，也就是，我们在使用uniq的时候，其实是应该先按照排序，然后再进行去重操作 改正后的命令如下 ![](/uploads/2019/06/WX20190606-224835@2x.png) 相比起前一个命令，第2个sort还增加了 -n，这是因为，我们使用uniq的时候，进行了计数，我们再根据计数(-n)进行倒叙排列(-r)，最后前10条(head -10)记录.","slug":"linux之统计ip排行","published":1,"updated":"2022-03-13T01:17:12.410Z","_id":"cl0oi8mg2003i417tcqh71ww8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>面试或者笔试中，经常会出现一道题，那就是，统计nginx日志中，访问量前N个的IP地址。 自问我对Linux还算是比较了解，知道过几个命令，但是组装起来用，确实是一门学问。 以下是我盲写的执行结果 <img src=\"/uploads/2019/06/WX20190606-223650@2x.png\"> 执行结果，好像并不进入人意，不可能访问量最高的ip是9次。 上面的命令拆分起来，可以理解为： 打印第一列-&gt;去重，并且统计-&gt;倒叙排列-&gt;取前10条 看起来，好像没什么问题，但是问题出在了uniq上面了 uniq其实只用了去掉相邻的重复记录的，也就是，我们在使用uniq的时候，其实是应该先按照排序，然后再进行去重操作 改正后的命令如下 <img src=\"/uploads/2019/06/WX20190606-224835@2x.png\"> 相比起前一个命令，第2个sort还增加了 -n，这是因为，我们使用uniq的时候，进行了计数，我们再根据计数(-n)进行倒叙排列(-r)，最后前10条(head -10)记录.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>面试或者笔试中，经常会出现一道题，那就是，统计nginx日志中，访问量前N个的IP地址。 自问我对Linux还算是比较了解，知道过几个命令，但是组装起来用，确实是一门学问。 以下是我盲写的执行结果 <img src=\"/uploads/2019/06/WX20190606-223650@2x.png\"> 执行结果，好像并不进入人意，不可能访问量最高的ip是9次。 上面的命令拆分起来，可以理解为： 打印第一列-&gt;去重，并且统计-&gt;倒叙排列-&gt;取前10条 看起来，好像没什么问题，但是问题出在了uniq上面了 uniq其实只用了去掉相邻的重复记录的，也就是，我们在使用uniq的时候，其实是应该先按照排序，然后再进行去重操作 改正后的命令如下 <img src=\"/uploads/2019/06/WX20190606-224835@2x.png\"> 相比起前一个命令，第2个sort还增加了 -n，这是因为，我们使用uniq的时候，进行了计数，我们再根据计数(-n)进行倒叙排列(-r)，最后前10条(head -10)记录.</p>\n"},{"title":"Mac快捷安装PHP多版本","id":"745","date":"2020-12-13T11:30:41.000Z","_content":"\n## 程序员的苦恼\n\n作为程序员，我们经常会面临一个比较痛苦的事情，那就是环境版本的问题。以PHP为例，有些框架或者工具，会对PHP版本有不同的要求。举个例子，我在公司开发使用的是PHP-7.3版本。但是周末在家，想做些其他有意思的事情，这个时候，发现有些框架或者工具的语言要求是>=PHP-7.0和<PHP-7.3。\n\n有些同学会说，用docker啊！\n\n没错，docker可以解决，但是有没有更加方便的工具来解决PHP版本切换的问题呢？当然有，那就是**phpbrew**!\n\n## phpbrew\n\n项目地址，可以异步：[phpbrew](https://github.com/phpbrew/phpbrew/blob/master/README.cn.md \"phpbrew\")\n\nphpbrew 主要解决了什么问题呢？\n\n就像上面说的，它能更快和更加方便的让我们的Mac安装多个版本的PHP，以及PHP扩展，这样可以很快的提高我们的效率，作为Mac的PHP coder，也不用发愁找相应的PHP版本的解决方案。\n\n## 使用方法\n\n### 安装\n\n```bash\n$ curl -L -O https://github.com/phpbrew/phpbrew/releases/latest/download/phpbrew.phar\n$ chmod +x phpbrew.phar\n\n# Move the file to some directory within your $PATH\n$ sudo mv phpbrew.phar /usr/local/bin/phpbrew\n```\n\n### 使用\n\n初始化\n\n```bash\nphpbrew init\n```\n\n接着在 .bashrc 或 .zshrc 文件增加如下行：\n\n```bash\n[[ -e ~/.phpbrew/bashrc ]] && source ~/.phpbrew/bashrc\n```\n\n### 基本用法\n\n列出已知的PHP版本\n\n```bash\n$ phpbrew known\nRead local release list (last update: 2020-11-23 12:49:58 UTC).\nYou can run `phpbrew update` or `phpbrew known --update` to get a newer release list.\n7.4: 7.4.12, 7.4.11, 7.4.10, 7.4.9, 7.4.8, 7.4.7, 7.4.6, 7.4.5 ...\n7.3: 7.3.24, 7.3.23, 7.3.22, 7.3.21, 7.3.20, 7.3.19, 7.3.18, 7.3.17 ...\n7.2: 7.2.34, 7.2.33, 7.2.32, 7.2.31, 7.2.30, 7.2.29, 7.2.28, 7.2.27 ...\n7.1: 7.1.33, 7.1.32, 7.1.31, 7.1.30, 7.1.29, 7.1.28, 7.1.27, 7.1.26 ...\n7.0: 7.0.33, 7.0.32, 7.0.31, 7.0.30, 7.0.29, 7.0.28, 7.0.27 ...\n5.6: 5.6.40, 5.6.39, 5.6.38, 5.6.37, 5.6.36, 5.6.35, 5.6.34, 5.6.33 ...\n5.5: 5.5.38, 5.5.37, 5.5.36, 5.5.35, 5.5.34, 5.5.33, 5.5.32, 5.5.31 ...\n5.4: 5.4.45, 5.4.44, 5.4.43, 5.4.42, 5.4.41, 5.4.40, 5.4.39, 5.4.38 ...\n```\n\n### 安装拓展\n\n```bash\n$ phpbrew install 5.3.10 +mysql+sqlite+cgi\n\n$ phpbrew install 5.3.10 +mysql+debug+pgsql +apxs2\n\n$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2\n```\n\n### 查看安装的版本\n\n```bash\n$ phpbrew list\n  php-7.2.34\n* php-5.6.40\n```\n\n### 切换版本\n\n```bash\n$ phpbrew switch php-5.6.40\n```\n\n### 启动fpm\n\n```bash\n$ phpbrew fpm start\n$ phpbrew fpm test\n[13-Dec-2020 19:29:42] NOTICE: configuration file /Users/feilong/.phpbrew/php/php-5.6.40/etc/php-fpm.conf test is successful\n```\n\n### 查看版本\n\n```bash\nPHP 5.6.40 (cli) (built: Dec 13 2020 19:11:35)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n```\n\n## 遇到的问题\n\n当我在安装php-7.2的时候，发生了一个问题，`checking for the location of zlib... configure: error: zip support requires ZLIB. Use --with-zlib-dir=<DIR> to specify prefix where ZLIB include and library are located`\n\n这个是zlib的扩展没有找到对应的类库\n\n如果没有安装，则先进行安装\n\n```bash\n$ brew reinstall zlib\n==> Downloading https://homebrew.bintray.com/bottles/zlib-1.2.11.mojave.bottle.tar.gz\n######################################################################## 100.0%\n==> Reinstalling zlib\n==> Pouring zlib-1.2.11.mojave.bottle.tar.gz\n```\n\n重新安装php\n\n```bash\n$  phpbrew install 7.2 -- \\--with-zlib-dir=`brew --prefix zlib`\n```\n\n本文链接： [https://feilong.tech/2020/12/13/mac-phpbrew/](https://feilong.tech/2020/12/13/mac-phpbrew/)","source":"_posts/mac-phpbrew.md","raw":"---\ntitle: Mac快捷安装PHP多版本\ntags:\n  - brew\n  - Mac\n  - PHP\nid: '745'\ncategories:\n  - - Linux\n  - - PHP\ndate: 2020-12-13 19:30:41\n---\n\n## 程序员的苦恼\n\n作为程序员，我们经常会面临一个比较痛苦的事情，那就是环境版本的问题。以PHP为例，有些框架或者工具，会对PHP版本有不同的要求。举个例子，我在公司开发使用的是PHP-7.3版本。但是周末在家，想做些其他有意思的事情，这个时候，发现有些框架或者工具的语言要求是>=PHP-7.0和<PHP-7.3。\n\n有些同学会说，用docker啊！\n\n没错，docker可以解决，但是有没有更加方便的工具来解决PHP版本切换的问题呢？当然有，那就是**phpbrew**!\n\n## phpbrew\n\n项目地址，可以异步：[phpbrew](https://github.com/phpbrew/phpbrew/blob/master/README.cn.md \"phpbrew\")\n\nphpbrew 主要解决了什么问题呢？\n\n就像上面说的，它能更快和更加方便的让我们的Mac安装多个版本的PHP，以及PHP扩展，这样可以很快的提高我们的效率，作为Mac的PHP coder，也不用发愁找相应的PHP版本的解决方案。\n\n## 使用方法\n\n### 安装\n\n```bash\n$ curl -L -O https://github.com/phpbrew/phpbrew/releases/latest/download/phpbrew.phar\n$ chmod +x phpbrew.phar\n\n# Move the file to some directory within your $PATH\n$ sudo mv phpbrew.phar /usr/local/bin/phpbrew\n```\n\n### 使用\n\n初始化\n\n```bash\nphpbrew init\n```\n\n接着在 .bashrc 或 .zshrc 文件增加如下行：\n\n```bash\n[[ -e ~/.phpbrew/bashrc ]] && source ~/.phpbrew/bashrc\n```\n\n### 基本用法\n\n列出已知的PHP版本\n\n```bash\n$ phpbrew known\nRead local release list (last update: 2020-11-23 12:49:58 UTC).\nYou can run `phpbrew update` or `phpbrew known --update` to get a newer release list.\n7.4: 7.4.12, 7.4.11, 7.4.10, 7.4.9, 7.4.8, 7.4.7, 7.4.6, 7.4.5 ...\n7.3: 7.3.24, 7.3.23, 7.3.22, 7.3.21, 7.3.20, 7.3.19, 7.3.18, 7.3.17 ...\n7.2: 7.2.34, 7.2.33, 7.2.32, 7.2.31, 7.2.30, 7.2.29, 7.2.28, 7.2.27 ...\n7.1: 7.1.33, 7.1.32, 7.1.31, 7.1.30, 7.1.29, 7.1.28, 7.1.27, 7.1.26 ...\n7.0: 7.0.33, 7.0.32, 7.0.31, 7.0.30, 7.0.29, 7.0.28, 7.0.27 ...\n5.6: 5.6.40, 5.6.39, 5.6.38, 5.6.37, 5.6.36, 5.6.35, 5.6.34, 5.6.33 ...\n5.5: 5.5.38, 5.5.37, 5.5.36, 5.5.35, 5.5.34, 5.5.33, 5.5.32, 5.5.31 ...\n5.4: 5.4.45, 5.4.44, 5.4.43, 5.4.42, 5.4.41, 5.4.40, 5.4.39, 5.4.38 ...\n```\n\n### 安装拓展\n\n```bash\n$ phpbrew install 5.3.10 +mysql+sqlite+cgi\n\n$ phpbrew install 5.3.10 +mysql+debug+pgsql +apxs2\n\n$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2\n```\n\n### 查看安装的版本\n\n```bash\n$ phpbrew list\n  php-7.2.34\n* php-5.6.40\n```\n\n### 切换版本\n\n```bash\n$ phpbrew switch php-5.6.40\n```\n\n### 启动fpm\n\n```bash\n$ phpbrew fpm start\n$ phpbrew fpm test\n[13-Dec-2020 19:29:42] NOTICE: configuration file /Users/feilong/.phpbrew/php/php-5.6.40/etc/php-fpm.conf test is successful\n```\n\n### 查看版本\n\n```bash\nPHP 5.6.40 (cli) (built: Dec 13 2020 19:11:35)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n```\n\n## 遇到的问题\n\n当我在安装php-7.2的时候，发生了一个问题，`checking for the location of zlib... configure: error: zip support requires ZLIB. Use --with-zlib-dir=<DIR> to specify prefix where ZLIB include and library are located`\n\n这个是zlib的扩展没有找到对应的类库\n\n如果没有安装，则先进行安装\n\n```bash\n$ brew reinstall zlib\n==> Downloading https://homebrew.bintray.com/bottles/zlib-1.2.11.mojave.bottle.tar.gz\n######################################################################## 100.0%\n==> Reinstalling zlib\n==> Pouring zlib-1.2.11.mojave.bottle.tar.gz\n```\n\n重新安装php\n\n```bash\n$  phpbrew install 7.2 -- \\--with-zlib-dir=`brew --prefix zlib`\n```\n\n本文链接： [https://feilong.tech/2020/12/13/mac-phpbrew/](https://feilong.tech/2020/12/13/mac-phpbrew/)","slug":"mac-phpbrew","published":1,"updated":"2022-03-12T23:52:58.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mg5003m417teur9dwhh","content":"<h2 id=\"程序员的苦恼\"><a href=\"#程序员的苦恼\" class=\"headerlink\" title=\"程序员的苦恼\"></a>程序员的苦恼</h2><p>作为程序员，我们经常会面临一个比较痛苦的事情，那就是环境版本的问题。以PHP为例，有些框架或者工具，会对PHP版本有不同的要求。举个例子，我在公司开发使用的是PHP-7.3版本。但是周末在家，想做些其他有意思的事情，这个时候，发现有些框架或者工具的语言要求是&gt;&#x3D;PHP-7.0和&lt;PHP-7.3。</p>\n<p>有些同学会说，用docker啊！</p>\n<p>没错，docker可以解决，但是有没有更加方便的工具来解决PHP版本切换的问题呢？当然有，那就是<strong>phpbrew</strong>!</p>\n<h2 id=\"phpbrew\"><a href=\"#phpbrew\" class=\"headerlink\" title=\"phpbrew\"></a>phpbrew</h2><p>项目地址，可以异步：<a href=\"https://github.com/phpbrew/phpbrew/blob/master/README.cn.md\" title=\"phpbrew\">phpbrew</a></p>\n<p>phpbrew 主要解决了什么问题呢？</p>\n<p>就像上面说的，它能更快和更加方便的让我们的Mac安装多个版本的PHP，以及PHP扩展，这样可以很快的提高我们的效率，作为Mac的PHP coder，也不用发愁找相应的PHP版本的解决方案。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L -O https://github.com/phpbrew/phpbrew/releases/latest/download/phpbrew.phar</span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> +x phpbrew.phar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Move the file to some directory within your $PATH</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">mv</span> phpbrew.phar /usr/local/bin/phpbrew</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpbrew init</span><br></pre></td></tr></table></figure>\n\n<p>接着在 .bashrc 或 .zshrc 文件增加如下行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ -e ~/.phpbrew/bashrc ]] &amp;&amp; <span class=\"built_in\">source</span> ~/.phpbrew/bashrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>列出已知的PHP版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew known</span><br><span class=\"line\">Read <span class=\"built_in\">local</span> release list (last update: 2020-11-23 12:49:58 UTC).</span><br><span class=\"line\">You can run `phpbrew update` or `phpbrew known --update` to get a newer release list.</span><br><span class=\"line\">7.4: 7.4.12, 7.4.11, 7.4.10, 7.4.9, 7.4.8, 7.4.7, 7.4.6, 7.4.5 ...</span><br><span class=\"line\">7.3: 7.3.24, 7.3.23, 7.3.22, 7.3.21, 7.3.20, 7.3.19, 7.3.18, 7.3.17 ...</span><br><span class=\"line\">7.2: 7.2.34, 7.2.33, 7.2.32, 7.2.31, 7.2.30, 7.2.29, 7.2.28, 7.2.27 ...</span><br><span class=\"line\">7.1: 7.1.33, 7.1.32, 7.1.31, 7.1.30, 7.1.29, 7.1.28, 7.1.27, 7.1.26 ...</span><br><span class=\"line\">7.0: 7.0.33, 7.0.32, 7.0.31, 7.0.30, 7.0.29, 7.0.28, 7.0.27 ...</span><br><span class=\"line\">5.6: 5.6.40, 5.6.39, 5.6.38, 5.6.37, 5.6.36, 5.6.35, 5.6.34, 5.6.33 ...</span><br><span class=\"line\">5.5: 5.5.38, 5.5.37, 5.5.36, 5.5.35, 5.5.34, 5.5.33, 5.5.32, 5.5.31 ...</span><br><span class=\"line\">5.4: 5.4.45, 5.4.44, 5.4.43, 5.4.42, 5.4.41, 5.4.40, 5.4.39, 5.4.38 ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装拓展\"><a href=\"#安装拓展\" class=\"headerlink\" title=\"安装拓展\"></a>安装拓展</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew install 5.3.10 +mysql+sqlite+cgi</span><br><span class=\"line\"></span><br><span class=\"line\">$ phpbrew install 5.3.10 +mysql+debug+pgsql +apxs2</span><br><span class=\"line\"></span><br><span class=\"line\">$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看安装的版本\"><a href=\"#查看安装的版本\" class=\"headerlink\" title=\"查看安装的版本\"></a>查看安装的版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew list</span><br><span class=\"line\">  php-7.2.34</span><br><span class=\"line\">* php-5.6.40</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew switch php-5.6.40</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动fpm\"><a href=\"#启动fpm\" class=\"headerlink\" title=\"启动fpm\"></a>启动fpm</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew fpm start</span><br><span class=\"line\">$ phpbrew fpm <span class=\"built_in\">test</span></span><br><span class=\"line\">[13-Dec-2020 19:29:42] NOTICE: configuration file /Users/feilong/.phpbrew/php/php-5.6.40/etc/php-fpm.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP 5.6.40 (cli) (built: Dec 13 2020 19:11:35)</span><br><span class=\"line\">Copyright (c) 1997-2016 The PHP Group</span><br><span class=\"line\">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>当我在安装php-7.2的时候，发生了一个问题，<code>checking for the location of zlib... configure: error: zip support requires ZLIB. Use --with-zlib-dir=&lt;DIR&gt; to specify prefix where ZLIB include and library are located</code></p>\n<p>这个是zlib的扩展没有找到对应的类库</p>\n<p>如果没有安装，则先进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew reinstall zlib</span><br><span class=\"line\">==&gt; Downloading https://homebrew.bintray.com/bottles/zlib-1.2.11.mojave.bottle.tar.gz</span><br><span class=\"line\"><span class=\"comment\">######################################################################## 100.0%</span></span><br><span class=\"line\">==&gt; Reinstalling zlib</span><br><span class=\"line\">==&gt; Pouring zlib-1.2.11.mojave.bottle.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>重新安装php</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  phpbrew install 7.2 -- \\--with-zlib-dir=`brew --prefix zlib`</span><br></pre></td></tr></table></figure>\n\n<p>本文链接： <a href=\"https://feilong.tech/2020/12/13/mac-phpbrew/\">https://feilong.tech/2020/12/13/mac-phpbrew/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"程序员的苦恼\"><a href=\"#程序员的苦恼\" class=\"headerlink\" title=\"程序员的苦恼\"></a>程序员的苦恼</h2><p>作为程序员，我们经常会面临一个比较痛苦的事情，那就是环境版本的问题。以PHP为例，有些框架或者工具，会对PHP版本有不同的要求。举个例子，我在公司开发使用的是PHP-7.3版本。但是周末在家，想做些其他有意思的事情，这个时候，发现有些框架或者工具的语言要求是&gt;&#x3D;PHP-7.0和&lt;PHP-7.3。</p>\n<p>有些同学会说，用docker啊！</p>\n<p>没错，docker可以解决，但是有没有更加方便的工具来解决PHP版本切换的问题呢？当然有，那就是<strong>phpbrew</strong>!</p>\n<h2 id=\"phpbrew\"><a href=\"#phpbrew\" class=\"headerlink\" title=\"phpbrew\"></a>phpbrew</h2><p>项目地址，可以异步：<a href=\"https://github.com/phpbrew/phpbrew/blob/master/README.cn.md\" title=\"phpbrew\">phpbrew</a></p>\n<p>phpbrew 主要解决了什么问题呢？</p>\n<p>就像上面说的，它能更快和更加方便的让我们的Mac安装多个版本的PHP，以及PHP扩展，这样可以很快的提高我们的效率，作为Mac的PHP coder，也不用发愁找相应的PHP版本的解决方案。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L -O https://github.com/phpbrew/phpbrew/releases/latest/download/phpbrew.phar</span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> +x phpbrew.phar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Move the file to some directory within your $PATH</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">mv</span> phpbrew.phar /usr/local/bin/phpbrew</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpbrew init</span><br></pre></td></tr></table></figure>\n\n<p>接着在 .bashrc 或 .zshrc 文件增加如下行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ -e ~/.phpbrew/bashrc ]] &amp;&amp; <span class=\"built_in\">source</span> ~/.phpbrew/bashrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>列出已知的PHP版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew known</span><br><span class=\"line\">Read <span class=\"built_in\">local</span> release list (last update: 2020-11-23 12:49:58 UTC).</span><br><span class=\"line\">You can run `phpbrew update` or `phpbrew known --update` to get a newer release list.</span><br><span class=\"line\">7.4: 7.4.12, 7.4.11, 7.4.10, 7.4.9, 7.4.8, 7.4.7, 7.4.6, 7.4.5 ...</span><br><span class=\"line\">7.3: 7.3.24, 7.3.23, 7.3.22, 7.3.21, 7.3.20, 7.3.19, 7.3.18, 7.3.17 ...</span><br><span class=\"line\">7.2: 7.2.34, 7.2.33, 7.2.32, 7.2.31, 7.2.30, 7.2.29, 7.2.28, 7.2.27 ...</span><br><span class=\"line\">7.1: 7.1.33, 7.1.32, 7.1.31, 7.1.30, 7.1.29, 7.1.28, 7.1.27, 7.1.26 ...</span><br><span class=\"line\">7.0: 7.0.33, 7.0.32, 7.0.31, 7.0.30, 7.0.29, 7.0.28, 7.0.27 ...</span><br><span class=\"line\">5.6: 5.6.40, 5.6.39, 5.6.38, 5.6.37, 5.6.36, 5.6.35, 5.6.34, 5.6.33 ...</span><br><span class=\"line\">5.5: 5.5.38, 5.5.37, 5.5.36, 5.5.35, 5.5.34, 5.5.33, 5.5.32, 5.5.31 ...</span><br><span class=\"line\">5.4: 5.4.45, 5.4.44, 5.4.43, 5.4.42, 5.4.41, 5.4.40, 5.4.39, 5.4.38 ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装拓展\"><a href=\"#安装拓展\" class=\"headerlink\" title=\"安装拓展\"></a>安装拓展</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew install 5.3.10 +mysql+sqlite+cgi</span><br><span class=\"line\"></span><br><span class=\"line\">$ phpbrew install 5.3.10 +mysql+debug+pgsql +apxs2</span><br><span class=\"line\"></span><br><span class=\"line\">$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看安装的版本\"><a href=\"#查看安装的版本\" class=\"headerlink\" title=\"查看安装的版本\"></a>查看安装的版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew list</span><br><span class=\"line\">  php-7.2.34</span><br><span class=\"line\">* php-5.6.40</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew switch php-5.6.40</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动fpm\"><a href=\"#启动fpm\" class=\"headerlink\" title=\"启动fpm\"></a>启动fpm</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpbrew fpm start</span><br><span class=\"line\">$ phpbrew fpm <span class=\"built_in\">test</span></span><br><span class=\"line\">[13-Dec-2020 19:29:42] NOTICE: configuration file /Users/feilong/.phpbrew/php/php-5.6.40/etc/php-fpm.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP 5.6.40 (cli) (built: Dec 13 2020 19:11:35)</span><br><span class=\"line\">Copyright (c) 1997-2016 The PHP Group</span><br><span class=\"line\">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>当我在安装php-7.2的时候，发生了一个问题，<code>checking for the location of zlib... configure: error: zip support requires ZLIB. Use --with-zlib-dir=&lt;DIR&gt; to specify prefix where ZLIB include and library are located</code></p>\n<p>这个是zlib的扩展没有找到对应的类库</p>\n<p>如果没有安装，则先进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew reinstall zlib</span><br><span class=\"line\">==&gt; Downloading https://homebrew.bintray.com/bottles/zlib-1.2.11.mojave.bottle.tar.gz</span><br><span class=\"line\"><span class=\"comment\">######################################################################## 100.0%</span></span><br><span class=\"line\">==&gt; Reinstalling zlib</span><br><span class=\"line\">==&gt; Pouring zlib-1.2.11.mojave.bottle.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>重新安装php</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  phpbrew install 7.2 -- \\--with-zlib-dir=`brew --prefix zlib`</span><br></pre></td></tr></table></figure>\n\n<p>本文链接： <a href=\"https://feilong.tech/2020/12/13/mac-phpbrew/\">https://feilong.tech/2020/12/13/mac-phpbrew/</a></p>\n"},{"title":"mac 由于libiconv导致编译PHP7 ld: symbol(s) not found for architecture x86_64错误","id":"709","date":"2019-11-11T08:04:13.000Z","_content":"\n从源码手动编译 PHP 时出现如下错误：\n\n```bash\nUndefined symbols for architecture x86_64:\n  \"_libiconv\", referenced from:\n      _php_iconv_string in iconv.o\n      __php_iconv_strlen in iconv.o\n      __php_iconv_substr in iconv.o\n      __php_iconv_strpos in iconv.o\n      __php_iconv_mime_encode in iconv.o\n      __php_iconv_appendl in iconv.o\n      _php_iconv_stream_filter_append_bucket in iconv.o\n      ...\n  \"_libiconv_close\", referenced from:\n      _php_iconv_string in iconv.o\n      __php_iconv_strlen in iconv.o\n      __php_iconv_substr in iconv.o\n      __php_iconv_strpos in iconv.o\n      __php_iconv_mime_encode in iconv.o\n      __php_iconv_mime_decode in iconv.o\n      _php_iconv_stream_filter_dtor in iconv.o\n      ...\n  \"_libiconv_open\", referenced from:\n      _php_iconv_string in iconv.o\n      __php_iconv_strlen in iconv.o\n      __php_iconv_substr in iconv.o\n      __php_iconv_strpos in iconv.o\n      __php_iconv_mime_encode in iconv.o\n      __php_iconv_mime_decode in iconv.o\n      _php_iconv_stream_filter_ctor in iconv.o\n      ...\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [sapi/cli/php] Error 1\n```\n\n这个是因为我在编译的时候设置--with-iconv的路径，猜测应该是iconv的问题。 参照文章 compile php with openssl on mac osx error找到了一些灵感 MakeFile 里面找到类似下面这一行：\n\n```Makefile\nEXTRA_LIBS = -lresolv -liconv -liconv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm\n```\n\n删除所有 -liconv 在后面填写 libiconv.dylib和libcharset.dylib的路径 如果你是用homebrew安卓的libiconv那么路径就是 /usr/local/opt/libiconv/lib 附上我修改后的 MakeFile EXTRA\\_LIBS 那一行：\n\n```Makefile\nEXTRA_LIBS = -lresolv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm /usr/local/opt/libiconv/lib/libiconv.dylib /usr/local/opt/libiconv/lib/libcharset.dylib\n```\n\n然后重新运行make命令\n\n本文连接：[https://feilong.tech/2019/11/11/make-php-error](https://feilong.tech/2019/11/11/make-php-error)","source":"_posts/make-php-error.md","raw":"---\ntitle: 'mac 由于libiconv导致编译PHP7 ld: symbol(s) not found for architecture x86_64错误'\ntags:\n  - PHP\n  - PHP7\n  - PHP源码\nid: '709'\ncategories:\n  - - PHP\n  - - PHP源码\ndate: 2019-11-11 16:04:13\n---\n\n从源码手动编译 PHP 时出现如下错误：\n\n```bash\nUndefined symbols for architecture x86_64:\n  \"_libiconv\", referenced from:\n      _php_iconv_string in iconv.o\n      __php_iconv_strlen in iconv.o\n      __php_iconv_substr in iconv.o\n      __php_iconv_strpos in iconv.o\n      __php_iconv_mime_encode in iconv.o\n      __php_iconv_appendl in iconv.o\n      _php_iconv_stream_filter_append_bucket in iconv.o\n      ...\n  \"_libiconv_close\", referenced from:\n      _php_iconv_string in iconv.o\n      __php_iconv_strlen in iconv.o\n      __php_iconv_substr in iconv.o\n      __php_iconv_strpos in iconv.o\n      __php_iconv_mime_encode in iconv.o\n      __php_iconv_mime_decode in iconv.o\n      _php_iconv_stream_filter_dtor in iconv.o\n      ...\n  \"_libiconv_open\", referenced from:\n      _php_iconv_string in iconv.o\n      __php_iconv_strlen in iconv.o\n      __php_iconv_substr in iconv.o\n      __php_iconv_strpos in iconv.o\n      __php_iconv_mime_encode in iconv.o\n      __php_iconv_mime_decode in iconv.o\n      _php_iconv_stream_filter_ctor in iconv.o\n      ...\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [sapi/cli/php] Error 1\n```\n\n这个是因为我在编译的时候设置--with-iconv的路径，猜测应该是iconv的问题。 参照文章 compile php with openssl on mac osx error找到了一些灵感 MakeFile 里面找到类似下面这一行：\n\n```Makefile\nEXTRA_LIBS = -lresolv -liconv -liconv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm\n```\n\n删除所有 -liconv 在后面填写 libiconv.dylib和libcharset.dylib的路径 如果你是用homebrew安卓的libiconv那么路径就是 /usr/local/opt/libiconv/lib 附上我修改后的 MakeFile EXTRA\\_LIBS 那一行：\n\n```Makefile\nEXTRA_LIBS = -lresolv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm /usr/local/opt/libiconv/lib/libiconv.dylib /usr/local/opt/libiconv/lib/libcharset.dylib\n```\n\n然后重新运行make命令\n\n本文连接：[https://feilong.tech/2019/11/11/make-php-error](https://feilong.tech/2019/11/11/make-php-error)","slug":"make-php-error","published":1,"updated":"2022-03-12T23:52:58.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mg8003q417tc1b4gil5","content":"<p>从源码手动编译 PHP 时出现如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols <span class=\"keyword\">for</span> architecture x86_64:</span><br><span class=\"line\">  <span class=\"string\">&quot;_libiconv&quot;</span>, referenced from:</span><br><span class=\"line\">      _php_iconv_string <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strlen <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_substr <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strpos <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_encode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_appendl <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      _php_iconv_stream_filter_append_bucket <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  <span class=\"string\">&quot;_libiconv_close&quot;</span>, referenced from:</span><br><span class=\"line\">      _php_iconv_string <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strlen <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_substr <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strpos <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_encode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_decode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      _php_iconv_stream_filter_dtor <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  <span class=\"string\">&quot;_libiconv_open&quot;</span>, referenced from:</span><br><span class=\"line\">      _php_iconv_string <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strlen <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_substr <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strpos <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_encode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_decode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      _php_iconv_stream_filter_ctor <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      ...</span><br><span class=\"line\">ld: symbol(s) not found <span class=\"keyword\">for</span> architecture x86_64</span><br><span class=\"line\">clang: error: linker <span class=\"built_in\">command</span> failed with <span class=\"built_in\">exit</span> code 1 (use -v to see invocation)</span><br><span class=\"line\">make: *** [sapi/cli/php] Error 1</span><br></pre></td></tr></table></figure>\n\n<p>这个是因为我在编译的时候设置–with-iconv的路径，猜测应该是iconv的问题。 参照文章 compile php with openssl on mac osx error找到了一些灵感 MakeFile 里面找到类似下面这一行：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTRA_LIBS = -lresolv -liconv -liconv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm</span><br></pre></td></tr></table></figure>\n\n<p>删除所有 -liconv 在后面填写 libiconv.dylib和libcharset.dylib的路径 如果你是用homebrew安卓的libiconv那么路径就是 &#x2F;usr&#x2F;local&#x2F;opt&#x2F;libiconv&#x2F;lib 附上我修改后的 MakeFile EXTRA_LIBS 那一行：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTRA_LIBS = -lresolv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm /usr/local/opt/libiconv/lib/libiconv.dylib /usr/local/opt/libiconv/lib/libcharset.dylib</span><br></pre></td></tr></table></figure>\n\n<p>然后重新运行make命令</p>\n<p>本文连接：<a href=\"https://feilong.tech/2019/11/11/make-php-error\">https://feilong.tech/2019/11/11/make-php-error</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>从源码手动编译 PHP 时出现如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols <span class=\"keyword\">for</span> architecture x86_64:</span><br><span class=\"line\">  <span class=\"string\">&quot;_libiconv&quot;</span>, referenced from:</span><br><span class=\"line\">      _php_iconv_string <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strlen <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_substr <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strpos <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_encode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_appendl <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      _php_iconv_stream_filter_append_bucket <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  <span class=\"string\">&quot;_libiconv_close&quot;</span>, referenced from:</span><br><span class=\"line\">      _php_iconv_string <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strlen <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_substr <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strpos <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_encode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_decode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      _php_iconv_stream_filter_dtor <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  <span class=\"string\">&quot;_libiconv_open&quot;</span>, referenced from:</span><br><span class=\"line\">      _php_iconv_string <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strlen <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_substr <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_strpos <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_encode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      __php_iconv_mime_decode <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      _php_iconv_stream_filter_ctor <span class=\"keyword\">in</span> iconv.o</span><br><span class=\"line\">      ...</span><br><span class=\"line\">ld: symbol(s) not found <span class=\"keyword\">for</span> architecture x86_64</span><br><span class=\"line\">clang: error: linker <span class=\"built_in\">command</span> failed with <span class=\"built_in\">exit</span> code 1 (use -v to see invocation)</span><br><span class=\"line\">make: *** [sapi/cli/php] Error 1</span><br></pre></td></tr></table></figure>\n\n<p>这个是因为我在编译的时候设置–with-iconv的路径，猜测应该是iconv的问题。 参照文章 compile php with openssl on mac osx error找到了一些灵感 MakeFile 里面找到类似下面这一行：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTRA_LIBS = -lresolv -liconv -liconv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm</span><br></pre></td></tr></table></figure>\n\n<p>删除所有 -liconv 在后面填写 libiconv.dylib和libcharset.dylib的路径 如果你是用homebrew安卓的libiconv那么路径就是 &#x2F;usr&#x2F;local&#x2F;opt&#x2F;libiconv&#x2F;lib 附上我修改后的 MakeFile EXTRA_LIBS 那一行：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTRA_LIBS = -lresolv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm /usr/local/opt/libiconv/lib/libiconv.dylib /usr/local/opt/libiconv/lib/libcharset.dylib</span><br></pre></td></tr></table></figure>\n\n<p>然后重新运行make命令</p>\n<p>本文连接：<a href=\"https://feilong.tech/2019/11/11/make-php-error\">https://feilong.tech/2019/11/11/make-php-error</a></p>\n"},{"title":"MySQL之虚拟列（generated-columns）","id":"458","date":"2019-08-14T15:50:01.000Z","_content":"\n### 定义\n\nMySQL虚拟列（generated-columns）是MySQL 5.7加入的新特性。怎么理解虚拟列？从名字来讲，“生成的字段”，并不是主动插入的值。 MySQL的文档，是这么解释虚拟列的：\n\n> There are two kinds of Generated Columns: virtual (default) and stored. Virtual means that the column will be calculated on the fly when a record is read from a table. Stored means that the column will be calculated when a new record is written in the table, and after that it will be treated as a regular field. Both types can have NOT NULL restrictions, but only a stored Generated Column can be be a part of an index.\n> \n> 解释起来，就是虚拟列支持两种方式，virtual和stored。当在表里读取记录的时候，virtual类型的会进行实时的计算。当写入一条记录的时候，stored类型会通过计算，写入表中，和常规的字段的一样的占用磁盘的空间。这两种类型都可以有NOT NULL限制，但是能使用索引的一部分的功能。\n\nMySQL的官方，提供了一个例子，用来简单的说明虚拟列的作用。\n\n```sql\n> CREATE TABLE sales(\nname VARCHAR(20),\nprice_eur DOUBLE,\namount INT,\ntotal_eur DOUBLE AS (price_eur * amount),\ntotal_used DOUBLE AS (total_eur * xrate),\nxrate DOUBLE);\n> INSERT INTO sales(name,price_eur,amount,xrate) VALUES('尺子', 1.2, 10, 0.9);\n> SELECT * FROM sales;\nnameprice_euramounttotal_eurtotal_usedxrate\n尺子1.2101210.80.9\n```\n\n这个例子应该算是比较明了了，total\\_eur和total\\_used根据计算的公式，自动计算除了结果。\n\n### 使用的场景\n\n虚拟列的使用场景其实还算是挺多的，就想上面的例子，可以计算一些公式。尤其对一致性要求比较高的。如果每次都是通过代码进行计算，可能会由于人为的原因，某个字段的计算结果，没有update，那么就会产生bug。如果使用虚拟列，那么直接更新比较的值就好，没必要更新计算结果，降低的人为误操作的风险。\n\n#### 实时计算\n\n举个例子，我们可能会需要记录三角形的三边，即：两个直角边，和一个斜边。\n\n按照一般的逻辑，我们可能会，通过代码直接进行计算\n\n```php\n$a = 4;\n$b = 3;\n$c = sqrt(pow($a, 2) + pow($b, 2));\n// 插入到数据库\n```\n\n这样做是可以的，但是可能会由于人为原因，导致计算的步骤有问题，比如由于人为疏忽，导致忘记了把斜边的值更新到数据库。\n\n我们可以通过MySQL创建一个斜边的虚拟列，然后自动进行计算。\n\n```sql\n>  CREATE TABLE `triangle` (\n `sidea` double DEFAULT NULL,\n `sideb` double DEFAULT NULL,\n `sidec` double GENERATED ALWAYS AS (SQRT(sidea * sidea + sideb * sideb))\n ) ;\n```\n\n#### 数据冗余\n\n这个场景也是比较常见，比如，我们的某个字段存储的是json结构，但是为了方便查询，可能需要json里面的某个子单当做SQL的查询条件，这个时候，我们可以把这个查询条件，作为虚拟列。\n\n### 使用限制\n\n虚拟列虽然是计算的结果，但是也是有一些限制的。\n\n#### 恶意的数据\n\n```sql\n> create table t( x int, y int, z int generated always as( x / y));\ninsert into t(x,y) values(1,0); \n1365 - Division by 0, Time: 0.043000s\n```\n\n根据创建的表语句，z是x和y的商，由于要插入的值y=0，导致计算的时候出现了错误。\n\n#### 删除源数据的列\n\n还是以第一个表的数据为例\n\n```sql\n> CREATE TABLE sales(\nname VARCHAR(20),\nprice_eur DOUBLE,\namount INT,\ntotal_eur DOUBLE AS (price_eur * amount),\ntotal_used DOUBLE AS (total_eur * xrate),\nxrate DOUBLE);\n> alter table sales drop price_eur;\n3108 - Column 'price_eur' has a generated column dependency.\n```\n\n#### 索引的限制\n\n虚拟列是不允许创建主键索引和全文索引的。\n\n```sql\n> CREATE TABLE sales(\nname VARCHAR(20),\nprice_eur DOUBLE,\namount INT,\ntotal_eur DOUBLE AS (price_eur * amount),\ntotal_used DOUBLE AS (total_eur * xrate),\ntotal_used2 DOUBLE AS (total_eur * xrate) stored,\nxrate DOUBLE);\n```\n\n我重新创建了一个表，下面来看看virtual和stored在索引上的区别吧。\n\n```sql\n> ALTER TABLE sales ADD PRIMARY KEY(total_eur);\n3106 - 'Defining a virtual generated column as primary key' is not supported for generated columns.\n> ALTER TABLE sales ADD PRIMARY KEY(total_used2);\nQuery OK, 0 rows affected (0.05 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n第一个区别就是，virtual是不允许作为主键的，这大概是因为virtual是实时计算的值，并且并没有写到磁盘上，没办法使用聚集索引。\n\n```sql\n> ALTER TABLE sales ADD fulltext index (total_eur);\n3106 - 'Fulltext index on virtual generated column' is not supported for generated columns.\n> ALTER TABLE sales ADD fulltext index(total_used2);\n1283 - Column 'total_used2' cannot be part of FULLTEXT index\n```\n\n很明显，两者都不能创建全文索引。\n\n### 总结\n\n虚拟列是MySQL 5.7版本之后新增的特性，主要是方便我们查询和操作。\n\n我所说的可能只是冰山一角，具体的用法，还需要我们自己根据具体的业务场景使用才行。\n\n### 参考文献\n\n*   [MySQL 5.7新特性之Generated Column](https://www.linuxidc.com/Linux/2016-02/128066.htm)\n    \n*   [Generated Columns in MySQL 5.7.5](http://mysqlserverteam.com/generated-columns-in-mysql-5-7-5/)\n    \n\n本文连接：[http://feilong.tech/2019/08/14/mysql-generated-columns](http://feilong.tech/2019/08/14/mysql-generated-columns)","source":"_posts/mysql-generated-columns.md","raw":"---\ntitle: MySQL之虚拟列（generated-columns）\ntags:\n  - MySQL\nid: '458'\ncategories:\n  - - Mysql\ndate: 2019-08-14 23:50:01\n---\n\n### 定义\n\nMySQL虚拟列（generated-columns）是MySQL 5.7加入的新特性。怎么理解虚拟列？从名字来讲，“生成的字段”，并不是主动插入的值。 MySQL的文档，是这么解释虚拟列的：\n\n> There are two kinds of Generated Columns: virtual (default) and stored. Virtual means that the column will be calculated on the fly when a record is read from a table. Stored means that the column will be calculated when a new record is written in the table, and after that it will be treated as a regular field. Both types can have NOT NULL restrictions, but only a stored Generated Column can be be a part of an index.\n> \n> 解释起来，就是虚拟列支持两种方式，virtual和stored。当在表里读取记录的时候，virtual类型的会进行实时的计算。当写入一条记录的时候，stored类型会通过计算，写入表中，和常规的字段的一样的占用磁盘的空间。这两种类型都可以有NOT NULL限制，但是能使用索引的一部分的功能。\n\nMySQL的官方，提供了一个例子，用来简单的说明虚拟列的作用。\n\n```sql\n> CREATE TABLE sales(\nname VARCHAR(20),\nprice_eur DOUBLE,\namount INT,\ntotal_eur DOUBLE AS (price_eur * amount),\ntotal_used DOUBLE AS (total_eur * xrate),\nxrate DOUBLE);\n> INSERT INTO sales(name,price_eur,amount,xrate) VALUES('尺子', 1.2, 10, 0.9);\n> SELECT * FROM sales;\nnameprice_euramounttotal_eurtotal_usedxrate\n尺子1.2101210.80.9\n```\n\n这个例子应该算是比较明了了，total\\_eur和total\\_used根据计算的公式，自动计算除了结果。\n\n### 使用的场景\n\n虚拟列的使用场景其实还算是挺多的，就想上面的例子，可以计算一些公式。尤其对一致性要求比较高的。如果每次都是通过代码进行计算，可能会由于人为的原因，某个字段的计算结果，没有update，那么就会产生bug。如果使用虚拟列，那么直接更新比较的值就好，没必要更新计算结果，降低的人为误操作的风险。\n\n#### 实时计算\n\n举个例子，我们可能会需要记录三角形的三边，即：两个直角边，和一个斜边。\n\n按照一般的逻辑，我们可能会，通过代码直接进行计算\n\n```php\n$a = 4;\n$b = 3;\n$c = sqrt(pow($a, 2) + pow($b, 2));\n// 插入到数据库\n```\n\n这样做是可以的，但是可能会由于人为原因，导致计算的步骤有问题，比如由于人为疏忽，导致忘记了把斜边的值更新到数据库。\n\n我们可以通过MySQL创建一个斜边的虚拟列，然后自动进行计算。\n\n```sql\n>  CREATE TABLE `triangle` (\n `sidea` double DEFAULT NULL,\n `sideb` double DEFAULT NULL,\n `sidec` double GENERATED ALWAYS AS (SQRT(sidea * sidea + sideb * sideb))\n ) ;\n```\n\n#### 数据冗余\n\n这个场景也是比较常见，比如，我们的某个字段存储的是json结构，但是为了方便查询，可能需要json里面的某个子单当做SQL的查询条件，这个时候，我们可以把这个查询条件，作为虚拟列。\n\n### 使用限制\n\n虚拟列虽然是计算的结果，但是也是有一些限制的。\n\n#### 恶意的数据\n\n```sql\n> create table t( x int, y int, z int generated always as( x / y));\ninsert into t(x,y) values(1,0); \n1365 - Division by 0, Time: 0.043000s\n```\n\n根据创建的表语句，z是x和y的商，由于要插入的值y=0，导致计算的时候出现了错误。\n\n#### 删除源数据的列\n\n还是以第一个表的数据为例\n\n```sql\n> CREATE TABLE sales(\nname VARCHAR(20),\nprice_eur DOUBLE,\namount INT,\ntotal_eur DOUBLE AS (price_eur * amount),\ntotal_used DOUBLE AS (total_eur * xrate),\nxrate DOUBLE);\n> alter table sales drop price_eur;\n3108 - Column 'price_eur' has a generated column dependency.\n```\n\n#### 索引的限制\n\n虚拟列是不允许创建主键索引和全文索引的。\n\n```sql\n> CREATE TABLE sales(\nname VARCHAR(20),\nprice_eur DOUBLE,\namount INT,\ntotal_eur DOUBLE AS (price_eur * amount),\ntotal_used DOUBLE AS (total_eur * xrate),\ntotal_used2 DOUBLE AS (total_eur * xrate) stored,\nxrate DOUBLE);\n```\n\n我重新创建了一个表，下面来看看virtual和stored在索引上的区别吧。\n\n```sql\n> ALTER TABLE sales ADD PRIMARY KEY(total_eur);\n3106 - 'Defining a virtual generated column as primary key' is not supported for generated columns.\n> ALTER TABLE sales ADD PRIMARY KEY(total_used2);\nQuery OK, 0 rows affected (0.05 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n第一个区别就是，virtual是不允许作为主键的，这大概是因为virtual是实时计算的值，并且并没有写到磁盘上，没办法使用聚集索引。\n\n```sql\n> ALTER TABLE sales ADD fulltext index (total_eur);\n3106 - 'Fulltext index on virtual generated column' is not supported for generated columns.\n> ALTER TABLE sales ADD fulltext index(total_used2);\n1283 - Column 'total_used2' cannot be part of FULLTEXT index\n```\n\n很明显，两者都不能创建全文索引。\n\n### 总结\n\n虚拟列是MySQL 5.7版本之后新增的特性，主要是方便我们查询和操作。\n\n我所说的可能只是冰山一角，具体的用法，还需要我们自己根据具体的业务场景使用才行。\n\n### 参考文献\n\n*   [MySQL 5.7新特性之Generated Column](https://www.linuxidc.com/Linux/2016-02/128066.htm)\n    \n*   [Generated Columns in MySQL 5.7.5](http://mysqlserverteam.com/generated-columns-in-mysql-5-7-5/)\n    \n\n本文连接：[http://feilong.tech/2019/08/14/mysql-generated-columns](http://feilong.tech/2019/08/14/mysql-generated-columns)","slug":"mysql-generated-columns","published":1,"updated":"2022-03-12T23:52:58.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mga003t417tfo664g3s","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MySQL虚拟列（generated-columns）是MySQL 5.7加入的新特性。怎么理解虚拟列？从名字来讲，“生成的字段”，并不是主动插入的值。 MySQL的文档，是这么解释虚拟列的：</p>\n<blockquote>\n<p>There are two kinds of Generated Columns: virtual (default) and stored. Virtual means that the column will be calculated on the fly when a record is read from a table. Stored means that the column will be calculated when a new record is written in the table, and after that it will be treated as a regular field. Both types can have NOT NULL restrictions, but only a stored Generated Column can be be a part of an index.</p>\n<p>解释起来，就是虚拟列支持两种方式，virtual和stored。当在表里读取记录的时候，virtual类型的会进行实时的计算。当写入一条记录的时候，stored类型会通过计算，写入表中，和常规的字段的一样的占用磁盘的空间。这两种类型都可以有NOT NULL限制，但是能使用索引的一部分的功能。</p>\n</blockquote>\n<p>MySQL的官方，提供了一个例子，用来简单的说明虚拟列的作用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales(</span><br><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">price_eur <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\">amount <span class=\"type\">INT</span>,</span><br><span class=\"line\">total_eur <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (price_eur <span class=\"operator\">*</span> amount),</span><br><span class=\"line\">total_used <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate),</span><br><span class=\"line\">xrate <span class=\"keyword\">DOUBLE</span>);</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> sales(name,price_eur,amount,xrate) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;尺子&#x27;</span>, <span class=\"number\">1.2</span>, <span class=\"number\">10</span>, <span class=\"number\">0.9</span>);</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> sales;</span><br><span class=\"line\">nameprice_euramounttotal_eurtotal_usedxrate</span><br><span class=\"line\">尺子<span class=\"number\">1.2101210</span><span class=\"number\">.80</span><span class=\"number\">.9</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子应该算是比较明了了，total_eur和total_used根据计算的公式，自动计算除了结果。</p>\n<h3 id=\"使用的场景\"><a href=\"#使用的场景\" class=\"headerlink\" title=\"使用的场景\"></a>使用的场景</h3><p>虚拟列的使用场景其实还算是挺多的，就想上面的例子，可以计算一些公式。尤其对一致性要求比较高的。如果每次都是通过代码进行计算，可能会由于人为的原因，某个字段的计算结果，没有update，那么就会产生bug。如果使用虚拟列，那么直接更新比较的值就好，没必要更新计算结果，降低的人为误操作的风险。</p>\n<h4 id=\"实时计算\"><a href=\"#实时计算\" class=\"headerlink\" title=\"实时计算\"></a>实时计算</h4><p>举个例子，我们可能会需要记录三角形的三边，即：两个直角边，和一个斜边。</p>\n<p>按照一般的逻辑，我们可能会，通过代码直接进行计算</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"title function_ invoke__\">sqrt</span>(<span class=\"title function_ invoke__\">pow</span>(<span class=\"variable\">$a</span>, <span class=\"number\">2</span>) + <span class=\"title function_ invoke__\">pow</span>(<span class=\"variable\">$b</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 插入到数据库</span></span><br></pre></td></tr></table></figure>\n\n<p>这样做是可以的，但是可能会由于人为原因，导致计算的步骤有问题，比如由于人为疏忽，导致忘记了把斜边的值更新到数据库。</p>\n<p>我们可以通过MySQL创建一个斜边的虚拟列，然后自动进行计算。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span>  <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `triangle` (</span><br><span class=\"line\"> `sidea` <span class=\"keyword\">double</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"> `sideb` <span class=\"keyword\">double</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"> `sidec` <span class=\"keyword\">double</span> GENERATED ALWAYS <span class=\"keyword\">AS</span> (<span class=\"built_in\">SQRT</span>(sidea <span class=\"operator\">*</span> sidea <span class=\"operator\">+</span> sideb <span class=\"operator\">*</span> sideb))</span><br><span class=\"line\"> ) ;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据冗余\"><a href=\"#数据冗余\" class=\"headerlink\" title=\"数据冗余\"></a>数据冗余</h4><p>这个场景也是比较常见，比如，我们的某个字段存储的是json结构，但是为了方便查询，可能需要json里面的某个子单当做SQL的查询条件，这个时候，我们可以把这个查询条件，作为虚拟列。</p>\n<h3 id=\"使用限制\"><a href=\"#使用限制\" class=\"headerlink\" title=\"使用限制\"></a>使用限制</h3><p>虚拟列虽然是计算的结果，但是也是有一些限制的。</p>\n<h4 id=\"恶意的数据\"><a href=\"#恶意的数据\" class=\"headerlink\" title=\"恶意的数据\"></a>恶意的数据</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t( x <span class=\"type\">int</span>, y <span class=\"type\">int</span>, z <span class=\"type\">int</span> generated always <span class=\"keyword\">as</span>( x <span class=\"operator\">/</span> y));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t(x,y) <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"number\">1365</span> <span class=\"operator\">-</span> Division <span class=\"keyword\">by</span> <span class=\"number\">0</span>, <span class=\"type\">Time</span>: <span class=\"number\">0.043000</span>s</span><br></pre></td></tr></table></figure>\n\n<p>根据创建的表语句，z是x和y的商，由于要插入的值y&#x3D;0，导致计算的时候出现了错误。</p>\n<h4 id=\"删除源数据的列\"><a href=\"#删除源数据的列\" class=\"headerlink\" title=\"删除源数据的列\"></a>删除源数据的列</h4><p>还是以第一个表的数据为例</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales(</span><br><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">price_eur <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\">amount <span class=\"type\">INT</span>,</span><br><span class=\"line\">total_eur <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (price_eur <span class=\"operator\">*</span> amount),</span><br><span class=\"line\">total_used <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate),</span><br><span class=\"line\">xrate <span class=\"keyword\">DOUBLE</span>);</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> sales <span class=\"keyword\">drop</span> price_eur;</span><br><span class=\"line\"><span class=\"number\">3108</span> <span class=\"operator\">-</span> <span class=\"keyword\">Column</span> <span class=\"string\">&#x27;price_eur&#x27;</span> has a generated <span class=\"keyword\">column</span> dependency.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"索引的限制\"><a href=\"#索引的限制\" class=\"headerlink\" title=\"索引的限制\"></a>索引的限制</h4><p>虚拟列是不允许创建主键索引和全文索引的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales(</span><br><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">price_eur <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\">amount <span class=\"type\">INT</span>,</span><br><span class=\"line\">total_eur <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (price_eur <span class=\"operator\">*</span> amount),</span><br><span class=\"line\">total_used <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate),</span><br><span class=\"line\">total_used2 <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate) stored,</span><br><span class=\"line\">xrate <span class=\"keyword\">DOUBLE</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我重新创建了一个表，下面来看看virtual和stored在索引上的区别吧。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY(total_eur);</span><br><span class=\"line\"><span class=\"number\">3106</span> <span class=\"operator\">-</span> <span class=\"string\">&#x27;Defining a virtual generated column as primary key&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> supported <span class=\"keyword\">for</span> generated columns.</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY(total_used2);</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.05</span> sec)</span><br><span class=\"line\">Records: <span class=\"number\">0</span>  Duplicates: <span class=\"number\">0</span>  Warnings: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个区别就是，virtual是不允许作为主键的，这大概是因为virtual是实时计算的值，并且并没有写到磁盘上，没办法使用聚集索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> fulltext index (total_eur);</span><br><span class=\"line\"><span class=\"number\">3106</span> <span class=\"operator\">-</span> <span class=\"string\">&#x27;Fulltext index on virtual generated column&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> supported <span class=\"keyword\">for</span> generated columns.</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> fulltext index(total_used2);</span><br><span class=\"line\"><span class=\"number\">1283</span> <span class=\"operator\">-</span> <span class=\"keyword\">Column</span> <span class=\"string\">&#x27;total_used2&#x27;</span> cannot be part <span class=\"keyword\">of</span> FULLTEXT index</span><br></pre></td></tr></table></figure>\n\n<p>很明显，两者都不能创建全文索引。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虚拟列是MySQL 5.7版本之后新增的特性，主要是方便我们查询和操作。</p>\n<p>我所说的可能只是冰山一角，具体的用法，还需要我们自己根据具体的业务场景使用才行。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><p><a href=\"https://www.linuxidc.com/Linux/2016-02/128066.htm\">MySQL 5.7新特性之Generated Column</a></p>\n</li>\n<li><p><a href=\"http://mysqlserverteam.com/generated-columns-in-mysql-5-7-5/\">Generated Columns in MySQL 5.7.5</a></p>\n</li>\n</ul>\n<p>本文连接：<a href=\"http://feilong.tech/2019/08/14/mysql-generated-columns\">http://feilong.tech/2019/08/14/mysql-generated-columns</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MySQL虚拟列（generated-columns）是MySQL 5.7加入的新特性。怎么理解虚拟列？从名字来讲，“生成的字段”，并不是主动插入的值。 MySQL的文档，是这么解释虚拟列的：</p>\n<blockquote>\n<p>There are two kinds of Generated Columns: virtual (default) and stored. Virtual means that the column will be calculated on the fly when a record is read from a table. Stored means that the column will be calculated when a new record is written in the table, and after that it will be treated as a regular field. Both types can have NOT NULL restrictions, but only a stored Generated Column can be be a part of an index.</p>\n<p>解释起来，就是虚拟列支持两种方式，virtual和stored。当在表里读取记录的时候，virtual类型的会进行实时的计算。当写入一条记录的时候，stored类型会通过计算，写入表中，和常规的字段的一样的占用磁盘的空间。这两种类型都可以有NOT NULL限制，但是能使用索引的一部分的功能。</p>\n</blockquote>\n<p>MySQL的官方，提供了一个例子，用来简单的说明虚拟列的作用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales(</span><br><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">price_eur <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\">amount <span class=\"type\">INT</span>,</span><br><span class=\"line\">total_eur <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (price_eur <span class=\"operator\">*</span> amount),</span><br><span class=\"line\">total_used <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate),</span><br><span class=\"line\">xrate <span class=\"keyword\">DOUBLE</span>);</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> sales(name,price_eur,amount,xrate) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;尺子&#x27;</span>, <span class=\"number\">1.2</span>, <span class=\"number\">10</span>, <span class=\"number\">0.9</span>);</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> sales;</span><br><span class=\"line\">nameprice_euramounttotal_eurtotal_usedxrate</span><br><span class=\"line\">尺子<span class=\"number\">1.2101210</span><span class=\"number\">.80</span><span class=\"number\">.9</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子应该算是比较明了了，total_eur和total_used根据计算的公式，自动计算除了结果。</p>\n<h3 id=\"使用的场景\"><a href=\"#使用的场景\" class=\"headerlink\" title=\"使用的场景\"></a>使用的场景</h3><p>虚拟列的使用场景其实还算是挺多的，就想上面的例子，可以计算一些公式。尤其对一致性要求比较高的。如果每次都是通过代码进行计算，可能会由于人为的原因，某个字段的计算结果，没有update，那么就会产生bug。如果使用虚拟列，那么直接更新比较的值就好，没必要更新计算结果，降低的人为误操作的风险。</p>\n<h4 id=\"实时计算\"><a href=\"#实时计算\" class=\"headerlink\" title=\"实时计算\"></a>实时计算</h4><p>举个例子，我们可能会需要记录三角形的三边，即：两个直角边，和一个斜边。</p>\n<p>按照一般的逻辑，我们可能会，通过代码直接进行计算</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"title function_ invoke__\">sqrt</span>(<span class=\"title function_ invoke__\">pow</span>(<span class=\"variable\">$a</span>, <span class=\"number\">2</span>) + <span class=\"title function_ invoke__\">pow</span>(<span class=\"variable\">$b</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 插入到数据库</span></span><br></pre></td></tr></table></figure>\n\n<p>这样做是可以的，但是可能会由于人为原因，导致计算的步骤有问题，比如由于人为疏忽，导致忘记了把斜边的值更新到数据库。</p>\n<p>我们可以通过MySQL创建一个斜边的虚拟列，然后自动进行计算。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span>  <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `triangle` (</span><br><span class=\"line\"> `sidea` <span class=\"keyword\">double</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"> `sideb` <span class=\"keyword\">double</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"> `sidec` <span class=\"keyword\">double</span> GENERATED ALWAYS <span class=\"keyword\">AS</span> (<span class=\"built_in\">SQRT</span>(sidea <span class=\"operator\">*</span> sidea <span class=\"operator\">+</span> sideb <span class=\"operator\">*</span> sideb))</span><br><span class=\"line\"> ) ;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据冗余\"><a href=\"#数据冗余\" class=\"headerlink\" title=\"数据冗余\"></a>数据冗余</h4><p>这个场景也是比较常见，比如，我们的某个字段存储的是json结构，但是为了方便查询，可能需要json里面的某个子单当做SQL的查询条件，这个时候，我们可以把这个查询条件，作为虚拟列。</p>\n<h3 id=\"使用限制\"><a href=\"#使用限制\" class=\"headerlink\" title=\"使用限制\"></a>使用限制</h3><p>虚拟列虽然是计算的结果，但是也是有一些限制的。</p>\n<h4 id=\"恶意的数据\"><a href=\"#恶意的数据\" class=\"headerlink\" title=\"恶意的数据\"></a>恶意的数据</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t( x <span class=\"type\">int</span>, y <span class=\"type\">int</span>, z <span class=\"type\">int</span> generated always <span class=\"keyword\">as</span>( x <span class=\"operator\">/</span> y));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t(x,y) <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"number\">1365</span> <span class=\"operator\">-</span> Division <span class=\"keyword\">by</span> <span class=\"number\">0</span>, <span class=\"type\">Time</span>: <span class=\"number\">0.043000</span>s</span><br></pre></td></tr></table></figure>\n\n<p>根据创建的表语句，z是x和y的商，由于要插入的值y&#x3D;0，导致计算的时候出现了错误。</p>\n<h4 id=\"删除源数据的列\"><a href=\"#删除源数据的列\" class=\"headerlink\" title=\"删除源数据的列\"></a>删除源数据的列</h4><p>还是以第一个表的数据为例</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales(</span><br><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">price_eur <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\">amount <span class=\"type\">INT</span>,</span><br><span class=\"line\">total_eur <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (price_eur <span class=\"operator\">*</span> amount),</span><br><span class=\"line\">total_used <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate),</span><br><span class=\"line\">xrate <span class=\"keyword\">DOUBLE</span>);</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> sales <span class=\"keyword\">drop</span> price_eur;</span><br><span class=\"line\"><span class=\"number\">3108</span> <span class=\"operator\">-</span> <span class=\"keyword\">Column</span> <span class=\"string\">&#x27;price_eur&#x27;</span> has a generated <span class=\"keyword\">column</span> dependency.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"索引的限制\"><a href=\"#索引的限制\" class=\"headerlink\" title=\"索引的限制\"></a>索引的限制</h4><p>虚拟列是不允许创建主键索引和全文索引的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sales(</span><br><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">price_eur <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\">amount <span class=\"type\">INT</span>,</span><br><span class=\"line\">total_eur <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (price_eur <span class=\"operator\">*</span> amount),</span><br><span class=\"line\">total_used <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate),</span><br><span class=\"line\">total_used2 <span class=\"keyword\">DOUBLE</span> <span class=\"keyword\">AS</span> (total_eur <span class=\"operator\">*</span> xrate) stored,</span><br><span class=\"line\">xrate <span class=\"keyword\">DOUBLE</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我重新创建了一个表，下面来看看virtual和stored在索引上的区别吧。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY(total_eur);</span><br><span class=\"line\"><span class=\"number\">3106</span> <span class=\"operator\">-</span> <span class=\"string\">&#x27;Defining a virtual generated column as primary key&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> supported <span class=\"keyword\">for</span> generated columns.</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY(total_used2);</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.05</span> sec)</span><br><span class=\"line\">Records: <span class=\"number\">0</span>  Duplicates: <span class=\"number\">0</span>  Warnings: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个区别就是，virtual是不允许作为主键的，这大概是因为virtual是实时计算的值，并且并没有写到磁盘上，没办法使用聚集索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> fulltext index (total_eur);</span><br><span class=\"line\"><span class=\"number\">3106</span> <span class=\"operator\">-</span> <span class=\"string\">&#x27;Fulltext index on virtual generated column&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> supported <span class=\"keyword\">for</span> generated columns.</span><br><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sales <span class=\"keyword\">ADD</span> fulltext index(total_used2);</span><br><span class=\"line\"><span class=\"number\">1283</span> <span class=\"operator\">-</span> <span class=\"keyword\">Column</span> <span class=\"string\">&#x27;total_used2&#x27;</span> cannot be part <span class=\"keyword\">of</span> FULLTEXT index</span><br></pre></td></tr></table></figure>\n\n<p>很明显，两者都不能创建全文索引。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虚拟列是MySQL 5.7版本之后新增的特性，主要是方便我们查询和操作。</p>\n<p>我所说的可能只是冰山一角，具体的用法，还需要我们自己根据具体的业务场景使用才行。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><p><a href=\"https://www.linuxidc.com/Linux/2016-02/128066.htm\">MySQL 5.7新特性之Generated Column</a></p>\n</li>\n<li><p><a href=\"http://mysqlserverteam.com/generated-columns-in-mysql-5-7-5/\">Generated Columns in MySQL 5.7.5</a></p>\n</li>\n</ul>\n<p>本文连接：<a href=\"http://feilong.tech/2019/08/14/mysql-generated-columns\">http://feilong.tech/2019/08/14/mysql-generated-columns</a></p>\n"},{"title":"索引对性能到底有多少的影响？？","id":"274","comments":0,"date":"2018-04-13T12:06:33.000Z","_content":"\n#### 索引到底对性能有多少影响？\n\n这个问题估计是很多MySQL小白好奇的问题。当然我也是一样。因为之前的时候，并没有对索引有太多的注意，而且之前的工作经历，因为数据量很小，索引所起到的作用并不是很大，所以也没有太大注意。\n\n#### 事情的起点\n\n我在公司是做后端开发（PHPer），除了日常的开发工作，也要兼职公司的运维。每周安排一个人跟进报警邮件，出现问题及时通报。\n\n像很多创业公司的一样，我们选用的是阿里云的ECS+RDS。因为如果自己购买服务器，不管是运维成本还是物理成本都是比较高的。\n\n一天将近半夜12点的时候，报警日志突然出现了`MySQL server has gone away`\n\n遇到问题肯定是先Baidu，我找到了MySQL官方的解释，原因是查询的时候，出现的mysql断开的情况。我登录阿里云rds后台，发现wait\\_timeout时间长得很。不应该会出现超时的情况。\n\n![](/uploads/2018/04/29826BAFF73C1D32CDD9C5A89502CB29.png)\n\n一个同事：“会不会和rds经常CPU报警有关？”\n\n我勒个去，我查了一下rds监控，果然CPU持续升高。\n\n![](/uploads/2018/04/1523616180755.jpg)\n\n#### 问题跟进\n\nrds自带了日志系统，可以方便。查看了一下慢日志系统，果然有很多的慢SQL日志。\n\n![](/uploads/2018/04/WX20180413-194555.png)\n\n我曹，每次扫描了8W多行。看来是没有使用到索引。加上次数频繁，解析的总次数高达 1762833762 行。\n\n#### 定位问题\n\n查看MySQL的执行计划\n\n```sql\nmysql> explain extended SELECT * FROM `test` WHERE `is_deleted` =0 AND `a` = 81644;\n+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+\n id  select_type  table      type  possible_keys  key   key_len  ref   rows   Extra       \n+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+\n  1  SIMPLE       test  ALL   a_index       NULL  NULL     NULL  86172  Using where \n+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+\n1 row in set, 3 warnings (0.01 sec)\nmysql> show warnings;\n Level    Code  Message                                                                                             \n Warning  1739  Cannot use ref access on index 'a_index' due to type or collation conversion on field 'a'                                                                                                 \n Warning  1739  Cannot use range access on index 'a_index' due to type or collation conversion on field 'a'\n```\n\n果然是没有用到索引，全表扫描。\n\n原来，由于a数据类型是varchar类型的。但是查询的时候，使用的int类型，在执行SQL语句的时候，由于类型原因，造成了隐式转换。没有用到索引。所以实际上，应该把原来的SQL语句更改成 `SELECT * FROM test WHERE is_deleted =0 AND a = '81644'`。\n\n虽然原因找到了，但是查询的SQL那么多，定位那具体的php文件以及对于的代码行数，也是一个难题。\n\n#### PHP慢日志\n\n为了能够定位代码的效率，PHP自带一个功能，那就是慢日志。如果PHP脚本，执行时间比较长的时候，那么PHP会认为这段代码是有问题的，PHP会把代码的基本信息打印到慢日志里面，能够方便开发者定位问题。\n\n这么说来，如果找到慢日志里面关于执行这个SQL的代码，也就能够准确定位到对应的PHP文件。\n\n#### 索引对性能的影响！\n\n接下来用对比图来比较下使用索引和没有使用索引的对比吧\n\n![](/uploads/2018/04/WX20180413-200112.png)\n\n优化之后的SQL执行效率，相比之前要高出很多，CPU占用率稳定保持在个位数，甚至 5%一下，相比之前80%左右，呈现指数的翻倍。\n\n#### 总结\n\n其实隐式转换是MySQL索引经常遇到的问题。我最开始听说是前段时间，阿里云组织了一个[慢SQL的优化大赛](https://yq.aliyun.com/roundtable/56333?utm_content=m_25986)。虽然没有得到名次，但是确实通过大赛，学到了很多关于索引的知识。","source":"_posts/mysql-index.md","raw":"---\ntitle: 索引对性能到底有多少的影响？？\ntags: []\nid: '274'\ncategories:\n  - - Linux\n  - - Mysql\ncomments: false\ndate: 2018-04-13 20:06:33\n---\n\n#### 索引到底对性能有多少影响？\n\n这个问题估计是很多MySQL小白好奇的问题。当然我也是一样。因为之前的时候，并没有对索引有太多的注意，而且之前的工作经历，因为数据量很小，索引所起到的作用并不是很大，所以也没有太大注意。\n\n#### 事情的起点\n\n我在公司是做后端开发（PHPer），除了日常的开发工作，也要兼职公司的运维。每周安排一个人跟进报警邮件，出现问题及时通报。\n\n像很多创业公司的一样，我们选用的是阿里云的ECS+RDS。因为如果自己购买服务器，不管是运维成本还是物理成本都是比较高的。\n\n一天将近半夜12点的时候，报警日志突然出现了`MySQL server has gone away`\n\n遇到问题肯定是先Baidu，我找到了MySQL官方的解释，原因是查询的时候，出现的mysql断开的情况。我登录阿里云rds后台，发现wait\\_timeout时间长得很。不应该会出现超时的情况。\n\n![](/uploads/2018/04/29826BAFF73C1D32CDD9C5A89502CB29.png)\n\n一个同事：“会不会和rds经常CPU报警有关？”\n\n我勒个去，我查了一下rds监控，果然CPU持续升高。\n\n![](/uploads/2018/04/1523616180755.jpg)\n\n#### 问题跟进\n\nrds自带了日志系统，可以方便。查看了一下慢日志系统，果然有很多的慢SQL日志。\n\n![](/uploads/2018/04/WX20180413-194555.png)\n\n我曹，每次扫描了8W多行。看来是没有使用到索引。加上次数频繁，解析的总次数高达 1762833762 行。\n\n#### 定位问题\n\n查看MySQL的执行计划\n\n```sql\nmysql> explain extended SELECT * FROM `test` WHERE `is_deleted` =0 AND `a` = 81644;\n+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+\n id  select_type  table      type  possible_keys  key   key_len  ref   rows   Extra       \n+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+\n  1  SIMPLE       test  ALL   a_index       NULL  NULL     NULL  86172  Using where \n+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+\n1 row in set, 3 warnings (0.01 sec)\nmysql> show warnings;\n Level    Code  Message                                                                                             \n Warning  1739  Cannot use ref access on index 'a_index' due to type or collation conversion on field 'a'                                                                                                 \n Warning  1739  Cannot use range access on index 'a_index' due to type or collation conversion on field 'a'\n```\n\n果然是没有用到索引，全表扫描。\n\n原来，由于a数据类型是varchar类型的。但是查询的时候，使用的int类型，在执行SQL语句的时候，由于类型原因，造成了隐式转换。没有用到索引。所以实际上，应该把原来的SQL语句更改成 `SELECT * FROM test WHERE is_deleted =0 AND a = '81644'`。\n\n虽然原因找到了，但是查询的SQL那么多，定位那具体的php文件以及对于的代码行数，也是一个难题。\n\n#### PHP慢日志\n\n为了能够定位代码的效率，PHP自带一个功能，那就是慢日志。如果PHP脚本，执行时间比较长的时候，那么PHP会认为这段代码是有问题的，PHP会把代码的基本信息打印到慢日志里面，能够方便开发者定位问题。\n\n这么说来，如果找到慢日志里面关于执行这个SQL的代码，也就能够准确定位到对应的PHP文件。\n\n#### 索引对性能的影响！\n\n接下来用对比图来比较下使用索引和没有使用索引的对比吧\n\n![](/uploads/2018/04/WX20180413-200112.png)\n\n优化之后的SQL执行效率，相比之前要高出很多，CPU占用率稳定保持在个位数，甚至 5%一下，相比之前80%左右，呈现指数的翻倍。\n\n#### 总结\n\n其实隐式转换是MySQL索引经常遇到的问题。我最开始听说是前段时间，阿里云组织了一个[慢SQL的优化大赛](https://yq.aliyun.com/roundtable/56333?utm_content=m_25986)。虽然没有得到名次，但是确实通过大赛，学到了很多关于索引的知识。","slug":"mysql-index","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mgc003y417tbfhfd52j","layout":"post","photos":[],"link":"","content":"<h4 id=\"索引到底对性能有多少影响？\"><a href=\"#索引到底对性能有多少影响？\" class=\"headerlink\" title=\"索引到底对性能有多少影响？\"></a>索引到底对性能有多少影响？</h4><p>这个问题估计是很多MySQL小白好奇的问题。当然我也是一样。因为之前的时候，并没有对索引有太多的注意，而且之前的工作经历，因为数据量很小，索引所起到的作用并不是很大，所以也没有太大注意。</p>\n<h4 id=\"事情的起点\"><a href=\"#事情的起点\" class=\"headerlink\" title=\"事情的起点\"></a>事情的起点</h4><p>我在公司是做后端开发（PHPer），除了日常的开发工作，也要兼职公司的运维。每周安排一个人跟进报警邮件，出现问题及时通报。</p>\n<p>像很多创业公司的一样，我们选用的是阿里云的ECS+RDS。因为如果自己购买服务器，不管是运维成本还是物理成本都是比较高的。</p>\n<p>一天将近半夜12点的时候，报警日志突然出现了<code>MySQL server has gone away</code></p>\n<p>遇到问题肯定是先Baidu，我找到了MySQL官方的解释，原因是查询的时候，出现的mysql断开的情况。我登录阿里云rds后台，发现wait_timeout时间长得很。不应该会出现超时的情况。</p>\n<p><img src=\"/uploads/2018/04/29826BAFF73C1D32CDD9C5A89502CB29.png\"></p>\n<p>一个同事：“会不会和rds经常CPU报警有关？”</p>\n<p>我勒个去，我查了一下rds监控，果然CPU持续升高。</p>\n<p><img src=\"/uploads/2018/04/1523616180755.jpg\"></p>\n<h4 id=\"问题跟进\"><a href=\"#问题跟进\" class=\"headerlink\" title=\"问题跟进\"></a>问题跟进</h4><p>rds自带了日志系统，可以方便。查看了一下慢日志系统，果然有很多的慢SQL日志。</p>\n<p><img src=\"/uploads/2018/04/WX20180413-194555.png\"></p>\n<p>我曹，每次扫描了8W多行。看来是没有使用到索引。加上次数频繁，解析的总次数高达 1762833762 行。</p>\n<h4 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h4><p>查看MySQL的执行计划</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> explain extended <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test` <span class=\"keyword\">WHERE</span> `is_deleted` <span class=\"operator\">=</span><span class=\"number\">0</span> <span class=\"keyword\">AND</span> `a` <span class=\"operator\">=</span> <span class=\"number\">81644</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class=\"line\"> id  select_type  <span class=\"keyword\">table</span>      type  possible_keys  key   key_len  <span class=\"keyword\">ref</span>   <span class=\"keyword\">rows</span>   Extra       </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>  SIMPLE       test  <span class=\"keyword\">ALL</span>   a_index       <span class=\"keyword\">NULL</span>  <span class=\"keyword\">NULL</span>     <span class=\"keyword\">NULL</span>  <span class=\"number\">86172</span>  <span class=\"keyword\">Using</span> <span class=\"keyword\">where</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span>, <span class=\"number\">3</span> warnings (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> warnings;</span><br><span class=\"line\"> Level    Code  Message                                                                                             </span><br><span class=\"line\"> Warning  <span class=\"number\">1739</span>  Cannot use <span class=\"keyword\">ref</span> access <span class=\"keyword\">on</span> index <span class=\"string\">&#x27;a_index&#x27;</span> due <span class=\"keyword\">to</span> type <span class=\"keyword\">or</span> <span class=\"keyword\">collation</span> conversion <span class=\"keyword\">on</span> field <span class=\"string\">&#x27;a&#x27;</span>                                                                                                 </span><br><span class=\"line\"> Warning  <span class=\"number\">1739</span>  Cannot use <span class=\"keyword\">range</span> access <span class=\"keyword\">on</span> index <span class=\"string\">&#x27;a_index&#x27;</span> due <span class=\"keyword\">to</span> type <span class=\"keyword\">or</span> <span class=\"keyword\">collation</span> conversion <span class=\"keyword\">on</span> field <span class=\"string\">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>果然是没有用到索引，全表扫描。</p>\n<p>原来，由于a数据类型是varchar类型的。但是查询的时候，使用的int类型，在执行SQL语句的时候，由于类型原因，造成了隐式转换。没有用到索引。所以实际上，应该把原来的SQL语句更改成 <code>SELECT * FROM test WHERE is_deleted =0 AND a = &#39;81644&#39;</code>。</p>\n<p>虽然原因找到了，但是查询的SQL那么多，定位那具体的php文件以及对于的代码行数，也是一个难题。</p>\n<h4 id=\"PHP慢日志\"><a href=\"#PHP慢日志\" class=\"headerlink\" title=\"PHP慢日志\"></a>PHP慢日志</h4><p>为了能够定位代码的效率，PHP自带一个功能，那就是慢日志。如果PHP脚本，执行时间比较长的时候，那么PHP会认为这段代码是有问题的，PHP会把代码的基本信息打印到慢日志里面，能够方便开发者定位问题。</p>\n<p>这么说来，如果找到慢日志里面关于执行这个SQL的代码，也就能够准确定位到对应的PHP文件。</p>\n<h4 id=\"索引对性能的影响！\"><a href=\"#索引对性能的影响！\" class=\"headerlink\" title=\"索引对性能的影响！\"></a>索引对性能的影响！</h4><p>接下来用对比图来比较下使用索引和没有使用索引的对比吧</p>\n<p><img src=\"/uploads/2018/04/WX20180413-200112.png\"></p>\n<p>优化之后的SQL执行效率，相比之前要高出很多，CPU占用率稳定保持在个位数，甚至 5%一下，相比之前80%左右，呈现指数的翻倍。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>其实隐式转换是MySQL索引经常遇到的问题。我最开始听说是前段时间，阿里云组织了一个<a href=\"https://yq.aliyun.com/roundtable/56333?utm_content=m_25986\">慢SQL的优化大赛</a>。虽然没有得到名次，但是确实通过大赛，学到了很多关于索引的知识。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"索引到底对性能有多少影响？\"><a href=\"#索引到底对性能有多少影响？\" class=\"headerlink\" title=\"索引到底对性能有多少影响？\"></a>索引到底对性能有多少影响？</h4><p>这个问题估计是很多MySQL小白好奇的问题。当然我也是一样。因为之前的时候，并没有对索引有太多的注意，而且之前的工作经历，因为数据量很小，索引所起到的作用并不是很大，所以也没有太大注意。</p>\n<h4 id=\"事情的起点\"><a href=\"#事情的起点\" class=\"headerlink\" title=\"事情的起点\"></a>事情的起点</h4><p>我在公司是做后端开发（PHPer），除了日常的开发工作，也要兼职公司的运维。每周安排一个人跟进报警邮件，出现问题及时通报。</p>\n<p>像很多创业公司的一样，我们选用的是阿里云的ECS+RDS。因为如果自己购买服务器，不管是运维成本还是物理成本都是比较高的。</p>\n<p>一天将近半夜12点的时候，报警日志突然出现了<code>MySQL server has gone away</code></p>\n<p>遇到问题肯定是先Baidu，我找到了MySQL官方的解释，原因是查询的时候，出现的mysql断开的情况。我登录阿里云rds后台，发现wait_timeout时间长得很。不应该会出现超时的情况。</p>\n<p><img src=\"/uploads/2018/04/29826BAFF73C1D32CDD9C5A89502CB29.png\"></p>\n<p>一个同事：“会不会和rds经常CPU报警有关？”</p>\n<p>我勒个去，我查了一下rds监控，果然CPU持续升高。</p>\n<p><img src=\"/uploads/2018/04/1523616180755.jpg\"></p>\n<h4 id=\"问题跟进\"><a href=\"#问题跟进\" class=\"headerlink\" title=\"问题跟进\"></a>问题跟进</h4><p>rds自带了日志系统，可以方便。查看了一下慢日志系统，果然有很多的慢SQL日志。</p>\n<p><img src=\"/uploads/2018/04/WX20180413-194555.png\"></p>\n<p>我曹，每次扫描了8W多行。看来是没有使用到索引。加上次数频繁，解析的总次数高达 1762833762 行。</p>\n<h4 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h4><p>查看MySQL的执行计划</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> explain extended <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test` <span class=\"keyword\">WHERE</span> `is_deleted` <span class=\"operator\">=</span><span class=\"number\">0</span> <span class=\"keyword\">AND</span> `a` <span class=\"operator\">=</span> <span class=\"number\">81644</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class=\"line\"> id  select_type  <span class=\"keyword\">table</span>      type  possible_keys  key   key_len  <span class=\"keyword\">ref</span>   <span class=\"keyword\">rows</span>   Extra       </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>  SIMPLE       test  <span class=\"keyword\">ALL</span>   a_index       <span class=\"keyword\">NULL</span>  <span class=\"keyword\">NULL</span>     <span class=\"keyword\">NULL</span>  <span class=\"number\">86172</span>  <span class=\"keyword\">Using</span> <span class=\"keyword\">where</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span>, <span class=\"number\">3</span> warnings (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> warnings;</span><br><span class=\"line\"> Level    Code  Message                                                                                             </span><br><span class=\"line\"> Warning  <span class=\"number\">1739</span>  Cannot use <span class=\"keyword\">ref</span> access <span class=\"keyword\">on</span> index <span class=\"string\">&#x27;a_index&#x27;</span> due <span class=\"keyword\">to</span> type <span class=\"keyword\">or</span> <span class=\"keyword\">collation</span> conversion <span class=\"keyword\">on</span> field <span class=\"string\">&#x27;a&#x27;</span>                                                                                                 </span><br><span class=\"line\"> Warning  <span class=\"number\">1739</span>  Cannot use <span class=\"keyword\">range</span> access <span class=\"keyword\">on</span> index <span class=\"string\">&#x27;a_index&#x27;</span> due <span class=\"keyword\">to</span> type <span class=\"keyword\">or</span> <span class=\"keyword\">collation</span> conversion <span class=\"keyword\">on</span> field <span class=\"string\">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>果然是没有用到索引，全表扫描。</p>\n<p>原来，由于a数据类型是varchar类型的。但是查询的时候，使用的int类型，在执行SQL语句的时候，由于类型原因，造成了隐式转换。没有用到索引。所以实际上，应该把原来的SQL语句更改成 <code>SELECT * FROM test WHERE is_deleted =0 AND a = &#39;81644&#39;</code>。</p>\n<p>虽然原因找到了，但是查询的SQL那么多，定位那具体的php文件以及对于的代码行数，也是一个难题。</p>\n<h4 id=\"PHP慢日志\"><a href=\"#PHP慢日志\" class=\"headerlink\" title=\"PHP慢日志\"></a>PHP慢日志</h4><p>为了能够定位代码的效率，PHP自带一个功能，那就是慢日志。如果PHP脚本，执行时间比较长的时候，那么PHP会认为这段代码是有问题的，PHP会把代码的基本信息打印到慢日志里面，能够方便开发者定位问题。</p>\n<p>这么说来，如果找到慢日志里面关于执行这个SQL的代码，也就能够准确定位到对应的PHP文件。</p>\n<h4 id=\"索引对性能的影响！\"><a href=\"#索引对性能的影响！\" class=\"headerlink\" title=\"索引对性能的影响！\"></a>索引对性能的影响！</h4><p>接下来用对比图来比较下使用索引和没有使用索引的对比吧</p>\n<p><img src=\"/uploads/2018/04/WX20180413-200112.png\"></p>\n<p>优化之后的SQL执行效率，相比之前要高出很多，CPU占用率稳定保持在个位数，甚至 5%一下，相比之前80%左右，呈现指数的翻倍。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>其实隐式转换是MySQL索引经常遇到的问题。我最开始听说是前段时间，阿里云组织了一个<a href=\"https://yq.aliyun.com/roundtable/56333?utm_content=m_25986\">慢SQL的优化大赛</a>。虽然没有得到名次，但是确实通过大赛，学到了很多关于索引的知识。</p>\n"},{"title":"MySQL事务隔离级别详解","id":"126","date":"2017-08-24T12:02:44.000Z","_content":"\n#### 四种隔离级别的解释\n\nSQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\n<!-- more -->\n*   Read Uncommitted（读取未提交内容）\n\n在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为**脏读（Dirty Read**）。\n\n*   Read Committed（读取提交内容）\n\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的**不可重复读（Nonrepeatable Read**），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n\n*   Repeatable Read（可重读）\n\n**这是MySQL的默认事务隔离级别**，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：**幻读 （Phantom Read**）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。**InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题**。\n\n*   Serializable（可串行化）\n\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n#### 不同隔离级别带来的问题\n\n这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：\n\n**脏读(Drity Read)**：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。\n\n**不可重复读(Non-repeatable read)**:在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。\n\n**幻读(Phantom Read)**:在一个事务的两次查询中数据行数不一致，例如有一个事务查询了几列行Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几行数据是它先前所没有的。 （Mysql的InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。）\n\n在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：\n\n![](/uploads/2017/08/a.jpg)\n\n#### MySQL 中如何更新事务级别:\n\n```sql\nSELECT @@GLOBAL.tx_isolation, @@tx_isolation;\nSET GLOBAL tx_isolation='REPEATABLE-READ';\nSET SESSION tx_isolation='SERIALIZABLE';\n\nor\n\nSET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\nSET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE\nSET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ\n\n整个语法是：\n\nSET [GLOBAL  SESSION] TRANSACTION\n    transaction_characteristic [, transaction_characteristic] ...\n\ntransaction_characteristic:\n    ISOLATION LEVEL level\n   READ WRITE\n   READ ONLY\n\nlevel:\n     REPEATABLE READ\n    READ COMMITTED\n    READ UNCOMMITTED\n    SERIALIZABLE\n```\n\n`但是两种修改方式效果是不一样的`\n\n![](/uploads/2017/08/1-1.png)\n\n举例子：mysql打开两个客户端A、B，在A客户端修改事务隔离\n\n> 使用global 修改，那么A和B下次重新登录的时候显示修改后的效果 使用session形式的设置，当前的会话会立即生效，重新登录后不会生效\n\n详见: MySQL 官方文档: [http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html](http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html)\n\n#### 实验\n\n下面，将利用MySQL的客户端程序，分别测试几种隔离级别。测试数据库为test，表为tx； 表结构：\n\n```sql\nCREATE TABLE `tx` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `num` int(10) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB\n```\n\n两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。\n\n以下每次测试前初始数据为：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n（一）、将A的隔离级别设置为read uncommitted(未提交读)\n\n*   在B未更新数据之前： 客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> select @@tx_isolation;\n+------------------+\n @@tx_isolation   \n+------------------+\n READ-UNCOMMITTED \n+------------------+\n1 row in set (0.00 sec)\n\nmysql>\n```\n\n*   B更新数据： 客户端B：\n\n```sql\nmysql> select @@tx_isolation;\n+-----------------+\n @@tx_isolation  \n+-----------------+\n REPEATABLE-READ \n+-----------------+\n1 row in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n这个时候查看A客户端的数据:\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n客户端B的事务没有进行commit，但是已经可以在A客户端查看到更新的数据，这个时候就出现了`脏读`\n\n接下来将B事务进行回滚\n\n```sql\nmysql> rollback;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n再进行查看A客户端的数据\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n```\n    经过上面的实验可以得出结论，事务B更新了一条记录，但是没有提交，此时事务A可以查询出未提交记录。造成脏读现象。未提交读是最低的隔离级别。\n```\n\n（二）、将客户端A的事务隔离级别设置为read committed(已提交读)\n\n```sql\nmysql> SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>\n```\n\n在B未更新数据之前： 客户端A：\n\n```sql\nmysql> select @@tx_isolation;\n+----------------+\n @@tx_isolation \n+----------------+\n READ-COMMITTED \n+----------------+\n1 row in set (0.00 sec)\n\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>\n```\n\nB更新数据： 客户端B：\n\n```sql\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n这个时候查看客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n接下来我们commit事务，然后查询A数据，发现能够查询到数据了（但是A还没有commit）：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n```\n   经过上面的实验可以得出结论，已提交读隔离级别解决了脏读的问题，但是出现了不可重复读的问题，即事务A在两次查询的数据不一致，因为在两次查询之间事务B更新了一条数据。已提交读只允许读取已提交的记录，但不要求可重复读。\n```\n\n(三)、将A的隔离级别设置为repeatable read(可重复读) 在B未更新数据之前： 客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\nB更新数据： 客户端B：\n\n```sql\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\nB插入数据： 客户端B：\n\n```sql\nmysql> insert tx set num = 5;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n  5     5 \n+----+------+\n5 rows in set (0.00 sec)\n\nmysql>\n```\n\n客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n```\n   由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交记录，而且在一个事务两次读取一个记录期间，其他事务部的更新该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，但是可能产生幻读问题(注意Mysql的InnoDB 和 Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题)。\n```\n\n(四)、将A的隔离级别设置为 可串行化 (Serializable) A端打开事务，B端插入一条记录 事务A端：\n\n```sql\nmysql> SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>\n```\n\n事务B端：\n\n```sql\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n```\n    此时客户端B是可以修改数据的，（因为A还没有指定哪张表）\n```\n\n接下来，我们使用A查询下表，然后使用B更新下数据 客户端A\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n然后使用B客户端，进行更新数据:\n\n```sql\nmysql> update tx set num=3 where id=3;\nERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction\nmysql>\n```\n\n```\n    因为此时事务A的隔离级别设置为serializable，开始事务后，并没有提交，所以事务B只能等待。\n```\n\n事务A提交事务： 事务A端\n\n```sql\nmysql> commit;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n事务B端\n\n```sql\nmysql> update tx set num=3 where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n```\n    serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，直到前一个事务完成并解除锁定为止 。是完整的隔离级别，会锁定对应的数据表格，因而会有效率的问题。\n```","source":"_posts/mysql-transaction.md","raw":"---\ntitle: MySQL事务隔离级别详解\ntags: []\nid: '126'\ncategories:\n  - - Linux\n  - - Mysql\ndate: 2017-08-24 20:02:44\n---\n\n#### 四种隔离级别的解释\n\nSQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\n<!-- more -->\n*   Read Uncommitted（读取未提交内容）\n\n在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为**脏读（Dirty Read**）。\n\n*   Read Committed（读取提交内容）\n\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的**不可重复读（Nonrepeatable Read**），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n\n*   Repeatable Read（可重读）\n\n**这是MySQL的默认事务隔离级别**，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：**幻读 （Phantom Read**）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。**InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题**。\n\n*   Serializable（可串行化）\n\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n#### 不同隔离级别带来的问题\n\n这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：\n\n**脏读(Drity Read)**：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。\n\n**不可重复读(Non-repeatable read)**:在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。\n\n**幻读(Phantom Read)**:在一个事务的两次查询中数据行数不一致，例如有一个事务查询了几列行Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几行数据是它先前所没有的。 （Mysql的InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。）\n\n在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：\n\n![](/uploads/2017/08/a.jpg)\n\n#### MySQL 中如何更新事务级别:\n\n```sql\nSELECT @@GLOBAL.tx_isolation, @@tx_isolation;\nSET GLOBAL tx_isolation='REPEATABLE-READ';\nSET SESSION tx_isolation='SERIALIZABLE';\n\nor\n\nSET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\nSET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE\nSET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ\n\n整个语法是：\n\nSET [GLOBAL  SESSION] TRANSACTION\n    transaction_characteristic [, transaction_characteristic] ...\n\ntransaction_characteristic:\n    ISOLATION LEVEL level\n   READ WRITE\n   READ ONLY\n\nlevel:\n     REPEATABLE READ\n    READ COMMITTED\n    READ UNCOMMITTED\n    SERIALIZABLE\n```\n\n`但是两种修改方式效果是不一样的`\n\n![](/uploads/2017/08/1-1.png)\n\n举例子：mysql打开两个客户端A、B，在A客户端修改事务隔离\n\n> 使用global 修改，那么A和B下次重新登录的时候显示修改后的效果 使用session形式的设置，当前的会话会立即生效，重新登录后不会生效\n\n详见: MySQL 官方文档: [http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html](http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html)\n\n#### 实验\n\n下面，将利用MySQL的客户端程序，分别测试几种隔离级别。测试数据库为test，表为tx； 表结构：\n\n```sql\nCREATE TABLE `tx` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `num` int(10) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB\n```\n\n两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。\n\n以下每次测试前初始数据为：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n（一）、将A的隔离级别设置为read uncommitted(未提交读)\n\n*   在B未更新数据之前： 客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> select @@tx_isolation;\n+------------------+\n @@tx_isolation   \n+------------------+\n READ-UNCOMMITTED \n+------------------+\n1 row in set (0.00 sec)\n\nmysql>\n```\n\n*   B更新数据： 客户端B：\n\n```sql\nmysql> select @@tx_isolation;\n+-----------------+\n @@tx_isolation  \n+-----------------+\n REPEATABLE-READ \n+-----------------+\n1 row in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n这个时候查看A客户端的数据:\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n客户端B的事务没有进行commit，但是已经可以在A客户端查看到更新的数据，这个时候就出现了`脏读`\n\n接下来将B事务进行回滚\n\n```sql\nmysql> rollback;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n再进行查看A客户端的数据\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n```\n    经过上面的实验可以得出结论，事务B更新了一条记录，但是没有提交，此时事务A可以查询出未提交记录。造成脏读现象。未提交读是最低的隔离级别。\n```\n\n（二）、将客户端A的事务隔离级别设置为read committed(已提交读)\n\n```sql\nmysql> SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>\n```\n\n在B未更新数据之前： 客户端A：\n\n```sql\nmysql> select @@tx_isolation;\n+----------------+\n @@tx_isolation \n+----------------+\n READ-COMMITTED \n+----------------+\n1 row in set (0.00 sec)\n\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>\n```\n\nB更新数据： 客户端B：\n\n```sql\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n这个时候查看客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n接下来我们commit事务，然后查询A数据，发现能够查询到数据了（但是A还没有commit）：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n```\n   经过上面的实验可以得出结论，已提交读隔离级别解决了脏读的问题，但是出现了不可重复读的问题，即事务A在两次查询的数据不一致，因为在两次查询之间事务B更新了一条数据。已提交读只允许读取已提交的记录，但不要求可重复读。\n```\n\n(三)、将A的隔离级别设置为repeatable read(可重复读) 在B未更新数据之前： 客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\nB更新数据： 客户端B：\n\n```sql\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\nB插入数据： 客户端B：\n\n```sql\nmysql> insert tx set num = 5;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n  5     5 \n+----+------+\n5 rows in set (0.00 sec)\n\nmysql>\n```\n\n客户端A：\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n```\n   由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交记录，而且在一个事务两次读取一个记录期间，其他事务部的更新该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，但是可能产生幻读问题(注意Mysql的InnoDB 和 Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题)。\n```\n\n(四)、将A的隔离级别设置为 可串行化 (Serializable) A端打开事务，B端插入一条记录 事务A端：\n\n```sql\nmysql> SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>\n```\n\n事务B端：\n\n```sql\nmysql> update tx set num=10 where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n```\n    此时客户端B是可以修改数据的，（因为A还没有指定哪张表）\n```\n\n接下来，我们使用A查询下表，然后使用B更新下数据 客户端A\n\n```sql\nmysql> select * from test.tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3    10 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n\nmysql>\n```\n\n然后使用B客户端，进行更新数据:\n\n```sql\nmysql> update tx set num=3 where id=3;\nERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction\nmysql>\n```\n\n```\n    因为此时事务A的隔离级别设置为serializable，开始事务后，并没有提交，所以事务B只能等待。\n```\n\n事务A提交事务： 事务A端\n\n```sql\nmysql> commit;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n事务B端\n\n```sql\nmysql> update tx set num=3 where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from tx;\n+----+------+\n id  num  \n+----+------+\n  1     1 \n  2     2 \n  3     3 \n  4     4 \n+----+------+\n4 rows in set (0.00 sec)\n```\n\n```\n    serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，直到前一个事务完成并解除锁定为止 。是完整的隔离级别，会锁定对应的数据表格，因而会有效率的问题。\n```","slug":"mysql-transaction","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mgd0041417t57ed4fka","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"四种隔离级别的解释\"><a href=\"#四种隔离级别的解释\" class=\"headerlink\" title=\"四种隔离级别的解释\"></a>四种隔离级别的解释</h4><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>\n<span id=\"more\"></span>\n<ul>\n<li>Read Uncommitted（读取未提交内容）</li>\n</ul>\n<p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为<strong>脏读（Dirty Read</strong>）。</p>\n<ul>\n<li>Read Committed（读取提交内容）</li>\n</ul>\n<p>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的<strong>不可重复读（Nonrepeatable Read</strong>），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>\n<ul>\n<li>Repeatable Read（可重读）</li>\n</ul>\n<p><strong>这是MySQL的默认事务隔离级别</strong>，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：<strong>幻读 （Phantom Read</strong>）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。<strong>InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题</strong>。</p>\n<ul>\n<li>Serializable（可串行化）</li>\n</ul>\n<p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n<h4 id=\"不同隔离级别带来的问题\"><a href=\"#不同隔离级别带来的问题\" class=\"headerlink\" title=\"不同隔离级别带来的问题\"></a>不同隔离级别带来的问题</h4><p>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：</p>\n<p>**脏读(Drity Read)**：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</p>\n<p><strong>不可重复读(Non-repeatable read)</strong>:在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</p>\n<p><strong>幻读(Phantom Read)</strong>:在一个事务的两次查询中数据行数不一致，例如有一个事务查询了几列行Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几行数据是它先前所没有的。 （Mysql的InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。）</p>\n<p>在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：</p>\n<p><img src=\"/uploads/2017/08/a.jpg\"></p>\n<h4 id=\"MySQL-中如何更新事务级别\"><a href=\"#MySQL-中如何更新事务级别\" class=\"headerlink\" title=\"MySQL 中如何更新事务级别:\"></a>MySQL 中如何更新事务级别:</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> @<span class=\"variable\">@GLOBAL</span>.tx_isolation, @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> tx_isolation<span class=\"operator\">=</span><span class=\"string\">&#x27;REPEATABLE-READ&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION tx_isolation<span class=\"operator\">=</span><span class=\"string\">&#x27;SERIALIZABLE&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED</span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE</span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ</span><br><span class=\"line\"></span><br><span class=\"line\">整个语法是：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> [<span class=\"keyword\">GLOBAL</span>  SESSION] TRANSACTION</span><br><span class=\"line\">    transaction_characteristic [, transaction_characteristic] ...</span><br><span class=\"line\"></span><br><span class=\"line\">transaction_characteristic:</span><br><span class=\"line\">    ISOLATION LEVEL level</span><br><span class=\"line\">   READ WRITE</span><br><span class=\"line\">   READ <span class=\"keyword\">ONLY</span></span><br><span class=\"line\"></span><br><span class=\"line\">level:</span><br><span class=\"line\">     REPEATABLE READ</span><br><span class=\"line\">    READ COMMITTED</span><br><span class=\"line\">    READ UNCOMMITTED</span><br><span class=\"line\">    SERIALIZABLE</span><br></pre></td></tr></table></figure>\n\n<p><code>但是两种修改方式效果是不一样的</code></p>\n<p><img src=\"/uploads/2017/08/1-1.png\"></p>\n<p>举例子：mysql打开两个客户端A、B，在A客户端修改事务隔离</p>\n<blockquote>\n<p>使用global 修改，那么A和B下次重新登录的时候显示修改后的效果 使用session形式的设置，当前的会话会立即生效，重新登录后不会生效</p>\n</blockquote>\n<p>详见: MySQL 官方文档: <a href=\"http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html\">http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html</a></p>\n<h4 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h4><p>下面，将利用MySQL的客户端程序，分别测试几种隔离级别。测试数据库为test，表为tx； 表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `tx` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `num` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB</span><br></pre></td></tr></table></figure>\n\n<p>两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。</p>\n<p>以下每次测试前初始数据为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>（一）、将A的隔离级别设置为read uncommitted(未提交读)</p>\n<ul>\n<li>在B未更新数据之前： 客户端A：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">------------------+</span></span><br><span class=\"line\"> @<span class=\"variable\">@tx</span>_isolation   </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">------------------+</span></span><br><span class=\"line\"> READ<span class=\"operator\">-</span>UNCOMMITTED </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>B更新数据： 客户端B：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------------+</span></span><br><span class=\"line\"> @<span class=\"variable\">@tx</span>_isolation  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------------+</span></span><br><span class=\"line\"> REPEATABLE<span class=\"operator\">-</span>READ </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候查看A客户端的数据:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>客户端B的事务没有进行commit，但是已经可以在A客户端查看到更新的数据，这个时候就出现了<code>脏读</code></p>\n<p>接下来将B事务进行回滚</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">rollback</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>再进行查看A客户端的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">经过上面的实验可以得出结论，事务B更新了一条记录，但是没有提交，此时事务A可以查询出未提交记录。造成脏读现象。未提交读是最低的隔离级别。</span><br></pre></td></tr></table></figure>\n\n<p>（二）、将客户端A的事务隔离级别设置为read committed(已提交读)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B未更新数据之前： 客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------+</span></span><br><span class=\"line\"> @<span class=\"variable\">@tx</span>_isolation </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------+</span></span><br><span class=\"line\"> READ<span class=\"operator\">-</span>COMMITTED </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>B更新数据： 客户端B：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候查看客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来我们commit事务，然后查询A数据，发现能够查询到数据了（但是A还没有commit）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">经过上面的实验可以得出结论，已提交读隔离级别解决了脏读的问题，但是出现了不可重复读的问题，即事务A在两次查询的数据不一致，因为在两次查询之间事务B更新了一条数据。已提交读只允许读取已提交的记录，但不要求可重复读。</span><br></pre></td></tr></table></figure>\n\n<p>(三)、将A的隔离级别设置为repeatable read(可重复读) 在B未更新数据之前： 客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>B更新数据： 客户端B：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>B插入数据： 客户端B：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">insert</span> tx <span class=\"keyword\">set</span> num <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\">  <span class=\"number\">5</span>     <span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交记录，而且在一个事务两次读取一个记录期间，其他事务部的更新该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，但是可能产生幻读问题(注意Mysql的InnoDB 和 Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题)。</span><br></pre></td></tr></table></figure>\n\n<p>(四)、将A的隔离级别设置为 可串行化 (Serializable) A端打开事务，B端插入一条记录 事务A端：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>事务B端：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时客户端B是可以修改数据的，（因为A还没有指定哪张表）</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们使用A查询下表，然后使用B更新下数据 客户端A</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后使用B客户端，进行更新数据:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">ERROR <span class=\"number\">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为此时事务A的隔离级别设置为serializable，开始事务后，并没有提交，所以事务B只能等待。</span><br></pre></td></tr></table></figure>\n\n<p>事务A提交事务： 事务A端</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>事务B端</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，直到前一个事务完成并解除锁定为止 。是完整的隔离级别，会锁定对应的数据表格，因而会有效率的问题。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"四种隔离级别的解释\"><a href=\"#四种隔离级别的解释\" class=\"headerlink\" title=\"四种隔离级别的解释\"></a>四种隔离级别的解释</h4><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>","more":"<ul>\n<li>Read Uncommitted（读取未提交内容）</li>\n</ul>\n<p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为<strong>脏读（Dirty Read</strong>）。</p>\n<ul>\n<li>Read Committed（读取提交内容）</li>\n</ul>\n<p>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的<strong>不可重复读（Nonrepeatable Read</strong>），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>\n<ul>\n<li>Repeatable Read（可重读）</li>\n</ul>\n<p><strong>这是MySQL的默认事务隔离级别</strong>，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：<strong>幻读 （Phantom Read</strong>）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。<strong>InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题</strong>。</p>\n<ul>\n<li>Serializable（可串行化）</li>\n</ul>\n<p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n<h4 id=\"不同隔离级别带来的问题\"><a href=\"#不同隔离级别带来的问题\" class=\"headerlink\" title=\"不同隔离级别带来的问题\"></a>不同隔离级别带来的问题</h4><p>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：</p>\n<p>**脏读(Drity Read)**：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</p>\n<p><strong>不可重复读(Non-repeatable read)</strong>:在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</p>\n<p><strong>幻读(Phantom Read)</strong>:在一个事务的两次查询中数据行数不一致，例如有一个事务查询了几列行Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几行数据是它先前所没有的。 （Mysql的InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。）</p>\n<p>在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：</p>\n<p><img src=\"/uploads/2017/08/a.jpg\"></p>\n<h4 id=\"MySQL-中如何更新事务级别\"><a href=\"#MySQL-中如何更新事务级别\" class=\"headerlink\" title=\"MySQL 中如何更新事务级别:\"></a>MySQL 中如何更新事务级别:</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> @<span class=\"variable\">@GLOBAL</span>.tx_isolation, @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> tx_isolation<span class=\"operator\">=</span><span class=\"string\">&#x27;REPEATABLE-READ&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION tx_isolation<span class=\"operator\">=</span><span class=\"string\">&#x27;SERIALIZABLE&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED</span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE</span><br><span class=\"line\"><span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ</span><br><span class=\"line\"></span><br><span class=\"line\">整个语法是：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> [<span class=\"keyword\">GLOBAL</span>  SESSION] TRANSACTION</span><br><span class=\"line\">    transaction_characteristic [, transaction_characteristic] ...</span><br><span class=\"line\"></span><br><span class=\"line\">transaction_characteristic:</span><br><span class=\"line\">    ISOLATION LEVEL level</span><br><span class=\"line\">   READ WRITE</span><br><span class=\"line\">   READ <span class=\"keyword\">ONLY</span></span><br><span class=\"line\"></span><br><span class=\"line\">level:</span><br><span class=\"line\">     REPEATABLE READ</span><br><span class=\"line\">    READ COMMITTED</span><br><span class=\"line\">    READ UNCOMMITTED</span><br><span class=\"line\">    SERIALIZABLE</span><br></pre></td></tr></table></figure>\n\n<p><code>但是两种修改方式效果是不一样的</code></p>\n<p><img src=\"/uploads/2017/08/1-1.png\"></p>\n<p>举例子：mysql打开两个客户端A、B，在A客户端修改事务隔离</p>\n<blockquote>\n<p>使用global 修改，那么A和B下次重新登录的时候显示修改后的效果 使用session形式的设置，当前的会话会立即生效，重新登录后不会生效</p>\n</blockquote>\n<p>详见: MySQL 官方文档: <a href=\"http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html\">http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html</a></p>\n<h4 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h4><p>下面，将利用MySQL的客户端程序，分别测试几种隔离级别。测试数据库为test，表为tx； 表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `tx` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `num` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB</span><br></pre></td></tr></table></figure>\n\n<p>两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。</p>\n<p>以下每次测试前初始数据为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>（一）、将A的隔离级别设置为read uncommitted(未提交读)</p>\n<ul>\n<li>在B未更新数据之前： 客户端A：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">------------------+</span></span><br><span class=\"line\"> @<span class=\"variable\">@tx</span>_isolation   </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">------------------+</span></span><br><span class=\"line\"> READ<span class=\"operator\">-</span>UNCOMMITTED </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>B更新数据： 客户端B：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------------+</span></span><br><span class=\"line\"> @<span class=\"variable\">@tx</span>_isolation  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------------+</span></span><br><span class=\"line\"> REPEATABLE<span class=\"operator\">-</span>READ </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候查看A客户端的数据:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>客户端B的事务没有进行commit，但是已经可以在A客户端查看到更新的数据，这个时候就出现了<code>脏读</code></p>\n<p>接下来将B事务进行回滚</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">rollback</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>再进行查看A客户端的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">经过上面的实验可以得出结论，事务B更新了一条记录，但是没有提交，此时事务A可以查询出未提交记录。造成脏读现象。未提交读是最低的隔离级别。</span><br></pre></td></tr></table></figure>\n\n<p>（二）、将客户端A的事务隔离级别设置为read committed(已提交读)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B未更新数据之前： 客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------+</span></span><br><span class=\"line\"> @<span class=\"variable\">@tx</span>_isolation </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------+</span></span><br><span class=\"line\"> READ<span class=\"operator\">-</span>COMMITTED </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>B更新数据： 客户端B：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候查看客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来我们commit事务，然后查询A数据，发现能够查询到数据了（但是A还没有commit）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">经过上面的实验可以得出结论，已提交读隔离级别解决了脏读的问题，但是出现了不可重复读的问题，即事务A在两次查询的数据不一致，因为在两次查询之间事务B更新了一条数据。已提交读只允许读取已提交的记录，但不要求可重复读。</span><br></pre></td></tr></table></figure>\n\n<p>(三)、将A的隔离级别设置为repeatable read(可重复读) 在B未更新数据之前： 客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>B更新数据： 客户端B：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>B插入数据： 客户端B：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">insert</span> tx <span class=\"keyword\">set</span> num <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\">  <span class=\"number\">5</span>     <span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>客户端A：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交记录，而且在一个事务两次读取一个记录期间，其他事务部的更新该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，但是可能产生幻读问题(注意Mysql的InnoDB 和 Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题)。</span><br></pre></td></tr></table></figure>\n\n<p>(四)、将A的隔离级别设置为 可串行化 (Serializable) A端打开事务，B端插入一条记录 事务A端：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>事务B端：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时客户端B是可以修改数据的，（因为A还没有指定哪张表）</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们使用A查询下表，然后使用B更新下数据 客户端A</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> test.tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>    <span class=\"number\">10</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后使用B客户端，进行更新数据:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">ERROR <span class=\"number\">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为此时事务A的隔离级别设置为serializable，开始事务后，并没有提交，所以事务B只能等待。</span><br></pre></td></tr></table></figure>\n\n<p>事务A提交事务： 事务A端</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">commit</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>事务B端</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">update</span> tx <span class=\"keyword\">set</span> num<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"><span class=\"keyword\">Rows</span> matched: <span class=\"number\">1</span>  Changed: <span class=\"number\">1</span>  Warnings: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tx;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"> id  num  </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\">  <span class=\"number\">1</span>     <span class=\"number\">1</span> </span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">2</span> </span><br><span class=\"line\">  <span class=\"number\">3</span>     <span class=\"number\">3</span> </span><br><span class=\"line\">  <span class=\"number\">4</span>     <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，直到前一个事务完成并解除锁定为止 。是完整的隔离级别，会锁定对应的数据表格，因而会有效率的问题。</span><br></pre></td></tr></table></figure>"},{"title":"将MySQL数据导出到Excel","id":"294","date":"2018-08-07T04:23:18.000Z","_content":"\n#### 背景\n\n有一天PM跑来找我，让我导出一部分数据。之前做导出的功能，基本上都是依靠代码的方式，如果针对这种临时性需求，如果还要临时写代码，加上自测，一天的时间就这样没了。\n\n#### 执行\n\n```bash\n$ mysql -uroot -proot -e 'select * from test' > test.xls\n```\n\n#### 发现问题\n\n本来以为只要这条命令就行，但是发现导出的Excel是乱码，原来是因为配置文件里面，客户端连接的编码方式不是utf8\n\n#### 重试\n\n```bash\n$ mysql -uroot -proot -e 'set names utf8; select * from test' > test.xls\n```\n\n网上找了一下方案，需要使用记事本打开，然后另存为中文的编码方式。\n\n但是我使用Mac打开的时候，没有找到`另存为`选项 - -\n\n![](/uploads/2018/08/WX20180807-121223@2x.png)\n\n#### 解决办法\n\n文件->复制->存储(副本)->纯文本编码:(中文 GB18030)->更改文件拓展名为xls 即可\n\n![](/uploads/2018/08/20180807121627.jpg)\n\n![](/uploads/2018/08/WX20180807-122030@2x.png)","source":"_posts/mysqldump-excel.md","raw":"---\ntitle: 将MySQL数据导出到Excel\ntags: []\nid: '294'\ncategories:\n  - - Mysql\ndate: 2018-08-07 12:23:18\n---\n\n#### 背景\n\n有一天PM跑来找我，让我导出一部分数据。之前做导出的功能，基本上都是依靠代码的方式，如果针对这种临时性需求，如果还要临时写代码，加上自测，一天的时间就这样没了。\n\n#### 执行\n\n```bash\n$ mysql -uroot -proot -e 'select * from test' > test.xls\n```\n\n#### 发现问题\n\n本来以为只要这条命令就行，但是发现导出的Excel是乱码，原来是因为配置文件里面，客户端连接的编码方式不是utf8\n\n#### 重试\n\n```bash\n$ mysql -uroot -proot -e 'set names utf8; select * from test' > test.xls\n```\n\n网上找了一下方案，需要使用记事本打开，然后另存为中文的编码方式。\n\n但是我使用Mac打开的时候，没有找到`另存为`选项 - -\n\n![](/uploads/2018/08/WX20180807-121223@2x.png)\n\n#### 解决办法\n\n文件->复制->存储(副本)->纯文本编码:(中文 GB18030)->更改文件拓展名为xls 即可\n\n![](/uploads/2018/08/20180807121627.jpg)\n\n![](/uploads/2018/08/WX20180807-122030@2x.png)","slug":"mysqldump-excel","published":1,"updated":"2022-03-13T01:17:12.517Z","_id":"cl0oi8mgk0045417t5a4329yu","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>有一天PM跑来找我，让我导出一部分数据。之前做导出的功能，基本上都是依靠代码的方式，如果针对这种临时性需求，如果还要临时写代码，加上自测，一天的时间就这样没了。</p>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -proot -e <span class=\"string\">&#x27;select * from test&#x27;</span> &gt; test.xls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h4><p>本来以为只要这条命令就行，但是发现导出的Excel是乱码，原来是因为配置文件里面，客户端连接的编码方式不是utf8</p>\n<h4 id=\"重试\"><a href=\"#重试\" class=\"headerlink\" title=\"重试\"></a>重试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -proot -e <span class=\"string\">&#x27;set names utf8; select * from test&#x27;</span> &gt; test.xls</span><br></pre></td></tr></table></figure>\n\n<p>网上找了一下方案，需要使用记事本打开，然后另存为中文的编码方式。</p>\n<p>但是我使用Mac打开的时候，没有找到<code>另存为</code>选项 - -</p>\n<p><img src=\"/uploads/2018/08/WX20180807-121223@2x.png\"></p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>文件-&gt;复制-&gt;存储(副本)-&gt;纯文本编码:(中文 GB18030)-&gt;更改文件拓展名为xls 即可</p>\n<p><img src=\"/uploads/2018/08/20180807121627.jpg\"></p>\n<p><img src=\"/uploads/2018/08/WX20180807-122030@2x.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>有一天PM跑来找我，让我导出一部分数据。之前做导出的功能，基本上都是依靠代码的方式，如果针对这种临时性需求，如果还要临时写代码，加上自测，一天的时间就这样没了。</p>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -proot -e <span class=\"string\">&#x27;select * from test&#x27;</span> &gt; test.xls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h4><p>本来以为只要这条命令就行，但是发现导出的Excel是乱码，原来是因为配置文件里面，客户端连接的编码方式不是utf8</p>\n<h4 id=\"重试\"><a href=\"#重试\" class=\"headerlink\" title=\"重试\"></a>重试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -proot -e <span class=\"string\">&#x27;set names utf8; select * from test&#x27;</span> &gt; test.xls</span><br></pre></td></tr></table></figure>\n\n<p>网上找了一下方案，需要使用记事本打开，然后另存为中文的编码方式。</p>\n<p>但是我使用Mac打开的时候，没有找到<code>另存为</code>选项 - -</p>\n<p><img src=\"/uploads/2018/08/WX20180807-121223@2x.png\"></p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>文件-&gt;复制-&gt;存储(副本)-&gt;纯文本编码:(中文 GB18030)-&gt;更改文件拓展名为xls 即可</p>\n<p><img src=\"/uploads/2018/08/20180807121627.jpg\"></p>\n<p><img src=\"/uploads/2018/08/WX20180807-122030@2x.png\"></p>\n"},{"title":"使用Nginx实现流量限流","id":"214","comments":0,"date":"2018-01-25T15:47:21.000Z","_content":"\nNginx是高性能的http服务器，同时也可以作为一个反向代理的服务器，甚至还可以作为一个IMAP/pop3/SMTP服务器。Nginx除了负责请求的负载均衡和分发等工作外，自带的限流模块也可以帮助运维人员限制流量的速率。\n\n#### 更改配置\n\n开启Nginx的限流功能\n\n```nginx\nhttp {\n    #定义每个IP的session空间大小\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    #与limit_conn_zone类似，定义每个允许发起的请求速率\n    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;\n    #定义每个IP发起的并发连接数\n    limit_conn one 10;\n    #缓存还没来得及处理的请求\n    limit_req zone=req_one burst=100;\n\n    #rewrite_log on;\n    #error_log /var/log/nginxrewrite.log notice;\n        client_body_buffer_size 256M;\n        include       mime.types;\n        default_type  application/octet-stream;\n\n        log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n        sendfile        on;\n\n        keepalive_timeout  65;\n        include servers/*.conf;\n}\n```\n\n#### 进行验证\n\n我们使用Linux或者mac自带的`ab`命令进行验证，并且实时查看access.log。在Nginx配置文件中，我们设置的请求速率是每秒1个请求，那我们则需要设置每秒超多1个请求才行\n\n```bash\n$ ab -n 20 http://sdeno-api/info/php\n```\n\n![](/uploads/2018/01/nginx_limit_request00.png)\n\n从截图的日志中，我们可以看出Nginx限流模块确实可以限制请求速率。\n\n#### 其他\n\n由于nginx的版本问题，旧版本会limit\\_conn\\_zone->limit\\_zone","source":"_posts/nginx-limit-rate.md","raw":"---\ntitle: 使用Nginx实现流量限流\ntags:\n  - http\nid: '214'\ncategories:\n  - - Nginx\ncomments: false\ndate: 2018-01-25 23:47:21\n---\n\nNginx是高性能的http服务器，同时也可以作为一个反向代理的服务器，甚至还可以作为一个IMAP/pop3/SMTP服务器。Nginx除了负责请求的负载均衡和分发等工作外，自带的限流模块也可以帮助运维人员限制流量的速率。\n\n#### 更改配置\n\n开启Nginx的限流功能\n\n```nginx\nhttp {\n    #定义每个IP的session空间大小\n    limit_conn_zone $binary_remote_addr zone=one:20m;\n    #与limit_conn_zone类似，定义每个允许发起的请求速率\n    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;\n    #定义每个IP发起的并发连接数\n    limit_conn one 10;\n    #缓存还没来得及处理的请求\n    limit_req zone=req_one burst=100;\n\n    #rewrite_log on;\n    #error_log /var/log/nginxrewrite.log notice;\n        client_body_buffer_size 256M;\n        include       mime.types;\n        default_type  application/octet-stream;\n\n        log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$request_filename\"';\n        sendfile        on;\n\n        keepalive_timeout  65;\n        include servers/*.conf;\n}\n```\n\n#### 进行验证\n\n我们使用Linux或者mac自带的`ab`命令进行验证，并且实时查看access.log。在Nginx配置文件中，我们设置的请求速率是每秒1个请求，那我们则需要设置每秒超多1个请求才行\n\n```bash\n$ ab -n 20 http://sdeno-api/info/php\n```\n\n![](/uploads/2018/01/nginx_limit_request00.png)\n\n从截图的日志中，我们可以看出Nginx限流模块确实可以限制请求速率。\n\n#### 其他\n\n由于nginx的版本问题，旧版本会limit\\_conn\\_zone->limit\\_zone","slug":"nginx-limit-rate","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mgm0048417t8f6wfe0c","layout":"post","photos":[],"link":"","content":"<p>Nginx是高性能的http服务器，同时也可以作为一个反向代理的服务器，甚至还可以作为一个IMAP&#x2F;pop3&#x2F;SMTP服务器。Nginx除了负责请求的负载均衡和分发等工作外，自带的限流模块也可以帮助运维人员限制流量的速率。</p>\n<h4 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h4><p>开启Nginx的限流功能</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#定义每个IP的session空间大小</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"comment\">#与limit_conn_zone类似，定义每个允许发起的请求速率</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_one:<span class=\"number\">20m</span> rate=1r/s;</span><br><span class=\"line\">    <span class=\"comment\">#定义每个IP发起的并发连接数</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">#缓存还没来得及处理的请求</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_one burst=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#rewrite_log on;</span></span><br><span class=\"line\">    <span class=\"comment\">#error_log /var/log/nginxrewrite.log notice;</span></span><br><span class=\"line\">        <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">        <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进行验证\"><a href=\"#进行验证\" class=\"headerlink\" title=\"进行验证\"></a>进行验证</h4><p>我们使用Linux或者mac自带的<code>ab</code>命令进行验证，并且实时查看access.log。在Nginx配置文件中，我们设置的请求速率是每秒1个请求，那我们则需要设置每秒超多1个请求才行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n 20 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/nginx_limit_request00.png\"></p>\n<p>从截图的日志中，我们可以看出Nginx限流模块确实可以限制请求速率。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>由于nginx的版本问题，旧版本会limit_conn_zone-&gt;limit_zone</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nginx是高性能的http服务器，同时也可以作为一个反向代理的服务器，甚至还可以作为一个IMAP&#x2F;pop3&#x2F;SMTP服务器。Nginx除了负责请求的负载均衡和分发等工作外，自带的限流模块也可以帮助运维人员限制流量的速率。</p>\n<h4 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h4><p>开启Nginx的限流功能</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#定义每个IP的session空间大小</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_conn_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=one:<span class=\"number\">20m</span>;</span><br><span class=\"line\">    <span class=\"comment\">#与limit_conn_zone类似，定义每个允许发起的请求速率</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=req_one:<span class=\"number\">20m</span> rate=1r/s;</span><br><span class=\"line\">    <span class=\"comment\">#定义每个IP发起的并发连接数</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> one <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">#缓存还没来得及处理的请求</span></span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_one burst=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#rewrite_log on;</span></span><br><span class=\"line\">    <span class=\"comment\">#error_log /var/log/nginxrewrite.log notice;</span></span><br><span class=\"line\">        <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">256M</span>;</span><br><span class=\"line\">        <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; &quot;<span class=\"variable\">$http_x_forwarded_for</span>&quot; &quot;<span class=\"variable\">$request_filename</span>&quot;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"attribute\">include</span> servers/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进行验证\"><a href=\"#进行验证\" class=\"headerlink\" title=\"进行验证\"></a>进行验证</h4><p>我们使用Linux或者mac自带的<code>ab</code>命令进行验证，并且实时查看access.log。在Nginx配置文件中，我们设置的请求速率是每秒1个请求，那我们则需要设置每秒超多1个请求才行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n 20 http://sdeno-api/info/php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/01/nginx_limit_request00.png\"></p>\n<p>从截图的日志中，我们可以看出Nginx限流模块确实可以限制请求速率。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>由于nginx的版本问题，旧版本会limit_conn_zone-&gt;limit_zone</p>\n"},{"title":"Nginx配置tcp代理","id":"176","comments":0,"date":"2017-09-08T06:19:04.000Z","_content":"\nnginx从`1.9.0`开始，支持动态拓展，并且新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。\n<!-- more -->\n## 用法\n\nstream模块用法和http模块差不多，关键的是语法几乎一致。熟悉http模块配置语法的上手更快，以下是一个配置了tcp负载均衡的例子, 有 server，upstream块，而且还有server，hash， listen， proxy\\_pass等指令，如果不看最外层的stream关键字，还以为是http模块呢。\n\n```nginx\n\nuser nginx;\nworker_processes auto;\nstream {\n    upstream sphinx {\n    server 127.0.0.1:9312;\n}\nserver {\n   listen 9311;\n   proxy_pass sphinx; # 把9311端口监听的数据转发到9312\n }\n}\n```","source":"_posts/nginx-tcp-proxy.md","raw":"---\ntitle: Nginx配置tcp代理\ntags:\n  - nginx\n  - tcp\nid: '176'\ncategories:\n  - - Linux\n  - - Nginx\ncomments: false\ndate: 2017-09-08 14:19:04\n---\n\nnginx从`1.9.0`开始，支持动态拓展，并且新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。\n<!-- more -->\n## 用法\n\nstream模块用法和http模块差不多，关键的是语法几乎一致。熟悉http模块配置语法的上手更快，以下是一个配置了tcp负载均衡的例子, 有 server，upstream块，而且还有server，hash， listen， proxy\\_pass等指令，如果不看最外层的stream关键字，还以为是http模块呢。\n\n```nginx\n\nuser nginx;\nworker_processes auto;\nstream {\n    upstream sphinx {\n    server 127.0.0.1:9312;\n}\nserver {\n   listen 9311;\n   proxy_pass sphinx; # 把9311端口监听的数据转发到9312\n }\n}\n```","slug":"nginx-tcp-proxy","published":1,"updated":"2022-03-12T23:52:58.722Z","layout":"post","photos":[],"link":"","_id":"cl0oi8mgo004d417tgkni3o4p","content":"<p>nginx从<code>1.9.0</code>开始，支持动态拓展，并且新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。</p>\n<span id=\"more\"></span>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>stream模块用法和http模块差不多，关键的是语法几乎一致。熟悉http模块配置语法的上手更快，以下是一个配置了tcp负载均衡的例子, 有 server，upstream块，而且还有server，hash， listen， proxy_pass等指令，如果不看最外层的stream关键字，还以为是http模块呢。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">user</span> nginx;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> auto;</span><br><span class=\"line\"><span class=\"section\">stream</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">upstream</span> sphinx &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:9312</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span> <span class=\"number\">9311</span>;</span><br><span class=\"line\">   <span class=\"attribute\">proxy_pass</span> sphinx; <span class=\"comment\"># 把9311端口监听的数据转发到9312</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>nginx从<code>1.9.0</code>开始，支持动态拓展，并且新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。</p>","more":"<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>stream模块用法和http模块差不多，关键的是语法几乎一致。熟悉http模块配置语法的上手更快，以下是一个配置了tcp负载均衡的例子, 有 server，upstream块，而且还有server，hash， listen， proxy_pass等指令，如果不看最外层的stream关键字，还以为是http模块呢。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">user</span> nginx;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> auto;</span><br><span class=\"line\"><span class=\"section\">stream</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">upstream</span> sphinx &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:9312</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span> <span class=\"number\">9311</span>;</span><br><span class=\"line\">   <span class=\"attribute\">proxy_pass</span> sphinx; <span class=\"comment\"># 把9311端口监听的数据转发到9312</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"NodeJs Error: Can''t set headers after they are sent.怎么解决？","id":"129","date":"2017-08-24T12:04:34.000Z","_content":"\n从字面的意思来说：不能发送header，因为已经发送过一次了。\n\n我的程序之所以出现这种情况，是因为多次使用`res.sent()`\n\n原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 `res.writeHead()` 或 `res.write()` 或 `res.end()`），你再尝试通过 `res.setHeader()` 或 `res.writeHead()` 来设置响应头时（有些方法比如 `res.redirect()` 会调用 `res.writeHead()`），就会报这个错误。\n\n解决办法：在调用函数后面加上`return;` 终止，这样就搞定了。","source":"_posts/nodejs-error-cant-set-headers-after-they-are-sent.md","raw":"---\ntitle: 'NodeJs Error: Can''''t set headers after they are sent.怎么解决？'\ntags: []\nid: '129'\ncategories:\n  - - Nodejs\ndate: 2017-08-24 20:04:34\n---\n\n从字面的意思来说：不能发送header，因为已经发送过一次了。\n\n我的程序之所以出现这种情况，是因为多次使用`res.sent()`\n\n原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 `res.writeHead()` 或 `res.write()` 或 `res.end()`），你再尝试通过 `res.setHeader()` 或 `res.writeHead()` 来设置响应头时（有些方法比如 `res.redirect()` 会调用 `res.writeHead()`），就会报这个错误。\n\n解决办法：在调用函数后面加上`return;` 终止，这样就搞定了。","slug":"nodejs-error-cant-set-headers-after-they-are-sent","published":1,"updated":"2022-03-12T23:52:58.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mgq004g417t8aevg5s1","content":"<p>从字面的意思来说：不能发送header，因为已经发送过一次了。</p>\n<p>我的程序之所以出现这种情况，是因为多次使用<code>res.sent()</code></p>\n<p>原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 <code>res.writeHead()</code> 或 <code>res.write()</code> 或 <code>res.end()</code>），你再尝试通过 <code>res.setHeader()</code> 或 <code>res.writeHead()</code> 来设置响应头时（有些方法比如 <code>res.redirect()</code> 会调用 <code>res.writeHead()</code>），就会报这个错误。</p>\n<p>解决办法：在调用函数后面加上<code>return;</code> 终止，这样就搞定了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从字面的意思来说：不能发送header，因为已经发送过一次了。</p>\n<p>我的程序之所以出现这种情况，是因为多次使用<code>res.sent()</code></p>\n<p>原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 <code>res.writeHead()</code> 或 <code>res.write()</code> 或 <code>res.end()</code>），你再尝试通过 <code>res.setHeader()</code> 或 <code>res.writeHead()</code> 来设置响应头时（有些方法比如 <code>res.redirect()</code> 会调用 <code>res.writeHead()</code>），就会报这个错误。</p>\n<p>解决办法：在调用函数后面加上<code>return;</code> 终止，这样就搞定了。</p>\n"},{"title":"NodeJs 多语言包","id":"127","date":"2017-08-24T12:03:23.000Z","_content":"\n公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese/English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在[Github](https://github.com)找了找资源，废了九牛二虎之力终于找到了。\n<!-- more -->\n#### 1) 安装语言包langs\n\n命令和安装express差不多：\n\n```bash\n$ npm install langs --save\n```\n\n#### 2) 引入拓展\n\n```bash\nvar langs = require('langs');\n```\n\n#### 3) 获取url参数，根据参数判断语言类别\n\n```bash\nexports.index = function (req, res, next) { \n    var query = req.query;\n    var lang = query.lang;\n    var user_id = query.user_id;\n    var token = query.token;\n    if (lang == 'chinese') {\n        var lang = langs.where(\"name\", \"Chinese\");\n    } else {\n        var lang = langs.where(\"name\", \"English\");\n    }\n    res.render('index', {json_data});\n}\n```\n\n#### 4) 具体语言配置在 node\\_modules/langs/data.json 中配置\n\n#### 5) 拓展位置[nodejs-langs](https://github.com/adlawson/nodejs-langs)","source":"_posts/nodejs-lang.md","raw":"---\ntitle: NodeJs 多语言包\ntags: []\nid: '127'\ncategories:\n  - - Nodejs\ndate: 2017-08-24 20:03:23\n---\n\n公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese/English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在[Github](https://github.com)找了找资源，废了九牛二虎之力终于找到了。\n<!-- more -->\n#### 1) 安装语言包langs\n\n命令和安装express差不多：\n\n```bash\n$ npm install langs --save\n```\n\n#### 2) 引入拓展\n\n```bash\nvar langs = require('langs');\n```\n\n#### 3) 获取url参数，根据参数判断语言类别\n\n```bash\nexports.index = function (req, res, next) { \n    var query = req.query;\n    var lang = query.lang;\n    var user_id = query.user_id;\n    var token = query.token;\n    if (lang == 'chinese') {\n        var lang = langs.where(\"name\", \"Chinese\");\n    } else {\n        var lang = langs.where(\"name\", \"English\");\n    }\n    res.render('index', {json_data});\n}\n```\n\n#### 4) 具体语言配置在 node\\_modules/langs/data.json 中配置\n\n#### 5) 拓展位置[nodejs-langs](https://github.com/adlawson/nodejs-langs)","slug":"nodejs-lang","published":1,"updated":"2022-03-12T23:52:58.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mgt004l417t1oyub1jl","content":"<p>公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese&#x2F;English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在<a href=\"https://github.com/\">Github</a>找了找资源，废了九牛二虎之力终于找到了。</p>\n<span id=\"more\"></span>\n<h4 id=\"1-安装语言包langs\"><a href=\"#1-安装语言包langs\" class=\"headerlink\" title=\"1) 安装语言包langs\"></a>1) 安装语言包langs</h4><p>命令和安装express差不多：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install langs --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-引入拓展\"><a href=\"#2-引入拓展\" class=\"headerlink\" title=\"2) 引入拓展\"></a>2) 引入拓展</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var langs = require(<span class=\"string\">&#x27;langs&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-获取url参数，根据参数判断语言类别\"><a href=\"#3-获取url参数，根据参数判断语言类别\" class=\"headerlink\" title=\"3) 获取url参数，根据参数判断语言类别\"></a>3) 获取url参数，根据参数判断语言类别</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.index = <span class=\"keyword\">function</span> (req, res, next) &#123; </span><br><span class=\"line\">    var query = req.query;</span><br><span class=\"line\">    var lang = query.lang;</span><br><span class=\"line\">    var user_id = query.user_id;</span><br><span class=\"line\">    var token = query.token;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lang == <span class=\"string\">&#x27;chinese&#x27;</span>) &#123;</span><br><span class=\"line\">        var lang = langs.where(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Chinese&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        var lang = langs.where(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;English&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.render(<span class=\"string\">&#x27;index&#x27;</span>, &#123;json_data&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-具体语言配置在-node-modules-x2F-langs-x2F-data-json-中配置\"><a href=\"#4-具体语言配置在-node-modules-x2F-langs-x2F-data-json-中配置\" class=\"headerlink\" title=\"4) 具体语言配置在 node_modules&#x2F;langs&#x2F;data.json 中配置\"></a>4) 具体语言配置在 node_modules&#x2F;langs&#x2F;data.json 中配置</h4><h4 id=\"5-拓展位置nodejs-langs\"><a href=\"#5-拓展位置nodejs-langs\" class=\"headerlink\" title=\"5) 拓展位置nodejs-langs\"></a>5) 拓展位置<a href=\"https://github.com/adlawson/nodejs-langs\">nodejs-langs</a></h4>","site":{"data":{}},"excerpt":"<p>公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese&#x2F;English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在<a href=\"https://github.com/\">Github</a>找了找资源，废了九牛二虎之力终于找到了。</p>","more":"<h4 id=\"1-安装语言包langs\"><a href=\"#1-安装语言包langs\" class=\"headerlink\" title=\"1) 安装语言包langs\"></a>1) 安装语言包langs</h4><p>命令和安装express差不多：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install langs --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-引入拓展\"><a href=\"#2-引入拓展\" class=\"headerlink\" title=\"2) 引入拓展\"></a>2) 引入拓展</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var langs = require(<span class=\"string\">&#x27;langs&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-获取url参数，根据参数判断语言类别\"><a href=\"#3-获取url参数，根据参数判断语言类别\" class=\"headerlink\" title=\"3) 获取url参数，根据参数判断语言类别\"></a>3) 获取url参数，根据参数判断语言类别</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.index = <span class=\"keyword\">function</span> (req, res, next) &#123; </span><br><span class=\"line\">    var query = req.query;</span><br><span class=\"line\">    var lang = query.lang;</span><br><span class=\"line\">    var user_id = query.user_id;</span><br><span class=\"line\">    var token = query.token;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lang == <span class=\"string\">&#x27;chinese&#x27;</span>) &#123;</span><br><span class=\"line\">        var lang = langs.where(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Chinese&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        var lang = langs.where(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;English&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.render(<span class=\"string\">&#x27;index&#x27;</span>, &#123;json_data&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-具体语言配置在-node-modules-x2F-langs-x2F-data-json-中配置\"><a href=\"#4-具体语言配置在-node-modules-x2F-langs-x2F-data-json-中配置\" class=\"headerlink\" title=\"4) 具体语言配置在 node_modules&#x2F;langs&#x2F;data.json 中配置\"></a>4) 具体语言配置在 node_modules&#x2F;langs&#x2F;data.json 中配置</h4><h4 id=\"5-拓展位置nodejs-langs\"><a href=\"#5-拓展位置nodejs-langs\" class=\"headerlink\" title=\"5) 拓展位置nodejs-langs\"></a>5) 拓展位置<a href=\"https://github.com/adlawson/nodejs-langs\">nodejs-langs</a></h4>"},{"title":"Nodejs 使用pm2实现开机自启","id":"128","date":"2017-08-24T12:03:56.000Z","_content":"\n公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 `reboot` 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 `shell` 太渣渣，搞不定。所以在社区找到了`pm2`，可以把`nodejs`加到自启服务中。\n<!-- more -->\n#### pm2有一些优势:\n\n> *   自带负载均衡功能的node应用进程管理器\n> *   可以监控应用CPU和内存情况\n> *   操作简单\n> *   非常适合IaaS结构\n\n#### pm2也有劣势:\n\n> *   不适合PaaS结构\n\n#### 拓展:\n\n> *   SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务\n> *   IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等\n> *   PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等 详细了解参见[云服务模式：SaaS、PaaS和IaaS，哪一种适合你？](http://cloud.51cto.com/art/201107/278903.htm)\n\n#### 1、全局安装pm2\n\n```bash\n$ npm install pm2 -g\n```\n\n#### 2、找到项目的目录，并使用pm2启动node服务\n\n```bash\n$ cd /usr/share/nginx/wechat-iot\n$ pm2 start app.js\n[PM2] Starting app.js in fork_mode (1 instance)\n[PM2] Done.\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤\n│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘\n Use `pm2 show <idname>` to get more details about an app\n```\n\n#### 3、把node服务加到进程\n\n```bash\n$ pm2 startup centos #pm2 startup ubuntu\n$ pm2 save \n```\n\n#### 其他命令\n\n```bash\n$ pm2 stop app.js #停止node服务\n$ pm2 restart app.js #重启node服务\n$ pm2 delete app.js #在进程中删除\n$ pm2 status #查看状态\n$ pm2 monit #查看占用的CPU和内存\n```","source":"_posts/nodejs-pm2.md","raw":"---\ntitle: Nodejs 使用pm2实现开机自启\ntags: []\nid: '128'\ncategories:\n  - - Linux\n  - - Nodejs\ndate: 2017-08-24 20:03:56\n---\n\n公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 `reboot` 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 `shell` 太渣渣，搞不定。所以在社区找到了`pm2`，可以把`nodejs`加到自启服务中。\n<!-- more -->\n#### pm2有一些优势:\n\n> *   自带负载均衡功能的node应用进程管理器\n> *   可以监控应用CPU和内存情况\n> *   操作简单\n> *   非常适合IaaS结构\n\n#### pm2也有劣势:\n\n> *   不适合PaaS结构\n\n#### 拓展:\n\n> *   SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务\n> *   IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等\n> *   PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等 详细了解参见[云服务模式：SaaS、PaaS和IaaS，哪一种适合你？](http://cloud.51cto.com/art/201107/278903.htm)\n\n#### 1、全局安装pm2\n\n```bash\n$ npm install pm2 -g\n```\n\n#### 2、找到项目的目录，并使用pm2启动node服务\n\n```bash\n$ cd /usr/share/nginx/wechat-iot\n$ pm2 start app.js\n[PM2] Starting app.js in fork_mode (1 instance)\n[PM2] Done.\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤\n│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘\n Use `pm2 show <idname>` to get more details about an app\n```\n\n#### 3、把node服务加到进程\n\n```bash\n$ pm2 startup centos #pm2 startup ubuntu\n$ pm2 save \n```\n\n#### 其他命令\n\n```bash\n$ pm2 stop app.js #停止node服务\n$ pm2 restart app.js #重启node服务\n$ pm2 delete app.js #在进程中删除\n$ pm2 status #查看状态\n$ pm2 monit #查看占用的CPU和内存\n```","slug":"nodejs-pm2","published":1,"updated":"2022-03-12T23:52:58.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mgu004o417tg8lv3gxz","content":"<p>公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 <code>reboot</code> 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 <code>shell</code> 太渣渣，搞不定。所以在社区找到了<code>pm2</code>，可以把<code>nodejs</code>加到自启服务中。</p>\n<span id=\"more\"></span>\n<h4 id=\"pm2有一些优势\"><a href=\"#pm2有一些优势\" class=\"headerlink\" title=\"pm2有一些优势:\"></a>pm2有一些优势:</h4><blockquote>\n<ul>\n<li>自带负载均衡功能的node应用进程管理器</li>\n<li>可以监控应用CPU和内存情况</li>\n<li>操作简单</li>\n<li>非常适合IaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"pm2也有劣势\"><a href=\"#pm2也有劣势\" class=\"headerlink\" title=\"pm2也有劣势:\"></a>pm2也有劣势:</h4><blockquote>\n<ul>\n<li>不适合PaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h4><blockquote>\n<ul>\n<li>SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务</li>\n<li>IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等</li>\n<li>PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等 详细了解参见<a href=\"http://cloud.51cto.com/art/201107/278903.htm\">云服务模式：SaaS、PaaS和IaaS，哪一种适合你？</a></li>\n</ul>\n</blockquote>\n<h4 id=\"1、全局安装pm2\"><a href=\"#1、全局安装pm2\" class=\"headerlink\" title=\"1、全局安装pm2\"></a>1、全局安装pm2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pm2 -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、找到项目的目录，并使用pm2启动node服务\"><a href=\"#2、找到项目的目录，并使用pm2启动node服务\" class=\"headerlink\" title=\"2、找到项目的目录，并使用pm2启动node服务\"></a>2、找到项目的目录，并使用pm2启动node服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/share/nginx/wechat-iot</span><br><span class=\"line\">$ pm2 start app.js</span><br><span class=\"line\">[PM2] Starting app.js <span class=\"keyword\">in</span> fork_mode (1 instance)</span><br><span class=\"line\">[PM2] Done.</span><br><span class=\"line\">┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐</span><br><span class=\"line\">│ App name │ <span class=\"built_in\">id</span> │ mode │ pid   │ status │ restart │ <span class=\"built_in\">uptime</span> │ memory      │ watching │</span><br><span class=\"line\">├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤</span><br><span class=\"line\">│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │</span><br><span class=\"line\">└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘</span><br><span class=\"line\"> Use `pm2 show &lt;idname&gt;` to get more details about an app</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、把node服务加到进程\"><a href=\"#3、把node服务加到进程\" class=\"headerlink\" title=\"3、把node服务加到进程\"></a>3、把node服务加到进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 startup centos <span class=\"comment\">#pm2 startup ubuntu</span></span><br><span class=\"line\">$ pm2 save </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 stop app.js <span class=\"comment\">#停止node服务</span></span><br><span class=\"line\">$ pm2 restart app.js <span class=\"comment\">#重启node服务</span></span><br><span class=\"line\">$ pm2 delete app.js <span class=\"comment\">#在进程中删除</span></span><br><span class=\"line\">$ pm2 status <span class=\"comment\">#查看状态</span></span><br><span class=\"line\">$ pm2 monit <span class=\"comment\">#查看占用的CPU和内存</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 <code>reboot</code> 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 <code>shell</code> 太渣渣，搞不定。所以在社区找到了<code>pm2</code>，可以把<code>nodejs</code>加到自启服务中。</p>","more":"<h4 id=\"pm2有一些优势\"><a href=\"#pm2有一些优势\" class=\"headerlink\" title=\"pm2有一些优势:\"></a>pm2有一些优势:</h4><blockquote>\n<ul>\n<li>自带负载均衡功能的node应用进程管理器</li>\n<li>可以监控应用CPU和内存情况</li>\n<li>操作简单</li>\n<li>非常适合IaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"pm2也有劣势\"><a href=\"#pm2也有劣势\" class=\"headerlink\" title=\"pm2也有劣势:\"></a>pm2也有劣势:</h4><blockquote>\n<ul>\n<li>不适合PaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h4><blockquote>\n<ul>\n<li>SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务</li>\n<li>IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等</li>\n<li>PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等 详细了解参见<a href=\"http://cloud.51cto.com/art/201107/278903.htm\">云服务模式：SaaS、PaaS和IaaS，哪一种适合你？</a></li>\n</ul>\n</blockquote>\n<h4 id=\"1、全局安装pm2\"><a href=\"#1、全局安装pm2\" class=\"headerlink\" title=\"1、全局安装pm2\"></a>1、全局安装pm2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pm2 -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、找到项目的目录，并使用pm2启动node服务\"><a href=\"#2、找到项目的目录，并使用pm2启动node服务\" class=\"headerlink\" title=\"2、找到项目的目录，并使用pm2启动node服务\"></a>2、找到项目的目录，并使用pm2启动node服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/share/nginx/wechat-iot</span><br><span class=\"line\">$ pm2 start app.js</span><br><span class=\"line\">[PM2] Starting app.js <span class=\"keyword\">in</span> fork_mode (1 instance)</span><br><span class=\"line\">[PM2] Done.</span><br><span class=\"line\">┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐</span><br><span class=\"line\">│ App name │ <span class=\"built_in\">id</span> │ mode │ pid   │ status │ restart │ <span class=\"built_in\">uptime</span> │ memory      │ watching │</span><br><span class=\"line\">├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤</span><br><span class=\"line\">│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │</span><br><span class=\"line\">└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘</span><br><span class=\"line\"> Use `pm2 show &lt;idname&gt;` to get more details about an app</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、把node服务加到进程\"><a href=\"#3、把node服务加到进程\" class=\"headerlink\" title=\"3、把node服务加到进程\"></a>3、把node服务加到进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 startup centos <span class=\"comment\">#pm2 startup ubuntu</span></span><br><span class=\"line\">$ pm2 save </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 stop app.js <span class=\"comment\">#停止node服务</span></span><br><span class=\"line\">$ pm2 restart app.js <span class=\"comment\">#重启node服务</span></span><br><span class=\"line\">$ pm2 delete app.js <span class=\"comment\">#在进程中删除</span></span><br><span class=\"line\">$ pm2 status <span class=\"comment\">#查看状态</span></span><br><span class=\"line\">$ pm2 monit <span class=\"comment\">#查看占用的CPU和内存</span></span><br></pre></td></tr></table></figure>"},{"title":"nohup后面2>&1的理解","id":"701","date":"2019-11-03T10:39:50.000Z","_content":"\n我们在后台运行命令的时候，除了会借助一些后台进程守护工具，也会用到Linux的nohup，比如：`nohup command > /dev/null 2>&1 &`。对于命令的含义，其实大家都知道，无外乎就是`不输出任何的错误信息`。但是对于技术，我更希望自己能够知其然而知其所以然\n\n### 1和2？\n\n首先，先说下数字1和2的含义： `Linux shell中有三种输入输出，分别为标准输入，标准输出，错误输出，分别对应0，1，2`\n\n### 分解命令\n\n其实命令`nohup command > /dev/null 2>&1 &` 应该进行拆分为多个部分\n\n*   nohup\n*   command > /dev/null 2>&1\n*   &\n\n第一部分肯定不用说，就是nohup的用法，第三部分的含义，就是代码后台运行命令，其实也不用说。令人费解的就是第二部分的含义。\n\n开头的时候，我有说过，其实数字是Linux规定的一种输出的信号，在编程语言中，&通常是代表变量的内存地址，所以 2>&1代表了，把`错误输出`写到`标准输出`里面。\n\n### 举个例子\n\n```bash\n$ ll\ntotal 72\n-rw-r--r--  1 sf  staff     36 10 30 11:17 1\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n#### 验证数字1是不是标准输出的意思\n\n```bash\n# shell-demo0\n$ ll ./ 1>output.txt\n$ cat output.txt\ntotal 64\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff      0 10 30 11:48 output.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n```bash\n# shell-demo1\n$ ll mmm 1>output1.txt\nls: mmm: No such file or directory\n$ cat output1.txt\n$\n```\n\n上面的两个例子证明了一个问题\n\n*   shell-demo0在output.txt文件里面的内容，和ll的显示内容一致\n*   shell-demo1中，我查看了一个不存在的文件，但是错误信息没有写入到文件output1.txt，而是输出到了屏幕上\n\n结论：数字1确实是标准输出的含义\n\n#### 验证数字2是不是错误信息的含义\n\n```bash\n#shell-demo2\n$ ll ./ 2>output2.txt\ntotal 72\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff    443 10 30 11:48 output.txt\n-rw-r--r--  1 sf  staff      0 10 30 11:51 output1.txt\n-rw-r--r--  1 sf  staff      0 10 30 11:56 output2.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n$ cat output2.txt\n$ \n```\n\n```bash\n#shell-demo3\n$ ll mmm 2>output3.txt\n$ cat output3.txt\nls: mmm: No such file or directory\n```\n\n上面的两个例子证明了一个问题\n\n*   shell-demo2在使用数字2的时候，当前目录下的文件信息在屏幕输出，没有写入到文件output2.txt\n*   shell-demo3中，错误信息输出到了output3.txt\n\n结论：数字2确实是错误输出的含义\n\n#### 2>1和2>&1\n\n接下来，我们对比下2>1和2>&1的区别\n\n```bash\n#shell-demo4\n$ ll ./ mm >output4.txt 2>1\n$ cat output4.txt\n./:\ntotal 72\n-rw-r--r--  1 sf  staff     34 10 30 13:33 1\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff      0 10 30 13:33 output4.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n```bash\n#shell-demo5\n$ ll ./ mm >output5.txt 2>&1\n$ cat output5.txt\nls: mm: No such file or directory\n./:\ntotal 88\n-rw-r--r--  1 sf  staff     34 10 30 13:33 1\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff    527 10 30 13:34 output4.txt\n-rw-r--r--  1 sf  staff     34 10 30 13:34 output5.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n对比应该比较明显了吧。\n\n`如果是使用2>1，那么代表错误信息会写入到标准信息里面，但是会被标准信息所覆盖`\n\n`如果是使用2>&1，那么代表错误信息会写入到标准信息的内存地址里，然后再和标准信息一起写到输出文件里面`\n\n本文链接：[https://feilong.tech/2019/11/03/nohup/](https://feilong.tech/2019/11/03/nohup/)","source":"_posts/nohup.md","raw":"---\ntitle: nohup后面2>&1的理解\ntags:\n  - Linux\nid: '701'\ncategories:\n  - - Linux\ndate: 2019-11-03 18:39:50\n---\n\n我们在后台运行命令的时候，除了会借助一些后台进程守护工具，也会用到Linux的nohup，比如：`nohup command > /dev/null 2>&1 &`。对于命令的含义，其实大家都知道，无外乎就是`不输出任何的错误信息`。但是对于技术，我更希望自己能够知其然而知其所以然\n\n### 1和2？\n\n首先，先说下数字1和2的含义： `Linux shell中有三种输入输出，分别为标准输入，标准输出，错误输出，分别对应0，1，2`\n\n### 分解命令\n\n其实命令`nohup command > /dev/null 2>&1 &` 应该进行拆分为多个部分\n\n*   nohup\n*   command > /dev/null 2>&1\n*   &\n\n第一部分肯定不用说，就是nohup的用法，第三部分的含义，就是代码后台运行命令，其实也不用说。令人费解的就是第二部分的含义。\n\n开头的时候，我有说过，其实数字是Linux规定的一种输出的信号，在编程语言中，&通常是代表变量的内存地址，所以 2>&1代表了，把`错误输出`写到`标准输出`里面。\n\n### 举个例子\n\n```bash\n$ ll\ntotal 72\n-rw-r--r--  1 sf  staff     36 10 30 11:17 1\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n#### 验证数字1是不是标准输出的意思\n\n```bash\n# shell-demo0\n$ ll ./ 1>output.txt\n$ cat output.txt\ntotal 64\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff      0 10 30 11:48 output.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n```bash\n# shell-demo1\n$ ll mmm 1>output1.txt\nls: mmm: No such file or directory\n$ cat output1.txt\n$\n```\n\n上面的两个例子证明了一个问题\n\n*   shell-demo0在output.txt文件里面的内容，和ll的显示内容一致\n*   shell-demo1中，我查看了一个不存在的文件，但是错误信息没有写入到文件output1.txt，而是输出到了屏幕上\n\n结论：数字1确实是标准输出的含义\n\n#### 验证数字2是不是错误信息的含义\n\n```bash\n#shell-demo2\n$ ll ./ 2>output2.txt\ntotal 72\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff    443 10 30 11:48 output.txt\n-rw-r--r--  1 sf  staff      0 10 30 11:51 output1.txt\n-rw-r--r--  1 sf  staff      0 10 30 11:56 output2.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n$ cat output2.txt\n$ \n```\n\n```bash\n#shell-demo3\n$ ll mmm 2>output3.txt\n$ cat output3.txt\nls: mmm: No such file or directory\n```\n\n上面的两个例子证明了一个问题\n\n*   shell-demo2在使用数字2的时候，当前目录下的文件信息在屏幕输出，没有写入到文件output2.txt\n*   shell-demo3中，错误信息输出到了output3.txt\n\n结论：数字2确实是错误输出的含义\n\n#### 2>1和2>&1\n\n接下来，我们对比下2>1和2>&1的区别\n\n```bash\n#shell-demo4\n$ ll ./ mm >output4.txt 2>1\n$ cat output4.txt\n./:\ntotal 72\n-rw-r--r--  1 sf  staff     34 10 30 13:33 1\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff      0 10 30 13:33 output4.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n```bash\n#shell-demo5\n$ ll ./ mm >output5.txt 2>&1\n$ cat output5.txt\nls: mm: No such file or directory\n./:\ntotal 88\n-rw-r--r--  1 sf  staff     34 10 30 13:33 1\n-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt\ndrwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug\n-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp\n-rw-------  1 sf  staff      0 10 30 11:11 nohup.out\n-rw-r--r--  1 sf  staff    527 10 30 13:34 output4.txt\n-rw-r--r--  1 sf  staff     34 10 30 13:34 output5.txt\n-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest\n-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp\n-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt\n```\n\n对比应该比较明显了吧。\n\n`如果是使用2>1，那么代表错误信息会写入到标准信息里面，但是会被标准信息所覆盖`\n\n`如果是使用2>&1，那么代表错误信息会写入到标准信息的内存地址里，然后再和标准信息一起写到输出文件里面`\n\n本文链接：[https://feilong.tech/2019/11/03/nohup/](https://feilong.tech/2019/11/03/nohup/)","slug":"nohup","published":1,"updated":"2022-03-12T23:52:58.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mgv004r417tb9l6guu2","content":"<p>我们在后台运行命令的时候，除了会借助一些后台进程守护工具，也会用到Linux的nohup，比如：<code>nohup command &gt; /dev/null 2&gt;&amp;1 &amp;</code>。对于命令的含义，其实大家都知道，无外乎就是<code>不输出任何的错误信息</code>。但是对于技术，我更希望自己能够知其然而知其所以然</p>\n<h3 id=\"1和2？\"><a href=\"#1和2？\" class=\"headerlink\" title=\"1和2？\"></a>1和2？</h3><p>首先，先说下数字1和2的含义： <code>Linux shell中有三种输入输出，分别为标准输入，标准输出，错误输出，分别对应0，1，2</code></p>\n<h3 id=\"分解命令\"><a href=\"#分解命令\" class=\"headerlink\" title=\"分解命令\"></a>分解命令</h3><p>其实命令<code>nohup command &gt; /dev/null 2&gt;&amp;1 &amp;</code> 应该进行拆分为多个部分</p>\n<ul>\n<li>nohup</li>\n<li>command &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</li>\n<li>&amp;</li>\n</ul>\n<p>第一部分肯定不用说，就是nohup的用法，第三部分的含义，就是代码后台运行命令，其实也不用说。令人费解的就是第二部分的含义。</p>\n<p>开头的时候，我有说过，其实数字是Linux规定的一种输出的信号，在编程语言中，&amp;通常是代表变量的内存地址，所以 2&gt;&amp;1代表了，把<code>错误输出</code>写到<code>标准输出</code>里面。</p>\n<h3 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll</span><br><span class=\"line\">total 72</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     36 10 30 11:17 1</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证数字1是不是标准输出的意思\"><a href=\"#验证数字1是不是标准输出的意思\" class=\"headerlink\" title=\"验证数字1是不是标准输出的意思\"></a>验证数字1是不是标准输出的意思</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shell-demo0</span></span><br><span class=\"line\">$ ll ./ 1&gt;output.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output.txt</span><br><span class=\"line\">total 64</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 11:48 output.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shell-demo1</span></span><br><span class=\"line\">$ ll mmm 1&gt;output1.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span>: mmm: No such file or directory</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output1.txt</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n<p>上面的两个例子证明了一个问题</p>\n<ul>\n<li>shell-demo0在output.txt文件里面的内容，和ll的显示内容一致</li>\n<li>shell-demo1中，我查看了一个不存在的文件，但是错误信息没有写入到文件output1.txt，而是输出到了屏幕上</li>\n</ul>\n<p>结论：数字1确实是标准输出的含义</p>\n<h4 id=\"验证数字2是不是错误信息的含义\"><a href=\"#验证数字2是不是错误信息的含义\" class=\"headerlink\" title=\"验证数字2是不是错误信息的含义\"></a>验证数字2是不是错误信息的含义</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo2</span></span><br><span class=\"line\">$ ll ./ 2&gt;output2.txt</span><br><span class=\"line\">total 72</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    443 10 30 11:48 output.txt</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 11:51 output1.txt</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 11:56 output2.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output2.txt</span><br><span class=\"line\">$ </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo3</span></span><br><span class=\"line\">$ ll mmm 2&gt;output3.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output3.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span>: mmm: No such file or directory</span><br></pre></td></tr></table></figure>\n\n<p>上面的两个例子证明了一个问题</p>\n<ul>\n<li>shell-demo2在使用数字2的时候，当前目录下的文件信息在屏幕输出，没有写入到文件output2.txt</li>\n<li>shell-demo3中，错误信息输出到了output3.txt</li>\n</ul>\n<p>结论：数字2确实是错误输出的含义</p>\n<h4 id=\"2-gt-1和2-gt-amp-1\"><a href=\"#2-gt-1和2-gt-amp-1\" class=\"headerlink\" title=\"2&gt;1和2&gt;&amp;1\"></a>2&gt;1和2&gt;&amp;1</h4><p>接下来，我们对比下2&gt;1和2&gt;&amp;1的区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo4</span></span><br><span class=\"line\">$ ll ./ mm &gt;output4.txt 2&gt;1</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output4.txt</span><br><span class=\"line\">./:</span><br><span class=\"line\">total 72</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     34 10 30 13:33 1</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 13:33 output4.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo5</span></span><br><span class=\"line\">$ ll ./ mm &gt;output5.txt 2&gt;&amp;1</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output5.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span>: mm: No such file or directory</span><br><span class=\"line\">./:</span><br><span class=\"line\">total 88</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     34 10 30 13:33 1</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    527 10 30 13:34 output4.txt</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     34 10 30 13:34 output5.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<p>对比应该比较明显了吧。</p>\n<p><code>如果是使用2&gt;1，那么代表错误信息会写入到标准信息里面，但是会被标准信息所覆盖</code></p>\n<p><code>如果是使用2&gt;&amp;1，那么代表错误信息会写入到标准信息的内存地址里，然后再和标准信息一起写到输出文件里面</code></p>\n<p>本文链接：<a href=\"https://feilong.tech/2019/11/03/nohup/\">https://feilong.tech/2019/11/03/nohup/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们在后台运行命令的时候，除了会借助一些后台进程守护工具，也会用到Linux的nohup，比如：<code>nohup command &gt; /dev/null 2&gt;&amp;1 &amp;</code>。对于命令的含义，其实大家都知道，无外乎就是<code>不输出任何的错误信息</code>。但是对于技术，我更希望自己能够知其然而知其所以然</p>\n<h3 id=\"1和2？\"><a href=\"#1和2？\" class=\"headerlink\" title=\"1和2？\"></a>1和2？</h3><p>首先，先说下数字1和2的含义： <code>Linux shell中有三种输入输出，分别为标准输入，标准输出，错误输出，分别对应0，1，2</code></p>\n<h3 id=\"分解命令\"><a href=\"#分解命令\" class=\"headerlink\" title=\"分解命令\"></a>分解命令</h3><p>其实命令<code>nohup command &gt; /dev/null 2&gt;&amp;1 &amp;</code> 应该进行拆分为多个部分</p>\n<ul>\n<li>nohup</li>\n<li>command &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</li>\n<li>&amp;</li>\n</ul>\n<p>第一部分肯定不用说，就是nohup的用法，第三部分的含义，就是代码后台运行命令，其实也不用说。令人费解的就是第二部分的含义。</p>\n<p>开头的时候，我有说过，其实数字是Linux规定的一种输出的信号，在编程语言中，&amp;通常是代表变量的内存地址，所以 2&gt;&amp;1代表了，把<code>错误输出</code>写到<code>标准输出</code>里面。</p>\n<h3 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll</span><br><span class=\"line\">total 72</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     36 10 30 11:17 1</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证数字1是不是标准输出的意思\"><a href=\"#验证数字1是不是标准输出的意思\" class=\"headerlink\" title=\"验证数字1是不是标准输出的意思\"></a>验证数字1是不是标准输出的意思</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shell-demo0</span></span><br><span class=\"line\">$ ll ./ 1&gt;output.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output.txt</span><br><span class=\"line\">total 64</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 11:48 output.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shell-demo1</span></span><br><span class=\"line\">$ ll mmm 1&gt;output1.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span>: mmm: No such file or directory</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output1.txt</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n<p>上面的两个例子证明了一个问题</p>\n<ul>\n<li>shell-demo0在output.txt文件里面的内容，和ll的显示内容一致</li>\n<li>shell-demo1中，我查看了一个不存在的文件，但是错误信息没有写入到文件output1.txt，而是输出到了屏幕上</li>\n</ul>\n<p>结论：数字1确实是标准输出的含义</p>\n<h4 id=\"验证数字2是不是错误信息的含义\"><a href=\"#验证数字2是不是错误信息的含义\" class=\"headerlink\" title=\"验证数字2是不是错误信息的含义\"></a>验证数字2是不是错误信息的含义</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo2</span></span><br><span class=\"line\">$ ll ./ 2&gt;output2.txt</span><br><span class=\"line\">total 72</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    443 10 30 11:48 output.txt</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 11:51 output1.txt</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 11:56 output2.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output2.txt</span><br><span class=\"line\">$ </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo3</span></span><br><span class=\"line\">$ ll mmm 2&gt;output3.txt</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output3.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span>: mmm: No such file or directory</span><br></pre></td></tr></table></figure>\n\n<p>上面的两个例子证明了一个问题</p>\n<ul>\n<li>shell-demo2在使用数字2的时候，当前目录下的文件信息在屏幕输出，没有写入到文件output2.txt</li>\n<li>shell-demo3中，错误信息输出到了output3.txt</li>\n</ul>\n<p>结论：数字2确实是错误输出的含义</p>\n<h4 id=\"2-gt-1和2-gt-amp-1\"><a href=\"#2-gt-1和2-gt-amp-1\" class=\"headerlink\" title=\"2&gt;1和2&gt;&amp;1\"></a>2&gt;1和2&gt;&amp;1</h4><p>接下来，我们对比下2&gt;1和2&gt;&amp;1的区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo4</span></span><br><span class=\"line\">$ ll ./ mm &gt;output4.txt 2&gt;1</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output4.txt</span><br><span class=\"line\">./:</span><br><span class=\"line\">total 72</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     34 10 30 13:33 1</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff      0 10 30 13:33 output4.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#shell-demo5</span></span><br><span class=\"line\">$ ll ./ mm &gt;output5.txt 2&gt;&amp;1</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> output5.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span>: mm: No such file or directory</span><br><span class=\"line\">./:</span><br><span class=\"line\">total 88</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     34 10 30 13:33 1</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt</span><br><span class=\"line\">drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp</span><br><span class=\"line\">-rw-------  1 sf  staff      0 10 30 11:11 nohup.out</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    527 10 30 13:34 output4.txt</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     34 10 30 13:34 output5.txt</span><br><span class=\"line\">-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest</span><br><span class=\"line\">-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp</span><br><span class=\"line\">-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</span><br></pre></td></tr></table></figure>\n\n<p>对比应该比较明显了吧。</p>\n<p><code>如果是使用2&gt;1，那么代表错误信息会写入到标准信息里面，但是会被标准信息所覆盖</code></p>\n<p><code>如果是使用2&gt;&amp;1，那么代表错误信息会写入到标准信息的内存地址里，然后再和标准信息一起写到输出文件里面</code></p>\n<p>本文链接：<a href=\"https://feilong.tech/2019/11/03/nohup/\">https://feilong.tech/2019/11/03/nohup/</a></p>\n"},{"title":"PHP 7 拓展编写--从hello world开始","id":"130","date":"2017-08-24T12:05:09.000Z","_content":"\n本文主要以PHP7为基础，学习从0开始编写PHP7 拓展，拓展的主要功能是通过拓展，实现如下代码的效果\n\n```php\n<?php\nfunction say() {\n    return 'hello world';\n}\necho say(); // hello world\n?>\n```\n<!-- more -->\n##### 在拓展中实现say函数，输出hello world\n\n#### 第一步：生成代码\n\n##### PHP给我们提供了拓展的生成工具，`ext_skel`。这个工具在PHP源码的 `ext/`文件夹下面，而且在ext/文件夹下是各种拓展目录。\n\n```bash\n$ cd php_src/ext/\n$ ext_skel --extname=say\n```\n\n##### `--extname` 参数是设置拓展的名字。执行完这么命令后，`ext`文件夹下就会生成一个say的文件夹\n\n#### 第二步：修改config.m4配置文件\n\n##### config.m4 的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config.m4配置文件\n\n```bash\n$ cd say/\n$ vim config.m4\n```\n\n##### 打开config.m4文件，会有看到文件开头有如下内容\n\n```bash\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(say, for say support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-say             Include say support])\n\ndnl Otherwise use enable:\n\ndnl PHP_ARG_ENABLE(say, whether to enable say support,\ndnl Make sure that the comment is aligned:\ndnl [  --enable-say           Enable say support])\n```\n\n##### 其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP\\_ARG\\_WITH注释内容，否则去掉PHP\\_ARG\\_ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP\\_ARG\\_ENABLE注释内容。去掉后的内容如下：\n\n```bash\n\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(say, for say support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-say             Include say support])\n\ndnl Otherwise use enable:\n\nPHP_ARG_ENABLE(say, whether to enable say support,\nMake sure that the comment is aligned:\n[  --enable-say           Enable say support])\n```\n\n#### 第三步：代码实现\n\n##### 修改say.c代码 ，实现say方法。找到 PHP\\_FUNCTION(confirm\\_say\\_compiled) 方法，在上面增加如下方法：\n\n```bash\nPHP_FUNCTION(say)\n{\n    zend_string *strg;\n    strg = strpprintf(0, \"hello world\");\n    RETURN_STR(strg);\n}\n```\n\n##### 然后找到PHP\\_FE(confirm\\_say\\_compiled, NULL)在上面增加PHP\\_FE(say, NULL) ，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\n\n```bash\nconst zend_function_entry say_functions[] = {\n        PHP_FE(say, NULL)                       /* For testing, remove later. */\n        PHP_FE(confirm_say_compiled,    NULL)           /* For testing, remove later. */\n        PHP_FE_END      /* Must be the last line in say_functions[] */\n};\n```\n\n其实在zend\\_function\\_entry 上面，你会看到`Every user visible function must have an entry in say_functions[]`，意思是说每个用户的函数必须定义在say\\_functions函数里面，否则在PHP使用say函数的时候报出函数未定义的错误`Fatal error: Uncaught Error: Call to undefined function say()`\n\n#### 第四步：编译安装\n\n```bash\n$ phpize\n$ ./configure\n$ make && make install\n```\n\n##### 然后修改php.ini，在配置文件结尾加上如下代码\n\n可以使用`php --ini`查看配置文件的位置\n\n```php\n[say]\nextsion=say.so\n```\n\n##### 然后执行php -m 查看是否已经把say函数加载进来：\n\n```bash\n[PHP Modules]\nCore\nctype\ndate\ndom\nfileinfo\nfilter\ngd\nhash\niconv\njson\nlibxml\npcre\nPDO\npdo_sqlite\nPhar\nposix\nReflection\nsay\nsession\nSimpleXML\nSPL\nsqlite3\nstandard\ntokenizer\nxml\nxmlreader\nxmlwriter\n\n[Zend Modules]\n```\n\n#### 第五步：运行测试\n\n##### 编写PHP脚本，进行测试\n\n```php\n<?php\necho say();\n?>\n```\n\n##### 结果输出：\n\n```bash\n$ php test.php\n$ hello world\n```","source":"_posts/php-7-hello-world.md","raw":"---\ntitle: PHP 7 拓展编写--从hello world开始\ntags: []\nid: '130'\ncategories:\n  - - Linux\n  - - PHP\ndate: 2017-08-24 20:05:09\n---\n\n本文主要以PHP7为基础，学习从0开始编写PHP7 拓展，拓展的主要功能是通过拓展，实现如下代码的效果\n\n```php\n<?php\nfunction say() {\n    return 'hello world';\n}\necho say(); // hello world\n?>\n```\n<!-- more -->\n##### 在拓展中实现say函数，输出hello world\n\n#### 第一步：生成代码\n\n##### PHP给我们提供了拓展的生成工具，`ext_skel`。这个工具在PHP源码的 `ext/`文件夹下面，而且在ext/文件夹下是各种拓展目录。\n\n```bash\n$ cd php_src/ext/\n$ ext_skel --extname=say\n```\n\n##### `--extname` 参数是设置拓展的名字。执行完这么命令后，`ext`文件夹下就会生成一个say的文件夹\n\n#### 第二步：修改config.m4配置文件\n\n##### config.m4 的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config.m4配置文件\n\n```bash\n$ cd say/\n$ vim config.m4\n```\n\n##### 打开config.m4文件，会有看到文件开头有如下内容\n\n```bash\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(say, for say support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-say             Include say support])\n\ndnl Otherwise use enable:\n\ndnl PHP_ARG_ENABLE(say, whether to enable say support,\ndnl Make sure that the comment is aligned:\ndnl [  --enable-say           Enable say support])\n```\n\n##### 其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP\\_ARG\\_WITH注释内容，否则去掉PHP\\_ARG\\_ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP\\_ARG\\_ENABLE注释内容。去掉后的内容如下：\n\n```bash\n\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(say, for say support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-say             Include say support])\n\ndnl Otherwise use enable:\n\nPHP_ARG_ENABLE(say, whether to enable say support,\nMake sure that the comment is aligned:\n[  --enable-say           Enable say support])\n```\n\n#### 第三步：代码实现\n\n##### 修改say.c代码 ，实现say方法。找到 PHP\\_FUNCTION(confirm\\_say\\_compiled) 方法，在上面增加如下方法：\n\n```bash\nPHP_FUNCTION(say)\n{\n    zend_string *strg;\n    strg = strpprintf(0, \"hello world\");\n    RETURN_STR(strg);\n}\n```\n\n##### 然后找到PHP\\_FE(confirm\\_say\\_compiled, NULL)在上面增加PHP\\_FE(say, NULL) ，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\n\n```bash\nconst zend_function_entry say_functions[] = {\n        PHP_FE(say, NULL)                       /* For testing, remove later. */\n        PHP_FE(confirm_say_compiled,    NULL)           /* For testing, remove later. */\n        PHP_FE_END      /* Must be the last line in say_functions[] */\n};\n```\n\n其实在zend\\_function\\_entry 上面，你会看到`Every user visible function must have an entry in say_functions[]`，意思是说每个用户的函数必须定义在say\\_functions函数里面，否则在PHP使用say函数的时候报出函数未定义的错误`Fatal error: Uncaught Error: Call to undefined function say()`\n\n#### 第四步：编译安装\n\n```bash\n$ phpize\n$ ./configure\n$ make && make install\n```\n\n##### 然后修改php.ini，在配置文件结尾加上如下代码\n\n可以使用`php --ini`查看配置文件的位置\n\n```php\n[say]\nextsion=say.so\n```\n\n##### 然后执行php -m 查看是否已经把say函数加载进来：\n\n```bash\n[PHP Modules]\nCore\nctype\ndate\ndom\nfileinfo\nfilter\ngd\nhash\niconv\njson\nlibxml\npcre\nPDO\npdo_sqlite\nPhar\nposix\nReflection\nsay\nsession\nSimpleXML\nSPL\nsqlite3\nstandard\ntokenizer\nxml\nxmlreader\nxmlwriter\n\n[Zend Modules]\n```\n\n#### 第五步：运行测试\n\n##### 编写PHP脚本，进行测试\n\n```php\n<?php\necho say();\n?>\n```\n\n##### 结果输出：\n\n```bash\n$ php test.php\n$ hello world\n```","slug":"php-7-hello-world","published":1,"updated":"2022-03-12T23:52:58.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mgx004u417tgpfmgqgt","content":"<p>本文主要以PHP7为基础，学习从0开始编写PHP7 拓展，拓展的主要功能是通过拓展，实现如下代码的效果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">say</span>(); <span class=\"comment\">// hello world</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h5 id=\"在拓展中实现say函数，输出hello-world\"><a href=\"#在拓展中实现say函数，输出hello-world\" class=\"headerlink\" title=\"在拓展中实现say函数，输出hello world\"></a>在拓展中实现say函数，输出hello world</h5><h4 id=\"第一步：生成代码\"><a href=\"#第一步：生成代码\" class=\"headerlink\" title=\"第一步：生成代码\"></a>第一步：生成代码</h4><h5 id=\"PHP给我们提供了拓展的生成工具，ext-skel。这个工具在PHP源码的-ext-文件夹下面，而且在ext-x2F-文件夹下是各种拓展目录。\"><a href=\"#PHP给我们提供了拓展的生成工具，ext-skel。这个工具在PHP源码的-ext-文件夹下面，而且在ext-x2F-文件夹下是各种拓展目录。\" class=\"headerlink\" title=\"PHP给我们提供了拓展的生成工具，ext_skel。这个工具在PHP源码的 ext/文件夹下面，而且在ext&#x2F;文件夹下是各种拓展目录。\"></a>PHP给我们提供了拓展的生成工具，<code>ext_skel</code>。这个工具在PHP源码的 <code>ext/</code>文件夹下面，而且在ext&#x2F;文件夹下是各种拓展目录。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> php_src/ext/</span><br><span class=\"line\">$ ext_skel --extname=say</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"extname-参数是设置拓展的名字。执行完这么命令后，ext文件夹下就会生成一个say的文件夹\"><a href=\"#extname-参数是设置拓展的名字。执行完这么命令后，ext文件夹下就会生成一个say的文件夹\" class=\"headerlink\" title=\"--extname 参数是设置拓展的名字。执行完这么命令后，ext文件夹下就会生成一个say的文件夹\"></a><code>--extname</code> 参数是设置拓展的名字。执行完这么命令后，<code>ext</code>文件夹下就会生成一个say的文件夹</h5><h4 id=\"第二步：修改config-m4配置文件\"><a href=\"#第二步：修改config-m4配置文件\" class=\"headerlink\" title=\"第二步：修改config.m4配置文件\"></a>第二步：修改config.m4配置文件</h4><h5 id=\"config-m4-的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config-m4配置文件\"><a href=\"#config-m4-的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config-m4配置文件\" class=\"headerlink\" title=\"config.m4 的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config.m4配置文件\"></a>config.m4 的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config.m4配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> say/</span><br><span class=\"line\">$ vim config.m4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打开config-m4文件，会有看到文件开头有如下内容\"><a href=\"#打开config-m4文件，会有看到文件开头有如下内容\" class=\"headerlink\" title=\"打开config.m4文件，会有看到文件开头有如下内容\"></a>打开config.m4文件，会有看到文件开头有如下内容</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnl If your extension references something external, use with:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_WITH(say, <span class=\"keyword\">for</span> say support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --with-say             Include say support])</span><br><span class=\"line\"></span><br><span class=\"line\">dnl Otherwise use <span class=\"built_in\">enable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_ENABLE(say, whether to <span class=\"built_in\">enable</span> say support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --enable-say           Enable say support])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP-ARG-WITH注释内容，否则去掉PHP-ARG-ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP-ARG-ENABLE注释内容。去掉后的内容如下：\"><a href=\"#其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP-ARG-WITH注释内容，否则去掉PHP-ARG-ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP-ARG-ENABLE注释内容。去掉后的内容如下：\" class=\"headerlink\" title=\"其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP_ARG_WITH注释内容，否则去掉PHP_ARG_ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP_ARG_ENABLE注释内容。去掉后的内容如下：\"></a>其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP_ARG_WITH注释内容，否则去掉PHP_ARG_ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP_ARG_ENABLE注释内容。去掉后的内容如下：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">dnl If your extension references something external, use with:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_WITH(say, <span class=\"keyword\">for</span> say support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --with-say             Include say support])</span><br><span class=\"line\"></span><br><span class=\"line\">dnl Otherwise use <span class=\"built_in\">enable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">PHP_ARG_ENABLE(say, whether to <span class=\"built_in\">enable</span> say support,</span><br><span class=\"line\">Make sure that the comment is aligned:</span><br><span class=\"line\">[  --enable-say           Enable say support])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：代码实现\"><a href=\"#第三步：代码实现\" class=\"headerlink\" title=\"第三步：代码实现\"></a>第三步：代码实现</h4><h5 id=\"修改say-c代码-，实现say方法。找到-PHP-FUNCTION-confirm-say-compiled-方法，在上面增加如下方法：\"><a href=\"#修改say-c代码-，实现say方法。找到-PHP-FUNCTION-confirm-say-compiled-方法，在上面增加如下方法：\" class=\"headerlink\" title=\"修改say.c代码 ，实现say方法。找到 PHP_FUNCTION(confirm_say_compiled) 方法，在上面增加如下方法：\"></a>修改say.c代码 ，实现say方法。找到 PHP_FUNCTION(confirm_say_compiled) 方法，在上面增加如下方法：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP_FUNCTION(say)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zend_string *strg;</span><br><span class=\"line\">    strg = strpprintf(0, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    RETURN_STR(strg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后找到PHP-FE-confirm-say-compiled-NULL-在上面增加PHP-FE-say-NULL-，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\"><a href=\"#然后找到PHP-FE-confirm-say-compiled-NULL-在上面增加PHP-FE-say-NULL-，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\" class=\"headerlink\" title=\"然后找到PHP_FE(confirm_say_compiled, NULL)在上面增加PHP_FE(say, NULL) ，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\"></a>然后找到PHP_FE(confirm_say_compiled, NULL)在上面增加PHP_FE(say, NULL) ，如果不加上这个，那么say函数将不能引用，加完后的代码如下：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const zend_function_entry say_functions[] = &#123;</span><br><span class=\"line\">        PHP_FE(say, NULL)                       /* For testing, remove later. */</span><br><span class=\"line\">        PHP_FE(confirm_say_compiled,    NULL)           /* For testing, remove later. */</span><br><span class=\"line\">        PHP_FE_END      /* Must be the last line <span class=\"keyword\">in</span> say_functions[] */</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其实在zend_function_entry 上面，你会看到<code>Every user visible function must have an entry in say_functions[]</code>，意思是说每个用户的函数必须定义在say_functions函数里面，否则在PHP使用say函数的时候报出函数未定义的错误<code>Fatal error: Uncaught Error: Call to undefined function say()</code></p>\n<h4 id=\"第四步：编译安装\"><a href=\"#第四步：编译安装\" class=\"headerlink\" title=\"第四步：编译安装\"></a>第四步：编译安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpize</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后修改php-ini，在配置文件结尾加上如下代码\"><a href=\"#然后修改php-ini，在配置文件结尾加上如下代码\" class=\"headerlink\" title=\"然后修改php.ini，在配置文件结尾加上如下代码\"></a>然后修改php.ini，在配置文件结尾加上如下代码</h5><p>可以使用<code>php --ini</code>查看配置文件的位置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[say]</span><br><span class=\"line\">extsion=say.so</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后执行php-m-查看是否已经把say函数加载进来：\"><a href=\"#然后执行php-m-查看是否已经把say函数加载进来：\" class=\"headerlink\" title=\"然后执行php -m 查看是否已经把say函数加载进来：\"></a>然后执行php -m 查看是否已经把say函数加载进来：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[PHP Modules]</span><br><span class=\"line\">Core</span><br><span class=\"line\">ctype</span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\">dom</span><br><span class=\"line\">fileinfo</span><br><span class=\"line\">filter</span><br><span class=\"line\">gd</span><br><span class=\"line\"><span class=\"built_in\">hash</span></span><br><span class=\"line\">iconv</span><br><span class=\"line\">json</span><br><span class=\"line\">libxml</span><br><span class=\"line\">pcre</span><br><span class=\"line\">PDO</span><br><span class=\"line\">pdo_sqlite</span><br><span class=\"line\">Phar</span><br><span class=\"line\">posix</span><br><span class=\"line\">Reflection</span><br><span class=\"line\">say</span><br><span class=\"line\">session</span><br><span class=\"line\">SimpleXML</span><br><span class=\"line\">SPL</span><br><span class=\"line\">sqlite3</span><br><span class=\"line\">standard</span><br><span class=\"line\">tokenizer</span><br><span class=\"line\">xml</span><br><span class=\"line\">xmlreader</span><br><span class=\"line\">xmlwriter</span><br><span class=\"line\"></span><br><span class=\"line\">[Zend Modules]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第五步：运行测试\"><a href=\"#第五步：运行测试\" class=\"headerlink\" title=\"第五步：运行测试\"></a>第五步：运行测试</h4><h5 id=\"编写PHP脚本，进行测试\"><a href=\"#编写PHP脚本，进行测试\" class=\"headerlink\" title=\"编写PHP脚本，进行测试\"></a>编写PHP脚本，进行测试</h5><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">say</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果输出：\"><a href=\"#结果输出：\" class=\"headerlink\" title=\"结果输出：\"></a>结果输出：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php test.php</span><br><span class=\"line\">$ hello world</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>本文主要以PHP7为基础，学习从0开始编写PHP7 拓展，拓展的主要功能是通过拓展，实现如下代码的效果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">say</span>(); <span class=\"comment\">// hello world</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","more":"<h5 id=\"在拓展中实现say函数，输出hello-world\"><a href=\"#在拓展中实现say函数，输出hello-world\" class=\"headerlink\" title=\"在拓展中实现say函数，输出hello world\"></a>在拓展中实现say函数，输出hello world</h5><h4 id=\"第一步：生成代码\"><a href=\"#第一步：生成代码\" class=\"headerlink\" title=\"第一步：生成代码\"></a>第一步：生成代码</h4><h5 id=\"PHP给我们提供了拓展的生成工具，ext-skel。这个工具在PHP源码的-ext-文件夹下面，而且在ext-x2F-文件夹下是各种拓展目录。\"><a href=\"#PHP给我们提供了拓展的生成工具，ext-skel。这个工具在PHP源码的-ext-文件夹下面，而且在ext-x2F-文件夹下是各种拓展目录。\" class=\"headerlink\" title=\"PHP给我们提供了拓展的生成工具，ext_skel。这个工具在PHP源码的 ext/文件夹下面，而且在ext&#x2F;文件夹下是各种拓展目录。\"></a>PHP给我们提供了拓展的生成工具，<code>ext_skel</code>。这个工具在PHP源码的 <code>ext/</code>文件夹下面，而且在ext&#x2F;文件夹下是各种拓展目录。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> php_src/ext/</span><br><span class=\"line\">$ ext_skel --extname=say</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"extname-参数是设置拓展的名字。执行完这么命令后，ext文件夹下就会生成一个say的文件夹\"><a href=\"#extname-参数是设置拓展的名字。执行完这么命令后，ext文件夹下就会生成一个say的文件夹\" class=\"headerlink\" title=\"--extname 参数是设置拓展的名字。执行完这么命令后，ext文件夹下就会生成一个say的文件夹\"></a><code>--extname</code> 参数是设置拓展的名字。执行完这么命令后，<code>ext</code>文件夹下就会生成一个say的文件夹</h5><h4 id=\"第二步：修改config-m4配置文件\"><a href=\"#第二步：修改config-m4配置文件\" class=\"headerlink\" title=\"第二步：修改config.m4配置文件\"></a>第二步：修改config.m4配置文件</h4><h5 id=\"config-m4-的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config-m4配置文件\"><a href=\"#config-m4-的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config-m4配置文件\" class=\"headerlink\" title=\"config.m4 的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config.m4配置文件\"></a>config.m4 的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config.m4配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> say/</span><br><span class=\"line\">$ vim config.m4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打开config-m4文件，会有看到文件开头有如下内容\"><a href=\"#打开config-m4文件，会有看到文件开头有如下内容\" class=\"headerlink\" title=\"打开config.m4文件，会有看到文件开头有如下内容\"></a>打开config.m4文件，会有看到文件开头有如下内容</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnl If your extension references something external, use with:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_WITH(say, <span class=\"keyword\">for</span> say support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --with-say             Include say support])</span><br><span class=\"line\"></span><br><span class=\"line\">dnl Otherwise use <span class=\"built_in\">enable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_ENABLE(say, whether to <span class=\"built_in\">enable</span> say support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --enable-say           Enable say support])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP-ARG-WITH注释内容，否则去掉PHP-ARG-ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP-ARG-ENABLE注释内容。去掉后的内容如下：\"><a href=\"#其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP-ARG-WITH注释内容，否则去掉PHP-ARG-ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP-ARG-ENABLE注释内容。去掉后的内容如下：\" class=\"headerlink\" title=\"其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP_ARG_WITH注释内容，否则去掉PHP_ARG_ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP_ARG_ENABLE注释内容。去掉后的内容如下：\"></a>其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP_ARG_WITH注释内容，否则去掉PHP_ARG_ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP_ARG_ENABLE注释内容。去掉后的内容如下：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">dnl If your extension references something external, use with:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_WITH(say, <span class=\"keyword\">for</span> say support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --with-say             Include say support])</span><br><span class=\"line\"></span><br><span class=\"line\">dnl Otherwise use <span class=\"built_in\">enable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">PHP_ARG_ENABLE(say, whether to <span class=\"built_in\">enable</span> say support,</span><br><span class=\"line\">Make sure that the comment is aligned:</span><br><span class=\"line\">[  --enable-say           Enable say support])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：代码实现\"><a href=\"#第三步：代码实现\" class=\"headerlink\" title=\"第三步：代码实现\"></a>第三步：代码实现</h4><h5 id=\"修改say-c代码-，实现say方法。找到-PHP-FUNCTION-confirm-say-compiled-方法，在上面增加如下方法：\"><a href=\"#修改say-c代码-，实现say方法。找到-PHP-FUNCTION-confirm-say-compiled-方法，在上面增加如下方法：\" class=\"headerlink\" title=\"修改say.c代码 ，实现say方法。找到 PHP_FUNCTION(confirm_say_compiled) 方法，在上面增加如下方法：\"></a>修改say.c代码 ，实现say方法。找到 PHP_FUNCTION(confirm_say_compiled) 方法，在上面增加如下方法：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP_FUNCTION(say)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zend_string *strg;</span><br><span class=\"line\">    strg = strpprintf(0, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    RETURN_STR(strg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后找到PHP-FE-confirm-say-compiled-NULL-在上面增加PHP-FE-say-NULL-，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\"><a href=\"#然后找到PHP-FE-confirm-say-compiled-NULL-在上面增加PHP-FE-say-NULL-，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\" class=\"headerlink\" title=\"然后找到PHP_FE(confirm_say_compiled, NULL)在上面增加PHP_FE(say, NULL) ，如果不加上这个，那么say函数将不能引用，加完后的代码如下：\"></a>然后找到PHP_FE(confirm_say_compiled, NULL)在上面增加PHP_FE(say, NULL) ，如果不加上这个，那么say函数将不能引用，加完后的代码如下：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const zend_function_entry say_functions[] = &#123;</span><br><span class=\"line\">        PHP_FE(say, NULL)                       /* For testing, remove later. */</span><br><span class=\"line\">        PHP_FE(confirm_say_compiled,    NULL)           /* For testing, remove later. */</span><br><span class=\"line\">        PHP_FE_END      /* Must be the last line <span class=\"keyword\">in</span> say_functions[] */</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其实在zend_function_entry 上面，你会看到<code>Every user visible function must have an entry in say_functions[]</code>，意思是说每个用户的函数必须定义在say_functions函数里面，否则在PHP使用say函数的时候报出函数未定义的错误<code>Fatal error: Uncaught Error: Call to undefined function say()</code></p>\n<h4 id=\"第四步：编译安装\"><a href=\"#第四步：编译安装\" class=\"headerlink\" title=\"第四步：编译安装\"></a>第四步：编译安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ phpize</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后修改php-ini，在配置文件结尾加上如下代码\"><a href=\"#然后修改php-ini，在配置文件结尾加上如下代码\" class=\"headerlink\" title=\"然后修改php.ini，在配置文件结尾加上如下代码\"></a>然后修改php.ini，在配置文件结尾加上如下代码</h5><p>可以使用<code>php --ini</code>查看配置文件的位置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[say]</span><br><span class=\"line\">extsion=say.so</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后执行php-m-查看是否已经把say函数加载进来：\"><a href=\"#然后执行php-m-查看是否已经把say函数加载进来：\" class=\"headerlink\" title=\"然后执行php -m 查看是否已经把say函数加载进来：\"></a>然后执行php -m 查看是否已经把say函数加载进来：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[PHP Modules]</span><br><span class=\"line\">Core</span><br><span class=\"line\">ctype</span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\">dom</span><br><span class=\"line\">fileinfo</span><br><span class=\"line\">filter</span><br><span class=\"line\">gd</span><br><span class=\"line\"><span class=\"built_in\">hash</span></span><br><span class=\"line\">iconv</span><br><span class=\"line\">json</span><br><span class=\"line\">libxml</span><br><span class=\"line\">pcre</span><br><span class=\"line\">PDO</span><br><span class=\"line\">pdo_sqlite</span><br><span class=\"line\">Phar</span><br><span class=\"line\">posix</span><br><span class=\"line\">Reflection</span><br><span class=\"line\">say</span><br><span class=\"line\">session</span><br><span class=\"line\">SimpleXML</span><br><span class=\"line\">SPL</span><br><span class=\"line\">sqlite3</span><br><span class=\"line\">standard</span><br><span class=\"line\">tokenizer</span><br><span class=\"line\">xml</span><br><span class=\"line\">xmlreader</span><br><span class=\"line\">xmlwriter</span><br><span class=\"line\"></span><br><span class=\"line\">[Zend Modules]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第五步：运行测试\"><a href=\"#第五步：运行测试\" class=\"headerlink\" title=\"第五步：运行测试\"></a>第五步：运行测试</h4><h5 id=\"编写PHP脚本，进行测试\"><a href=\"#编写PHP脚本，进行测试\" class=\"headerlink\" title=\"编写PHP脚本，进行测试\"></a>编写PHP脚本，进行测试</h5><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">say</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果输出：\"><a href=\"#结果输出：\" class=\"headerlink\" title=\"结果输出：\"></a>结果输出：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php test.php</span><br><span class=\"line\">$ hello world</span><br></pre></td></tr></table></figure>"},{"title":"PHP设计模式-适配器模式","id":"235","comments":0,"date":"2018-03-08T16:12:25.000Z","_content":"\n#### 适配器模式\n\n##### 组合优于继承\n\n学习设计模式，最经常听到的一句话就是：`组合优于继承`，因为使用组合，可以使参与者之间的绑定更宽松，在重用、结构和修改等方面会有很多的有点。这个和继承不同，继承类或者所继承的类中包含已经实现的方法，这其实也是一种绑定，使用组合，就没有这种紧密绑定的缺点。\n\n![使用继承的适配器类图](/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE.png)\n\n使用继承的适配器类图\n\n![使用组合的适配器类图](/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE-2.png)\n\n使用组合的适配器类图\n\n#### 组合适配器的例子\n\n有一家温湿度传感器公司，这个传感器可以测试空气的温度和湿度。分别调用getTemperature()方法和geThumidity()\n\n```php\nclass Sensor {\n\n    public function getThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n}\n```\n\n这个时候呢，由于公司扩大业务，有一家智能家居的公司前来谈合作，想要使用遥控，来读取温度和湿度，分别调用方法 getThumidityByRemote() 和getTemperatureByRemote() ,没办法，只能扩充Sensor的类了。\n\n```php\nclass Sensor {\n\n    public function getThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n    public function getThumidityByRemote() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperatureByRemote() {\n        echo \"the temperature is 45678... \\n\";\n    }\n}\n```\n\n紧接着，又来了一家智能音箱的公司，也要接入温湿度传感器，但是这家公司是根据用户的话的内容来区分是否查询温湿度getByAnswer($code), $code = 0的时候，查询温度，当$code = 1的时候，查询湿度。\n\n```php\nclass Sensor {\n\n    public function getThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n    public function getThumidityByRemote() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperatureByRemote() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n    public function getByAsnwer($code) {\n        if ($code == 0) {\n            echo \"the temperature is 45678... \\n\";\n        } else if ($code == 1) {\n            echo \"the thumidity is 1234... \\n\";\n        }\n    }\n}\n```\n\n可能你已经发现了问题，随着其他的公司不断的接入，Sensor的类会变得更加臃肿不看。或许我们应该好好区分一下整个过程中的角色问题。\n\n![](/uploads/2018/03/Adapter-300x235.png)\n\n1.  目标(Target)角色：智能家居公司和智能音箱公司的接口或者方法，使我们需要实现的目标(target)，因为外接需要调用这两个方法才行\n2.  源(Adaptee)角色：Sensor的温湿度查询，是我们需要适配方法，也就是，我们可以通过这两个方法，进行温湿度查询。\n3.  适配器(Adapter)角色：我们需要通过这个，来协调目标角色和源角色。\n\n定义Sensor类\n\n```php\nclass Sensor {\n\n    public function geThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n}\n```\n\n定义智能家居和智能音箱的接口\n\n```php\ninterface Household {\n    public function geThumidityByRemote();\n    public function getTemperatureByRemote();\n}\n```\n\n```php\ninterface Spearkers {\n    public function getByAnswer($code);\n}\n```\n\n定义适配器\n\n```php\nclass HouseholdTarget implements Household {\n\n    private $_sensor = NULL;\n\n    public function __construct(Sensor $sensor) {\n        $this->_sensor = $sensor;\n    }\n\n    public function geThumidityByRemote() {\n        $this->_sensor->geThumidity();\n    }\n    public function getTemperatureByRemote() {\n        $this->_sensor->getTemperature();\n    }\n\n}\n```\n\n```php\nclass SpearkersTargat implements Spearkers {\n\n    private $_sensor = NULL;\n\n    public function __construct(Sensor $sensor) {\n        $this->_sensor = $sensor;\n    }\n\n    public function getByAnswer($code) {\n        if ($code == 0) {\n            $this->_sensor->getTemperature();\n        } else if ($code == 1) {\n            $this->_sensor->geThumidity();\n        }\n    }\n\n}\n```\n\n客户端进行调用\n\n```php\nfunction __autoload($class_name) {\n    if (file_exists(__DIR__ . \"/{$class_name}.php\")) {\n        require_once __DIR__ . \"/{$class_name}.php\";\n    }\n}\n\n$sensor = new Sensor();\n$HouseholdTarget = new HouseholdTarget($sensor);\n$HouseholdTarget->geThumidityByRemote();\n$HouseholdTarget->getTemperatureByRemote();\n\n$SpearkersTargat = new SpearkersTargat($sensor);\n$SpearkersTargat->getByAnswer(0);\n$SpearkersTargat->getByAnswer(1);\n```\n\n输出结果 the thumidity is 1234... the temperature is 45678... the temperature is 45678... the thumidity is 1234...\n\n#### 结论\n\n使用适配器模式之后，能够更加方便对其进行拓展，如果有再多的公司进行接入，也不用担心影响Sensor类。\n\n#### 使用场景\n\n1．系统需要使用现有的类，而此类的接口不符合系统的需要。\n\n2．想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。这些源类不一定有很复杂的接口。\n\n3.（对组合适配器而言）在设计里，需要改变多个已有子类的接口，如果使用类的适配器模式，就要针对每一个子类做一个适配器，而这不太实际。","source":"_posts/php-adapter-mode.md","raw":"---\ntitle: PHP设计模式-适配器模式\ntags:\n  - PHP\n  - PHP设计模式\nid: '235'\ncategories:\n  - - PHP\n  - - PHP设计模式\ncomments: false\ndate: 2018-03-09 00:12:25\n---\n\n#### 适配器模式\n\n##### 组合优于继承\n\n学习设计模式，最经常听到的一句话就是：`组合优于继承`，因为使用组合，可以使参与者之间的绑定更宽松，在重用、结构和修改等方面会有很多的有点。这个和继承不同，继承类或者所继承的类中包含已经实现的方法，这其实也是一种绑定，使用组合，就没有这种紧密绑定的缺点。\n\n![使用继承的适配器类图](/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE.png)\n\n使用继承的适配器类图\n\n![使用组合的适配器类图](/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE-2.png)\n\n使用组合的适配器类图\n\n#### 组合适配器的例子\n\n有一家温湿度传感器公司，这个传感器可以测试空气的温度和湿度。分别调用getTemperature()方法和geThumidity()\n\n```php\nclass Sensor {\n\n    public function getThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n}\n```\n\n这个时候呢，由于公司扩大业务，有一家智能家居的公司前来谈合作，想要使用遥控，来读取温度和湿度，分别调用方法 getThumidityByRemote() 和getTemperatureByRemote() ,没办法，只能扩充Sensor的类了。\n\n```php\nclass Sensor {\n\n    public function getThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n    public function getThumidityByRemote() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperatureByRemote() {\n        echo \"the temperature is 45678... \\n\";\n    }\n}\n```\n\n紧接着，又来了一家智能音箱的公司，也要接入温湿度传感器，但是这家公司是根据用户的话的内容来区分是否查询温湿度getByAnswer($code), $code = 0的时候，查询温度，当$code = 1的时候，查询湿度。\n\n```php\nclass Sensor {\n\n    public function getThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n    public function getThumidityByRemote() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperatureByRemote() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n    public function getByAsnwer($code) {\n        if ($code == 0) {\n            echo \"the temperature is 45678... \\n\";\n        } else if ($code == 1) {\n            echo \"the thumidity is 1234... \\n\";\n        }\n    }\n}\n```\n\n可能你已经发现了问题，随着其他的公司不断的接入，Sensor的类会变得更加臃肿不看。或许我们应该好好区分一下整个过程中的角色问题。\n\n![](/uploads/2018/03/Adapter-300x235.png)\n\n1.  目标(Target)角色：智能家居公司和智能音箱公司的接口或者方法，使我们需要实现的目标(target)，因为外接需要调用这两个方法才行\n2.  源(Adaptee)角色：Sensor的温湿度查询，是我们需要适配方法，也就是，我们可以通过这两个方法，进行温湿度查询。\n3.  适配器(Adapter)角色：我们需要通过这个，来协调目标角色和源角色。\n\n定义Sensor类\n\n```php\nclass Sensor {\n\n    public function geThumidity() {\n        echo \"the thumidity is 1234... \\n\";\n    }\n\n    public function getTemperature() {\n        echo \"the temperature is 45678... \\n\";\n    }\n\n}\n```\n\n定义智能家居和智能音箱的接口\n\n```php\ninterface Household {\n    public function geThumidityByRemote();\n    public function getTemperatureByRemote();\n}\n```\n\n```php\ninterface Spearkers {\n    public function getByAnswer($code);\n}\n```\n\n定义适配器\n\n```php\nclass HouseholdTarget implements Household {\n\n    private $_sensor = NULL;\n\n    public function __construct(Sensor $sensor) {\n        $this->_sensor = $sensor;\n    }\n\n    public function geThumidityByRemote() {\n        $this->_sensor->geThumidity();\n    }\n    public function getTemperatureByRemote() {\n        $this->_sensor->getTemperature();\n    }\n\n}\n```\n\n```php\nclass SpearkersTargat implements Spearkers {\n\n    private $_sensor = NULL;\n\n    public function __construct(Sensor $sensor) {\n        $this->_sensor = $sensor;\n    }\n\n    public function getByAnswer($code) {\n        if ($code == 0) {\n            $this->_sensor->getTemperature();\n        } else if ($code == 1) {\n            $this->_sensor->geThumidity();\n        }\n    }\n\n}\n```\n\n客户端进行调用\n\n```php\nfunction __autoload($class_name) {\n    if (file_exists(__DIR__ . \"/{$class_name}.php\")) {\n        require_once __DIR__ . \"/{$class_name}.php\";\n    }\n}\n\n$sensor = new Sensor();\n$HouseholdTarget = new HouseholdTarget($sensor);\n$HouseholdTarget->geThumidityByRemote();\n$HouseholdTarget->getTemperatureByRemote();\n\n$SpearkersTargat = new SpearkersTargat($sensor);\n$SpearkersTargat->getByAnswer(0);\n$SpearkersTargat->getByAnswer(1);\n```\n\n输出结果 the thumidity is 1234... the temperature is 45678... the temperature is 45678... the thumidity is 1234...\n\n#### 结论\n\n使用适配器模式之后，能够更加方便对其进行拓展，如果有再多的公司进行接入，也不用担心影响Sensor类。\n\n#### 使用场景\n\n1．系统需要使用现有的类，而此类的接口不符合系统的需要。\n\n2．想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。这些源类不一定有很复杂的接口。\n\n3.（对组合适配器而言）在设计里，需要改变多个已有子类的接口，如果使用类的适配器模式，就要针对每一个子类做一个适配器，而这不太实际。","slug":"php-adapter-mode","published":1,"updated":"2022-03-13T01:17:12.526Z","_id":"cl0oi8mgy004x417t8njj0k43","layout":"post","photos":[],"link":"","content":"<h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><h5 id=\"组合优于继承\"><a href=\"#组合优于继承\" class=\"headerlink\" title=\"组合优于继承\"></a>组合优于继承</h5><p>学习设计模式，最经常听到的一句话就是：<code>组合优于继承</code>，因为使用组合，可以使参与者之间的绑定更宽松，在重用、结构和修改等方面会有很多的有点。这个和继承不同，继承类或者所继承的类中包含已经实现的方法，这其实也是一种绑定，使用组合，就没有这种紧密绑定的缺点。</p>\n<p><img src=\"/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE.png\" alt=\"使用继承的适配器类图\"></p>\n<p>使用继承的适配器类图</p>\n<p><img src=\"/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE-2.png\" alt=\"使用组合的适配器类图\"></p>\n<p>使用组合的适配器类图</p>\n<h4 id=\"组合适配器的例子\"><a href=\"#组合适配器的例子\" class=\"headerlink\" title=\"组合适配器的例子\"></a>组合适配器的例子</h4><p>有一家温湿度传感器公司，这个传感器可以测试空气的温度和湿度。分别调用getTemperature()方法和geThumidity()</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候呢，由于公司扩大业务，有一家智能家居的公司前来谈合作，想要使用遥控，来读取温度和湿度，分别调用方法 getThumidityByRemote() 和getTemperatureByRemote() ,没办法，只能扩充Sensor的类了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidityByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>紧接着，又来了一家智能音箱的公司，也要接入温湿度传感器，但是这家公司是根据用户的话的内容来区分是否查询温湿度getByAnswer($code), $code &#x3D; 0的时候，查询温度，当$code &#x3D; 1的时候，查询湿度。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidityByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByAsnwer</span>(<span class=\"params\"><span class=\"variable\">$code</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可能你已经发现了问题，随着其他的公司不断的接入，Sensor的类会变得更加臃肿不看。或许我们应该好好区分一下整个过程中的角色问题。</p>\n<p><img src=\"/uploads/2018/03/Adapter-300x235.png\"></p>\n<ol>\n<li>目标(Target)角色：智能家居公司和智能音箱公司的接口或者方法，使我们需要实现的目标(target)，因为外接需要调用这两个方法才行</li>\n<li>源(Adaptee)角色：Sensor的温湿度查询，是我们需要适配方法，也就是，我们可以通过这两个方法，进行温湿度查询。</li>\n<li>适配器(Adapter)角色：我们需要通过这个，来协调目标角色和源角色。</li>\n</ol>\n<p>定义Sensor类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">geThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义智能家居和智能音箱的接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Household</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">geThumidityByRemote</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Spearkers</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByAnswer</span>(<span class=\"params\"><span class=\"variable\">$code</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义适配器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HouseholdTarget</span> <span class=\"keyword\">implements</span> <span class=\"title\">Household</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$_sensor</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Sensor <span class=\"variable\">$sensor</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor = <span class=\"variable\">$sensor</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">geThumidityByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">geThumidity</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">getTemperature</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpearkersTargat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Spearkers</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$_sensor</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Sensor <span class=\"variable\">$sensor</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor = <span class=\"variable\">$sensor</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByAnswer</span>(<span class=\"params\"><span class=\"variable\">$code</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">getTemperature</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">geThumidity</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端进行调用</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span>(<span class=\"params\"><span class=\"variable\">$class_name</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(<span class=\"keyword\">__DIR__</span> . <span class=\"string\">&quot;/<span class=\"subst\">&#123;$class_name&#125;</span>.php&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&quot;/<span class=\"subst\">&#123;$class_name&#125;</span>.php&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$sensor</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Sensor</span>();</span><br><span class=\"line\"><span class=\"variable\">$HouseholdTarget</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HouseholdTarget</span>(<span class=\"variable\">$sensor</span>);</span><br><span class=\"line\"><span class=\"variable\">$HouseholdTarget</span>-&gt;<span class=\"title function_ invoke__\">geThumidityByRemote</span>();</span><br><span class=\"line\"><span class=\"variable\">$HouseholdTarget</span>-&gt;<span class=\"title function_ invoke__\">getTemperatureByRemote</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$SpearkersTargat</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SpearkersTargat</span>(<span class=\"variable\">$sensor</span>);</span><br><span class=\"line\"><span class=\"variable\">$SpearkersTargat</span>-&gt;<span class=\"title function_ invoke__\">getByAnswer</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$SpearkersTargat</span>-&gt;<span class=\"title function_ invoke__\">getByAnswer</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果 the thumidity is 1234… the temperature is 45678… the temperature is 45678… the thumidity is 1234…</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>使用适配器模式之后，能够更加方便对其进行拓展，如果有再多的公司进行接入，也不用担心影响Sensor类。</p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p>1．系统需要使用现有的类，而此类的接口不符合系统的需要。</p>\n<p>2．想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。这些源类不一定有很复杂的接口。</p>\n<p>3.（对组合适配器而言）在设计里，需要改变多个已有子类的接口，如果使用类的适配器模式，就要针对每一个子类做一个适配器，而这不太实际。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><h5 id=\"组合优于继承\"><a href=\"#组合优于继承\" class=\"headerlink\" title=\"组合优于继承\"></a>组合优于继承</h5><p>学习设计模式，最经常听到的一句话就是：<code>组合优于继承</code>，因为使用组合，可以使参与者之间的绑定更宽松，在重用、结构和修改等方面会有很多的有点。这个和继承不同，继承类或者所继承的类中包含已经实现的方法，这其实也是一种绑定，使用组合，就没有这种紧密绑定的缺点。</p>\n<p><img src=\"/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE.png\" alt=\"使用继承的适配器类图\"></p>\n<p>使用继承的适配器类图</p>\n<p><img src=\"/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE-2.png\" alt=\"使用组合的适配器类图\"></p>\n<p>使用组合的适配器类图</p>\n<h4 id=\"组合适配器的例子\"><a href=\"#组合适配器的例子\" class=\"headerlink\" title=\"组合适配器的例子\"></a>组合适配器的例子</h4><p>有一家温湿度传感器公司，这个传感器可以测试空气的温度和湿度。分别调用getTemperature()方法和geThumidity()</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候呢，由于公司扩大业务，有一家智能家居的公司前来谈合作，想要使用遥控，来读取温度和湿度，分别调用方法 getThumidityByRemote() 和getTemperatureByRemote() ,没办法，只能扩充Sensor的类了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidityByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>紧接着，又来了一家智能音箱的公司，也要接入温湿度传感器，但是这家公司是根据用户的话的内容来区分是否查询温湿度getByAnswer($code), $code &#x3D; 0的时候，查询温度，当$code &#x3D; 1的时候，查询湿度。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThumidityByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByAsnwer</span>(<span class=\"params\"><span class=\"variable\">$code</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可能你已经发现了问题，随着其他的公司不断的接入，Sensor的类会变得更加臃肿不看。或许我们应该好好区分一下整个过程中的角色问题。</p>\n<p><img src=\"/uploads/2018/03/Adapter-300x235.png\"></p>\n<ol>\n<li>目标(Target)角色：智能家居公司和智能音箱公司的接口或者方法，使我们需要实现的目标(target)，因为外接需要调用这两个方法才行</li>\n<li>源(Adaptee)角色：Sensor的温湿度查询，是我们需要适配方法，也就是，我们可以通过这两个方法，进行温湿度查询。</li>\n<li>适配器(Adapter)角色：我们需要通过这个，来协调目标角色和源角色。</li>\n</ol>\n<p>定义Sensor类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">geThumidity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the thumidity is 1234... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperature</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;the temperature is 45678... \\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义智能家居和智能音箱的接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Household</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">geThumidityByRemote</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Spearkers</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByAnswer</span>(<span class=\"params\"><span class=\"variable\">$code</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义适配器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HouseholdTarget</span> <span class=\"keyword\">implements</span> <span class=\"title\">Household</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$_sensor</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Sensor <span class=\"variable\">$sensor</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor = <span class=\"variable\">$sensor</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">geThumidityByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">geThumidity</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTemperatureByRemote</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">getTemperature</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpearkersTargat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Spearkers</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$_sensor</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Sensor <span class=\"variable\">$sensor</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;_sensor = <span class=\"variable\">$sensor</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByAnswer</span>(<span class=\"params\"><span class=\"variable\">$code</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">getTemperature</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable\">$code</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;_sensor-&gt;<span class=\"title function_ invoke__\">geThumidity</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端进行调用</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span>(<span class=\"params\"><span class=\"variable\">$class_name</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(<span class=\"keyword\">__DIR__</span> . <span class=\"string\">&quot;/<span class=\"subst\">&#123;$class_name&#125;</span>.php&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&quot;/<span class=\"subst\">&#123;$class_name&#125;</span>.php&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$sensor</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Sensor</span>();</span><br><span class=\"line\"><span class=\"variable\">$HouseholdTarget</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HouseholdTarget</span>(<span class=\"variable\">$sensor</span>);</span><br><span class=\"line\"><span class=\"variable\">$HouseholdTarget</span>-&gt;<span class=\"title function_ invoke__\">geThumidityByRemote</span>();</span><br><span class=\"line\"><span class=\"variable\">$HouseholdTarget</span>-&gt;<span class=\"title function_ invoke__\">getTemperatureByRemote</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$SpearkersTargat</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SpearkersTargat</span>(<span class=\"variable\">$sensor</span>);</span><br><span class=\"line\"><span class=\"variable\">$SpearkersTargat</span>-&gt;<span class=\"title function_ invoke__\">getByAnswer</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$SpearkersTargat</span>-&gt;<span class=\"title function_ invoke__\">getByAnswer</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果 the thumidity is 1234… the temperature is 45678… the temperature is 45678… the thumidity is 1234…</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>使用适配器模式之后，能够更加方便对其进行拓展，如果有再多的公司进行接入，也不用担心影响Sensor类。</p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p>1．系统需要使用现有的类，而此类的接口不符合系统的需要。</p>\n<p>2．想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。这些源类不一定有很复杂的接口。</p>\n<p>3.（对组合适配器而言）在设计里，需要改变多个已有子类的接口，如果使用类的适配器模式，就要针对每一个子类做一个适配器，而这不太实际。</p>\n"},{"title":"PHP配合使用携程Apollo配置中心","id":"411","date":"2018-10-27T08:41:39.000Z","_content":"\n# 1\\. 背景\n\n平时开发最头疼之一就是各种配置：\n\n1.  一个项目往往会包含各式各样的配置信息，且不说数据库、redis、memcache这些常用的配置，还会有很多业务上的配置。\n2.  线上、测试和开发环境配置各不一样，每个环境都要保存一份\n3.  每次上线的时候，都要挨个check一下，\n4.  更改某个配置，需要重新上线代码\n5.  ￼....\n\n所以配置中心，在devops的开发中，是必不可少的，配置中心，也可以有效的避免，因为更改配置代码，导致的代码运行出错的风险。\n\n# 2\\. Apollo\n\n携程的[Apollo](https://github.com/ctripcorp/apollo)配置中心，在业内算是比较有名的，github上面大概有8.5k的star。很多知名的公司也都在使用。至于实现的原理直接看github上面的wiki即可。\n\n# 3\\. DO IT\n\n## 3.1 创建项目\n\n3.1.1 创建项目，clone项目\n\n![](/uploads/2018/10/WX20181027-143049@2x.png)\n\n3.1.2 按需更改docker-compose.yml\n\n```bash\nfeilong$ cd scripts/docker-quick-start/\nfeilongdeMacBook-Pro:docker-quick-start feilong$ ll\ntotal 8\n-rw-r--r--  1 feilong  wheel  663 Oct 27 14:56 docker-compose.yml\ndrwxr-xr-x  4 feilong  wheel  128 Oct 27 14:56 sql\n```\n\n因为我不是java技术栈，所以以docker运行。\n\n本地由于8080端口被占用，所以把端口改为8082\n\n```yaml\n# docker-compose.yml\nversion: '2'\n\nservices:\n  apollo-quick-start:\n    image: nobodyiam/apollo-quick-start\n    container_name: apollo-quick-start\n    depends_on:\n      - apollo-db\n    ports:\n      - \"8082:8080\"\n      - \"8070:8070\"\n    links:\n      - apollo-db\n\n  apollo-db:\n    image: mysql:5.7\n    container_name: apollo-db\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'\n    depends_on:\n      - apollo-dbdata\n    ports:\n      - \"13306:3306\"\n    volumes:\n      - ./sql:/docker-entrypoint-initdb.d\n    volumes_from:\n      - apollo-dbdata\n\n  apollo-dbdata:\n    image: alpine:latest\n    container_name: apollo-dbdata\n    volumes:\n      - /var/lib/mysql\n```\n\n通过docker-compose启动Apollo服务\n\n```bash\nfeilongdeMacBook-Pro:docker-quick-start feilong$ docker-compose up -d\nCreating network \"docker-quick-start_default\" with the default driver\nCreating apollo-dbdata ... done\nCreating apollo-db     ... done\nCreating apollo-quick-start ... done\nfeilongdeMacBook-Pro:docker-quick-start feilong$\n```\n\n访问地址 localhost:8070，如果启动失败的话，请参考 [#1473 docker\\_quick\\_start 起不来](https://github.com/ctripcorp/apollo/issues/1473)\n\n![](/uploads/2018/10/WX20181027-152632.png)\n\n## 3.2 配置\n\nApollo内置了账号 _**apollo/admin**_，登录之后，可以看到有个默认的应用SampleApp\n\n![](/uploads/2018/10/WX20181027-153023.png)\n\n通过后台创建一个用于演示的redis的配置信息\n\n![](/uploads/2018/10/WX20181027-153143@2x.png) ![](/uploads/2018/10/1540625597036.jpg)\n\n创建结束后，点击“发布”按钮，发布最新的配置\n\n## 3.3 运行测试\n\n除了配置的server端，还要有接受配置的client端，我是PHP技术栈，所以就以PHP为主\n\n### 3.3.1 初始化项目\n\n配置php项目，通过_composer_引入Apollo的SDK\n\n```bash\nfeilongdeMacBook-Pro:apollo feilong$ composer require multilinguals/apollo-client --ignore-platform-reqs\nUsing version ^0.1.1 for multilinguals/apollo-client\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 1 install, 0 updates, 0 removals\n - Installing multilinguals/apollo-client (v0.1.1): Downloading (100%)\nWriting lock file\nGenerating autoload files\n```\n\n![](/uploads/2018/10/WX20181027-161420@2x.png)\n\n新建一个_pull.php_，为了能够实时获取最新的配置，需要长时间运行。\n\n```php\n<?php\nrequire_once 'vendor/autoload.php';\n\nuse Org\\Multilinguals\\Apollo\\Client\\ApolloClient;\n\n// docker-compose里面配置的API服务的端口\n$serverIp = '192.168.1.72:8082';\n// 在Apollo的后台可以查到\n$appId = 'SampleApp';\n$namespaces = array('application');\n$apollo = new ApolloClient($serverIp, $appId, $namespaces);\n$apollo->save_dir = 'config';\n\n$restart = true; //auto start if failed\ndo {\n    $error = $apollo->start();\n    if ($error) {\n        echo('error:'.$error.\"\\n\");\n    }\n} while ($error && $restart);\n```\n\n### 3.3.2 运行项目\n\n新建一个config的目录，运行pull.php文件，获取配置信息\n\n![](/uploads/2018/10/WX20181027-162049@2x.png)\n\n新建一个窗口，查看下config文件夹下的文件\n\n![](/uploads/2018/10/WX20181027-162156@2x.png)\n\n发现新建了一个配置文件，里面是相应的配置信息\n\n后台做一些更新操作\n\n![](/uploads/2018/10/WX20181027-162346.png) ![](/uploads/2018/10/WX20181027-162403.png)\n\n发布配置，查看配置文件\n\n![](/uploads/2018/10/WX20181027-162428@2x.png)\n\n# 4\\. 总结\n\n通过配置中心，我们就不用在部署的时候，手动一直更改项目的配置文件，可以实现自动化，降低人为风险。\n\n此外，Apollo是版本控制的，支持回滚操作，这样，就算是出现手误，也能及时回滚配置，及时生效。","source":"_posts/php-apollo-config-center.md","raw":"---\ntitle: PHP配合使用携程Apollo配置中心\ntags:\n  - Apollo\n  - devops\n  - 微服务\nid: '411'\ncategories:\n  - - Docker\n  - - Linux\n  - - PHP\ndate: 2018-10-27 16:41:39\n---\n\n# 1\\. 背景\n\n平时开发最头疼之一就是各种配置：\n\n1.  一个项目往往会包含各式各样的配置信息，且不说数据库、redis、memcache这些常用的配置，还会有很多业务上的配置。\n2.  线上、测试和开发环境配置各不一样，每个环境都要保存一份\n3.  每次上线的时候，都要挨个check一下，\n4.  更改某个配置，需要重新上线代码\n5.  ￼....\n\n所以配置中心，在devops的开发中，是必不可少的，配置中心，也可以有效的避免，因为更改配置代码，导致的代码运行出错的风险。\n\n# 2\\. Apollo\n\n携程的[Apollo](https://github.com/ctripcorp/apollo)配置中心，在业内算是比较有名的，github上面大概有8.5k的star。很多知名的公司也都在使用。至于实现的原理直接看github上面的wiki即可。\n\n# 3\\. DO IT\n\n## 3.1 创建项目\n\n3.1.1 创建项目，clone项目\n\n![](/uploads/2018/10/WX20181027-143049@2x.png)\n\n3.1.2 按需更改docker-compose.yml\n\n```bash\nfeilong$ cd scripts/docker-quick-start/\nfeilongdeMacBook-Pro:docker-quick-start feilong$ ll\ntotal 8\n-rw-r--r--  1 feilong  wheel  663 Oct 27 14:56 docker-compose.yml\ndrwxr-xr-x  4 feilong  wheel  128 Oct 27 14:56 sql\n```\n\n因为我不是java技术栈，所以以docker运行。\n\n本地由于8080端口被占用，所以把端口改为8082\n\n```yaml\n# docker-compose.yml\nversion: '2'\n\nservices:\n  apollo-quick-start:\n    image: nobodyiam/apollo-quick-start\n    container_name: apollo-quick-start\n    depends_on:\n      - apollo-db\n    ports:\n      - \"8082:8080\"\n      - \"8070:8070\"\n    links:\n      - apollo-db\n\n  apollo-db:\n    image: mysql:5.7\n    container_name: apollo-db\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'\n    depends_on:\n      - apollo-dbdata\n    ports:\n      - \"13306:3306\"\n    volumes:\n      - ./sql:/docker-entrypoint-initdb.d\n    volumes_from:\n      - apollo-dbdata\n\n  apollo-dbdata:\n    image: alpine:latest\n    container_name: apollo-dbdata\n    volumes:\n      - /var/lib/mysql\n```\n\n通过docker-compose启动Apollo服务\n\n```bash\nfeilongdeMacBook-Pro:docker-quick-start feilong$ docker-compose up -d\nCreating network \"docker-quick-start_default\" with the default driver\nCreating apollo-dbdata ... done\nCreating apollo-db     ... done\nCreating apollo-quick-start ... done\nfeilongdeMacBook-Pro:docker-quick-start feilong$\n```\n\n访问地址 localhost:8070，如果启动失败的话，请参考 [#1473 docker\\_quick\\_start 起不来](https://github.com/ctripcorp/apollo/issues/1473)\n\n![](/uploads/2018/10/WX20181027-152632.png)\n\n## 3.2 配置\n\nApollo内置了账号 _**apollo/admin**_，登录之后，可以看到有个默认的应用SampleApp\n\n![](/uploads/2018/10/WX20181027-153023.png)\n\n通过后台创建一个用于演示的redis的配置信息\n\n![](/uploads/2018/10/WX20181027-153143@2x.png) ![](/uploads/2018/10/1540625597036.jpg)\n\n创建结束后，点击“发布”按钮，发布最新的配置\n\n## 3.3 运行测试\n\n除了配置的server端，还要有接受配置的client端，我是PHP技术栈，所以就以PHP为主\n\n### 3.3.1 初始化项目\n\n配置php项目，通过_composer_引入Apollo的SDK\n\n```bash\nfeilongdeMacBook-Pro:apollo feilong$ composer require multilinguals/apollo-client --ignore-platform-reqs\nUsing version ^0.1.1 for multilinguals/apollo-client\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 1 install, 0 updates, 0 removals\n - Installing multilinguals/apollo-client (v0.1.1): Downloading (100%)\nWriting lock file\nGenerating autoload files\n```\n\n![](/uploads/2018/10/WX20181027-161420@2x.png)\n\n新建一个_pull.php_，为了能够实时获取最新的配置，需要长时间运行。\n\n```php\n<?php\nrequire_once 'vendor/autoload.php';\n\nuse Org\\Multilinguals\\Apollo\\Client\\ApolloClient;\n\n// docker-compose里面配置的API服务的端口\n$serverIp = '192.168.1.72:8082';\n// 在Apollo的后台可以查到\n$appId = 'SampleApp';\n$namespaces = array('application');\n$apollo = new ApolloClient($serverIp, $appId, $namespaces);\n$apollo->save_dir = 'config';\n\n$restart = true; //auto start if failed\ndo {\n    $error = $apollo->start();\n    if ($error) {\n        echo('error:'.$error.\"\\n\");\n    }\n} while ($error && $restart);\n```\n\n### 3.3.2 运行项目\n\n新建一个config的目录，运行pull.php文件，获取配置信息\n\n![](/uploads/2018/10/WX20181027-162049@2x.png)\n\n新建一个窗口，查看下config文件夹下的文件\n\n![](/uploads/2018/10/WX20181027-162156@2x.png)\n\n发现新建了一个配置文件，里面是相应的配置信息\n\n后台做一些更新操作\n\n![](/uploads/2018/10/WX20181027-162346.png) ![](/uploads/2018/10/WX20181027-162403.png)\n\n发布配置，查看配置文件\n\n![](/uploads/2018/10/WX20181027-162428@2x.png)\n\n# 4\\. 总结\n\n通过配置中心，我们就不用在部署的时候，手动一直更改项目的配置文件，可以实现自动化，降低人为风险。\n\n此外，Apollo是版本控制的，支持回滚操作，这样，就算是出现手误，也能及时回滚配置，及时生效。","slug":"php-apollo-config-center","published":1,"updated":"2022-03-13T01:17:12.526Z","_id":"cl0oi8mh00052417ta1oq0vcm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><p>平时开发最头疼之一就是各种配置：</p>\n<ol>\n<li>一个项目往往会包含各式各样的配置信息，且不说数据库、redis、memcache这些常用的配置，还会有很多业务上的配置。</li>\n<li>线上、测试和开发环境配置各不一样，每个环境都要保存一份</li>\n<li>每次上线的时候，都要挨个check一下，</li>\n<li>更改某个配置，需要重新上线代码</li>\n<li>￼….</li>\n</ol>\n<p>所以配置中心，在devops的开发中，是必不可少的，配置中心，也可以有效的避免，因为更改配置代码，导致的代码运行出错的风险。</p>\n<h1 id=\"2-Apollo\"><a href=\"#2-Apollo\" class=\"headerlink\" title=\"2. Apollo\"></a>2. Apollo</h1><p>携程的<a href=\"https://github.com/ctripcorp/apollo\">Apollo</a>配置中心，在业内算是比较有名的，github上面大概有8.5k的star。很多知名的公司也都在使用。至于实现的原理直接看github上面的wiki即可。</p>\n<h1 id=\"3-DO-IT\"><a href=\"#3-DO-IT\" class=\"headerlink\" title=\"3. DO IT\"></a>3. DO IT</h1><h2 id=\"3-1-创建项目\"><a href=\"#3-1-创建项目\" class=\"headerlink\" title=\"3.1 创建项目\"></a>3.1 创建项目</h2><p>3.1.1 创建项目，clone项目</p>\n<p><img src=\"/uploads/2018/10/WX20181027-143049@2x.png\"></p>\n<p>3.1.2 按需更改docker-compose.yml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilong$ <span class=\"built_in\">cd</span> scripts/docker-quick-start/</span><br><span class=\"line\">feilongdeMacBook-Pro:docker-quick-start feilong$ ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 feilong  wheel  663 Oct 27 14:56 docker-compose.yml</span><br><span class=\"line\">drwxr-xr-x  4 feilong  wheel  128 Oct 27 14:56 sql</span><br></pre></td></tr></table></figure>\n\n<p>因为我不是java技术栈，所以以docker运行。</p>\n<p>本地由于8080端口被占用，所以把端口改为8082</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">apollo-quick-start:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nobodyiam/apollo-quick-start</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">apollo-quick-start</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-db</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8082:8080&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8070:8070&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-db</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">apollo-db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">apollo-db</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class=\"string\">&#x27;yes&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-dbdata</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;13306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./sql:/docker-entrypoint-initdb.d</span></span><br><span class=\"line\">    <span class=\"attr\">volumes_from:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-dbdata</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">apollo-dbdata:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">alpine:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">apollo-dbdata</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/lib/mysql</span></span><br></pre></td></tr></table></figure>\n\n<p>通过docker-compose启动Apollo服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:docker-quick-start feilong$ docker-compose up -d</span><br><span class=\"line\">Creating network <span class=\"string\">&quot;docker-quick-start_default&quot;</span> with the default driver</span><br><span class=\"line\">Creating apollo-dbdata ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating apollo-db     ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating apollo-quick-start ... <span class=\"keyword\">done</span></span><br><span class=\"line\">feilongdeMacBook-Pro:docker-quick-start feilong$</span><br></pre></td></tr></table></figure>\n\n<p>访问地址 localhost:8070，如果启动失败的话，请参考 <a href=\"https://github.com/ctripcorp/apollo/issues/1473\">#1473 docker_quick_start 起不来</a></p>\n<p><img src=\"/uploads/2018/10/WX20181027-152632.png\"></p>\n<h2 id=\"3-2-配置\"><a href=\"#3-2-配置\" class=\"headerlink\" title=\"3.2 配置\"></a>3.2 配置</h2><p>Apollo内置了账号 _<strong>apollo&#x2F;admin</strong>_，登录之后，可以看到有个默认的应用SampleApp</p>\n<p><img src=\"/uploads/2018/10/WX20181027-153023.png\"></p>\n<p>通过后台创建一个用于演示的redis的配置信息</p>\n<p><img src=\"/uploads/2018/10/WX20181027-153143@2x.png\"> <img src=\"/uploads/2018/10/1540625597036.jpg\"></p>\n<p>创建结束后，点击“发布”按钮，发布最新的配置</p>\n<h2 id=\"3-3-运行测试\"><a href=\"#3-3-运行测试\" class=\"headerlink\" title=\"3.3 运行测试\"></a>3.3 运行测试</h2><p>除了配置的server端，还要有接受配置的client端，我是PHP技术栈，所以就以PHP为主</p>\n<h3 id=\"3-3-1-初始化项目\"><a href=\"#3-3-1-初始化项目\" class=\"headerlink\" title=\"3.3.1 初始化项目\"></a>3.3.1 初始化项目</h3><p>配置php项目，通过_composer_引入Apollo的SDK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:apollo feilong$ composer require multilinguals/apollo-client --ignore-platform-reqs</span><br><span class=\"line\">Using version ^0.1.1 <span class=\"keyword\">for</span> multilinguals/apollo-client</span><br><span class=\"line\">./composer.json has been created</span><br><span class=\"line\">Loading composer repositories with package information</span><br><span class=\"line\">Updating dependencies (including require-dev)</span><br><span class=\"line\">Package operations: 1 install, 0 updates, 0 removals</span><br><span class=\"line\"> - Installing multilinguals/apollo-client (v0.1.1): Downloading (100%)</span><br><span class=\"line\">Writing lock file</span><br><span class=\"line\">Generating <span class=\"built_in\">autoload</span> files</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/10/WX20181027-161420@2x.png\"></p>\n<p>新建一个_pull.php_，为了能够实时获取最新的配置，需要长时间运行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Org</span>\\<span class=\"title\">Multilinguals</span>\\<span class=\"title\">Apollo</span>\\<span class=\"title\">Client</span>\\<span class=\"title\">ApolloClient</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// docker-compose里面配置的API服务的端口</span></span><br><span class=\"line\"><span class=\"variable\">$serverIp</span> = <span class=\"string\">&#x27;192.168.1.72:8082&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在Apollo的后台可以查到</span></span><br><span class=\"line\"><span class=\"variable\">$appId</span> = <span class=\"string\">&#x27;SampleApp&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$namespaces</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;application&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$apollo</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ApolloClient</span>(<span class=\"variable\">$serverIp</span>, <span class=\"variable\">$appId</span>, <span class=\"variable\">$namespaces</span>);</span><br><span class=\"line\"><span class=\"variable\">$apollo</span>-&gt;save_dir = <span class=\"string\">&#x27;config&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$restart</span> = <span class=\"literal\">true</span>; <span class=\"comment\">//auto start if failed</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$error</span> = <span class=\"variable\">$apollo</span>-&gt;<span class=\"title function_ invoke__\">start</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$error</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>(<span class=\"string\">&#x27;error:&#x27;</span>.<span class=\"variable\">$error</span>.<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"variable\">$error</span> &amp;&amp; <span class=\"variable\">$restart</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-2-运行项目\"><a href=\"#3-3-2-运行项目\" class=\"headerlink\" title=\"3.3.2 运行项目\"></a>3.3.2 运行项目</h3><p>新建一个config的目录，运行pull.php文件，获取配置信息</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162049@2x.png\"></p>\n<p>新建一个窗口，查看下config文件夹下的文件</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162156@2x.png\"></p>\n<p>发现新建了一个配置文件，里面是相应的配置信息</p>\n<p>后台做一些更新操作</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162346.png\"> <img src=\"/uploads/2018/10/WX20181027-162403.png\"></p>\n<p>发布配置，查看配置文件</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162428@2x.png\"></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>通过配置中心，我们就不用在部署的时候，手动一直更改项目的配置文件，可以实现自动化，降低人为风险。</p>\n<p>此外，Apollo是版本控制的，支持回滚操作，这样，就算是出现手误，也能及时回滚配置，及时生效。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><p>平时开发最头疼之一就是各种配置：</p>\n<ol>\n<li>一个项目往往会包含各式各样的配置信息，且不说数据库、redis、memcache这些常用的配置，还会有很多业务上的配置。</li>\n<li>线上、测试和开发环境配置各不一样，每个环境都要保存一份</li>\n<li>每次上线的时候，都要挨个check一下，</li>\n<li>更改某个配置，需要重新上线代码</li>\n<li>￼….</li>\n</ol>\n<p>所以配置中心，在devops的开发中，是必不可少的，配置中心，也可以有效的避免，因为更改配置代码，导致的代码运行出错的风险。</p>\n<h1 id=\"2-Apollo\"><a href=\"#2-Apollo\" class=\"headerlink\" title=\"2. Apollo\"></a>2. Apollo</h1><p>携程的<a href=\"https://github.com/ctripcorp/apollo\">Apollo</a>配置中心，在业内算是比较有名的，github上面大概有8.5k的star。很多知名的公司也都在使用。至于实现的原理直接看github上面的wiki即可。</p>\n<h1 id=\"3-DO-IT\"><a href=\"#3-DO-IT\" class=\"headerlink\" title=\"3. DO IT\"></a>3. DO IT</h1><h2 id=\"3-1-创建项目\"><a href=\"#3-1-创建项目\" class=\"headerlink\" title=\"3.1 创建项目\"></a>3.1 创建项目</h2><p>3.1.1 创建项目，clone项目</p>\n<p><img src=\"/uploads/2018/10/WX20181027-143049@2x.png\"></p>\n<p>3.1.2 按需更改docker-compose.yml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilong$ <span class=\"built_in\">cd</span> scripts/docker-quick-start/</span><br><span class=\"line\">feilongdeMacBook-Pro:docker-quick-start feilong$ ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 feilong  wheel  663 Oct 27 14:56 docker-compose.yml</span><br><span class=\"line\">drwxr-xr-x  4 feilong  wheel  128 Oct 27 14:56 sql</span><br></pre></td></tr></table></figure>\n\n<p>因为我不是java技术栈，所以以docker运行。</p>\n<p>本地由于8080端口被占用，所以把端口改为8082</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">apollo-quick-start:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nobodyiam/apollo-quick-start</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">apollo-quick-start</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-db</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8082:8080&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8070:8070&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-db</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">apollo-db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">apollo-db</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class=\"string\">&#x27;yes&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-dbdata</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;13306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./sql:/docker-entrypoint-initdb.d</span></span><br><span class=\"line\">    <span class=\"attr\">volumes_from:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">apollo-dbdata</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">apollo-dbdata:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">alpine:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">apollo-dbdata</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/lib/mysql</span></span><br></pre></td></tr></table></figure>\n\n<p>通过docker-compose启动Apollo服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:docker-quick-start feilong$ docker-compose up -d</span><br><span class=\"line\">Creating network <span class=\"string\">&quot;docker-quick-start_default&quot;</span> with the default driver</span><br><span class=\"line\">Creating apollo-dbdata ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating apollo-db     ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating apollo-quick-start ... <span class=\"keyword\">done</span></span><br><span class=\"line\">feilongdeMacBook-Pro:docker-quick-start feilong$</span><br></pre></td></tr></table></figure>\n\n<p>访问地址 localhost:8070，如果启动失败的话，请参考 <a href=\"https://github.com/ctripcorp/apollo/issues/1473\">#1473 docker_quick_start 起不来</a></p>\n<p><img src=\"/uploads/2018/10/WX20181027-152632.png\"></p>\n<h2 id=\"3-2-配置\"><a href=\"#3-2-配置\" class=\"headerlink\" title=\"3.2 配置\"></a>3.2 配置</h2><p>Apollo内置了账号 _<strong>apollo&#x2F;admin</strong>_，登录之后，可以看到有个默认的应用SampleApp</p>\n<p><img src=\"/uploads/2018/10/WX20181027-153023.png\"></p>\n<p>通过后台创建一个用于演示的redis的配置信息</p>\n<p><img src=\"/uploads/2018/10/WX20181027-153143@2x.png\"> <img src=\"/uploads/2018/10/1540625597036.jpg\"></p>\n<p>创建结束后，点击“发布”按钮，发布最新的配置</p>\n<h2 id=\"3-3-运行测试\"><a href=\"#3-3-运行测试\" class=\"headerlink\" title=\"3.3 运行测试\"></a>3.3 运行测试</h2><p>除了配置的server端，还要有接受配置的client端，我是PHP技术栈，所以就以PHP为主</p>\n<h3 id=\"3-3-1-初始化项目\"><a href=\"#3-3-1-初始化项目\" class=\"headerlink\" title=\"3.3.1 初始化项目\"></a>3.3.1 初始化项目</h3><p>配置php项目，通过_composer_引入Apollo的SDK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMacBook-Pro:apollo feilong$ composer require multilinguals/apollo-client --ignore-platform-reqs</span><br><span class=\"line\">Using version ^0.1.1 <span class=\"keyword\">for</span> multilinguals/apollo-client</span><br><span class=\"line\">./composer.json has been created</span><br><span class=\"line\">Loading composer repositories with package information</span><br><span class=\"line\">Updating dependencies (including require-dev)</span><br><span class=\"line\">Package operations: 1 install, 0 updates, 0 removals</span><br><span class=\"line\"> - Installing multilinguals/apollo-client (v0.1.1): Downloading (100%)</span><br><span class=\"line\">Writing lock file</span><br><span class=\"line\">Generating <span class=\"built_in\">autoload</span> files</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/10/WX20181027-161420@2x.png\"></p>\n<p>新建一个_pull.php_，为了能够实时获取最新的配置，需要长时间运行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Org</span>\\<span class=\"title\">Multilinguals</span>\\<span class=\"title\">Apollo</span>\\<span class=\"title\">Client</span>\\<span class=\"title\">ApolloClient</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// docker-compose里面配置的API服务的端口</span></span><br><span class=\"line\"><span class=\"variable\">$serverIp</span> = <span class=\"string\">&#x27;192.168.1.72:8082&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在Apollo的后台可以查到</span></span><br><span class=\"line\"><span class=\"variable\">$appId</span> = <span class=\"string\">&#x27;SampleApp&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$namespaces</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;application&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$apollo</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ApolloClient</span>(<span class=\"variable\">$serverIp</span>, <span class=\"variable\">$appId</span>, <span class=\"variable\">$namespaces</span>);</span><br><span class=\"line\"><span class=\"variable\">$apollo</span>-&gt;save_dir = <span class=\"string\">&#x27;config&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$restart</span> = <span class=\"literal\">true</span>; <span class=\"comment\">//auto start if failed</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$error</span> = <span class=\"variable\">$apollo</span>-&gt;<span class=\"title function_ invoke__\">start</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$error</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>(<span class=\"string\">&#x27;error:&#x27;</span>.<span class=\"variable\">$error</span>.<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (<span class=\"variable\">$error</span> &amp;&amp; <span class=\"variable\">$restart</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-2-运行项目\"><a href=\"#3-3-2-运行项目\" class=\"headerlink\" title=\"3.3.2 运行项目\"></a>3.3.2 运行项目</h3><p>新建一个config的目录，运行pull.php文件，获取配置信息</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162049@2x.png\"></p>\n<p>新建一个窗口，查看下config文件夹下的文件</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162156@2x.png\"></p>\n<p>发现新建了一个配置文件，里面是相应的配置信息</p>\n<p>后台做一些更新操作</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162346.png\"> <img src=\"/uploads/2018/10/WX20181027-162403.png\"></p>\n<p>发布配置，查看配置文件</p>\n<p><img src=\"/uploads/2018/10/WX20181027-162428@2x.png\"></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>通过配置中心，我们就不用在部署的时候，手动一直更改项目的配置文件，可以实现自动化，降低人为风险。</p>\n<p>此外，Apollo是版本控制的，支持回滚操作，这样，就算是出现手误，也能及时回滚配置，及时生效。</p>\n"},{"title":"PHP数组的存储","id":"737","date":"2020-10-25T11:54:17.000Z","_content":"\nPHP数组是PHP最复杂的数据结构，没有之一，如果能把数据彻底搞透，那么其他的数据结构也能理解的差不多了。\n\n#### 数据结构\n\n```c\n\ntypedef struct _Bucket {\n    zval              val;\n    zend_ulong        h;                /* hash value (or numeric index)   */\n    zend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n\ntypedef struct _zend_array HashTable;\n\nstruct _zend_array {\n    zend_refcounted_h gc;\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_4(\n                zend_uchar    flags,\n                zend_uchar    nApplyCount,\n                zend_uchar    nIteratorsCount,\n                zend_uchar    consistency)\n        } v;\n        uint32_t flags;\n    } u;\n    uint32_t          nTableMask; // 中间映射表，用来映射在arData的存储位置\n    Bucket           *arData; // 元素的存储数据结构，默认指向第一个元素\n    uint32_t          nNumUsed; // arData使用的个数\n    uint32_t          nNumOfElements; // 数组的个数\n    uint32_t          nTableSize; // 数组的大小\n    uint32_t          nInternalPointer;\n    zend_long         nNextFreeElement;\n    dtor_func_t       pDestructor;\n};\n```\n\n#### 数组的初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n    GC_REFCOUNT(ht) = 1;\n    GC_TYPE_INFO(ht) = IS_ARRAY;\n    ht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0)  HASH_FLAG_APPLY_PROTECTION  HASH_FLAG_STATIC_KEYS;\n    ht->nTableMask = HT_MIN_MASK;\n    HT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n    ht->nNumUsed = 0;\n    ht->nNumOfElements = 0;\n    ht->nInternalPointer = HT_INVALID_IDX;\n    ht->nNextFreeElement = 0;\n    ht->pDestructor = pDestructor;\n    ht->nTableSize = zend_hash_check_size(nSize);\n}\n\nstatic zend_always_inline void zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n    HT_ASSERT(GC_REFCOUNT(ht) == 1);\n    ZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n    if (packed) {\n        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n        (ht)->u.flags = HASH_FLAG_INITIALIZED  HASH_FLAG_PACKED;\n        HT_HASH_RESET_PACKED(ht);\n    } else {\n        (ht)->nTableMask = -(ht)->nTableSize;\n        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n        (ht)->u.flags = HASH_FLAG_INITIALIZED;\n        if (EXPECTED(ht->nTableMask == (uint32_t)-8)) {\n            Bucket *arData = ht->arData;\n\n            HT_HASH_EX(arData, -8) = -1;\n            HT_HASH_EX(arData, -7) = -1;\n            HT_HASH_EX(arData, -6) = -1;\n            HT_HASH_EX(arData, -5) = -1;\n            HT_HASH_EX(arData, -4) = -1;\n            HT_HASH_EX(arData, -3) = -1;\n            HT_HASH_EX(arData, -2) = -1;\n            HT_HASH_EX(arData, -1) = -1;\n        } else {\n            HT_HASH_RESET(ht);\n        }\n    }\n}\n```\n\n在初始化之前，会先调用\\_zend\\_hash\\_init进行一些简单的初始化操作，但是这部分做的事情比较少，只是初始化了nTableSize=8，arData的内存大小是根据这个值确定的，它的大小是8的幂次方，最小为8；\n\n其他的初始化操作，是通过zend\\_hash\\_real\\_init\\_ex函数进行的：\n\n*   首先，将u.flags设置为`初始化`的状态\n*   将映射关系nTableMask设置为nTableSize大小的相反数\n*   申请地址空间，设备的地址空间大小是nTableMask和nTableSize的两个地址空间大小\n*   设置arData的每个元素的值为-1\n\n#### 数组的赋值\\_zend\\_hash\\_add\\_or\\_update\\_i\n\n```c\nstatic zend_always_inline zval *_zend_hash_add_or_update_i(HashTable *ht, zend_string *key, zval *pData, uint32_t flag ZEND_FILE_LINE_DC)\n{\n    zend_ulong h;\n    uint32_t nIndex;\n    uint32_t idx;\n    Bucket *p;\n\n    IS_CONSISTENT(ht);\n    HT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n    if (UNEXPECTED(!(ht->u.flags & HASH_FLAG_INITIALIZED))) {\n        CHECK_INIT(ht, 0);\n        goto add_to_hash;\n    } else if (ht->u.flags & HASH_FLAG_PACKED) {\n        zend_hash_packed_to_hash(ht);\n    } else if ((flag & HASH_ADD_NEW) == 0) {\n        p = zend_hash_find_bucket(ht, key);\n\n        if (p) {\n            zval *data;\n\n            if (flag & HASH_ADD) {\n                if (!(flag & HASH_UPDATE_INDIRECT)) {\n                    return NULL;\n                }\n                ZEND_ASSERT(&p->val != pData);\n                data = &p->val;\n                if (Z_TYPE_P(data) == IS_INDIRECT) {\n                    data = Z_INDIRECT_P(data);\n                    if (Z_TYPE_P(data) != IS_UNDEF) {\n                        return NULL;\n                    }\n                } else {\n                    return NULL;\n                }\n            } else {\n                ZEND_ASSERT(&p->val != pData);\n                data = &p->val;\n                if ((flag & HASH_UPDATE_INDIRECT) && Z_TYPE_P(data) == IS_INDIRECT) {\n                    data = Z_INDIRECT_P(data);\n                }\n            }\n            if (ht->pDestructor) {\n                ht->pDestructor(data);\n            }\n            ZVAL_COPY_VALUE(data, pData);\n            return data;\n        }\n    }\n\n    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        /* If the Hash table is full, resize it */\n\nadd_to_hash:\n    idx = ht->nNumUsed++;\n    ht->nNumOfElements++;\n    if (ht->nInternalPointer == HT_INVALID_IDX) {\n        ht->nInternalPointer = idx;\n    }\n    zend_hash_iterators_update(ht, HT_INVALID_IDX, idx);\n    p = ht->arData + idx;\n    p->key = key;\n    if (!ZSTR_IS_INTERNED(key)) {\n        zend_string_addref(key);\n        ht->u.flags &= ~HASH_FLAG_STATIC_KEYS;\n        zend_string_hash_val(key);\n    }\n    p->h = h = ZSTR_H(key);\n    ZVAL_COPY_VALUE(&p->val, pData);\n    nIndex = h  ht->nTableMask;\n    Z_NEXT(p->val) = HT_HASH(ht, nIndex);\n    HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(idx);\n\n    return &p->val;\n}\n```\n\n*   首先，在赋值之前，会先判断数组是否已经被初始化过，如果初始化那么就进行赋值的操作\n*   赋值的时候，会把nNumUsed进行累加，然后得到arData的位置\n*   将赋值的bucket设置hash code和key等成员变量\n*   根据hash code，计算出在nTableMask对应的位置为nIndex\n*   将arData的位置，存储到nTableMask对应的nIndex的值上面\n\n![](/uploads/2020/01/绘图1.png)\n\n本文链接: [https://feilong.tech/2020/10/25/php-array](https://feilong.tech/2020/10/25/php-array)","source":"_posts/php-array.md","raw":"---\ntitle: PHP数组的存储\ntags:\n  - PHP\n  - PHP7\n  - PHP源码\nid: '737'\ncategories:\n  - - PHP\n  - - PHP源码\ndate: 2020-10-25 19:54:17\n---\n\nPHP数组是PHP最复杂的数据结构，没有之一，如果能把数据彻底搞透，那么其他的数据结构也能理解的差不多了。\n\n#### 数据结构\n\n```c\n\ntypedef struct _Bucket {\n    zval              val;\n    zend_ulong        h;                /* hash value (or numeric index)   */\n    zend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n\ntypedef struct _zend_array HashTable;\n\nstruct _zend_array {\n    zend_refcounted_h gc;\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_4(\n                zend_uchar    flags,\n                zend_uchar    nApplyCount,\n                zend_uchar    nIteratorsCount,\n                zend_uchar    consistency)\n        } v;\n        uint32_t flags;\n    } u;\n    uint32_t          nTableMask; // 中间映射表，用来映射在arData的存储位置\n    Bucket           *arData; // 元素的存储数据结构，默认指向第一个元素\n    uint32_t          nNumUsed; // arData使用的个数\n    uint32_t          nNumOfElements; // 数组的个数\n    uint32_t          nTableSize; // 数组的大小\n    uint32_t          nInternalPointer;\n    zend_long         nNextFreeElement;\n    dtor_func_t       pDestructor;\n};\n```\n\n#### 数组的初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n    GC_REFCOUNT(ht) = 1;\n    GC_TYPE_INFO(ht) = IS_ARRAY;\n    ht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0)  HASH_FLAG_APPLY_PROTECTION  HASH_FLAG_STATIC_KEYS;\n    ht->nTableMask = HT_MIN_MASK;\n    HT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n    ht->nNumUsed = 0;\n    ht->nNumOfElements = 0;\n    ht->nInternalPointer = HT_INVALID_IDX;\n    ht->nNextFreeElement = 0;\n    ht->pDestructor = pDestructor;\n    ht->nTableSize = zend_hash_check_size(nSize);\n}\n\nstatic zend_always_inline void zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n    HT_ASSERT(GC_REFCOUNT(ht) == 1);\n    ZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n    if (packed) {\n        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n        (ht)->u.flags = HASH_FLAG_INITIALIZED  HASH_FLAG_PACKED;\n        HT_HASH_RESET_PACKED(ht);\n    } else {\n        (ht)->nTableMask = -(ht)->nTableSize;\n        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n        (ht)->u.flags = HASH_FLAG_INITIALIZED;\n        if (EXPECTED(ht->nTableMask == (uint32_t)-8)) {\n            Bucket *arData = ht->arData;\n\n            HT_HASH_EX(arData, -8) = -1;\n            HT_HASH_EX(arData, -7) = -1;\n            HT_HASH_EX(arData, -6) = -1;\n            HT_HASH_EX(arData, -5) = -1;\n            HT_HASH_EX(arData, -4) = -1;\n            HT_HASH_EX(arData, -3) = -1;\n            HT_HASH_EX(arData, -2) = -1;\n            HT_HASH_EX(arData, -1) = -1;\n        } else {\n            HT_HASH_RESET(ht);\n        }\n    }\n}\n```\n\n在初始化之前，会先调用\\_zend\\_hash\\_init进行一些简单的初始化操作，但是这部分做的事情比较少，只是初始化了nTableSize=8，arData的内存大小是根据这个值确定的，它的大小是8的幂次方，最小为8；\n\n其他的初始化操作，是通过zend\\_hash\\_real\\_init\\_ex函数进行的：\n\n*   首先，将u.flags设置为`初始化`的状态\n*   将映射关系nTableMask设置为nTableSize大小的相反数\n*   申请地址空间，设备的地址空间大小是nTableMask和nTableSize的两个地址空间大小\n*   设置arData的每个元素的值为-1\n\n#### 数组的赋值\\_zend\\_hash\\_add\\_or\\_update\\_i\n\n```c\nstatic zend_always_inline zval *_zend_hash_add_or_update_i(HashTable *ht, zend_string *key, zval *pData, uint32_t flag ZEND_FILE_LINE_DC)\n{\n    zend_ulong h;\n    uint32_t nIndex;\n    uint32_t idx;\n    Bucket *p;\n\n    IS_CONSISTENT(ht);\n    HT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n    if (UNEXPECTED(!(ht->u.flags & HASH_FLAG_INITIALIZED))) {\n        CHECK_INIT(ht, 0);\n        goto add_to_hash;\n    } else if (ht->u.flags & HASH_FLAG_PACKED) {\n        zend_hash_packed_to_hash(ht);\n    } else if ((flag & HASH_ADD_NEW) == 0) {\n        p = zend_hash_find_bucket(ht, key);\n\n        if (p) {\n            zval *data;\n\n            if (flag & HASH_ADD) {\n                if (!(flag & HASH_UPDATE_INDIRECT)) {\n                    return NULL;\n                }\n                ZEND_ASSERT(&p->val != pData);\n                data = &p->val;\n                if (Z_TYPE_P(data) == IS_INDIRECT) {\n                    data = Z_INDIRECT_P(data);\n                    if (Z_TYPE_P(data) != IS_UNDEF) {\n                        return NULL;\n                    }\n                } else {\n                    return NULL;\n                }\n            } else {\n                ZEND_ASSERT(&p->val != pData);\n                data = &p->val;\n                if ((flag & HASH_UPDATE_INDIRECT) && Z_TYPE_P(data) == IS_INDIRECT) {\n                    data = Z_INDIRECT_P(data);\n                }\n            }\n            if (ht->pDestructor) {\n                ht->pDestructor(data);\n            }\n            ZVAL_COPY_VALUE(data, pData);\n            return data;\n        }\n    }\n\n    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        /* If the Hash table is full, resize it */\n\nadd_to_hash:\n    idx = ht->nNumUsed++;\n    ht->nNumOfElements++;\n    if (ht->nInternalPointer == HT_INVALID_IDX) {\n        ht->nInternalPointer = idx;\n    }\n    zend_hash_iterators_update(ht, HT_INVALID_IDX, idx);\n    p = ht->arData + idx;\n    p->key = key;\n    if (!ZSTR_IS_INTERNED(key)) {\n        zend_string_addref(key);\n        ht->u.flags &= ~HASH_FLAG_STATIC_KEYS;\n        zend_string_hash_val(key);\n    }\n    p->h = h = ZSTR_H(key);\n    ZVAL_COPY_VALUE(&p->val, pData);\n    nIndex = h  ht->nTableMask;\n    Z_NEXT(p->val) = HT_HASH(ht, nIndex);\n    HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(idx);\n\n    return &p->val;\n}\n```\n\n*   首先，在赋值之前，会先判断数组是否已经被初始化过，如果初始化那么就进行赋值的操作\n*   赋值的时候，会把nNumUsed进行累加，然后得到arData的位置\n*   将赋值的bucket设置hash code和key等成员变量\n*   根据hash code，计算出在nTableMask对应的位置为nIndex\n*   将arData的位置，存储到nTableMask对应的nIndex的值上面\n\n![](/uploads/2020/01/绘图1.png)\n\n本文链接: [https://feilong.tech/2020/10/25/php-array](https://feilong.tech/2020/10/25/php-array)","slug":"php-array","published":1,"updated":"2022-03-13T01:18:42.687Z","_id":"cl0oi8mh30055417tepvb853s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>PHP数组是PHP最复杂的数据结构，没有之一，如果能把数据彻底搞透，那么其他的数据结构也能理解的差不多了。</p>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Bucket</span> &#123;</span></span><br><span class=\"line\">    zval              val;</span><br><span class=\"line\">    zend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></span><br><span class=\"line\">    zend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></span><br><span class=\"line\">&#125; Bucket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">HashTable</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> &#123;</span></span><br><span class=\"line\">    zend_refcounted_h gc;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">            ZEND_ENDIAN_LOHI_4(</span><br><span class=\"line\">                zend_uchar    flags,</span><br><span class=\"line\">                zend_uchar    nApplyCount,</span><br><span class=\"line\">                zend_uchar    nIteratorsCount,</span><br><span class=\"line\">                zend_uchar    consistency)</span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> flags;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nTableMask; <span class=\"comment\">// 中间映射表，用来映射在arData的存储位置</span></span><br><span class=\"line\">    Bucket           *arData; <span class=\"comment\">// 元素的存储数据结构，默认指向第一个元素</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nNumUsed; <span class=\"comment\">// arData使用的个数</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nNumOfElements; <span class=\"comment\">// 数组的个数</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nTableSize; <span class=\"comment\">// 数组的大小</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nInternalPointer;</span><br><span class=\"line\">    zend_long         nNextFreeElement;</span><br><span class=\"line\">    <span class=\"type\">dtor_func_t</span>       pDestructor;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组的初始化\"><a href=\"#数组的初始化\" class=\"headerlink\" title=\"数组的初始化\"></a>数组的初始化</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_API <span class=\"type\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"type\">uint32_t</span> nSize, <span class=\"type\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    GC_REFCOUNT(ht) = <span class=\"number\">1</span>;</span><br><span class=\"line\">    GC_TYPE_INFO(ht) = IS_ARRAY;</span><br><span class=\"line\">    ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>)  HASH_FLAG_APPLY_PROTECTION  HASH_FLAG_STATIC_KEYS;</span><br><span class=\"line\">    ht-&gt;nTableMask = HT_MIN_MASK;</span><br><span class=\"line\">    HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</span><br><span class=\"line\">    ht-&gt;nNumUsed = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ht-&gt;nNumOfElements = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ht-&gt;nInternalPointer = HT_INVALID_IDX;</span><br><span class=\"line\">    ht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ht-&gt;pDestructor = pDestructor;</span><br><span class=\"line\">    ht-&gt;nTableSize = zend_hash_check_size(nSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> zend_always_inline <span class=\"type\">void</span> <span class=\"title function_\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"type\">int</span> packed)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</span><br><span class=\"line\">    ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (packed) &#123;</span><br><span class=\"line\">        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</span><br><span class=\"line\">        (ht)-&gt;u.flags = HASH_FLAG_INITIALIZED  HASH_FLAG_PACKED;</span><br><span class=\"line\">        HT_HASH_RESET_PACKED(ht);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        (ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</span><br><span class=\"line\">        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</span><br><span class=\"line\">        (ht)-&gt;u.flags = HASH_FLAG_INITIALIZED;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == (<span class=\"type\">uint32_t</span>)<span class=\"number\">-8</span>)) &#123;</span><br><span class=\"line\">            Bucket *arData = ht-&gt;arData;</span><br><span class=\"line\"></span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            HT_HASH_RESET(ht);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在初始化之前，会先调用_zend_hash_init进行一些简单的初始化操作，但是这部分做的事情比较少，只是初始化了nTableSize&#x3D;8，arData的内存大小是根据这个值确定的，它的大小是8的幂次方，最小为8；</p>\n<p>其他的初始化操作，是通过zend_hash_real_init_ex函数进行的：</p>\n<ul>\n<li>首先，将u.flags设置为<code>初始化</code>的状态</li>\n<li>将映射关系nTableMask设置为nTableSize大小的相反数</li>\n<li>申请地址空间，设备的地址空间大小是nTableMask和nTableSize的两个地址空间大小</li>\n<li>设置arData的每个元素的值为-1</li>\n</ul>\n<h4 id=\"数组的赋值-zend-hash-add-or-update-i\"><a href=\"#数组的赋值-zend-hash-add-or-update-i\" class=\"headerlink\" title=\"数组的赋值_zend_hash_add_or_update_i\"></a>数组的赋值_zend_hash_add_or_update_i</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> zend_always_inline zval *_zend_hash_add_or_update_i(HashTable *ht, zend_string *key, zval *pData, <span class=\"type\">uint32_t</span> flag ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zend_ulong h;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> nIndex;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> idx;</span><br><span class=\"line\">    Bucket *p;</span><br><span class=\"line\"></span><br><span class=\"line\">    IS_CONSISTENT(ht);</span><br><span class=\"line\">    HT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UNEXPECTED(!(ht-&gt;u.flags &amp; HASH_FLAG_INITIALIZED))) &#123;</span><br><span class=\"line\">        CHECK_INIT(ht, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> add_to_hash;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;u.flags &amp; HASH_FLAG_PACKED) &#123;</span><br><span class=\"line\">        zend_hash_packed_to_hash(ht);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((flag &amp; HASH_ADD_NEW) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        p = zend_hash_find_bucket(ht, key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p) &#123;</span><br><span class=\"line\">            zval *data;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag &amp; HASH_ADD) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(flag &amp; HASH_UPDATE_INDIRECT)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ZEND_ASSERT(&amp;p-&gt;val != pData);</span><br><span class=\"line\">                data = &amp;p-&gt;val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Z_TYPE_P(data) == IS_INDIRECT) &#123;</span><br><span class=\"line\">                    data = Z_INDIRECT_P(data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (Z_TYPE_P(data) != IS_UNDEF) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ZEND_ASSERT(&amp;p-&gt;val != pData);</span><br><span class=\"line\">                data = &amp;p-&gt;val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((flag &amp; HASH_UPDATE_INDIRECT) &amp;&amp; Z_TYPE_P(data) == IS_INDIRECT) &#123;</span><br><span class=\"line\">                    data = Z_INDIRECT_P(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ht-&gt;pDestructor) &#123;</span><br><span class=\"line\">                ht-&gt;pDestructor(data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ZVAL_COPY_VALUE(data, pData);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        <span class=\"comment\">/* If the Hash table is full, resize it */</span></span><br><span class=\"line\"></span><br><span class=\"line\">add_to_hash:</span><br><span class=\"line\">    idx = ht-&gt;nNumUsed++;</span><br><span class=\"line\">    ht-&gt;nNumOfElements++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ht-&gt;nInternalPointer == HT_INVALID_IDX) &#123;</span><br><span class=\"line\">        ht-&gt;nInternalPointer = idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    zend_hash_iterators_update(ht, HT_INVALID_IDX, idx);</span><br><span class=\"line\">    p = ht-&gt;arData + idx;</span><br><span class=\"line\">    p-&gt;key = key;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ZSTR_IS_INTERNED(key)) &#123;</span><br><span class=\"line\">        zend_string_addref(key);</span><br><span class=\"line\">        ht-&gt;u.flags &amp;= ~HASH_FLAG_STATIC_KEYS;</span><br><span class=\"line\">        zend_string_hash_val(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p-&gt;h = h = ZSTR_H(key);</span><br><span class=\"line\">    ZVAL_COPY_VALUE(&amp;p-&gt;val, pData);</span><br><span class=\"line\">    nIndex = h  ht-&gt;nTableMask;</span><br><span class=\"line\">    Z_NEXT(p-&gt;val) = HT_HASH(ht, nIndex);</span><br><span class=\"line\">    HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(idx);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;p-&gt;val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先，在赋值之前，会先判断数组是否已经被初始化过，如果初始化那么就进行赋值的操作</li>\n<li>赋值的时候，会把nNumUsed进行累加，然后得到arData的位置</li>\n<li>将赋值的bucket设置hash code和key等成员变量</li>\n<li>根据hash code，计算出在nTableMask对应的位置为nIndex</li>\n<li>将arData的位置，存储到nTableMask对应的nIndex的值上面</li>\n</ul>\n<p><img src=\"/uploads/2020/01/%E7%BB%98%E5%9B%BE1.png\"></p>\n<p>本文链接: <a href=\"https://feilong.tech/2020/10/25/php-array\">https://feilong.tech/2020/10/25/php-array</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>PHP数组是PHP最复杂的数据结构，没有之一，如果能把数据彻底搞透，那么其他的数据结构也能理解的差不多了。</p>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Bucket</span> &#123;</span></span><br><span class=\"line\">    zval              val;</span><br><span class=\"line\">    zend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></span><br><span class=\"line\">    zend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></span><br><span class=\"line\">&#125; Bucket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">HashTable</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> &#123;</span></span><br><span class=\"line\">    zend_refcounted_h gc;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">            ZEND_ENDIAN_LOHI_4(</span><br><span class=\"line\">                zend_uchar    flags,</span><br><span class=\"line\">                zend_uchar    nApplyCount,</span><br><span class=\"line\">                zend_uchar    nIteratorsCount,</span><br><span class=\"line\">                zend_uchar    consistency)</span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> flags;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nTableMask; <span class=\"comment\">// 中间映射表，用来映射在arData的存储位置</span></span><br><span class=\"line\">    Bucket           *arData; <span class=\"comment\">// 元素的存储数据结构，默认指向第一个元素</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nNumUsed; <span class=\"comment\">// arData使用的个数</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nNumOfElements; <span class=\"comment\">// 数组的个数</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nTableSize; <span class=\"comment\">// 数组的大小</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>          nInternalPointer;</span><br><span class=\"line\">    zend_long         nNextFreeElement;</span><br><span class=\"line\">    <span class=\"type\">dtor_func_t</span>       pDestructor;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组的初始化\"><a href=\"#数组的初始化\" class=\"headerlink\" title=\"数组的初始化\"></a>数组的初始化</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_API <span class=\"type\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"type\">uint32_t</span> nSize, <span class=\"type\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    GC_REFCOUNT(ht) = <span class=\"number\">1</span>;</span><br><span class=\"line\">    GC_TYPE_INFO(ht) = IS_ARRAY;</span><br><span class=\"line\">    ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>)  HASH_FLAG_APPLY_PROTECTION  HASH_FLAG_STATIC_KEYS;</span><br><span class=\"line\">    ht-&gt;nTableMask = HT_MIN_MASK;</span><br><span class=\"line\">    HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</span><br><span class=\"line\">    ht-&gt;nNumUsed = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ht-&gt;nNumOfElements = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ht-&gt;nInternalPointer = HT_INVALID_IDX;</span><br><span class=\"line\">    ht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ht-&gt;pDestructor = pDestructor;</span><br><span class=\"line\">    ht-&gt;nTableSize = zend_hash_check_size(nSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> zend_always_inline <span class=\"type\">void</span> <span class=\"title function_\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"type\">int</span> packed)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</span><br><span class=\"line\">    ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (packed) &#123;</span><br><span class=\"line\">        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</span><br><span class=\"line\">        (ht)-&gt;u.flags = HASH_FLAG_INITIALIZED  HASH_FLAG_PACKED;</span><br><span class=\"line\">        HT_HASH_RESET_PACKED(ht);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        (ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</span><br><span class=\"line\">        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</span><br><span class=\"line\">        (ht)-&gt;u.flags = HASH_FLAG_INITIALIZED;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == (<span class=\"type\">uint32_t</span>)<span class=\"number\">-8</span>)) &#123;</span><br><span class=\"line\">            Bucket *arData = ht-&gt;arData;</span><br><span class=\"line\"></span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            HT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            HT_HASH_RESET(ht);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在初始化之前，会先调用_zend_hash_init进行一些简单的初始化操作，但是这部分做的事情比较少，只是初始化了nTableSize&#x3D;8，arData的内存大小是根据这个值确定的，它的大小是8的幂次方，最小为8；</p>\n<p>其他的初始化操作，是通过zend_hash_real_init_ex函数进行的：</p>\n<ul>\n<li>首先，将u.flags设置为<code>初始化</code>的状态</li>\n<li>将映射关系nTableMask设置为nTableSize大小的相反数</li>\n<li>申请地址空间，设备的地址空间大小是nTableMask和nTableSize的两个地址空间大小</li>\n<li>设置arData的每个元素的值为-1</li>\n</ul>\n<h4 id=\"数组的赋值-zend-hash-add-or-update-i\"><a href=\"#数组的赋值-zend-hash-add-or-update-i\" class=\"headerlink\" title=\"数组的赋值_zend_hash_add_or_update_i\"></a>数组的赋值_zend_hash_add_or_update_i</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> zend_always_inline zval *_zend_hash_add_or_update_i(HashTable *ht, zend_string *key, zval *pData, <span class=\"type\">uint32_t</span> flag ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zend_ulong h;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> nIndex;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> idx;</span><br><span class=\"line\">    Bucket *p;</span><br><span class=\"line\"></span><br><span class=\"line\">    IS_CONSISTENT(ht);</span><br><span class=\"line\">    HT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UNEXPECTED(!(ht-&gt;u.flags &amp; HASH_FLAG_INITIALIZED))) &#123;</span><br><span class=\"line\">        CHECK_INIT(ht, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> add_to_hash;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;u.flags &amp; HASH_FLAG_PACKED) &#123;</span><br><span class=\"line\">        zend_hash_packed_to_hash(ht);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((flag &amp; HASH_ADD_NEW) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        p = zend_hash_find_bucket(ht, key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p) &#123;</span><br><span class=\"line\">            zval *data;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag &amp; HASH_ADD) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(flag &amp; HASH_UPDATE_INDIRECT)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ZEND_ASSERT(&amp;p-&gt;val != pData);</span><br><span class=\"line\">                data = &amp;p-&gt;val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Z_TYPE_P(data) == IS_INDIRECT) &#123;</span><br><span class=\"line\">                    data = Z_INDIRECT_P(data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (Z_TYPE_P(data) != IS_UNDEF) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ZEND_ASSERT(&amp;p-&gt;val != pData);</span><br><span class=\"line\">                data = &amp;p-&gt;val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((flag &amp; HASH_UPDATE_INDIRECT) &amp;&amp; Z_TYPE_P(data) == IS_INDIRECT) &#123;</span><br><span class=\"line\">                    data = Z_INDIRECT_P(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ht-&gt;pDestructor) &#123;</span><br><span class=\"line\">                ht-&gt;pDestructor(data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ZVAL_COPY_VALUE(data, pData);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        <span class=\"comment\">/* If the Hash table is full, resize it */</span></span><br><span class=\"line\"></span><br><span class=\"line\">add_to_hash:</span><br><span class=\"line\">    idx = ht-&gt;nNumUsed++;</span><br><span class=\"line\">    ht-&gt;nNumOfElements++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ht-&gt;nInternalPointer == HT_INVALID_IDX) &#123;</span><br><span class=\"line\">        ht-&gt;nInternalPointer = idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    zend_hash_iterators_update(ht, HT_INVALID_IDX, idx);</span><br><span class=\"line\">    p = ht-&gt;arData + idx;</span><br><span class=\"line\">    p-&gt;key = key;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ZSTR_IS_INTERNED(key)) &#123;</span><br><span class=\"line\">        zend_string_addref(key);</span><br><span class=\"line\">        ht-&gt;u.flags &amp;= ~HASH_FLAG_STATIC_KEYS;</span><br><span class=\"line\">        zend_string_hash_val(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p-&gt;h = h = ZSTR_H(key);</span><br><span class=\"line\">    ZVAL_COPY_VALUE(&amp;p-&gt;val, pData);</span><br><span class=\"line\">    nIndex = h  ht-&gt;nTableMask;</span><br><span class=\"line\">    Z_NEXT(p-&gt;val) = HT_HASH(ht, nIndex);</span><br><span class=\"line\">    HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(idx);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;p-&gt;val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先，在赋值之前，会先判断数组是否已经被初始化过，如果初始化那么就进行赋值的操作</li>\n<li>赋值的时候，会把nNumUsed进行累加，然后得到arData的位置</li>\n<li>将赋值的bucket设置hash code和key等成员变量</li>\n<li>根据hash code，计算出在nTableMask对应的位置为nIndex</li>\n<li>将arData的位置，存储到nTableMask对应的nIndex的值上面</li>\n</ul>\n<p><img src=\"/uploads/2020/01/%E7%BB%98%E5%9B%BE1.png\"></p>\n<p>本文链接: <a href=\"https://feilong.tech/2020/10/25/php-array\">https://feilong.tech/2020/10/25/php-array</a></p>\n"},{"title":"PHP curl传送json数据","id":"136","date":"2017-08-24T12:11:54.000Z","_content":"\n### PHP curl传送json数据\n\n#### 说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\n\n#### 今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file\\_get\\_contents()和json\\_decode()。\n<!-- more -->\n#### 1)定义数据格式\n\n```php\n$params = array(\n    'name' => 'Tyler Teng',\n    'sex'  => 'male'\n);\n$params = json_encode($params);\n```\n\n#### 2)创建curl句柄，并且采用post方式进行传输\n\n```php\n$url    =  'http://localhost/get.php';\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $params);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n$out = curl_exec($ch);\ncurl_close($ch);\n```\n\n#### 3) 一般情况下，我们会在get.php使用\n\n```php\nprint_r($_POST);\n//string 'Array()' (length=10)\n```\n\n这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用\n\n```php\nprint_r(file_get_contents('php://input'));\n//string '{\"name\":\"Tyler Teng\",\"sex\":\"male\"}' (length=34)\n```\n\n来检验一下是不是有数据。\n\n#### 4)使用json\\_decode()函数进行解析。\n\n```php\n$json = file_get_contents('php://input');\n$array = json_decode($json, true);\n```\n\n#### 5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\n\n```php\necho $array['name'];\n//string 'Tyler Teng' (length=10)\n```","source":"_posts/php-curl-json.md","raw":"---\ntitle: PHP curl传送json数据\ntags: []\nid: '136'\ncategories:\n  - - PHP\ndate: 2017-08-24 20:11:54\n---\n\n### PHP curl传送json数据\n\n#### 说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\n\n#### 今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file\\_get\\_contents()和json\\_decode()。\n<!-- more -->\n#### 1)定义数据格式\n\n```php\n$params = array(\n    'name' => 'Tyler Teng',\n    'sex'  => 'male'\n);\n$params = json_encode($params);\n```\n\n#### 2)创建curl句柄，并且采用post方式进行传输\n\n```php\n$url    =  'http://localhost/get.php';\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $params);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n$out = curl_exec($ch);\ncurl_close($ch);\n```\n\n#### 3) 一般情况下，我们会在get.php使用\n\n```php\nprint_r($_POST);\n//string 'Array()' (length=10)\n```\n\n这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用\n\n```php\nprint_r(file_get_contents('php://input'));\n//string '{\"name\":\"Tyler Teng\",\"sex\":\"male\"}' (length=34)\n```\n\n来检验一下是不是有数据。\n\n#### 4)使用json\\_decode()函数进行解析。\n\n```php\n$json = file_get_contents('php://input');\n$array = json_decode($json, true);\n```\n\n#### 5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\n\n```php\necho $array['name'];\n//string 'Tyler Teng' (length=10)\n```","slug":"php-curl-json","published":1,"updated":"2022-03-12T23:52:58.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mh6005a417tg0qlfne0","content":"<h3 id=\"PHP-curl传送json数据\"><a href=\"#PHP-curl传送json数据\" class=\"headerlink\" title=\"PHP curl传送json数据\"></a>PHP curl传送json数据</h3><h4 id=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"><a href=\"#说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\" class=\"headerlink\" title=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"></a>说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）</h4><h4 id=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\"><a href=\"#今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\" class=\"headerlink\" title=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。\"></a>今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。</h4><span id=\"more\"></span>\n<h4 id=\"1-定义数据格式\"><a href=\"#1-定义数据格式\" class=\"headerlink\" title=\"1)定义数据格式\"></a>1)定义数据格式</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$params</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;Tyler Teng&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;sex&#x27;</span>  =&gt; <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable\">$params</span> = <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$params</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建curl句柄，并且采用post方式进行传输\"><a href=\"#2-创建curl句柄，并且采用post方式进行传输\" class=\"headerlink\" title=\"2)创建curl句柄，并且采用post方式进行传输\"></a>2)创建curl句柄，并且采用post方式进行传输</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$url</span>    =  <span class=\"string\">&#x27;http://localhost/get.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$ch</span> = <span class=\"title function_ invoke__\">curl_init</span>();</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_URL, <span class=\"variable\">$url</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_POST, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_POSTFIELDS, <span class=\"variable\">$params</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$out</span> = <span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-一般情况下，我们会在get-php使用\"><a href=\"#3-一般情况下，我们会在get-php使用\" class=\"headerlink\" title=\"3) 一般情况下，我们会在get.php使用\"></a>3) 一般情况下，我们会在get.php使用</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$_POST</span>);</span><br><span class=\"line\"><span class=\"comment\">//string &#x27;Array()&#x27; (length=10)</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://input&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//string &#x27;&#123;&quot;name&quot;:&quot;Tyler Teng&quot;,&quot;sex&quot;:&quot;male&quot;&#125;&#x27; (length=34)</span></span><br></pre></td></tr></table></figure>\n\n<p>来检验一下是不是有数据。</p>\n<h4 id=\"4-使用json-decode-函数进行解析。\"><a href=\"#4-使用json-decode-函数进行解析。\" class=\"headerlink\" title=\"4)使用json_decode()函数进行解析。\"></a>4)使用json_decode()函数进行解析。</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$json</span> = <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$array</span> = <span class=\"title function_ invoke__\">json_decode</span>(<span class=\"variable\">$json</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"><a href=\"#5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\" class=\"headerlink\" title=\"5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"></a>5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$array</span>[<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//string &#x27;Tyler Teng&#x27; (length=10)</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"PHP-curl传送json数据\"><a href=\"#PHP-curl传送json数据\" class=\"headerlink\" title=\"PHP curl传送json数据\"></a>PHP curl传送json数据</h3><h4 id=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"><a href=\"#说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\" class=\"headerlink\" title=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"></a>说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）</h4><h4 id=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\"><a href=\"#今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\" class=\"headerlink\" title=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。\"></a>今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。</h4>","more":"<h4 id=\"1-定义数据格式\"><a href=\"#1-定义数据格式\" class=\"headerlink\" title=\"1)定义数据格式\"></a>1)定义数据格式</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$params</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;Tyler Teng&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;sex&#x27;</span>  =&gt; <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable\">$params</span> = <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$params</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建curl句柄，并且采用post方式进行传输\"><a href=\"#2-创建curl句柄，并且采用post方式进行传输\" class=\"headerlink\" title=\"2)创建curl句柄，并且采用post方式进行传输\"></a>2)创建curl句柄，并且采用post方式进行传输</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$url</span>    =  <span class=\"string\">&#x27;http://localhost/get.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$ch</span> = <span class=\"title function_ invoke__\">curl_init</span>();</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_URL, <span class=\"variable\">$url</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_POST, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_POSTFIELDS, <span class=\"variable\">$params</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$out</span> = <span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-一般情况下，我们会在get-php使用\"><a href=\"#3-一般情况下，我们会在get-php使用\" class=\"headerlink\" title=\"3) 一般情况下，我们会在get.php使用\"></a>3) 一般情况下，我们会在get.php使用</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$_POST</span>);</span><br><span class=\"line\"><span class=\"comment\">//string &#x27;Array()&#x27; (length=10)</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://input&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//string &#x27;&#123;&quot;name&quot;:&quot;Tyler Teng&quot;,&quot;sex&quot;:&quot;male&quot;&#125;&#x27; (length=34)</span></span><br></pre></td></tr></table></figure>\n\n<p>来检验一下是不是有数据。</p>\n<h4 id=\"4-使用json-decode-函数进行解析。\"><a href=\"#4-使用json-decode-函数进行解析。\" class=\"headerlink\" title=\"4)使用json_decode()函数进行解析。\"></a>4)使用json_decode()函数进行解析。</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$json</span> = <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$array</span> = <span class=\"title function_ invoke__\">json_decode</span>(<span class=\"variable\">$json</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"><a href=\"#5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\" class=\"headerlink\" title=\"5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"></a>5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$array</span>[<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//string &#x27;Tyler Teng&#x27; (length=10)</span></span><br></pre></td></tr></table></figure>"},{"title":"PHP设计模式--工厂模式","id":"190","comments":0,"date":"2018-01-02T14:01:52.000Z","_content":"\n工厂模式就是创建“某种东西”。对于工厂模式，要创建的是一个“产品”，这个产品与创建它的类之间不存在绑定。实际上，为了保持这种松耦合，客户会通过一个工厂发出请求，再由工厂创建请求的产品。\n\n## 何时使用工厂方法\n\n如果一个类要创建的对象数目固定，而且已知，name构建这个类时，就可以采用一种可以预测的方式创建制定数目的对象。例如，如果你要开发一个世界的地图应用，由不同的对象表示七大洲，可以肯定的是，这些对象不会改变。另一方面，如果你要为不同种类的昆虫创建一个网站，肯定会不断发现新的昆虫，或者有些昆虫会有改变，还有可能某些品种会在短时间内灭绝。要处理这种变化，程序必须充分的灵活性。这种项目就可以考虑使用工厂模式。\n\n![](/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png)\n\n## 优势\n\n我感觉工厂模式的最大优势在于封装，把对象相互隔离，没有影响。\n\n## 最简单的例子\n\n### 工厂\n\n第一步是建立工厂。我们使用一个抽象类Creator作为接口。\n\n```php\n<?php\n// Creator\nabstract class Creator {\n\n    protected abstract function factoryMethod();\n\n    public function startFactory() {\n        $mfg  = $this->factoryMethod();\n        return $mfg;\n    }\n}\n```\n\n第二步是集成实现这个接口。我使用了两个子类来实现接口的方法。\n\n```php\n<?php\n//TextFactory.php\ninclude_once 'Creator.php';\ninclude_once 'TextProduct.php';\n\nclass TextFactory extends Creator {\n\n    protected function factoryMethod() {\n        $product = new TextProduct();\n        return $product->getProperties();\n    }\n\n}\n```\n\n```php\n<?php\n// GraphicFactory\ninclude_once 'Creator.php';\ninclude_once 'GraphicProduct.php';\n\nclass GraphicFactory extends Creator {\n\n    protected function factoryMethod() {\n        $product = new GraphicProduct();\n        return $product->getProperties();\n    }\n}\n```\n\n### 产品\n\n工厂模式的第二个接口就是产品，其实“产品”这个含义是相对于“工厂”的概念，并不一定是实实在在的产品，比如，我们可以把人当初产品等等。\n\n```php\n<?php\ninterface Product {\n    public function getProperties();\n}\n```\n\n同样的，我们再使用两个子类分别继承实现Product的属性。这里有两个“产品”，分别是 图像 和 文字，但是两个“产品”的属性是不一样的。\n\n```php\n<?php\n//GraphicProduct\ninclude_once 'Product.php';\nclass GraphicProduct implements Product {\n\n    private $mfgProduct;\n\n    public function getProperties() {\n        $this->mfgProduct = \"This is a graphic.\";\n        return $this->mfgProduct;\n    }\n\n}\n```\n\n```php\n<?php\n// TextProduct\ninclude_once 'Product.php';\nclass TextProduct implements Product {\n\n    private $mfgProduct;\n\n    public function getProperties() {\n        $this->mfgProduct = \"This is a text .\";\n        return $this->mfgProduct;\n    }\n}\n```\n\n### 客户\n\n客户就是指代码运行结果的显示终端，也就是所说的客户端了\n\n```php\n<?php\ninclude_once 'GraphicFactory.php';\ninclude_once 'TextFactory.php';\n\nclass Client {\n    private $someGraphicObject;\n    private $someTextObject;\n\n    public function __construct() {\n        $this->someGraphicObject = new GraphicFactory();\n        echo $this->someGraphicObject->startFactory() . \"\\n\";\n        $this->someTextProduct = new TextFactory();\n        echo $this->someTextProduct->startFactory() . \"\\n\";\n    }\n\n}\n$worker = new Client();\n```\n\n### 代码运行\n\n```shell\nfeilongdeMBP:Factory feilong$ php Client.php\nThis is a graphic.\nThis is a text\n```\n\n## 参考资料\n\n*   Learning PHP设计模式\n\n## 附件\n\n*   [PHP工厂模式demo](/uploads/2018/01/Factory.zip)","source":"_posts/php-factory.md","raw":"---\ntitle: PHP设计模式--工厂模式\ntags: []\nid: '190'\ncategories:\n  - - PHP\n  - - PHP设计模式\ncomments: false\ndate: 2018-01-02 22:01:52\n---\n\n工厂模式就是创建“某种东西”。对于工厂模式，要创建的是一个“产品”，这个产品与创建它的类之间不存在绑定。实际上，为了保持这种松耦合，客户会通过一个工厂发出请求，再由工厂创建请求的产品。\n\n## 何时使用工厂方法\n\n如果一个类要创建的对象数目固定，而且已知，name构建这个类时，就可以采用一种可以预测的方式创建制定数目的对象。例如，如果你要开发一个世界的地图应用，由不同的对象表示七大洲，可以肯定的是，这些对象不会改变。另一方面，如果你要为不同种类的昆虫创建一个网站，肯定会不断发现新的昆虫，或者有些昆虫会有改变，还有可能某些品种会在短时间内灭绝。要处理这种变化，程序必须充分的灵活性。这种项目就可以考虑使用工厂模式。\n\n![](/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png)\n\n## 优势\n\n我感觉工厂模式的最大优势在于封装，把对象相互隔离，没有影响。\n\n## 最简单的例子\n\n### 工厂\n\n第一步是建立工厂。我们使用一个抽象类Creator作为接口。\n\n```php\n<?php\n// Creator\nabstract class Creator {\n\n    protected abstract function factoryMethod();\n\n    public function startFactory() {\n        $mfg  = $this->factoryMethod();\n        return $mfg;\n    }\n}\n```\n\n第二步是集成实现这个接口。我使用了两个子类来实现接口的方法。\n\n```php\n<?php\n//TextFactory.php\ninclude_once 'Creator.php';\ninclude_once 'TextProduct.php';\n\nclass TextFactory extends Creator {\n\n    protected function factoryMethod() {\n        $product = new TextProduct();\n        return $product->getProperties();\n    }\n\n}\n```\n\n```php\n<?php\n// GraphicFactory\ninclude_once 'Creator.php';\ninclude_once 'GraphicProduct.php';\n\nclass GraphicFactory extends Creator {\n\n    protected function factoryMethod() {\n        $product = new GraphicProduct();\n        return $product->getProperties();\n    }\n}\n```\n\n### 产品\n\n工厂模式的第二个接口就是产品，其实“产品”这个含义是相对于“工厂”的概念，并不一定是实实在在的产品，比如，我们可以把人当初产品等等。\n\n```php\n<?php\ninterface Product {\n    public function getProperties();\n}\n```\n\n同样的，我们再使用两个子类分别继承实现Product的属性。这里有两个“产品”，分别是 图像 和 文字，但是两个“产品”的属性是不一样的。\n\n```php\n<?php\n//GraphicProduct\ninclude_once 'Product.php';\nclass GraphicProduct implements Product {\n\n    private $mfgProduct;\n\n    public function getProperties() {\n        $this->mfgProduct = \"This is a graphic.\";\n        return $this->mfgProduct;\n    }\n\n}\n```\n\n```php\n<?php\n// TextProduct\ninclude_once 'Product.php';\nclass TextProduct implements Product {\n\n    private $mfgProduct;\n\n    public function getProperties() {\n        $this->mfgProduct = \"This is a text .\";\n        return $this->mfgProduct;\n    }\n}\n```\n\n### 客户\n\n客户就是指代码运行结果的显示终端，也就是所说的客户端了\n\n```php\n<?php\ninclude_once 'GraphicFactory.php';\ninclude_once 'TextFactory.php';\n\nclass Client {\n    private $someGraphicObject;\n    private $someTextObject;\n\n    public function __construct() {\n        $this->someGraphicObject = new GraphicFactory();\n        echo $this->someGraphicObject->startFactory() . \"\\n\";\n        $this->someTextProduct = new TextFactory();\n        echo $this->someTextProduct->startFactory() . \"\\n\";\n    }\n\n}\n$worker = new Client();\n```\n\n### 代码运行\n\n```shell\nfeilongdeMBP:Factory feilong$ php Client.php\nThis is a graphic.\nThis is a text\n```\n\n## 参考资料\n\n*   Learning PHP设计模式\n\n## 附件\n\n*   [PHP工厂模式demo](/uploads/2018/01/Factory.zip)","slug":"php-factory","published":1,"updated":"2022-03-13T01:17:12.537Z","_id":"cl0oi8mh8005d417tdqx5cx23","layout":"post","photos":[],"link":"","content":"<p>工厂模式就是创建“某种东西”。对于工厂模式，要创建的是一个“产品”，这个产品与创建它的类之间不存在绑定。实际上，为了保持这种松耦合，客户会通过一个工厂发出请求，再由工厂创建请求的产品。</p>\n<h2 id=\"何时使用工厂方法\"><a href=\"#何时使用工厂方法\" class=\"headerlink\" title=\"何时使用工厂方法\"></a>何时使用工厂方法</h2><p>如果一个类要创建的对象数目固定，而且已知，name构建这个类时，就可以采用一种可以预测的方式创建制定数目的对象。例如，如果你要开发一个世界的地图应用，由不同的对象表示七大洲，可以肯定的是，这些对象不会改变。另一方面，如果你要为不同种类的昆虫创建一个网站，肯定会不断发现新的昆虫，或者有些昆虫会有改变，还有可能某些品种会在短时间内灭绝。要处理这种变化，程序必须充分的灵活性。这种项目就可以考虑使用工厂模式。</p>\n<p><img src=\"/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png\"></p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><p>我感觉工厂模式的最大优势在于封装，把对象相互隔离，没有影响。</p>\n<h2 id=\"最简单的例子\"><a href=\"#最简单的例子\" class=\"headerlink\" title=\"最简单的例子\"></a>最简单的例子</h2><h3 id=\"工厂\"><a href=\"#工厂\" class=\"headerlink\" title=\"工厂\"></a>工厂</h3><p>第一步是建立工厂。我们使用一个抽象类Creator作为接口。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// Creator</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startFactory</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$mfg</span>  = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">factoryMethod</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$mfg</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二步是集成实现这个接口。我使用了两个子类来实现接口的方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//TextFactory.php</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Creator.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;TextProduct.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$product</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TextProduct</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$product</span>-&gt;<span class=\"title function_ invoke__\">getProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// GraphicFactory</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Creator.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;GraphicProduct.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphicFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$product</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphicProduct</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$product</span>-&gt;<span class=\"title function_ invoke__\">getProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h3><p>工厂模式的第二个接口就是产品，其实“产品”这个含义是相对于“工厂”的概念，并不一定是实实在在的产品，比如，我们可以把人当初产品等等。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperties</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的，我们再使用两个子类分别继承实现Product的属性。这里有两个“产品”，分别是 图像 和 文字，但是两个“产品”的属性是不一样的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//GraphicProduct</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Product.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphicProduct</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$mfgProduct</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperties</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;mfgProduct = <span class=\"string\">&quot;This is a graphic.&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;mfgProduct;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// TextProduct</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Product.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextProduct</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$mfgProduct</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperties</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;mfgProduct = <span class=\"string\">&quot;This is a text .&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;mfgProduct;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户\"><a href=\"#客户\" class=\"headerlink\" title=\"客户\"></a>客户</h3><p>客户就是指代码运行结果的显示终端，也就是所说的客户端了</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;GraphicFactory.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;TextFactory.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$someGraphicObject</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$someTextObject</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;someGraphicObject = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphicFactory</span>();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;someGraphicObject-&gt;<span class=\"title function_ invoke__\">startFactory</span>() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;someTextProduct = <span class=\"keyword\">new</span> <span class=\"title class_\">TextFactory</span>();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;someTextProduct-&gt;<span class=\"title function_ invoke__\">startFactory</span>() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$worker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Client</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码运行\"><a href=\"#代码运行\" class=\"headerlink\" title=\"代码运行\"></a>代码运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:Factory feilong$ php Client.php</span><br><span class=\"line\">This is a graphic.</span><br><span class=\"line\">This is a text</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Learning PHP设计模式</li>\n</ul>\n<h2 id=\"附件\"><a href=\"#附件\" class=\"headerlink\" title=\"附件\"></a>附件</h2><ul>\n<li><a href=\"/uploads/2018/01/Factory.zip\">PHP工厂模式demo</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>工厂模式就是创建“某种东西”。对于工厂模式，要创建的是一个“产品”，这个产品与创建它的类之间不存在绑定。实际上，为了保持这种松耦合，客户会通过一个工厂发出请求，再由工厂创建请求的产品。</p>\n<h2 id=\"何时使用工厂方法\"><a href=\"#何时使用工厂方法\" class=\"headerlink\" title=\"何时使用工厂方法\"></a>何时使用工厂方法</h2><p>如果一个类要创建的对象数目固定，而且已知，name构建这个类时，就可以采用一种可以预测的方式创建制定数目的对象。例如，如果你要开发一个世界的地图应用，由不同的对象表示七大洲，可以肯定的是，这些对象不会改变。另一方面，如果你要为不同种类的昆虫创建一个网站，肯定会不断发现新的昆虫，或者有些昆虫会有改变，还有可能某些品种会在短时间内灭绝。要处理这种变化，程序必须充分的灵活性。这种项目就可以考虑使用工厂模式。</p>\n<p><img src=\"/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png\"></p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><p>我感觉工厂模式的最大优势在于封装，把对象相互隔离，没有影响。</p>\n<h2 id=\"最简单的例子\"><a href=\"#最简单的例子\" class=\"headerlink\" title=\"最简单的例子\"></a>最简单的例子</h2><h3 id=\"工厂\"><a href=\"#工厂\" class=\"headerlink\" title=\"工厂\"></a>工厂</h3><p>第一步是建立工厂。我们使用一个抽象类Creator作为接口。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// Creator</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startFactory</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$mfg</span>  = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">factoryMethod</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$mfg</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二步是集成实现这个接口。我使用了两个子类来实现接口的方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//TextFactory.php</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Creator.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;TextProduct.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$product</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TextProduct</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$product</span>-&gt;<span class=\"title function_ invoke__\">getProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// GraphicFactory</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Creator.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;GraphicProduct.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphicFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$product</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphicProduct</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$product</span>-&gt;<span class=\"title function_ invoke__\">getProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h3><p>工厂模式的第二个接口就是产品，其实“产品”这个含义是相对于“工厂”的概念，并不一定是实实在在的产品，比如，我们可以把人当初产品等等。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperties</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的，我们再使用两个子类分别继承实现Product的属性。这里有两个“产品”，分别是 图像 和 文字，但是两个“产品”的属性是不一样的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//GraphicProduct</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Product.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphicProduct</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$mfgProduct</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperties</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;mfgProduct = <span class=\"string\">&quot;This is a graphic.&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;mfgProduct;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// TextProduct</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;Product.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextProduct</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$mfgProduct</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperties</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;mfgProduct = <span class=\"string\">&quot;This is a text .&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;mfgProduct;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户\"><a href=\"#客户\" class=\"headerlink\" title=\"客户\"></a>客户</h3><p>客户就是指代码运行结果的显示终端，也就是所说的客户端了</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;GraphicFactory.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;TextFactory.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$someGraphicObject</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$someTextObject</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;someGraphicObject = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphicFactory</span>();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;someGraphicObject-&gt;<span class=\"title function_ invoke__\">startFactory</span>() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;someTextProduct = <span class=\"keyword\">new</span> <span class=\"title class_\">TextFactory</span>();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;someTextProduct-&gt;<span class=\"title function_ invoke__\">startFactory</span>() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$worker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Client</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码运行\"><a href=\"#代码运行\" class=\"headerlink\" title=\"代码运行\"></a>代码运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feilongdeMBP:Factory feilong$ php Client.php</span><br><span class=\"line\">This is a graphic.</span><br><span class=\"line\">This is a text</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Learning PHP设计模式</li>\n</ul>\n<h2 id=\"附件\"><a href=\"#附件\" class=\"headerlink\" title=\"附件\"></a>附件</h2><ul>\n<li><a href=\"/uploads/2018/01/Factory.zip\">PHP工厂模式demo</a></li>\n</ul>\n"},{"title":"PHP使用fastcgi_finish_request 提高响应","id":"139","date":"2017-08-24T12:17:17.000Z","_content":"\n#### 当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做`fastcgi_finish_request`的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\n<!-- more -->\n#### 听起来挺迷茫的，下面给大家举个例子\n\n```php\n<?php\n    echo 'This is example1';\n    fastcgi_finish_request();\n    echo 'This is example2';\n    file_put_contents('/var/log/test.log', 'hello world');\n\n?>\n```\n\n#### 当通过浏览器访问的时候，页面会输出`This is example1`，但是没有输出`This is example2`同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi\\_finish\\_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\n\n#### 再来个直观的例子\n\n```php\n<?php\n    echo 'This is example1';\n    fastcgi_finish_request();\n    echo 'This is example2';\n    file_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n    sleep(1);\n    file_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n    sleep(1);\n    file_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n?>\n```\n\n#### 执行的结果就是页面值输出了`This is example1`,服务器记录了三条日志信息。\n\n#### 个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\n\n#### 另外，在代码移植上建议加上如下代码\n\n```php\n<?php\n    if (!function_exists(\"fastcgi_finish_request\")) {\n          function fastcgi_finish_request()  {\n          }\n    }\n?>\n```\n\n#### fastcgi\\_finish\\_request虽然很好用，但是也有很多限制：\n\n*   PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request\n\n内容参考鸟哥博客[使用fastcgi\\_finish\\_request提高页面响应速度](http://www.laruence.com/2011/04/13/1991.html)","source":"_posts/php-fastcgi-finish-request.md","raw":"---\ntitle: PHP使用fastcgi_finish_request 提高响应\ntags: []\nid: '139'\ncategories:\n  - - Linux\ndate: 2017-08-24 20:17:17\n---\n\n#### 当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做`fastcgi_finish_request`的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\n<!-- more -->\n#### 听起来挺迷茫的，下面给大家举个例子\n\n```php\n<?php\n    echo 'This is example1';\n    fastcgi_finish_request();\n    echo 'This is example2';\n    file_put_contents('/var/log/test.log', 'hello world');\n\n?>\n```\n\n#### 当通过浏览器访问的时候，页面会输出`This is example1`，但是没有输出`This is example2`同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi\\_finish\\_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\n\n#### 再来个直观的例子\n\n```php\n<?php\n    echo 'This is example1';\n    fastcgi_finish_request();\n    echo 'This is example2';\n    file_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n    sleep(1);\n    file_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n    sleep(1);\n    file_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n?>\n```\n\n#### 执行的结果就是页面值输出了`This is example1`,服务器记录了三条日志信息。\n\n#### 个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\n\n#### 另外，在代码移植上建议加上如下代码\n\n```php\n<?php\n    if (!function_exists(\"fastcgi_finish_request\")) {\n          function fastcgi_finish_request()  {\n          }\n    }\n?>\n```\n\n#### fastcgi\\_finish\\_request虽然很好用，但是也有很多限制：\n\n*   PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request\n\n内容参考鸟哥博客[使用fastcgi\\_finish\\_request提高页面响应速度](http://www.laruence.com/2011/04/13/1991.html)","slug":"php-fastcgi-finish-request","published":1,"updated":"2022-03-12T23:52:58.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mha005i417tcxs61gck","content":"<h4 id=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"><a href=\"#当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\" class=\"headerlink\" title=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi_finish_request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"></a>当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做<code>fastcgi_finish_request</code>的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。</h4><span id=\"more\"></span>\n<h4 id=\"听起来挺迷茫的，下面给大家举个例子\"><a href=\"#听起来挺迷茫的，下面给大家举个例子\" class=\"headerlink\" title=\"听起来挺迷茫的，下面给大家举个例子\"></a>听起来挺迷茫的，下面给大家举个例子</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fastcgi_finish_request</span>();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example2&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"><a href=\"#当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\" class=\"headerlink\" title=\"当通过浏览器访问的时候，页面会输出This is example1，但是没有输出This is example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"></a>当通过浏览器访问的时候，页面会输出<code>This is example1</code>，但是没有输出<code>This is example2</code>同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。</h4><h4 id=\"再来个直观的例子\"><a href=\"#再来个直观的例子\" class=\"headerlink\" title=\"再来个直观的例子\"></a>再来个直观的例子</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fastcgi_finish_request</span>();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example2&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"title function_ invoke__\">time</span>(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>, <span class=\"title function_ invoke__\">time</span>()), FILE_APPEND);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"title function_ invoke__\">time</span>(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>, <span class=\"title function_ invoke__\">time</span>()), FILE_APPEND);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"title function_ invoke__\">time</span>(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>, <span class=\"title function_ invoke__\">time</span>()), FILE_APPEND);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\"><a href=\"#执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\" class=\"headerlink\" title=\"执行的结果就是页面值输出了This is example1,服务器记录了三条日志信息。\"></a>执行的结果就是页面值输出了<code>This is example1</code>,服务器记录了三条日志信息。</h4><h4 id=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"><a href=\"#个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\" class=\"headerlink\" title=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"></a>个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。</h4><h4 id=\"另外，在代码移植上建议加上如下代码\"><a href=\"#另外，在代码移植上建议加上如下代码\" class=\"headerlink\" title=\"另外，在代码移植上建议加上如下代码\"></a>另外，在代码移植上建议加上如下代码</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&quot;fastcgi_finish_request&quot;</span>)) &#123;</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fastcgi_finish_request</span>(<span class=\"params\"></span>)  </span>&#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fastcgi-finish-request虽然很好用，但是也有很多限制：\"><a href=\"#fastcgi-finish-request虽然很好用，但是也有很多限制：\" class=\"headerlink\" title=\"fastcgi_finish_request虽然很好用，但是也有很多限制：\"></a>fastcgi_finish_request虽然很好用，但是也有很多限制：</h4><ul>\n<li>PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request</li>\n</ul>\n<p>内容参考鸟哥博客<a href=\"http://www.laruence.com/2011/04/13/1991.html\">使用fastcgi_finish_request提高页面响应速度</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"><a href=\"#当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\" class=\"headerlink\" title=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi_finish_request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"></a>当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做<code>fastcgi_finish_request</code>的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。</h4>","more":"<h4 id=\"听起来挺迷茫的，下面给大家举个例子\"><a href=\"#听起来挺迷茫的，下面给大家举个例子\" class=\"headerlink\" title=\"听起来挺迷茫的，下面给大家举个例子\"></a>听起来挺迷茫的，下面给大家举个例子</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fastcgi_finish_request</span>();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example2&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"><a href=\"#当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\" class=\"headerlink\" title=\"当通过浏览器访问的时候，页面会输出This is example1，但是没有输出This is example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"></a>当通过浏览器访问的时候，页面会输出<code>This is example1</code>，但是没有输出<code>This is example2</code>同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。</h4><h4 id=\"再来个直观的例子\"><a href=\"#再来个直观的例子\" class=\"headerlink\" title=\"再来个直观的例子\"></a>再来个直观的例子</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fastcgi_finish_request</span>();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This is example2&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"title function_ invoke__\">time</span>(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>, <span class=\"title function_ invoke__\">time</span>()), FILE_APPEND);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"title function_ invoke__\">time</span>(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>, <span class=\"title function_ invoke__\">time</span>()), FILE_APPEND);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;/var/log/test.log&#x27;</span>, <span class=\"title function_ invoke__\">time</span>(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>, <span class=\"title function_ invoke__\">time</span>()), FILE_APPEND);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\"><a href=\"#执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\" class=\"headerlink\" title=\"执行的结果就是页面值输出了This is example1,服务器记录了三条日志信息。\"></a>执行的结果就是页面值输出了<code>This is example1</code>,服务器记录了三条日志信息。</h4><h4 id=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"><a href=\"#个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\" class=\"headerlink\" title=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"></a>个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。</h4><h4 id=\"另外，在代码移植上建议加上如下代码\"><a href=\"#另外，在代码移植上建议加上如下代码\" class=\"headerlink\" title=\"另外，在代码移植上建议加上如下代码\"></a>另外，在代码移植上建议加上如下代码</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&quot;fastcgi_finish_request&quot;</span>)) &#123;</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fastcgi_finish_request</span>(<span class=\"params\"></span>)  </span>&#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fastcgi-finish-request虽然很好用，但是也有很多限制：\"><a href=\"#fastcgi-finish-request虽然很好用，但是也有很多限制：\" class=\"headerlink\" title=\"fastcgi_finish_request虽然很好用，但是也有很多限制：\"></a>fastcgi_finish_request虽然很好用，但是也有很多限制：</h4><ul>\n<li>PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request</li>\n</ul>\n<p>内容参考鸟哥博客<a href=\"http://www.laruence.com/2011/04/13/1991.html\">使用fastcgi_finish_request提高页面响应速度</a></p>"},{"title":"PHP float & double 序列化导致的精度问题","id":"484","date":"2019-09-06T07:38:40.000Z","_content":"\n### 问题发现\n\nJson\\_encode应该算是PHP函数中，使用次数最多的函数之一了，尤其是在一些api接口定义，我们通常会使用一些json进行返回。但是在一次开发中，我发现在返回浮点型数字的时候，数字出奇的长。在使用var\\_dump的时候，明明是正常的，怎么接口返回的时候就变异了？？？？\n\n```php\n// 实例代码\n\n$list = [\n '100','200','5','100.23',200.222222,'5','100','200','1'\n];\necho json_encode($list);\n\n[100,200,5,100.23,200.2222219999999879291863180696964263916015625,5,100,200,1]\n```\n\n我们可以看到，经过`json_encode`之后，浮点型的小数，边长了，出现了精度的问题。\n\n### 调试源码\n\nPHP的所有的内置的函数，都是通过拓展的形式安装和运行的。json\\_encode也不例外，拓展就是 ext/json\n\n```c\n// ext/json/json.c\n\nstatic PHP_FUNCTION(json_encode)\n{\n    zval *parameter;\n    smart_str buf = {0};\n    zend_long options = 0;\n    zend_long depth = PHP_JSON_PARSER_DEFAULT_DEPTH;\n\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), zll, &parameter, &options, &depth) == FAILURE) {\n        return;\n    }\n\n    JSON_G(error_code) = PHP_JSON_ERROR_NONE;\n\n    JSON_G(encode_max_depth) = (int)depth;\n\n    php_json_encode(&buf, parameter, (int)options);\n\n    if (JSON_G(error_code) != PHP_JSON_ERROR_NONE && !(options & PHP_JSON_PARTIAL_OUTPUT_ON_ERROR)) {\n        smart_str_free(&buf);\n        ZVAL_FALSE(return_value);\n    } else {\n        smart_str_0(&buf); /* copy? */\n        ZVAL_NEW_STR(return_value, buf.s);\n    }\n}\n....\nPHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* {{{ */\n{\n    php_json_encode_zval(buf, val, options);\n}\n```\n\nPHP\\_FUNCTION 里面是对`json_encode`的函数的定义，首先就是解析 `json_encode` 的参数列表，和选项设置，然后，调用了`php_json_encode`的方法，执行json编码的主要操作，并把一些 [json options](https://www.php.net/manual/zh/json.constants.php) 作为参数传进去。 所以，我们的重点，就是调试 `php_json_encode`的执行过程。\n\n### 运行调试\n\n```shell\n$ lldb php7\n(lldb) target create php7\nCurrent executable set to 'php7' (x86_64).\n(lldb) b php_json_encode\nBreakpoint 1: where = php7`php_json_encode + 19 at json.c:196:23, address = 0x000000010027e963\n(lldb) r debug/json.php\nProcess 31145 launched: '/usr/local/bin/php7' (x86_64)\nProcess 31145 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010027e963 php7`php_json_encode(buf=0x00007ffeefbfe2a0, val=0x0000000101a16110, options=0) at json.c:196:23\n   193 \n   194  PHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* {{{ */\n   195  {\n- 196 php_json_encode_zval(buf, val, options); \n    197 } \n    198 /* }}} */ \n    199 \n```\n\n我们可以打印看看传输的值，是不是和我们填写的参数一致\n\n```shell\n(lldb) frame variable val->value.arr->nNumOfElements (uint32_t) val->value.arr->nNumOfElements = 9 \n```\n\n我们输出了数组的元素的个数，正好是9个元素。\n\n### 步步紧逼\n\n```c\n// json_encoder.c \nint php_json_encode_zval(smart_str *buf, zval *val, int options, php_json_encoder *encoder) /* {{{ */\n{\nagain:\n    switch (Z_TYPE_P(val))\n    {\n        case IS_NULL:\n            smart_str_appendl(buf, \"null\", 4);\n            break;\n\n        case IS_TRUE:\n            smart_str_appendl(buf, \"true\", 4);\n            break;\n        case IS_FALSE:\n            smart_str_appendl(buf, \"false\", 5);\n            break;\n\n        case IS_LONG:\n            smart_str_append_long(buf, Z_LVAL_P(val));\n            break;\n\n        case IS_DOUBLE:\n            if (php_json_is_valid_double(Z_DVAL_P(val))) {\n                php_json_encode_double(buf, Z_DVAL_P(val), options);\n            } else {\n                encoder->error_code = PHP_JSON_ERROR_INF_OR_NAN;\n                smart_str_appendc(buf, '0');\n            }\n            break;\n\n        case IS_STRING:\n            return php_json_escape_string(buf, Z_STRVAL_P(val), Z_STRLEN_P(val), options, encoder);\n\n        case IS_OBJECT:\n            if (instanceof_function(Z_OBJCE_P(val), php_json_serializable_ce)) {\n                return php_json_encode_serializable_object(buf, val, options, encoder);\n            }\n            /* fallthrough -- Non-serializable object */\n        case IS_ARRAY: // 如果是数组类型 \n            return php_json_encode_array(buf, val, options, encoder);\n\n        case IS_REFERENCE:\n            val = Z_REFVAL_P(val);\n            goto again;\n\n        default:\n            encoder->error_code = PHP_JSON_ERROR_UNSUPPORTED_TYPE;\n            if (options & PHP_JSON_PARTIAL_OUTPUT_ON_ERROR) {\n                smart_str_appendl(buf, \"null\", 4);\n            }\n            return FAILURE;\n    }\n\n    return SUCCESS;\n}\n/* }}} */\n```\n\n由于我们的参数类型是数组，所以，在判断val的类型的时候，就会跳到 case IS\\_ARRAY，然后开始执行 php\\_json\\_encode\\_array\n\n```c\n// json_encoder.c \n\nstatic int php_json_encode_array(smart_str *buf, zval *val, int options, php_json_encoder *encoder) /* {{{ */\n{\n    int i, r, need_comma = 0;\n    HashTable *myht;\n\n    if (Z_TYPE_P(val) == IS_ARRAY) {\n        myht = Z_ARRVAL_P(val);\n        r = (options & PHP_JSON_FORCE_OBJECT) ? PHP_JSON_OUTPUT_OBJECT : php_json_determine_array_type(val);\n    } else { // 判断是否设置强制转换成json对象，即json_encode的option是否为JSON_FORCE_OBJECT \n        myht = Z_OBJPROP_P(val);\n        r = PHP_JSON_OUTPUT_OBJECT;\n    }\n    if (myht && ZEND_HASH_GET_APPLY_COUNT(myht) > 1) {\n        encoder->error_code = PHP_JSON_ERROR_RECURSION;\n        smart_str_appendl(buf, \"null\", 4);\n        return FAILURE;\n    }\n\n    if (r == PHP_JSON_OUTPUT_ARRAY) {\n        smart_str_appendc(buf, '[');  // 如果是json数组，那么就是[开头\n    } else {\n        smart_str_appendc(buf, '{'); // 如果是json对象，那么就是{开头\n    }\n    ++encoder->depth;\n    i = myht ? zend_hash_num_elements(myht) : 0; // 统计数组中元素的个数：i=9 \n    ... 代码省略\n    if (i > 0) {\n        zend_string *key;\n        zval *data;\n        zend_ulong index;\n        HashTable *tmp_ht;\n\n        ZEND_HASH_FOREACH_KEY_VAL_IND(myht, index, key, data) { // 对数组的元素进行解析 \n        ... 代码省略\n        }  ZEND_HASH_FOREACH_END();\n\n    }\n    ... 代码省略\n\n    if (r == PHP_JSON_OUTPUT_ARRAY) {\n        smart_str_appendc(buf, ']'); // 追加json字符串的结束符\n    } else {\n        smart_str_appendc(buf, '}'); // 追加json字符串的结束符\n    }\n}\n```\n\n在对数组的每个元素进行编码的时候会重复的执行`php_json_encode_zval`的witch的判断。 当循环到 200.222222，那么就是走到`case IS_DOUBLE:`的分支，然后执行`php_json_encode_double`的方法\n\n```c\nstatic inline void php_json_encode_double(smart_str *buf, double d, int options) /* {{{ */\n{\n    size_t len;\n    char num[PHP_DOUBLE_MAX_LENGTH];\n\n    php_gcvt(d, (int)PG(serialize_precision), '.', 'e', num); // 根据数字和配置的precision长度，截取数字，赋值给num\n    len = strlen(num);\n    if (options & PHP_JSON_PRESERVE_ZERO_FRACTION && strchr(num, '.') == NULL && len < PHP_DOUBLE_MAX_LENGTH - 2) {\n        num[len++] = '.';\n        num[len++] = '0';\n        num[len] = '\\0';\n    }\n    smart_str_appendl(buf, num, len); // 将截取后的num追加到json字符串后面\n}\n```\n\n### 总结\n\njson-encode的执行还算是比较容易理解\n\n1.  先获取待编码的zval\n2.  判断zval的类型，针对不同的类型，进行不同的编码\n3.  如果是数组，那么就先按个遍历数组的元素，递归进行编码\n4.  当元素是浮点型的时候，根据配置文件里面的 serialize\\_precision或precision进行截取\n5.  截取后的数字追加到json字符串的尾部\n\n根据php.ini文档的说明\n\n> ; The number of significant digits displayed in floating point numbers.\n> \n> ; When floats & doubles are serialized store serialize\\_precision significant ; digits after the floating point. The default value ensures that when floats ; are decoded with unserialize, the data will remain the same. ; The value is also used for json\\_encode when encoding double values. ; If -1 is used, then dtoa mode 0 is used which automatically select the best ; precision.\n\n设置serialize\\_precision=-1 将会自动使用最适合的长度，即我们经常使用的浮点型长度。\n\n所以，我们最好设置-1来设置序列化长度\n\n```php\nini_set('precision', -1);\nini_set('serialize_precision', -1);\n```\n\n文章链接: [http://feilong.tech/2019/09/06/php-float-double-precision](http://feilong.tech/2019/09/06/php-float-double-precision)","source":"_posts/php-float-double-precision.md","raw":"---\ntitle: PHP float & double 序列化导致的精度问题\ntags:\n  - json\n  - PHP\n  - PHP7\n  - PHP源码\n  - PHP精度\nid: '484'\ncategories:\n  - - PHP\n  - - PHP源码\ndate: 2019-09-06 15:38:40\n---\n\n### 问题发现\n\nJson\\_encode应该算是PHP函数中，使用次数最多的函数之一了，尤其是在一些api接口定义，我们通常会使用一些json进行返回。但是在一次开发中，我发现在返回浮点型数字的时候，数字出奇的长。在使用var\\_dump的时候，明明是正常的，怎么接口返回的时候就变异了？？？？\n\n```php\n// 实例代码\n\n$list = [\n '100','200','5','100.23',200.222222,'5','100','200','1'\n];\necho json_encode($list);\n\n[100,200,5,100.23,200.2222219999999879291863180696964263916015625,5,100,200,1]\n```\n\n我们可以看到，经过`json_encode`之后，浮点型的小数，边长了，出现了精度的问题。\n\n### 调试源码\n\nPHP的所有的内置的函数，都是通过拓展的形式安装和运行的。json\\_encode也不例外，拓展就是 ext/json\n\n```c\n// ext/json/json.c\n\nstatic PHP_FUNCTION(json_encode)\n{\n    zval *parameter;\n    smart_str buf = {0};\n    zend_long options = 0;\n    zend_long depth = PHP_JSON_PARSER_DEFAULT_DEPTH;\n\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), zll, &parameter, &options, &depth) == FAILURE) {\n        return;\n    }\n\n    JSON_G(error_code) = PHP_JSON_ERROR_NONE;\n\n    JSON_G(encode_max_depth) = (int)depth;\n\n    php_json_encode(&buf, parameter, (int)options);\n\n    if (JSON_G(error_code) != PHP_JSON_ERROR_NONE && !(options & PHP_JSON_PARTIAL_OUTPUT_ON_ERROR)) {\n        smart_str_free(&buf);\n        ZVAL_FALSE(return_value);\n    } else {\n        smart_str_0(&buf); /* copy? */\n        ZVAL_NEW_STR(return_value, buf.s);\n    }\n}\n....\nPHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* {{{ */\n{\n    php_json_encode_zval(buf, val, options);\n}\n```\n\nPHP\\_FUNCTION 里面是对`json_encode`的函数的定义，首先就是解析 `json_encode` 的参数列表，和选项设置，然后，调用了`php_json_encode`的方法，执行json编码的主要操作，并把一些 [json options](https://www.php.net/manual/zh/json.constants.php) 作为参数传进去。 所以，我们的重点，就是调试 `php_json_encode`的执行过程。\n\n### 运行调试\n\n```shell\n$ lldb php7\n(lldb) target create php7\nCurrent executable set to 'php7' (x86_64).\n(lldb) b php_json_encode\nBreakpoint 1: where = php7`php_json_encode + 19 at json.c:196:23, address = 0x000000010027e963\n(lldb) r debug/json.php\nProcess 31145 launched: '/usr/local/bin/php7' (x86_64)\nProcess 31145 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010027e963 php7`php_json_encode(buf=0x00007ffeefbfe2a0, val=0x0000000101a16110, options=0) at json.c:196:23\n   193 \n   194  PHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* {{{ */\n   195  {\n- 196 php_json_encode_zval(buf, val, options); \n    197 } \n    198 /* }}} */ \n    199 \n```\n\n我们可以打印看看传输的值，是不是和我们填写的参数一致\n\n```shell\n(lldb) frame variable val->value.arr->nNumOfElements (uint32_t) val->value.arr->nNumOfElements = 9 \n```\n\n我们输出了数组的元素的个数，正好是9个元素。\n\n### 步步紧逼\n\n```c\n// json_encoder.c \nint php_json_encode_zval(smart_str *buf, zval *val, int options, php_json_encoder *encoder) /* {{{ */\n{\nagain:\n    switch (Z_TYPE_P(val))\n    {\n        case IS_NULL:\n            smart_str_appendl(buf, \"null\", 4);\n            break;\n\n        case IS_TRUE:\n            smart_str_appendl(buf, \"true\", 4);\n            break;\n        case IS_FALSE:\n            smart_str_appendl(buf, \"false\", 5);\n            break;\n\n        case IS_LONG:\n            smart_str_append_long(buf, Z_LVAL_P(val));\n            break;\n\n        case IS_DOUBLE:\n            if (php_json_is_valid_double(Z_DVAL_P(val))) {\n                php_json_encode_double(buf, Z_DVAL_P(val), options);\n            } else {\n                encoder->error_code = PHP_JSON_ERROR_INF_OR_NAN;\n                smart_str_appendc(buf, '0');\n            }\n            break;\n\n        case IS_STRING:\n            return php_json_escape_string(buf, Z_STRVAL_P(val), Z_STRLEN_P(val), options, encoder);\n\n        case IS_OBJECT:\n            if (instanceof_function(Z_OBJCE_P(val), php_json_serializable_ce)) {\n                return php_json_encode_serializable_object(buf, val, options, encoder);\n            }\n            /* fallthrough -- Non-serializable object */\n        case IS_ARRAY: // 如果是数组类型 \n            return php_json_encode_array(buf, val, options, encoder);\n\n        case IS_REFERENCE:\n            val = Z_REFVAL_P(val);\n            goto again;\n\n        default:\n            encoder->error_code = PHP_JSON_ERROR_UNSUPPORTED_TYPE;\n            if (options & PHP_JSON_PARTIAL_OUTPUT_ON_ERROR) {\n                smart_str_appendl(buf, \"null\", 4);\n            }\n            return FAILURE;\n    }\n\n    return SUCCESS;\n}\n/* }}} */\n```\n\n由于我们的参数类型是数组，所以，在判断val的类型的时候，就会跳到 case IS\\_ARRAY，然后开始执行 php\\_json\\_encode\\_array\n\n```c\n// json_encoder.c \n\nstatic int php_json_encode_array(smart_str *buf, zval *val, int options, php_json_encoder *encoder) /* {{{ */\n{\n    int i, r, need_comma = 0;\n    HashTable *myht;\n\n    if (Z_TYPE_P(val) == IS_ARRAY) {\n        myht = Z_ARRVAL_P(val);\n        r = (options & PHP_JSON_FORCE_OBJECT) ? PHP_JSON_OUTPUT_OBJECT : php_json_determine_array_type(val);\n    } else { // 判断是否设置强制转换成json对象，即json_encode的option是否为JSON_FORCE_OBJECT \n        myht = Z_OBJPROP_P(val);\n        r = PHP_JSON_OUTPUT_OBJECT;\n    }\n    if (myht && ZEND_HASH_GET_APPLY_COUNT(myht) > 1) {\n        encoder->error_code = PHP_JSON_ERROR_RECURSION;\n        smart_str_appendl(buf, \"null\", 4);\n        return FAILURE;\n    }\n\n    if (r == PHP_JSON_OUTPUT_ARRAY) {\n        smart_str_appendc(buf, '[');  // 如果是json数组，那么就是[开头\n    } else {\n        smart_str_appendc(buf, '{'); // 如果是json对象，那么就是{开头\n    }\n    ++encoder->depth;\n    i = myht ? zend_hash_num_elements(myht) : 0; // 统计数组中元素的个数：i=9 \n    ... 代码省略\n    if (i > 0) {\n        zend_string *key;\n        zval *data;\n        zend_ulong index;\n        HashTable *tmp_ht;\n\n        ZEND_HASH_FOREACH_KEY_VAL_IND(myht, index, key, data) { // 对数组的元素进行解析 \n        ... 代码省略\n        }  ZEND_HASH_FOREACH_END();\n\n    }\n    ... 代码省略\n\n    if (r == PHP_JSON_OUTPUT_ARRAY) {\n        smart_str_appendc(buf, ']'); // 追加json字符串的结束符\n    } else {\n        smart_str_appendc(buf, '}'); // 追加json字符串的结束符\n    }\n}\n```\n\n在对数组的每个元素进行编码的时候会重复的执行`php_json_encode_zval`的witch的判断。 当循环到 200.222222，那么就是走到`case IS_DOUBLE:`的分支，然后执行`php_json_encode_double`的方法\n\n```c\nstatic inline void php_json_encode_double(smart_str *buf, double d, int options) /* {{{ */\n{\n    size_t len;\n    char num[PHP_DOUBLE_MAX_LENGTH];\n\n    php_gcvt(d, (int)PG(serialize_precision), '.', 'e', num); // 根据数字和配置的precision长度，截取数字，赋值给num\n    len = strlen(num);\n    if (options & PHP_JSON_PRESERVE_ZERO_FRACTION && strchr(num, '.') == NULL && len < PHP_DOUBLE_MAX_LENGTH - 2) {\n        num[len++] = '.';\n        num[len++] = '0';\n        num[len] = '\\0';\n    }\n    smart_str_appendl(buf, num, len); // 将截取后的num追加到json字符串后面\n}\n```\n\n### 总结\n\njson-encode的执行还算是比较容易理解\n\n1.  先获取待编码的zval\n2.  判断zval的类型，针对不同的类型，进行不同的编码\n3.  如果是数组，那么就先按个遍历数组的元素，递归进行编码\n4.  当元素是浮点型的时候，根据配置文件里面的 serialize\\_precision或precision进行截取\n5.  截取后的数字追加到json字符串的尾部\n\n根据php.ini文档的说明\n\n> ; The number of significant digits displayed in floating point numbers.\n> \n> ; When floats & doubles are serialized store serialize\\_precision significant ; digits after the floating point. The default value ensures that when floats ; are decoded with unserialize, the data will remain the same. ; The value is also used for json\\_encode when encoding double values. ; If -1 is used, then dtoa mode 0 is used which automatically select the best ; precision.\n\n设置serialize\\_precision=-1 将会自动使用最适合的长度，即我们经常使用的浮点型长度。\n\n所以，我们最好设置-1来设置序列化长度\n\n```php\nini_set('precision', -1);\nini_set('serialize_precision', -1);\n```\n\n文章链接: [http://feilong.tech/2019/09/06/php-float-double-precision](http://feilong.tech/2019/09/06/php-float-double-precision)","slug":"php-float-double-precision","published":1,"updated":"2022-03-12T23:52:58.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mhc005l417tdik66lj9","content":"<h3 id=\"问题发现\"><a href=\"#问题发现\" class=\"headerlink\" title=\"问题发现\"></a>问题发现</h3><p>Json_encode应该算是PHP函数中，使用次数最多的函数之一了，尤其是在一些api接口定义，我们通常会使用一些json进行返回。但是在一次开发中，我发现在返回浮点型数字的时候，数字出奇的长。在使用var_dump的时候，明明是正常的，怎么接口返回的时候就变异了？？？？</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实例代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$list</span> = [</span><br><span class=\"line\"> <span class=\"string\">&#x27;100&#x27;</span>,<span class=\"string\">&#x27;200&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;100.23&#x27;</span>,<span class=\"number\">200.222222</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;100&#x27;</span>,<span class=\"string\">&#x27;200&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$list</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">5</span>,<span class=\"number\">100.23</span>,<span class=\"number\">200.2222219999999879291863180696964263916015625</span>,<span class=\"number\">5</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到，经过<code>json_encode</code>之后，浮点型的小数，边长了，出现了精度的问题。</p>\n<h3 id=\"调试源码\"><a href=\"#调试源码\" class=\"headerlink\" title=\"调试源码\"></a>调试源码</h3><p>PHP的所有的内置的函数，都是通过拓展的形式安装和运行的。json_encode也不例外，拓展就是 ext&#x2F;json</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ext/json/json.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"title function_\">PHP_FUNCTION</span><span class=\"params\">(json_encode)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zval *parameter;</span><br><span class=\"line\">    smart_str buf = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    zend_long options = <span class=\"number\">0</span>;</span><br><span class=\"line\">    zend_long depth = PHP_JSON_PARSER_DEFAULT_DEPTH;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), zll, &amp;parameter, &amp;options, &amp;depth) == FAILURE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSON_G(error_code) = PHP_JSON_ERROR_NONE;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSON_G(encode_max_depth) = (<span class=\"type\">int</span>)depth;</span><br><span class=\"line\"></span><br><span class=\"line\">    php_json_encode(&amp;buf, parameter, (<span class=\"type\">int</span>)options);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JSON_G(error_code) != PHP_JSON_ERROR_NONE &amp;&amp; !(options &amp; PHP_JSON_PARTIAL_OUTPUT_ON_ERROR)) &#123;</span><br><span class=\"line\">        smart_str_free(&amp;buf);</span><br><span class=\"line\">        ZVAL_FALSE(return_value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smart_str_0(&amp;buf); <span class=\"comment\">/* copy? */</span></span><br><span class=\"line\">        ZVAL_NEW_STR(return_value, buf.s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">PHP_JSON_API <span class=\"type\">void</span> <span class=\"title function_\">php_json_encode</span><span class=\"params\">(smart_str *buf, zval *val, <span class=\"type\">int</span> options)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    php_json_encode_zval(buf, val, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PHP_FUNCTION 里面是对<code>json_encode</code>的函数的定义，首先就是解析 <code>json_encode</code> 的参数列表，和选项设置，然后，调用了<code>php_json_encode</code>的方法，执行json编码的主要操作，并把一些 <a href=\"https://www.php.net/manual/zh/json.constants.php\">json options</a> 作为参数传进去。 所以，我们的重点，就是调试 <code>php_json_encode</code>的执行过程。</p>\n<h3 id=\"运行调试\"><a href=\"#运行调试\" class=\"headerlink\" title=\"运行调试\"></a>运行调试</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">lldb php7</span></span><br><span class=\"line\">(lldb) target create php7</span><br><span class=\"line\">Current executable set to &#x27;php7&#x27; (x86_64).</span><br><span class=\"line\">(lldb) b php_json_encode</span><br><span class=\"line\">Breakpoint 1: where = php7`php_json_encode + 19 at json.c:196:23, address = 0x000000010027e963</span><br><span class=\"line\">(lldb) r debug/json.php</span><br><span class=\"line\">Process 31145 launched: &#x27;/usr/local/bin/php7&#x27; (x86_64)</span><br><span class=\"line\">Process 31145 stopped</span><br><span class=\"line\">* thread #1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 1.1</span><br><span class=\"line\">    frame #0: 0x000000010027e963 php7`php_json_encode(buf=0x00007ffeefbfe2a0, val=0x0000000101a16110, options=0) at json.c:196:23</span><br><span class=\"line\">   193 </span><br><span class=\"line\">   194  PHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* &#123;&#123;&#123; */</span><br><span class=\"line\">   195  &#123;</span><br><span class=\"line\">- 196 php_json_encode_zval(buf, val, options); </span><br><span class=\"line\">    197 &#125; </span><br><span class=\"line\">    198 /* &#125;&#125;&#125; */ </span><br><span class=\"line\">    199 </span><br></pre></td></tr></table></figure>\n\n<p>我们可以打印看看传输的值，是不是和我们填写的参数一致</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(lldb) frame variable val-&gt;value.arr-&gt;nNumOfElements (uint32_t) val-&gt;value.arr-&gt;nNumOfElements = 9 </span><br></pre></td></tr></table></figure>\n\n<p>我们输出了数组的元素的个数，正好是9个元素。</p>\n<h3 id=\"步步紧逼\"><a href=\"#步步紧逼\" class=\"headerlink\" title=\"步步紧逼\"></a>步步紧逼</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json_encoder.c </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">php_json_encode_zval</span><span class=\"params\">(smart_str *buf, zval *val, <span class=\"type\">int</span> options, php_json_encoder *encoder)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">again:</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (Z_TYPE_P(val))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_NULL:</span><br><span class=\"line\">            smart_str_appendl(buf, <span class=\"string\">&quot;null&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_TRUE:</span><br><span class=\"line\">            smart_str_appendl(buf, <span class=\"string\">&quot;true&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_FALSE:</span><br><span class=\"line\">            smart_str_appendl(buf, <span class=\"string\">&quot;false&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_LONG:</span><br><span class=\"line\">            smart_str_append_long(buf, Z_LVAL_P(val));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_DOUBLE:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (php_json_is_valid_double(Z_DVAL_P(val))) &#123;</span><br><span class=\"line\">                php_json_encode_double(buf, Z_DVAL_P(val), options);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                encoder-&gt;error_code = PHP_JSON_ERROR_INF_OR_NAN;</span><br><span class=\"line\">                smart_str_appendc(buf, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_STRING:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> php_json_escape_string(buf, Z_STRVAL_P(val), Z_STRLEN_P(val), options, encoder);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_OBJECT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instanceof_function(Z_OBJCE_P(val), php_json_serializable_ce)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> php_json_encode_serializable_object(buf, val, options, encoder);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* fallthrough -- Non-serializable object */</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_ARRAY: <span class=\"comment\">// 如果是数组类型 </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> php_json_encode_array(buf, val, options, encoder);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_REFERENCE:</span><br><span class=\"line\">            val = Z_REFVAL_P(val);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> again;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            encoder-&gt;error_code = PHP_JSON_ERROR_UNSUPPORTED_TYPE;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (options &amp; PHP_JSON_PARTIAL_OUTPUT_ON_ERROR) &#123;</span><br><span class=\"line\">                smart_str_appendl(buf, <span class=\"string\">&quot;null&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure>\n\n<p>由于我们的参数类型是数组，所以，在判断val的类型的时候，就会跳到 case IS_ARRAY，然后开始执行 php_json_encode_array</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json_encoder.c </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">php_json_encode_array</span><span class=\"params\">(smart_str *buf, zval *val, <span class=\"type\">int</span> options, php_json_encoder *encoder)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, r, need_comma = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HashTable *myht;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Z_TYPE_P(val) == IS_ARRAY) &#123;</span><br><span class=\"line\">        myht = Z_ARRVAL_P(val);</span><br><span class=\"line\">        r = (options &amp; PHP_JSON_FORCE_OBJECT) ? PHP_JSON_OUTPUT_OBJECT : php_json_determine_array_type(val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 判断是否设置强制转换成json对象，即json_encode的option是否为JSON_FORCE_OBJECT </span></span><br><span class=\"line\">        myht = Z_OBJPROP_P(val);</span><br><span class=\"line\">        r = PHP_JSON_OUTPUT_OBJECT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myht &amp;&amp; ZEND_HASH_GET_APPLY_COUNT(myht) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        encoder-&gt;error_code = PHP_JSON_ERROR_RECURSION;</span><br><span class=\"line\">        smart_str_appendl(buf, <span class=\"string\">&quot;null&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == PHP_JSON_OUTPUT_ARRAY) &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;[&#x27;</span>);  <span class=\"comment\">// 如果是json数组，那么就是[开头</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;&#123;&#x27;</span>); <span class=\"comment\">// 如果是json对象，那么就是&#123;开头</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++encoder-&gt;depth;</span><br><span class=\"line\">    i = myht ? zend_hash_num_elements(myht) : <span class=\"number\">0</span>; <span class=\"comment\">// 统计数组中元素的个数：i=9 </span></span><br><span class=\"line\">    ... 代码省略</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        zend_string *key;</span><br><span class=\"line\">        zval *data;</span><br><span class=\"line\">        zend_ulong index;</span><br><span class=\"line\">        HashTable *tmp_ht;</span><br><span class=\"line\"></span><br><span class=\"line\">        ZEND_HASH_FOREACH_KEY_VAL_IND(myht, index, key, data) &#123; <span class=\"comment\">// 对数组的元素进行解析 </span></span><br><span class=\"line\">        ... 代码省略</span><br><span class=\"line\">        &#125;  ZEND_HASH_FOREACH_END();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ... 代码省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == PHP_JSON_OUTPUT_ARRAY) &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;]&#x27;</span>); <span class=\"comment\">// 追加json字符串的结束符</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;&#125;&#x27;</span>); <span class=\"comment\">// 追加json字符串的结束符</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对数组的每个元素进行编码的时候会重复的执行<code>php_json_encode_zval</code>的witch的判断。 当循环到 200.222222，那么就是走到<code>case IS_DOUBLE:</code>的分支，然后执行<code>php_json_encode_double</code>的方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title function_\">php_json_encode_double</span><span class=\"params\">(smart_str *buf, <span class=\"type\">double</span> d, <span class=\"type\">int</span> options)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> len;</span><br><span class=\"line\">    <span class=\"type\">char</span> num[PHP_DOUBLE_MAX_LENGTH];</span><br><span class=\"line\"></span><br><span class=\"line\">    php_gcvt(d, (<span class=\"type\">int</span>)PG(serialize_precision), <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, num); <span class=\"comment\">// 根据数字和配置的precision长度，截取数字，赋值给num</span></span><br><span class=\"line\">    len = <span class=\"built_in\">strlen</span>(num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options &amp; PHP_JSON_PRESERVE_ZERO_FRACTION &amp;&amp; <span class=\"built_in\">strchr</span>(num, <span class=\"string\">&#x27;.&#x27;</span>) == <span class=\"literal\">NULL</span> &amp;&amp; len &lt; PHP_DOUBLE_MAX_LENGTH - <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        num[len++] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        num[len++] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        num[len] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    smart_str_appendl(buf, num, len); <span class=\"comment\">// 将截取后的num追加到json字符串后面</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>json-encode的执行还算是比较容易理解</p>\n<ol>\n<li>先获取待编码的zval</li>\n<li>判断zval的类型，针对不同的类型，进行不同的编码</li>\n<li>如果是数组，那么就先按个遍历数组的元素，递归进行编码</li>\n<li>当元素是浮点型的时候，根据配置文件里面的 serialize_precision或precision进行截取</li>\n<li>截取后的数字追加到json字符串的尾部</li>\n</ol>\n<p>根据php.ini文档的说明</p>\n<blockquote>\n<p>; The number of significant digits displayed in floating point numbers.</p>\n<p>; When floats &amp; doubles are serialized store serialize_precision significant ; digits after the floating point. The default value ensures that when floats ; are decoded with unserialize, the data will remain the same. ; The value is also used for json_encode when encoding double values. ; If -1 is used, then dtoa mode 0 is used which automatically select the best ; precision.</p>\n</blockquote>\n<p>设置serialize_precision&#x3D;-1 将会自动使用最适合的长度，即我们经常使用的浮点型长度。</p>\n<p>所以，我们最好设置-1来设置序列化长度</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&#x27;precision&#x27;</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&#x27;serialize_precision&#x27;</span>, -<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>文章链接: <a href=\"http://feilong.tech/2019/09/06/php-float-double-precision\">http://feilong.tech/2019/09/06/php-float-double-precision</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题发现\"><a href=\"#问题发现\" class=\"headerlink\" title=\"问题发现\"></a>问题发现</h3><p>Json_encode应该算是PHP函数中，使用次数最多的函数之一了，尤其是在一些api接口定义，我们通常会使用一些json进行返回。但是在一次开发中，我发现在返回浮点型数字的时候，数字出奇的长。在使用var_dump的时候，明明是正常的，怎么接口返回的时候就变异了？？？？</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实例代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$list</span> = [</span><br><span class=\"line\"> <span class=\"string\">&#x27;100&#x27;</span>,<span class=\"string\">&#x27;200&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;100.23&#x27;</span>,<span class=\"number\">200.222222</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;100&#x27;</span>,<span class=\"string\">&#x27;200&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$list</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">5</span>,<span class=\"number\">100.23</span>,<span class=\"number\">200.2222219999999879291863180696964263916015625</span>,<span class=\"number\">5</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到，经过<code>json_encode</code>之后，浮点型的小数，边长了，出现了精度的问题。</p>\n<h3 id=\"调试源码\"><a href=\"#调试源码\" class=\"headerlink\" title=\"调试源码\"></a>调试源码</h3><p>PHP的所有的内置的函数，都是通过拓展的形式安装和运行的。json_encode也不例外，拓展就是 ext&#x2F;json</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ext/json/json.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"title function_\">PHP_FUNCTION</span><span class=\"params\">(json_encode)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zval *parameter;</span><br><span class=\"line\">    smart_str buf = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    zend_long options = <span class=\"number\">0</span>;</span><br><span class=\"line\">    zend_long depth = PHP_JSON_PARSER_DEFAULT_DEPTH;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), zll, &amp;parameter, &amp;options, &amp;depth) == FAILURE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSON_G(error_code) = PHP_JSON_ERROR_NONE;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSON_G(encode_max_depth) = (<span class=\"type\">int</span>)depth;</span><br><span class=\"line\"></span><br><span class=\"line\">    php_json_encode(&amp;buf, parameter, (<span class=\"type\">int</span>)options);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JSON_G(error_code) != PHP_JSON_ERROR_NONE &amp;&amp; !(options &amp; PHP_JSON_PARTIAL_OUTPUT_ON_ERROR)) &#123;</span><br><span class=\"line\">        smart_str_free(&amp;buf);</span><br><span class=\"line\">        ZVAL_FALSE(return_value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smart_str_0(&amp;buf); <span class=\"comment\">/* copy? */</span></span><br><span class=\"line\">        ZVAL_NEW_STR(return_value, buf.s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">PHP_JSON_API <span class=\"type\">void</span> <span class=\"title function_\">php_json_encode</span><span class=\"params\">(smart_str *buf, zval *val, <span class=\"type\">int</span> options)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    php_json_encode_zval(buf, val, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PHP_FUNCTION 里面是对<code>json_encode</code>的函数的定义，首先就是解析 <code>json_encode</code> 的参数列表，和选项设置，然后，调用了<code>php_json_encode</code>的方法，执行json编码的主要操作，并把一些 <a href=\"https://www.php.net/manual/zh/json.constants.php\">json options</a> 作为参数传进去。 所以，我们的重点，就是调试 <code>php_json_encode</code>的执行过程。</p>\n<h3 id=\"运行调试\"><a href=\"#运行调试\" class=\"headerlink\" title=\"运行调试\"></a>运行调试</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">lldb php7</span></span><br><span class=\"line\">(lldb) target create php7</span><br><span class=\"line\">Current executable set to &#x27;php7&#x27; (x86_64).</span><br><span class=\"line\">(lldb) b php_json_encode</span><br><span class=\"line\">Breakpoint 1: where = php7`php_json_encode + 19 at json.c:196:23, address = 0x000000010027e963</span><br><span class=\"line\">(lldb) r debug/json.php</span><br><span class=\"line\">Process 31145 launched: &#x27;/usr/local/bin/php7&#x27; (x86_64)</span><br><span class=\"line\">Process 31145 stopped</span><br><span class=\"line\">* thread #1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 1.1</span><br><span class=\"line\">    frame #0: 0x000000010027e963 php7`php_json_encode(buf=0x00007ffeefbfe2a0, val=0x0000000101a16110, options=0) at json.c:196:23</span><br><span class=\"line\">   193 </span><br><span class=\"line\">   194  PHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* &#123;&#123;&#123; */</span><br><span class=\"line\">   195  &#123;</span><br><span class=\"line\">- 196 php_json_encode_zval(buf, val, options); </span><br><span class=\"line\">    197 &#125; </span><br><span class=\"line\">    198 /* &#125;&#125;&#125; */ </span><br><span class=\"line\">    199 </span><br></pre></td></tr></table></figure>\n\n<p>我们可以打印看看传输的值，是不是和我们填写的参数一致</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(lldb) frame variable val-&gt;value.arr-&gt;nNumOfElements (uint32_t) val-&gt;value.arr-&gt;nNumOfElements = 9 </span><br></pre></td></tr></table></figure>\n\n<p>我们输出了数组的元素的个数，正好是9个元素。</p>\n<h3 id=\"步步紧逼\"><a href=\"#步步紧逼\" class=\"headerlink\" title=\"步步紧逼\"></a>步步紧逼</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json_encoder.c </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">php_json_encode_zval</span><span class=\"params\">(smart_str *buf, zval *val, <span class=\"type\">int</span> options, php_json_encoder *encoder)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">again:</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (Z_TYPE_P(val))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_NULL:</span><br><span class=\"line\">            smart_str_appendl(buf, <span class=\"string\">&quot;null&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_TRUE:</span><br><span class=\"line\">            smart_str_appendl(buf, <span class=\"string\">&quot;true&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_FALSE:</span><br><span class=\"line\">            smart_str_appendl(buf, <span class=\"string\">&quot;false&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_LONG:</span><br><span class=\"line\">            smart_str_append_long(buf, Z_LVAL_P(val));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_DOUBLE:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (php_json_is_valid_double(Z_DVAL_P(val))) &#123;</span><br><span class=\"line\">                php_json_encode_double(buf, Z_DVAL_P(val), options);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                encoder-&gt;error_code = PHP_JSON_ERROR_INF_OR_NAN;</span><br><span class=\"line\">                smart_str_appendc(buf, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_STRING:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> php_json_escape_string(buf, Z_STRVAL_P(val), Z_STRLEN_P(val), options, encoder);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_OBJECT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instanceof_function(Z_OBJCE_P(val), php_json_serializable_ce)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> php_json_encode_serializable_object(buf, val, options, encoder);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* fallthrough -- Non-serializable object */</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_ARRAY: <span class=\"comment\">// 如果是数组类型 </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> php_json_encode_array(buf, val, options, encoder);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IS_REFERENCE:</span><br><span class=\"line\">            val = Z_REFVAL_P(val);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> again;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            encoder-&gt;error_code = PHP_JSON_ERROR_UNSUPPORTED_TYPE;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (options &amp; PHP_JSON_PARTIAL_OUTPUT_ON_ERROR) &#123;</span><br><span class=\"line\">                smart_str_appendl(buf, <span class=\"string\">&quot;null&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure>\n\n<p>由于我们的参数类型是数组，所以，在判断val的类型的时候，就会跳到 case IS_ARRAY，然后开始执行 php_json_encode_array</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json_encoder.c </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">php_json_encode_array</span><span class=\"params\">(smart_str *buf, zval *val, <span class=\"type\">int</span> options, php_json_encoder *encoder)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, r, need_comma = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HashTable *myht;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Z_TYPE_P(val) == IS_ARRAY) &#123;</span><br><span class=\"line\">        myht = Z_ARRVAL_P(val);</span><br><span class=\"line\">        r = (options &amp; PHP_JSON_FORCE_OBJECT) ? PHP_JSON_OUTPUT_OBJECT : php_json_determine_array_type(val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 判断是否设置强制转换成json对象，即json_encode的option是否为JSON_FORCE_OBJECT </span></span><br><span class=\"line\">        myht = Z_OBJPROP_P(val);</span><br><span class=\"line\">        r = PHP_JSON_OUTPUT_OBJECT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myht &amp;&amp; ZEND_HASH_GET_APPLY_COUNT(myht) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        encoder-&gt;error_code = PHP_JSON_ERROR_RECURSION;</span><br><span class=\"line\">        smart_str_appendl(buf, <span class=\"string\">&quot;null&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == PHP_JSON_OUTPUT_ARRAY) &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;[&#x27;</span>);  <span class=\"comment\">// 如果是json数组，那么就是[开头</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;&#123;&#x27;</span>); <span class=\"comment\">// 如果是json对象，那么就是&#123;开头</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++encoder-&gt;depth;</span><br><span class=\"line\">    i = myht ? zend_hash_num_elements(myht) : <span class=\"number\">0</span>; <span class=\"comment\">// 统计数组中元素的个数：i=9 </span></span><br><span class=\"line\">    ... 代码省略</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        zend_string *key;</span><br><span class=\"line\">        zval *data;</span><br><span class=\"line\">        zend_ulong index;</span><br><span class=\"line\">        HashTable *tmp_ht;</span><br><span class=\"line\"></span><br><span class=\"line\">        ZEND_HASH_FOREACH_KEY_VAL_IND(myht, index, key, data) &#123; <span class=\"comment\">// 对数组的元素进行解析 </span></span><br><span class=\"line\">        ... 代码省略</span><br><span class=\"line\">        &#125;  ZEND_HASH_FOREACH_END();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ... 代码省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == PHP_JSON_OUTPUT_ARRAY) &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;]&#x27;</span>); <span class=\"comment\">// 追加json字符串的结束符</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smart_str_appendc(buf, <span class=\"string\">&#x27;&#125;&#x27;</span>); <span class=\"comment\">// 追加json字符串的结束符</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对数组的每个元素进行编码的时候会重复的执行<code>php_json_encode_zval</code>的witch的判断。 当循环到 200.222222，那么就是走到<code>case IS_DOUBLE:</code>的分支，然后执行<code>php_json_encode_double</code>的方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title function_\">php_json_encode_double</span><span class=\"params\">(smart_str *buf, <span class=\"type\">double</span> d, <span class=\"type\">int</span> options)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> len;</span><br><span class=\"line\">    <span class=\"type\">char</span> num[PHP_DOUBLE_MAX_LENGTH];</span><br><span class=\"line\"></span><br><span class=\"line\">    php_gcvt(d, (<span class=\"type\">int</span>)PG(serialize_precision), <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, num); <span class=\"comment\">// 根据数字和配置的precision长度，截取数字，赋值给num</span></span><br><span class=\"line\">    len = <span class=\"built_in\">strlen</span>(num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options &amp; PHP_JSON_PRESERVE_ZERO_FRACTION &amp;&amp; <span class=\"built_in\">strchr</span>(num, <span class=\"string\">&#x27;.&#x27;</span>) == <span class=\"literal\">NULL</span> &amp;&amp; len &lt; PHP_DOUBLE_MAX_LENGTH - <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        num[len++] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        num[len++] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        num[len] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    smart_str_appendl(buf, num, len); <span class=\"comment\">// 将截取后的num追加到json字符串后面</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>json-encode的执行还算是比较容易理解</p>\n<ol>\n<li>先获取待编码的zval</li>\n<li>判断zval的类型，针对不同的类型，进行不同的编码</li>\n<li>如果是数组，那么就先按个遍历数组的元素，递归进行编码</li>\n<li>当元素是浮点型的时候，根据配置文件里面的 serialize_precision或precision进行截取</li>\n<li>截取后的数字追加到json字符串的尾部</li>\n</ol>\n<p>根据php.ini文档的说明</p>\n<blockquote>\n<p>; The number of significant digits displayed in floating point numbers.</p>\n<p>; When floats &amp; doubles are serialized store serialize_precision significant ; digits after the floating point. The default value ensures that when floats ; are decoded with unserialize, the data will remain the same. ; The value is also used for json_encode when encoding double values. ; If -1 is used, then dtoa mode 0 is used which automatically select the best ; precision.</p>\n</blockquote>\n<p>设置serialize_precision&#x3D;-1 将会自动使用最适合的长度，即我们经常使用的浮点型长度。</p>\n<p>所以，我们最好设置-1来设置序列化长度</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&#x27;precision&#x27;</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&#x27;serialize_precision&#x27;</span>, -<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>文章链接: <a href=\"http://feilong.tech/2019/09/06/php-float-double-precision\">http://feilong.tech/2019/09/06/php-float-double-precision</a></p>\n"},{"title":"让Json更懂中文(JSON_UNESCAPED_UNICODE)","id":"283","comments":0,"date":"2018-07-05T07:57:10.000Z","_content":"\n#### 背景\n\n在工作期间，遇到一个关于json的问题，就是如果是中文，那么json就会自动将中文编码成Unicode，这样并不是说有问题，只是可读性大大降低。\n\n之前遇到这个问题的时候，一直以为是在http传输过程中造成的，但是真是原因是由于json\\_encode的时候，中文自动被编码成了Unicode。\n\n```php\n$array = array(\n    'name' => '肥龙'\n);\necho json_encode($array);\n```\n\n执行结果:\n\n![](/uploads/2018/07/json_encode.png)\n\n#### PHP新特性\n\n但是从`PHP5.4`之后，这个更新了一个新的json\\_encode的特性，是专门针对中文问题的。那就是增加新特性——JSON\\_UNESCAPED\\_UNICODE。\n\n```php\n$array = array(\n    'name' => '肥龙'\n);\necho json_encode($array, JSON_UNESCAPED_UNICODE);\n```\n\n执行结果：\n\n![](/uploads/2018/07/json_encode2.png)\n\n#### 总结\n\n这个特性帮助我们编码更高可读性的json，但是这个特性是在PHP5.4之后才增加的，所以PHP5.3版本暂不支持，会提示 `Use of undefined constant JSON_UNESCAPED_UNICODE`\n\n![](/uploads/2018/07/json_encode3-1024x82.png)\n\n#### 参考文献\n\n*   [让Json更懂中文(JSON\\_UNESCAPED\\_UNICODE)](http://www.laruence.com/2011/10/10/2239.html)","source":"_posts/php-json-encode.md","raw":"---\ntitle: 让Json更懂中文(JSON_UNESCAPED_UNICODE)\ntags: []\nid: '283'\ncategories:\n  - - PHP\ncomments: false\ndate: 2018-07-05 15:57:10\n---\n\n#### 背景\n\n在工作期间，遇到一个关于json的问题，就是如果是中文，那么json就会自动将中文编码成Unicode，这样并不是说有问题，只是可读性大大降低。\n\n之前遇到这个问题的时候，一直以为是在http传输过程中造成的，但是真是原因是由于json\\_encode的时候，中文自动被编码成了Unicode。\n\n```php\n$array = array(\n    'name' => '肥龙'\n);\necho json_encode($array);\n```\n\n执行结果:\n\n![](/uploads/2018/07/json_encode.png)\n\n#### PHP新特性\n\n但是从`PHP5.4`之后，这个更新了一个新的json\\_encode的特性，是专门针对中文问题的。那就是增加新特性——JSON\\_UNESCAPED\\_UNICODE。\n\n```php\n$array = array(\n    'name' => '肥龙'\n);\necho json_encode($array, JSON_UNESCAPED_UNICODE);\n```\n\n执行结果：\n\n![](/uploads/2018/07/json_encode2.png)\n\n#### 总结\n\n这个特性帮助我们编码更高可读性的json，但是这个特性是在PHP5.4之后才增加的，所以PHP5.3版本暂不支持，会提示 `Use of undefined constant JSON_UNESCAPED_UNICODE`\n\n![](/uploads/2018/07/json_encode3-1024x82.png)\n\n#### 参考文献\n\n*   [让Json更懂中文(JSON\\_UNESCAPED\\_UNICODE)](http://www.laruence.com/2011/10/10/2239.html)","slug":"php-json-encode","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mhf005q417t0u5o2mg9","layout":"post","photos":[],"link":"","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>在工作期间，遇到一个关于json的问题，就是如果是中文，那么json就会自动将中文编码成Unicode，这样并不是说有问题，只是可读性大大降低。</p>\n<p>之前遇到这个问题的时候，一直以为是在http传输过程中造成的，但是真是原因是由于json_encode的时候，中文自动被编码成了Unicode。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$array</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;肥龙&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$array</span>);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果:</p>\n<p><img src=\"/uploads/2018/07/json_encode.png\"></p>\n<h4 id=\"PHP新特性\"><a href=\"#PHP新特性\" class=\"headerlink\" title=\"PHP新特性\"></a>PHP新特性</h4><p>但是从<code>PHP5.4</code>之后，这个更新了一个新的json_encode的特性，是专门针对中文问题的。那就是增加新特性——JSON_UNESCAPED_UNICODE。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$array</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;肥龙&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$array</span>, JSON_UNESCAPED_UNICODE);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<p><img src=\"/uploads/2018/07/json_encode2.png\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这个特性帮助我们编码更高可读性的json，但是这个特性是在PHP5.4之后才增加的，所以PHP5.3版本暂不支持，会提示 <code>Use of undefined constant JSON_UNESCAPED_UNICODE</code></p>\n<p><img src=\"/uploads/2018/07/json_encode3-1024x82.png\"></p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li><a href=\"http://www.laruence.com/2011/10/10/2239.html\">让Json更懂中文(JSON_UNESCAPED_UNICODE)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>在工作期间，遇到一个关于json的问题，就是如果是中文，那么json就会自动将中文编码成Unicode，这样并不是说有问题，只是可读性大大降低。</p>\n<p>之前遇到这个问题的时候，一直以为是在http传输过程中造成的，但是真是原因是由于json_encode的时候，中文自动被编码成了Unicode。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$array</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;肥龙&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$array</span>);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果:</p>\n<p><img src=\"/uploads/2018/07/json_encode.png\"></p>\n<h4 id=\"PHP新特性\"><a href=\"#PHP新特性\" class=\"headerlink\" title=\"PHP新特性\"></a>PHP新特性</h4><p>但是从<code>PHP5.4</code>之后，这个更新了一个新的json_encode的特性，是专门针对中文问题的。那就是增加新特性——JSON_UNESCAPED_UNICODE。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$array</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;肥龙&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$array</span>, JSON_UNESCAPED_UNICODE);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<p><img src=\"/uploads/2018/07/json_encode2.png\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这个特性帮助我们编码更高可读性的json，但是这个特性是在PHP5.4之后才增加的，所以PHP5.3版本暂不支持，会提示 <code>Use of undefined constant JSON_UNESCAPED_UNICODE</code></p>\n<p><img src=\"/uploads/2018/07/json_encode3-1024x82.png\"></p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li><a href=\"http://www.laruence.com/2011/10/10/2239.html\">让Json更懂中文(JSON_UNESCAPED_UNICODE)</a></li>\n</ul>\n"},{"title":"PHP 底层：PHP的生命周期","id":"135","date":"2017-08-24T12:10:06.000Z","_content":"\n#### 一切开始：SAPI接口\n\nSAPI 是Server Application Programming Interface 的简称，意思就是说，服务应用编程接口，PHP所有接口都是在这和系统进行交互。就像pc一样，无论安装在哪个系统，只要满足接口，都是可以正常运行的。PHP的脚本有很多运行方式，大多数是运行在web服务器，比如Apache或者nginx，或者命令行（CLI），或者嵌入其他程序里。\n<!-- more -->\n#### 开始和结束\n\nPHP的开始和结束主要有两个阶段：**处理请求之前的开始**和**请求之后的结束阶段**。开始的阶段有两个过程：**模块初始化阶段**和**模块激活阶段**。\n\n> *   模块初始化阶段是MINIT(module init)，是在整个SAPI的什么周期内**只会发生一次**。也就是在lamp的时候，当Apache启动后，就开始启动MINIT，或者lnmp，当php-fpm启动后，会进行该步骤。例如PHP注册了一些拓展，则在该阶段回调所有的MINIT函数。\n>     \n>     ```cpp\n>     PHP_MINIT_FUNCTION(myphpextension)\n>     {\n>     // 注册常量或者类等初始化操作\n>     return SUCCESS; \n>     }\n>     ```\n>     \n> *   模块激活阶段RINIT也叫请求初始化阶段（request init），该过程发生在请求的阶段。例如，当通过url请求某个页面，则在请求之前会进行模块激活（RINIT请求开始）。请求到达之后PHP初始化执行脚本的基本环境，例如创建一个执行环境，包括保存PHP运行过程中变量名称和值内容的符号表，以及当前所有的函数以及类等信息的符号表。然后PHP会调用所有模块的RINIT函数\n>     \n>     ```cpp\n>     PHP_RINIT_FUNCTION(myphpextension)\n>     {\n>     // 例如记录请求开始时间\n>     // 随后在请求结束的时候记录结束时间。这样我们就能够记录下处理请求所花费的时间了\n>     return SUCCESS; \n>     }\n>     ```\n>     \n> *   请求处理到达结束阶段，一般是执行到程序末尾或者调用`exit()`或者`die()` ，PHP都将进入结束阶段。和开始阶段对应，结束阶段也会分为两环节，一个在请求结束后停用模块(RSHUTDOWN，对应RINIT)\n>     \n>     ```cpp\n>     PHP_RSHUTDOWN_FUNCTION(myphpextension)\n>     {\n>     // 例如记录请求结束时间，并把相应的信息写入到日至文件中。\n>     return SUCCESS; \n>     }\n>     ```\n>     \n> *   另一个阶段是，所有的请求都已处理完毕，SAPI也准备关闭了， PHP调用每个扩展的MSHUTDOWN方法，这是各个模块最后一次释放内存的机会。（这个是对于CGI和CLI等SAPI，没有“下一个请求”，所以SAPI立刻开始关闭。）\n>     \n>     ```cpp\n>     PHP_MSHUTDOWN_FUNCTION(extension_name) {   \n>     /* Free handlers and persistent memory etc */   \n>     return SUCCESS;   \n>     }  \n>     ```\n>     \n>     这样，整个PHP生命周期就结束了。要注意的是，只有在服务器没有请求的情况下才会执行“启动第一步”和“关闭第二步”。\n>     \n\nSAPI运行PHP都经过下面几个阶段:\n\n*   **模块初始化阶段(Module init)**  \n    即调用每个拓展源码中的的PHP\\_MINIT\\_FUNCTION中的方法初始化模块,进行一些模块所需变量的申请,内存分配等。\n*   **请求初始化阶段(Request init)** 即接受到客户端的请求后调用每个拓展的PHP\\_RINIT\\_FUNCTION中的方法,初始化PHP脚本的执行环境。\n*   **执行PHP脚本**\n*   **请求结束(Request Shutdown)** 这时候调用每个拓展的PHP\\_RSHUTDOWN\\_FUNCTION方法清理请求现场,并且ZE开始回收变量和内存。\n*   **关闭模块(Module shutdown)** Web服务器退出或者命令行脚本执行完毕退出会调用拓展源码中的PHP\\_MSHUTDOWN\\_FUNCTION 方法\n\n#### 单进程SAPI生命周期\n\nCLI/CGI模式的PHP属于单进程的SAPI模式。这类的请求在处理一次请求后就关闭。也就是只会经过如下几个环节： 开始 - 请求开始 - 请求关闭 - 结束 SAPI接口实现就完成了其生命周期。如图所示：\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194833.png)\n\n#### 多进程SAPI生命周期\n\n通常PHP是编译为apache的一个模块来处理PHP请求。Apache一般会采用多进程模式， Apache启动后会fork出多个子进程，每个进程的内存空间独立，每个子进程都会经过开始和结束环节，不过每个进程的开始阶段只在进程fork出来以来后进行，在整个进程的生命周期内可能会处理多个请求。只有在Apache关闭或者进程被结束之后才会进行关闭阶段，在这两个阶段之间会随着每个请求重复请求开始-请求关闭的环节。 ![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194749.png)\n\n#### 多线程的SAPI生命周期\n\n多线程模式和多进程中的某个进程类似，不同的是在整个进程的生命周期内会并行的重复着 请求开始-请求关闭的环节. 在这种模式下，只有一个服务器进程在运行着，但会同时运行很多线程，这样可以减少一些资源开销，向Module init和Module shutdown就只需要运行一遍就行了，一些全局变量也只需要初始化一次，因为线程独具的特质，使得各个请求之间方便的共享一些数据成为可能。 ![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194807.png)","source":"_posts/php-lifetime.md","raw":"---\ntitle: PHP 底层：PHP的生命周期\ntags: []\nid: '135'\ncategories:\n  - - PHP\ndate: 2017-08-24 20:10:06\n---\n\n#### 一切开始：SAPI接口\n\nSAPI 是Server Application Programming Interface 的简称，意思就是说，服务应用编程接口，PHP所有接口都是在这和系统进行交互。就像pc一样，无论安装在哪个系统，只要满足接口，都是可以正常运行的。PHP的脚本有很多运行方式，大多数是运行在web服务器，比如Apache或者nginx，或者命令行（CLI），或者嵌入其他程序里。\n<!-- more -->\n#### 开始和结束\n\nPHP的开始和结束主要有两个阶段：**处理请求之前的开始**和**请求之后的结束阶段**。开始的阶段有两个过程：**模块初始化阶段**和**模块激活阶段**。\n\n> *   模块初始化阶段是MINIT(module init)，是在整个SAPI的什么周期内**只会发生一次**。也就是在lamp的时候，当Apache启动后，就开始启动MINIT，或者lnmp，当php-fpm启动后，会进行该步骤。例如PHP注册了一些拓展，则在该阶段回调所有的MINIT函数。\n>     \n>     ```cpp\n>     PHP_MINIT_FUNCTION(myphpextension)\n>     {\n>     // 注册常量或者类等初始化操作\n>     return SUCCESS; \n>     }\n>     ```\n>     \n> *   模块激活阶段RINIT也叫请求初始化阶段（request init），该过程发生在请求的阶段。例如，当通过url请求某个页面，则在请求之前会进行模块激活（RINIT请求开始）。请求到达之后PHP初始化执行脚本的基本环境，例如创建一个执行环境，包括保存PHP运行过程中变量名称和值内容的符号表，以及当前所有的函数以及类等信息的符号表。然后PHP会调用所有模块的RINIT函数\n>     \n>     ```cpp\n>     PHP_RINIT_FUNCTION(myphpextension)\n>     {\n>     // 例如记录请求开始时间\n>     // 随后在请求结束的时候记录结束时间。这样我们就能够记录下处理请求所花费的时间了\n>     return SUCCESS; \n>     }\n>     ```\n>     \n> *   请求处理到达结束阶段，一般是执行到程序末尾或者调用`exit()`或者`die()` ，PHP都将进入结束阶段。和开始阶段对应，结束阶段也会分为两环节，一个在请求结束后停用模块(RSHUTDOWN，对应RINIT)\n>     \n>     ```cpp\n>     PHP_RSHUTDOWN_FUNCTION(myphpextension)\n>     {\n>     // 例如记录请求结束时间，并把相应的信息写入到日至文件中。\n>     return SUCCESS; \n>     }\n>     ```\n>     \n> *   另一个阶段是，所有的请求都已处理完毕，SAPI也准备关闭了， PHP调用每个扩展的MSHUTDOWN方法，这是各个模块最后一次释放内存的机会。（这个是对于CGI和CLI等SAPI，没有“下一个请求”，所以SAPI立刻开始关闭。）\n>     \n>     ```cpp\n>     PHP_MSHUTDOWN_FUNCTION(extension_name) {   \n>     /* Free handlers and persistent memory etc */   \n>     return SUCCESS;   \n>     }  \n>     ```\n>     \n>     这样，整个PHP生命周期就结束了。要注意的是，只有在服务器没有请求的情况下才会执行“启动第一步”和“关闭第二步”。\n>     \n\nSAPI运行PHP都经过下面几个阶段:\n\n*   **模块初始化阶段(Module init)**  \n    即调用每个拓展源码中的的PHP\\_MINIT\\_FUNCTION中的方法初始化模块,进行一些模块所需变量的申请,内存分配等。\n*   **请求初始化阶段(Request init)** 即接受到客户端的请求后调用每个拓展的PHP\\_RINIT\\_FUNCTION中的方法,初始化PHP脚本的执行环境。\n*   **执行PHP脚本**\n*   **请求结束(Request Shutdown)** 这时候调用每个拓展的PHP\\_RSHUTDOWN\\_FUNCTION方法清理请求现场,并且ZE开始回收变量和内存。\n*   **关闭模块(Module shutdown)** Web服务器退出或者命令行脚本执行完毕退出会调用拓展源码中的PHP\\_MSHUTDOWN\\_FUNCTION 方法\n\n#### 单进程SAPI生命周期\n\nCLI/CGI模式的PHP属于单进程的SAPI模式。这类的请求在处理一次请求后就关闭。也就是只会经过如下几个环节： 开始 - 请求开始 - 请求关闭 - 结束 SAPI接口实现就完成了其生命周期。如图所示：\n\n![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194833.png)\n\n#### 多进程SAPI生命周期\n\n通常PHP是编译为apache的一个模块来处理PHP请求。Apache一般会采用多进程模式， Apache启动后会fork出多个子进程，每个进程的内存空间独立，每个子进程都会经过开始和结束环节，不过每个进程的开始阶段只在进程fork出来以来后进行，在整个进程的生命周期内可能会处理多个请求。只有在Apache关闭或者进程被结束之后才会进行关闭阶段，在这两个阶段之间会随着每个请求重复请求开始-请求关闭的环节。 ![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194749.png)\n\n#### 多线程的SAPI生命周期\n\n多线程模式和多进程中的某个进程类似，不同的是在整个进程的生命周期内会并行的重复着 请求开始-请求关闭的环节. 在这种模式下，只有一个服务器进程在运行着，但会同时运行很多线程，这样可以减少一些资源开销，向Module init和Module shutdown就只需要运行一遍就行了，一些全局变量也只需要初始化一次，因为线程独具的特质，使得各个请求之间方便的共享一些数据成为可能。 ![](/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194807.png)","slug":"php-lifetime","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mhg005s417t6y5x21nt","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一切开始：SAPI接口\"><a href=\"#一切开始：SAPI接口\" class=\"headerlink\" title=\"一切开始：SAPI接口\"></a>一切开始：SAPI接口</h4><p>SAPI 是Server Application Programming Interface 的简称，意思就是说，服务应用编程接口，PHP所有接口都是在这和系统进行交互。就像pc一样，无论安装在哪个系统，只要满足接口，都是可以正常运行的。PHP的脚本有很多运行方式，大多数是运行在web服务器，比如Apache或者nginx，或者命令行（CLI），或者嵌入其他程序里。</p>\n<span id=\"more\"></span>\n<h4 id=\"开始和结束\"><a href=\"#开始和结束\" class=\"headerlink\" title=\"开始和结束\"></a>开始和结束</h4><p>PHP的开始和结束主要有两个阶段：<strong>处理请求之前的开始</strong>和<strong>请求之后的结束阶段</strong>。开始的阶段有两个过程：<strong>模块初始化阶段</strong>和<strong>模块激活阶段</strong>。</p>\n<blockquote>\n<ul>\n<li><p>模块初始化阶段是MINIT(module init)，是在整个SAPI的什么周期内<strong>只会发生一次</strong>。也就是在lamp的时候，当Apache启动后，就开始启动MINIT，或者lnmp，当php-fpm启动后，会进行该步骤。例如PHP注册了一些拓展，则在该阶段回调所有的MINIT函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_MINIT_FUNCTION</span>(myphpextension)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 注册常量或者类等初始化操作</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模块激活阶段RINIT也叫请求初始化阶段（request init），该过程发生在请求的阶段。例如，当通过url请求某个页面，则在请求之前会进行模块激活（RINIT请求开始）。请求到达之后PHP初始化执行脚本的基本环境，例如创建一个执行环境，包括保存PHP运行过程中变量名称和值内容的符号表，以及当前所有的函数以及类等信息的符号表。然后PHP会调用所有模块的RINIT函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_RINIT_FUNCTION</span>(myphpextension)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 例如记录请求开始时间</span></span><br><span class=\"line\"><span class=\"comment\">// 随后在请求结束的时候记录结束时间。这样我们就能够记录下处理请求所花费的时间了</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求处理到达结束阶段，一般是执行到程序末尾或者调用<code>exit()</code>或者<code>die()</code> ，PHP都将进入结束阶段。和开始阶段对应，结束阶段也会分为两环节，一个在请求结束后停用模块(RSHUTDOWN，对应RINIT)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_RSHUTDOWN_FUNCTION</span>(myphpextension)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 例如记录请求结束时间，并把相应的信息写入到日至文件中。</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>另一个阶段是，所有的请求都已处理完毕，SAPI也准备关闭了， PHP调用每个扩展的MSHUTDOWN方法，这是各个模块最后一次释放内存的机会。（这个是对于CGI和CLI等SAPI，没有“下一个请求”，所以SAPI立刻开始关闭。）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_MSHUTDOWN_FUNCTION</span>(extension_name) &#123;   </span><br><span class=\"line\"><span class=\"comment\">/* Free handlers and persistent memory etc */</span>   </span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS;   </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>这样，整个PHP生命周期就结束了。要注意的是，只有在服务器没有请求的情况下才会执行“启动第一步”和“关闭第二步”。</p>\n</li>\n</ul>\n</blockquote>\n<p>SAPI运行PHP都经过下面几个阶段:</p>\n<ul>\n<li><strong>模块初始化阶段(Module init)</strong><br>即调用每个拓展源码中的的PHP_MINIT_FUNCTION中的方法初始化模块,进行一些模块所需变量的申请,内存分配等。</li>\n<li><strong>请求初始化阶段(Request init)</strong> 即接受到客户端的请求后调用每个拓展的PHP_RINIT_FUNCTION中的方法,初始化PHP脚本的执行环境。</li>\n<li><strong>执行PHP脚本</strong></li>\n<li><strong>请求结束(Request Shutdown)</strong> 这时候调用每个拓展的PHP_RSHUTDOWN_FUNCTION方法清理请求现场,并且ZE开始回收变量和内存。</li>\n<li><strong>关闭模块(Module shutdown)</strong> Web服务器退出或者命令行脚本执行完毕退出会调用拓展源码中的PHP_MSHUTDOWN_FUNCTION 方法</li>\n</ul>\n<h4 id=\"单进程SAPI生命周期\"><a href=\"#单进程SAPI生命周期\" class=\"headerlink\" title=\"单进程SAPI生命周期\"></a>单进程SAPI生命周期</h4><p>CLI&#x2F;CGI模式的PHP属于单进程的SAPI模式。这类的请求在处理一次请求后就关闭。也就是只会经过如下几个环节： 开始 - 请求开始 - 请求关闭 - 结束 SAPI接口实现就完成了其生命周期。如图所示：</p>\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194833.png\"></p>\n<h4 id=\"多进程SAPI生命周期\"><a href=\"#多进程SAPI生命周期\" class=\"headerlink\" title=\"多进程SAPI生命周期\"></a>多进程SAPI生命周期</h4><p>通常PHP是编译为apache的一个模块来处理PHP请求。Apache一般会采用多进程模式， Apache启动后会fork出多个子进程，每个进程的内存空间独立，每个子进程都会经过开始和结束环节，不过每个进程的开始阶段只在进程fork出来以来后进行，在整个进程的生命周期内可能会处理多个请求。只有在Apache关闭或者进程被结束之后才会进行关闭阶段，在这两个阶段之间会随着每个请求重复请求开始-请求关闭的环节。 <img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194749.png\"></p>\n<h4 id=\"多线程的SAPI生命周期\"><a href=\"#多线程的SAPI生命周期\" class=\"headerlink\" title=\"多线程的SAPI生命周期\"></a>多线程的SAPI生命周期</h4><p>多线程模式和多进程中的某个进程类似，不同的是在整个进程的生命周期内会并行的重复着 请求开始-请求关闭的环节. 在这种模式下，只有一个服务器进程在运行着，但会同时运行很多线程，这样可以减少一些资源开销，向Module init和Module shutdown就只需要运行一遍就行了，一些全局变量也只需要初始化一次，因为线程独具的特质，使得各个请求之间方便的共享一些数据成为可能。 <img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194807.png\"></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"一切开始：SAPI接口\"><a href=\"#一切开始：SAPI接口\" class=\"headerlink\" title=\"一切开始：SAPI接口\"></a>一切开始：SAPI接口</h4><p>SAPI 是Server Application Programming Interface 的简称，意思就是说，服务应用编程接口，PHP所有接口都是在这和系统进行交互。就像pc一样，无论安装在哪个系统，只要满足接口，都是可以正常运行的。PHP的脚本有很多运行方式，大多数是运行在web服务器，比如Apache或者nginx，或者命令行（CLI），或者嵌入其他程序里。</p>","more":"<h4 id=\"开始和结束\"><a href=\"#开始和结束\" class=\"headerlink\" title=\"开始和结束\"></a>开始和结束</h4><p>PHP的开始和结束主要有两个阶段：<strong>处理请求之前的开始</strong>和<strong>请求之后的结束阶段</strong>。开始的阶段有两个过程：<strong>模块初始化阶段</strong>和<strong>模块激活阶段</strong>。</p>\n<blockquote>\n<ul>\n<li><p>模块初始化阶段是MINIT(module init)，是在整个SAPI的什么周期内<strong>只会发生一次</strong>。也就是在lamp的时候，当Apache启动后，就开始启动MINIT，或者lnmp，当php-fpm启动后，会进行该步骤。例如PHP注册了一些拓展，则在该阶段回调所有的MINIT函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_MINIT_FUNCTION</span>(myphpextension)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 注册常量或者类等初始化操作</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模块激活阶段RINIT也叫请求初始化阶段（request init），该过程发生在请求的阶段。例如，当通过url请求某个页面，则在请求之前会进行模块激活（RINIT请求开始）。请求到达之后PHP初始化执行脚本的基本环境，例如创建一个执行环境，包括保存PHP运行过程中变量名称和值内容的符号表，以及当前所有的函数以及类等信息的符号表。然后PHP会调用所有模块的RINIT函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_RINIT_FUNCTION</span>(myphpextension)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 例如记录请求开始时间</span></span><br><span class=\"line\"><span class=\"comment\">// 随后在请求结束的时候记录结束时间。这样我们就能够记录下处理请求所花费的时间了</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求处理到达结束阶段，一般是执行到程序末尾或者调用<code>exit()</code>或者<code>die()</code> ，PHP都将进入结束阶段。和开始阶段对应，结束阶段也会分为两环节，一个在请求结束后停用模块(RSHUTDOWN，对应RINIT)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_RSHUTDOWN_FUNCTION</span>(myphpextension)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 例如记录请求结束时间，并把相应的信息写入到日至文件中。</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>另一个阶段是，所有的请求都已处理完毕，SAPI也准备关闭了， PHP调用每个扩展的MSHUTDOWN方法，这是各个模块最后一次释放内存的机会。（这个是对于CGI和CLI等SAPI，没有“下一个请求”，所以SAPI立刻开始关闭。）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_MSHUTDOWN_FUNCTION</span>(extension_name) &#123;   </span><br><span class=\"line\"><span class=\"comment\">/* Free handlers and persistent memory etc */</span>   </span><br><span class=\"line\"><span class=\"keyword\">return</span> SUCCESS;   </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>这样，整个PHP生命周期就结束了。要注意的是，只有在服务器没有请求的情况下才会执行“启动第一步”和“关闭第二步”。</p>\n</li>\n</ul>\n</blockquote>\n<p>SAPI运行PHP都经过下面几个阶段:</p>\n<ul>\n<li><strong>模块初始化阶段(Module init)</strong><br>即调用每个拓展源码中的的PHP_MINIT_FUNCTION中的方法初始化模块,进行一些模块所需变量的申请,内存分配等。</li>\n<li><strong>请求初始化阶段(Request init)</strong> 即接受到客户端的请求后调用每个拓展的PHP_RINIT_FUNCTION中的方法,初始化PHP脚本的执行环境。</li>\n<li><strong>执行PHP脚本</strong></li>\n<li><strong>请求结束(Request Shutdown)</strong> 这时候调用每个拓展的PHP_RSHUTDOWN_FUNCTION方法清理请求现场,并且ZE开始回收变量和内存。</li>\n<li><strong>关闭模块(Module shutdown)</strong> Web服务器退出或者命令行脚本执行完毕退出会调用拓展源码中的PHP_MSHUTDOWN_FUNCTION 方法</li>\n</ul>\n<h4 id=\"单进程SAPI生命周期\"><a href=\"#单进程SAPI生命周期\" class=\"headerlink\" title=\"单进程SAPI生命周期\"></a>单进程SAPI生命周期</h4><p>CLI&#x2F;CGI模式的PHP属于单进程的SAPI模式。这类的请求在处理一次请求后就关闭。也就是只会经过如下几个环节： 开始 - 请求开始 - 请求关闭 - 结束 SAPI接口实现就完成了其生命周期。如图所示：</p>\n<p><img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194833.png\"></p>\n<h4 id=\"多进程SAPI生命周期\"><a href=\"#多进程SAPI生命周期\" class=\"headerlink\" title=\"多进程SAPI生命周期\"></a>多进程SAPI生命周期</h4><p>通常PHP是编译为apache的一个模块来处理PHP请求。Apache一般会采用多进程模式， Apache启动后会fork出多个子进程，每个进程的内存空间独立，每个子进程都会经过开始和结束环节，不过每个进程的开始阶段只在进程fork出来以来后进行，在整个进程的生命周期内可能会处理多个请求。只有在Apache关闭或者进程被结束之后才会进行关闭阶段，在这两个阶段之间会随着每个请求重复请求开始-请求关闭的环节。 <img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194749.png\"></p>\n<h4 id=\"多线程的SAPI生命周期\"><a href=\"#多线程的SAPI生命周期\" class=\"headerlink\" title=\"多线程的SAPI生命周期\"></a>多线程的SAPI生命周期</h4><p>多线程模式和多进程中的某个进程类似，不同的是在整个进程的生命周期内会并行的重复着 请求开始-请求关闭的环节. 在这种模式下，只有一个服务器进程在运行着，但会同时运行很多线程，这样可以减少一些资源开销，向Module init和Module shutdown就只需要运行一遍就行了，一些全局变量也只需要初始化一次，因为线程独具的特质，使得各个请求之间方便的共享一些数据成为可能。 <img src=\"/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194807.png\"></p>"},{"title":"PHP $_POST接收大量form表单数据缺失探究","id":"730","date":"2019-12-20T13:39:55.000Z","_content":"\n### 背景\n\n最近遇到一个线上问题，服务A，调用服务B的接口，发现服务B报“xxx参数不存在”，但是通过服务A的请求日志发现，是有参数\"xxx\"。然后翻了一下服务B的日志，发现没有参数\"xxx\"，而且以外发现，接收的数据，比传输的数据少一部分！\n\n### 黑人问号？？\n\n最初怀疑是A传输写数据的原因，随后在请求前，打印了内容，`发现是完整的！！！好玄幻！！！`\n\n然后在B打印了 file\\_get\\_contents(\"php://input\")，$\\_POST，发前者的内容是完整的，后者的内容要偏少，所以A传输的数据应该没有问题！！\n\n那问题到底出现在了哪里？？？\n\n### 探究原因\n\n为了查明下原因，我怀疑是和代码有关系，所以索性，把数据搞到postman，通过postman再尝试下\n\n```php\n#接收端代码\n<?php\nfile_put_contents(\"txt\", json_encode($_POST));\n```\n\n```bash\n# 启动phpserver服务\n$ php7 -S 127.0.0.1:9090\nPHP 7.1.2RC1 Development Server started at Fri Dec 20 13:40:31 2019\nListening on http://127.0.0.1:9090\nDocument root is /Users/sf\nPress Ctrl-C to quit.\n[Fri Dec 20 13:40:38 2019] PHP Warning:  Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0\n[Fri Dec 20 13:40:38 2019] 127.0.0.1:59719 [200]: /index.php\n```\n\n意外发现，控制台输出了一条warning信息\n\n`[Fri Dec 20 13:40:38 2019] PHP Warning: Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0`\n\n这条信息，仿佛是一棵救命稻草一样，我根据提示信息，查询了一下官方文档\n\n> max\\_input\\_vars integer 接受多少 输入的变量（限制分别应用于 $\\_GET、$\\_POST 和 $\\_COOKIE 超全局变量） 指令的使用减轻了以哈希碰撞来进行拒绝服务攻击的可能性。 如有超过指令指定数量的输入变量，将会导致 E\\_WARNING 的产生， 更多的输入变量将会从请求中截断。\n\n原来，PHP处于安全考虑，会在form表单提交的时候，会限制参数解析的个数，如果超过规定的个数，就会出现截断的问题，默认限制是1000个。而我提交的数据，早就超过1000个了。这应该就是$\\_POST要比php://input里面数据少的原因了。\n\n### 截取的策略\n\n原因找到了，这就萌生了另外一个问题，$\\_POST虽然被截断了，但是为什么打印出来的信息，还是一个完整的数组的结构？截断的策略是什么样的？这恐怕需要分析一下PHP的源码了！\n\n```bash\n#php_variables.c\n\nstatic inline int add_post_vars(zval *arr, post_var_data_t *vars, zend_bool eof)\n{\n    uint64_t max_vars = PG(max_input_vars);\n\n    vars->ptr = ZSTR_VAL(vars->str.s);\n    vars->end = ZSTR_VAL(vars->str.s) + ZSTR_LEN(vars->str.s);\n    while (add_post_var(arr, vars, eof)) {\n        if (++vars->cnt > max_vars) {\n            php_error_docref(NULL, E_WARNING,\n                    \"Input variables exceeded %\" PRIu64 \". \"\n                    \"To increase the limit change max_input_vars in php.ini.\",\n                    max_vars);\n            return FAILURE;\n        }\n    }\n\n    if (!eof) {\n        memmove(ZSTR_VAL(vars->str.s), vars->ptr, ZSTR_LEN(vars->str.s) = vars->end - vars->ptr);\n    }\n    return SUCCESS;\n}\n```\n\nPHP会首先初始化解析数据的指针，然后通过while的循环，逐次对post的数据进行解析，然后设置vars->ptr的值，用来记录当前解析的位置，并对解析变量的个数进行统计，当`++vars->cnt > max_vars` 的时候，会终止解析，但是解析的时候，是按照key value结对解析，所以截断后，$\\_POST里面也是标准的数组结构。\n\n`add_post_var`是具体的解析策略， 以`name=feilong&sex=man`为例\n\n```bash\nstatic zend_bool add_post_var(zval *arr, post_var_data_t *var, zend_bool eof)\n{\n    char *ksep, *vsep, *val;\n    size_t klen, vlen;\n    size_t new_vlen;\n\n    if (var->ptr >= var->end) {\n        return 0;\n    }\n\n    vsep = memchr(var->ptr, '&', var->end - var->ptr);\n    if (!vsep) {\n        if (!eof) {\n            return 0;\n        } else {\n            vsep = var->end;\n        }\n    }\n\n    ksep = memchr(var->ptr, '=', vsep - var->ptr);\n    if (ksep) {\n        *ksep = '\\0';\n        /* \"foo=bar&\" or \"foo=&\" */\n        klen = ksep - var->ptr;\n        vlen = vsep - ++ksep;\n    } else {\n        ksep = \"\";\n        /* \"foo&\" */\n        klen = vsep - var->ptr;\n        vlen = 0;\n    }\n\n    php_url_decode(var->ptr, klen);\n\n    val = estrndup(ksep, vlen);\n    if (vlen) {\n        vlen = php_url_decode(val, vlen);\n    }\n\n    if (sapi_module.input_filter(PARSE_POST, var->ptr, &val, vlen, &new_vlen)) {\n        php_register_variable_safe(var->ptr, val, new_vlen, arr);\n    }\n    efree(val);\n\n    var->ptr = vsep + (vsep != var->end);\n    return 1;\n}\n```\n\n首先，定位到`name=feilong`，然后进行拆解，将name赋值var->ptr，将feilong赋值给val变量，然后通过`php_register_variable_safe`函数，进行变量的注册。\n\n不过在注册之前，会先进行一次过滤的操作。\n\n> filter\\_input filter\\_input — 通过名称获取特定的外部变量，并且可以通过过滤器处理它 filter\\_input ( int $type , string $variable\\_name \\[, int $filter = FILTER\\_DEFAULT \\[, mixed $options \\]\\] ) : mixed type INPUT\\_GET, INPUT\\_POST, INPUT\\_COOKIE, INPUT\\_SERVER或 INPUT\\_ENV之一。 .....\n\n从源码上来看，这里过滤的类型是`INPUT_POST`。\n\nPHP就是通过这样一层层的循环解析，直到解析的变量个数超过限制或者解析结束，把原有的form表单的数据，解析成$\\_POST数组。\n\n### 总结\n\n回到文章的标题，其实这次问题出现的原因，并不是在于\"传输\"，而在于解析数据，处于安全考虑，PHP做了一层限制，防止黑客传输过多的数据，导致用户被DDoS攻击。\n\n本文链接: [https://feilong.tech/2019/12/20/php-parse-post](https://feilong.tech/2019/12/20/php-parse-post)","source":"_posts/php-parse-post.md","raw":"---\ntitle: PHP $_POST接收大量form表单数据缺失探究\ntags:\n  - http\n  - PHP\n  - PHP7\nid: '730'\ncategories:\n  - - PHP\n  - - PHP源码\ndate: 2019-12-20 21:39:55\n---\n\n### 背景\n\n最近遇到一个线上问题，服务A，调用服务B的接口，发现服务B报“xxx参数不存在”，但是通过服务A的请求日志发现，是有参数\"xxx\"。然后翻了一下服务B的日志，发现没有参数\"xxx\"，而且以外发现，接收的数据，比传输的数据少一部分！\n\n### 黑人问号？？\n\n最初怀疑是A传输写数据的原因，随后在请求前，打印了内容，`发现是完整的！！！好玄幻！！！`\n\n然后在B打印了 file\\_get\\_contents(\"php://input\")，$\\_POST，发前者的内容是完整的，后者的内容要偏少，所以A传输的数据应该没有问题！！\n\n那问题到底出现在了哪里？？？\n\n### 探究原因\n\n为了查明下原因，我怀疑是和代码有关系，所以索性，把数据搞到postman，通过postman再尝试下\n\n```php\n#接收端代码\n<?php\nfile_put_contents(\"txt\", json_encode($_POST));\n```\n\n```bash\n# 启动phpserver服务\n$ php7 -S 127.0.0.1:9090\nPHP 7.1.2RC1 Development Server started at Fri Dec 20 13:40:31 2019\nListening on http://127.0.0.1:9090\nDocument root is /Users/sf\nPress Ctrl-C to quit.\n[Fri Dec 20 13:40:38 2019] PHP Warning:  Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0\n[Fri Dec 20 13:40:38 2019] 127.0.0.1:59719 [200]: /index.php\n```\n\n意外发现，控制台输出了一条warning信息\n\n`[Fri Dec 20 13:40:38 2019] PHP Warning: Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0`\n\n这条信息，仿佛是一棵救命稻草一样，我根据提示信息，查询了一下官方文档\n\n> max\\_input\\_vars integer 接受多少 输入的变量（限制分别应用于 $\\_GET、$\\_POST 和 $\\_COOKIE 超全局变量） 指令的使用减轻了以哈希碰撞来进行拒绝服务攻击的可能性。 如有超过指令指定数量的输入变量，将会导致 E\\_WARNING 的产生， 更多的输入变量将会从请求中截断。\n\n原来，PHP处于安全考虑，会在form表单提交的时候，会限制参数解析的个数，如果超过规定的个数，就会出现截断的问题，默认限制是1000个。而我提交的数据，早就超过1000个了。这应该就是$\\_POST要比php://input里面数据少的原因了。\n\n### 截取的策略\n\n原因找到了，这就萌生了另外一个问题，$\\_POST虽然被截断了，但是为什么打印出来的信息，还是一个完整的数组的结构？截断的策略是什么样的？这恐怕需要分析一下PHP的源码了！\n\n```bash\n#php_variables.c\n\nstatic inline int add_post_vars(zval *arr, post_var_data_t *vars, zend_bool eof)\n{\n    uint64_t max_vars = PG(max_input_vars);\n\n    vars->ptr = ZSTR_VAL(vars->str.s);\n    vars->end = ZSTR_VAL(vars->str.s) + ZSTR_LEN(vars->str.s);\n    while (add_post_var(arr, vars, eof)) {\n        if (++vars->cnt > max_vars) {\n            php_error_docref(NULL, E_WARNING,\n                    \"Input variables exceeded %\" PRIu64 \". \"\n                    \"To increase the limit change max_input_vars in php.ini.\",\n                    max_vars);\n            return FAILURE;\n        }\n    }\n\n    if (!eof) {\n        memmove(ZSTR_VAL(vars->str.s), vars->ptr, ZSTR_LEN(vars->str.s) = vars->end - vars->ptr);\n    }\n    return SUCCESS;\n}\n```\n\nPHP会首先初始化解析数据的指针，然后通过while的循环，逐次对post的数据进行解析，然后设置vars->ptr的值，用来记录当前解析的位置，并对解析变量的个数进行统计，当`++vars->cnt > max_vars` 的时候，会终止解析，但是解析的时候，是按照key value结对解析，所以截断后，$\\_POST里面也是标准的数组结构。\n\n`add_post_var`是具体的解析策略， 以`name=feilong&sex=man`为例\n\n```bash\nstatic zend_bool add_post_var(zval *arr, post_var_data_t *var, zend_bool eof)\n{\n    char *ksep, *vsep, *val;\n    size_t klen, vlen;\n    size_t new_vlen;\n\n    if (var->ptr >= var->end) {\n        return 0;\n    }\n\n    vsep = memchr(var->ptr, '&', var->end - var->ptr);\n    if (!vsep) {\n        if (!eof) {\n            return 0;\n        } else {\n            vsep = var->end;\n        }\n    }\n\n    ksep = memchr(var->ptr, '=', vsep - var->ptr);\n    if (ksep) {\n        *ksep = '\\0';\n        /* \"foo=bar&\" or \"foo=&\" */\n        klen = ksep - var->ptr;\n        vlen = vsep - ++ksep;\n    } else {\n        ksep = \"\";\n        /* \"foo&\" */\n        klen = vsep - var->ptr;\n        vlen = 0;\n    }\n\n    php_url_decode(var->ptr, klen);\n\n    val = estrndup(ksep, vlen);\n    if (vlen) {\n        vlen = php_url_decode(val, vlen);\n    }\n\n    if (sapi_module.input_filter(PARSE_POST, var->ptr, &val, vlen, &new_vlen)) {\n        php_register_variable_safe(var->ptr, val, new_vlen, arr);\n    }\n    efree(val);\n\n    var->ptr = vsep + (vsep != var->end);\n    return 1;\n}\n```\n\n首先，定位到`name=feilong`，然后进行拆解，将name赋值var->ptr，将feilong赋值给val变量，然后通过`php_register_variable_safe`函数，进行变量的注册。\n\n不过在注册之前，会先进行一次过滤的操作。\n\n> filter\\_input filter\\_input — 通过名称获取特定的外部变量，并且可以通过过滤器处理它 filter\\_input ( int $type , string $variable\\_name \\[, int $filter = FILTER\\_DEFAULT \\[, mixed $options \\]\\] ) : mixed type INPUT\\_GET, INPUT\\_POST, INPUT\\_COOKIE, INPUT\\_SERVER或 INPUT\\_ENV之一。 .....\n\n从源码上来看，这里过滤的类型是`INPUT_POST`。\n\nPHP就是通过这样一层层的循环解析，直到解析的变量个数超过限制或者解析结束，把原有的form表单的数据，解析成$\\_POST数组。\n\n### 总结\n\n回到文章的标题，其实这次问题出现的原因，并不是在于\"传输\"，而在于解析数据，处于安全考虑，PHP做了一层限制，防止黑客传输过多的数据，导致用户被DDoS攻击。\n\n本文链接: [https://feilong.tech/2019/12/20/php-parse-post](https://feilong.tech/2019/12/20/php-parse-post)","slug":"php-parse-post","published":1,"updated":"2022-03-12T23:52:58.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mhi005w417teb696rpr","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近遇到一个线上问题，服务A，调用服务B的接口，发现服务B报“xxx参数不存在”，但是通过服务A的请求日志发现，是有参数”xxx”。然后翻了一下服务B的日志，发现没有参数”xxx”，而且以外发现，接收的数据，比传输的数据少一部分！</p>\n<h3 id=\"黑人问号？？\"><a href=\"#黑人问号？？\" class=\"headerlink\" title=\"黑人问号？？\"></a>黑人问号？？</h3><p>最初怀疑是A传输写数据的原因，随后在请求前，打印了内容，<code>发现是完整的！！！好玄幻！！！</code></p>\n<p>然后在B打印了 file_get_contents(“php:&#x2F;&#x2F;input”)，$_POST，发前者的内容是完整的，后者的内容要偏少，所以A传输的数据应该没有问题！！</p>\n<p>那问题到底出现在了哪里？？？</p>\n<h3 id=\"探究原因\"><a href=\"#探究原因\" class=\"headerlink\" title=\"探究原因\"></a>探究原因</h3><p>为了查明下原因，我怀疑是和代码有关系，所以索性，把数据搞到postman，通过postman再尝试下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#接收端代码</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&quot;txt&quot;</span>, <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$_POST</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动phpserver服务</span></span><br><span class=\"line\">$ php7 -S 127.0.0.1:9090</span><br><span class=\"line\">PHP 7.1.2RC1 Development Server started at Fri Dec 20 13:40:31 2019</span><br><span class=\"line\">Listening on http://127.0.0.1:9090</span><br><span class=\"line\">Document root is /Users/sf</span><br><span class=\"line\">Press Ctrl-C to quit.</span><br><span class=\"line\">[Fri Dec 20 13:40:38 2019] PHP Warning:  Unknown: Input variables exceeded 1000. To increase the <span class=\"built_in\">limit</span> change max_input_vars <span class=\"keyword\">in</span> php.ini. <span class=\"keyword\">in</span> Unknown on line 0</span><br><span class=\"line\">[Fri Dec 20 13:40:38 2019] 127.0.0.1:59719 [200]: /index.php</span><br></pre></td></tr></table></figure>\n\n<p>意外发现，控制台输出了一条warning信息</p>\n<p><code>[Fri Dec 20 13:40:38 2019] PHP Warning: Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0</code></p>\n<p>这条信息，仿佛是一棵救命稻草一样，我根据提示信息，查询了一下官方文档</p>\n<blockquote>\n<p>max_input_vars integer 接受多少 输入的变量（限制分别应用于 $_GET、$_POST 和 $_COOKIE 超全局变量） 指令的使用减轻了以哈希碰撞来进行拒绝服务攻击的可能性。 如有超过指令指定数量的输入变量，将会导致 E_WARNING 的产生， 更多的输入变量将会从请求中截断。</p>\n</blockquote>\n<p>原来，PHP处于安全考虑，会在form表单提交的时候，会限制参数解析的个数，如果超过规定的个数，就会出现截断的问题，默认限制是1000个。而我提交的数据，早就超过1000个了。这应该就是$_POST要比php:&#x2F;&#x2F;input里面数据少的原因了。</p>\n<h3 id=\"截取的策略\"><a href=\"#截取的策略\" class=\"headerlink\" title=\"截取的策略\"></a>截取的策略</h3><p>原因找到了，这就萌生了另外一个问题，$_POST虽然被截断了，但是为什么打印出来的信息，还是一个完整的数组的结构？截断的策略是什么样的？这恐怕需要分析一下PHP的源码了！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#php_variables.c</span></span><br><span class=\"line\"></span><br><span class=\"line\">static inline int add_post_vars(zval *arr, post_var_data_t *vars, zend_bool eof)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    uint64_t max_vars = PG(max_input_vars);</span><br><span class=\"line\"></span><br><span class=\"line\">    vars-&gt;ptr = ZSTR_VAL(vars-&gt;str.s);</span><br><span class=\"line\">    vars-&gt;end = ZSTR_VAL(vars-&gt;str.s) + ZSTR_LEN(vars-&gt;str.s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (add_post_var(arr, vars, eof)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++vars-&gt;cnt &gt; max_vars) &#123;</span><br><span class=\"line\">            php_error_docref(NULL, E_WARNING,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Input variables exceeded %&quot;</span> PRIu64 <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;To increase the limit change max_input_vars in php.ini.&quot;</span>,</span><br><span class=\"line\">                    max_vars);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> FAILURE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eof) &#123;</span><br><span class=\"line\">        memmove(ZSTR_VAL(vars-&gt;str.s), vars-&gt;ptr, ZSTR_LEN(vars-&gt;str.s) = vars-&gt;end - vars-&gt;ptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PHP会首先初始化解析数据的指针，然后通过while的循环，逐次对post的数据进行解析，然后设置vars-&gt;ptr的值，用来记录当前解析的位置，并对解析变量的个数进行统计，当<code>++vars-&gt;cnt &gt; max_vars</code> 的时候，会终止解析，但是解析的时候，是按照key value结对解析，所以截断后，$_POST里面也是标准的数组结构。</p>\n<p><code>add_post_var</code>是具体的解析策略， 以<code>name=feilong&amp;sex=man</code>为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static zend_bool add_post_var(zval *arr, post_var_data_t *var, zend_bool eof)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char *ksep, *vsep, *val;</span><br><span class=\"line\">    size_t klen, vlen;</span><br><span class=\"line\">    size_t new_vlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (var-&gt;ptr &gt;= var-&gt;end) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vsep = memchr(var-&gt;ptr, <span class=\"string\">&#x27;&amp;&#x27;</span>, var-&gt;end - var-&gt;ptr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vsep) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eof) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            vsep = var-&gt;end;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ksep = memchr(var-&gt;ptr, <span class=\"string\">&#x27;=&#x27;</span>, vsep - var-&gt;ptr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ksep) &#123;</span><br><span class=\"line\">        *ksep = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        /* <span class=\"string\">&quot;foo=bar&amp;&quot;</span> or <span class=\"string\">&quot;foo=&amp;&quot;</span> */</span><br><span class=\"line\">        klen = ksep - var-&gt;ptr;</span><br><span class=\"line\">        vlen = vsep - ++ksep;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ksep = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        /* <span class=\"string\">&quot;foo&amp;&quot;</span> */</span><br><span class=\"line\">        klen = vsep - var-&gt;ptr;</span><br><span class=\"line\">        vlen = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    php_url_decode(var-&gt;ptr, klen);</span><br><span class=\"line\"></span><br><span class=\"line\">    val = estrndup(ksep, vlen);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vlen) &#123;</span><br><span class=\"line\">        vlen = php_url_decode(val, vlen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sapi_module.input_filter(PARSE_POST, var-&gt;ptr, &amp;val, vlen, &amp;new_vlen)) &#123;</span><br><span class=\"line\">        php_register_variable_safe(var-&gt;ptr, val, new_vlen, arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    efree(val);</span><br><span class=\"line\"></span><br><span class=\"line\">    var-&gt;ptr = vsep + (vsep != var-&gt;end);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先，定位到<code>name=feilong</code>，然后进行拆解，将name赋值var-&gt;ptr，将feilong赋值给val变量，然后通过<code>php_register_variable_safe</code>函数，进行变量的注册。</p>\n<p>不过在注册之前，会先进行一次过滤的操作。</p>\n<blockquote>\n<p>filter_input filter_input — 通过名称获取特定的外部变量，并且可以通过过滤器处理它 filter_input ( int $type , string $variable_name [, int $filter &#x3D; FILTER_DEFAULT [, mixed $options ]] ) : mixed type INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER或 INPUT_ENV之一。 …..</p>\n</blockquote>\n<p>从源码上来看，这里过滤的类型是<code>INPUT_POST</code>。</p>\n<p>PHP就是通过这样一层层的循环解析，直到解析的变量个数超过限制或者解析结束，把原有的form表单的数据，解析成$_POST数组。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>回到文章的标题，其实这次问题出现的原因，并不是在于”传输”，而在于解析数据，处于安全考虑，PHP做了一层限制，防止黑客传输过多的数据，导致用户被DDoS攻击。</p>\n<p>本文链接: <a href=\"https://feilong.tech/2019/12/20/php-parse-post\">https://feilong.tech/2019/12/20/php-parse-post</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近遇到一个线上问题，服务A，调用服务B的接口，发现服务B报“xxx参数不存在”，但是通过服务A的请求日志发现，是有参数”xxx”。然后翻了一下服务B的日志，发现没有参数”xxx”，而且以外发现，接收的数据，比传输的数据少一部分！</p>\n<h3 id=\"黑人问号？？\"><a href=\"#黑人问号？？\" class=\"headerlink\" title=\"黑人问号？？\"></a>黑人问号？？</h3><p>最初怀疑是A传输写数据的原因，随后在请求前，打印了内容，<code>发现是完整的！！！好玄幻！！！</code></p>\n<p>然后在B打印了 file_get_contents(“php:&#x2F;&#x2F;input”)，$_POST，发前者的内容是完整的，后者的内容要偏少，所以A传输的数据应该没有问题！！</p>\n<p>那问题到底出现在了哪里？？？</p>\n<h3 id=\"探究原因\"><a href=\"#探究原因\" class=\"headerlink\" title=\"探究原因\"></a>探究原因</h3><p>为了查明下原因，我怀疑是和代码有关系，所以索性，把数据搞到postman，通过postman再尝试下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#接收端代码</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&quot;txt&quot;</span>, <span class=\"title function_ invoke__\">json_encode</span>(<span class=\"variable\">$_POST</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动phpserver服务</span></span><br><span class=\"line\">$ php7 -S 127.0.0.1:9090</span><br><span class=\"line\">PHP 7.1.2RC1 Development Server started at Fri Dec 20 13:40:31 2019</span><br><span class=\"line\">Listening on http://127.0.0.1:9090</span><br><span class=\"line\">Document root is /Users/sf</span><br><span class=\"line\">Press Ctrl-C to quit.</span><br><span class=\"line\">[Fri Dec 20 13:40:38 2019] PHP Warning:  Unknown: Input variables exceeded 1000. To increase the <span class=\"built_in\">limit</span> change max_input_vars <span class=\"keyword\">in</span> php.ini. <span class=\"keyword\">in</span> Unknown on line 0</span><br><span class=\"line\">[Fri Dec 20 13:40:38 2019] 127.0.0.1:59719 [200]: /index.php</span><br></pre></td></tr></table></figure>\n\n<p>意外发现，控制台输出了一条warning信息</p>\n<p><code>[Fri Dec 20 13:40:38 2019] PHP Warning: Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0</code></p>\n<p>这条信息，仿佛是一棵救命稻草一样，我根据提示信息，查询了一下官方文档</p>\n<blockquote>\n<p>max_input_vars integer 接受多少 输入的变量（限制分别应用于 $_GET、$_POST 和 $_COOKIE 超全局变量） 指令的使用减轻了以哈希碰撞来进行拒绝服务攻击的可能性。 如有超过指令指定数量的输入变量，将会导致 E_WARNING 的产生， 更多的输入变量将会从请求中截断。</p>\n</blockquote>\n<p>原来，PHP处于安全考虑，会在form表单提交的时候，会限制参数解析的个数，如果超过规定的个数，就会出现截断的问题，默认限制是1000个。而我提交的数据，早就超过1000个了。这应该就是$_POST要比php:&#x2F;&#x2F;input里面数据少的原因了。</p>\n<h3 id=\"截取的策略\"><a href=\"#截取的策略\" class=\"headerlink\" title=\"截取的策略\"></a>截取的策略</h3><p>原因找到了，这就萌生了另外一个问题，$_POST虽然被截断了，但是为什么打印出来的信息，还是一个完整的数组的结构？截断的策略是什么样的？这恐怕需要分析一下PHP的源码了！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#php_variables.c</span></span><br><span class=\"line\"></span><br><span class=\"line\">static inline int add_post_vars(zval *arr, post_var_data_t *vars, zend_bool eof)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    uint64_t max_vars = PG(max_input_vars);</span><br><span class=\"line\"></span><br><span class=\"line\">    vars-&gt;ptr = ZSTR_VAL(vars-&gt;str.s);</span><br><span class=\"line\">    vars-&gt;end = ZSTR_VAL(vars-&gt;str.s) + ZSTR_LEN(vars-&gt;str.s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (add_post_var(arr, vars, eof)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++vars-&gt;cnt &gt; max_vars) &#123;</span><br><span class=\"line\">            php_error_docref(NULL, E_WARNING,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Input variables exceeded %&quot;</span> PRIu64 <span class=\"string\">&quot;. &quot;</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;To increase the limit change max_input_vars in php.ini.&quot;</span>,</span><br><span class=\"line\">                    max_vars);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> FAILURE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eof) &#123;</span><br><span class=\"line\">        memmove(ZSTR_VAL(vars-&gt;str.s), vars-&gt;ptr, ZSTR_LEN(vars-&gt;str.s) = vars-&gt;end - vars-&gt;ptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PHP会首先初始化解析数据的指针，然后通过while的循环，逐次对post的数据进行解析，然后设置vars-&gt;ptr的值，用来记录当前解析的位置，并对解析变量的个数进行统计，当<code>++vars-&gt;cnt &gt; max_vars</code> 的时候，会终止解析，但是解析的时候，是按照key value结对解析，所以截断后，$_POST里面也是标准的数组结构。</p>\n<p><code>add_post_var</code>是具体的解析策略， 以<code>name=feilong&amp;sex=man</code>为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static zend_bool add_post_var(zval *arr, post_var_data_t *var, zend_bool eof)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char *ksep, *vsep, *val;</span><br><span class=\"line\">    size_t klen, vlen;</span><br><span class=\"line\">    size_t new_vlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (var-&gt;ptr &gt;= var-&gt;end) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vsep = memchr(var-&gt;ptr, <span class=\"string\">&#x27;&amp;&#x27;</span>, var-&gt;end - var-&gt;ptr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vsep) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eof) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            vsep = var-&gt;end;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ksep = memchr(var-&gt;ptr, <span class=\"string\">&#x27;=&#x27;</span>, vsep - var-&gt;ptr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ksep) &#123;</span><br><span class=\"line\">        *ksep = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        /* <span class=\"string\">&quot;foo=bar&amp;&quot;</span> or <span class=\"string\">&quot;foo=&amp;&quot;</span> */</span><br><span class=\"line\">        klen = ksep - var-&gt;ptr;</span><br><span class=\"line\">        vlen = vsep - ++ksep;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ksep = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        /* <span class=\"string\">&quot;foo&amp;&quot;</span> */</span><br><span class=\"line\">        klen = vsep - var-&gt;ptr;</span><br><span class=\"line\">        vlen = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    php_url_decode(var-&gt;ptr, klen);</span><br><span class=\"line\"></span><br><span class=\"line\">    val = estrndup(ksep, vlen);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vlen) &#123;</span><br><span class=\"line\">        vlen = php_url_decode(val, vlen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sapi_module.input_filter(PARSE_POST, var-&gt;ptr, &amp;val, vlen, &amp;new_vlen)) &#123;</span><br><span class=\"line\">        php_register_variable_safe(var-&gt;ptr, val, new_vlen, arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    efree(val);</span><br><span class=\"line\"></span><br><span class=\"line\">    var-&gt;ptr = vsep + (vsep != var-&gt;end);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先，定位到<code>name=feilong</code>，然后进行拆解，将name赋值var-&gt;ptr，将feilong赋值给val变量，然后通过<code>php_register_variable_safe</code>函数，进行变量的注册。</p>\n<p>不过在注册之前，会先进行一次过滤的操作。</p>\n<blockquote>\n<p>filter_input filter_input — 通过名称获取特定的外部变量，并且可以通过过滤器处理它 filter_input ( int $type , string $variable_name [, int $filter &#x3D; FILTER_DEFAULT [, mixed $options ]] ) : mixed type INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER或 INPUT_ENV之一。 …..</p>\n</blockquote>\n<p>从源码上来看，这里过滤的类型是<code>INPUT_POST</code>。</p>\n<p>PHP就是通过这样一层层的循环解析，直到解析的变量个数超过限制或者解析结束，把原有的form表单的数据，解析成$_POST数组。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>回到文章的标题，其实这次问题出现的原因，并不是在于”传输”，而在于解析数据，处于安全考虑，PHP做了一层限制，防止黑客传输过多的数据，导致用户被DDoS攻击。</p>\n<p>本文链接: <a href=\"https://feilong.tech/2019/12/20/php-parse-post\">https://feilong.tech/2019/12/20/php-parse-post</a></p>\n"},{"title":"PHP设计模式-原型模式","id":"228","comments":0,"date":"2018-02-21T12:28:08.000Z","_content":"\n#### 原型模式\n\n原型设计模式是通过使用一种克隆技术复制实例化的对象。新对象是通过复制原型而进行创建的。原型设计模式的目的是通过克隆以减少实例化对象的开销。\n\n![](/uploads/2018/02/%E5%8E%9F%E5%9E%8B%E7%B1%BB%E5%9B%BE.png)\n\n#### 何时使用原型模式\n\n原型模式要求你创建某个原型对象的多个实例，这个时候就可以使用原型模式。比如，在关于进化的研究，通常使用果蝇作为研究对象。果蝇很快繁殖，基本上一个小时就能进行产卵，和其他的生物相比，找到和记录变异的几率更大。如果换做大象的话（比如大象的孕育期长达22个月），那么整个研究过程将会消耗很长的时间。因此，只需要完成两个实例化（一个雄性和一个雌性），然后就可以跟进克隆多个变异，而不需要由具体类另外创建实例。\n\n#### 克隆函数\n\n使用原型模式，首先就要了解如何使用PHP的\\_\\_clone()。\n\n```php\nabstract class CloneMe {\n    public $name;\n    abstract function __clone();\n}\n\nclass Person extends CloneMe {\n\n    public function __construct() {\n        $this->name = \"Original\";\n        echo 'hello';\n    }\n\n    public function display() {\n        echo \"\\n$this->name\\n\";\n    }\n\n    public function __clone() {}\n\n}\n$worker = new Person();\n$worker->display();\n\n$slacker = clone $worker;\n$slacker->display();\n```\n\n定义了一个抽象类`CloneMe`，然后定义一个`Person`类进行实现。定义一个变量`$worker` 进行实例化，然后使用关键字`clone`进行对象的克隆。\n\n输出结果: hello Original\n\nOriginal\n\n不过需要注意的是，\\_\\_clone()不能直接调用，会出现报错`Fatal error: Cannot call __clone() method on objects - use 'clone $obj' instead`\n\n#### 克隆不会启动构造函数\n\n上面的输出结果可能已经见到了，clone是不会启动构造函数的。其实这个也是比较理解的。举个例子，现在有一个人A，那么这个人肯定会有手脚，那么`手脚`就算是默认构造函数进行的初始化，如果要根据A克隆一个人B，那么B不用再造`手脚`，而是克隆之后，就自带了A的`手脚`，当然，你也可以把B的`手脚`砍掉(比如$slacker->name=\"Tyler Teng\")。\n\n```php\nabstract class CloneMe {\n    public $name;\n    abstract function __clone();\n}\n\nclass Person extends CloneMe {\n\n    public function __construct() {\n        $this->name = \"Original\";\n        echo 'hello';\n    }\n\n    public function display() {\n        echo \"\\n$this->name\\n\";\n    }\n\n    public function __clone() {\n    }\n\n}\n$worker = new Person();\n$worker->display();\n\n$slacker = clone $worker;\n$slacker->name = \"Tyler Teng\";\n$slacker->display();\n```\n\n输出结果 hello Original\n\nTyler Teng\n\n#### 研究果蝇\n\n##### 抽象类和具体实现\n\n简单定义三个属性：眼睛的颜色，翅膀震动次数，眼睛个数\n\n```php\nabstract class IPrototype {\n    public $eyeColor;\n    public $wingBeat;\n    public $uniyEyes;\n    abstract function __clone();\n}\n```\n\n除了一些基本的属性，还需要区别雄性和雌性\n\n```php\ninclude_once 'IPrototype.php';\nclass FemaleProto extends IProtoType {\n\n    const gender = \"FEMALE\";\n    public $fecundity;\n\n    public function __construct() {\n        $this->eyeColor = \"red\";\n        $this->wingBeat = \"220\";\n        $this->unitEyes = \"760\";\n    }\n\n    public function __clone() {}\n\n}\n```\n\n```php\ninclude_once \"IPrototype.php\";\nclass MaleProto extends IPrototype {\n\n    const gender = \"MALE\";\n\n    public $mated;\n\n    public function __construct() {\n        $this->eyeColor = \"red\";\n        $this->wingBeat = \"220\";\n        $this->unitEyes = \"760\";\n    }\n\n    public function __clone() {}\n\n}\n```\n\n##### 客户端\n\n我们定义一个`Client`类，首先从具体类中实例化$fly1和$fly2，$c1Fly、$c2Fly和$updateCloneFly则分别是这两个类实例的克隆\n\n```php\nfunction __autoload($class_name) {\n    include_once realpath(__DIR__) . '/' .  $class_name . '.php';\n}\nclass Client {\n    private $fly1;\n    private $fly2;\n\n    private $c1Fly;\n    private $c2Fly;\n    private $upDatadCloneFly;\n\n    public function __construct() {\n        $this->fly1 = new MaleProto();\n        $this->fly2 = new FemaleProto();\n\n        $this->c1Fly = clone $this->fly1;\n        $this->c2Fly = clone $this->fly2;\n\n        $this->upDatadCloneFly = clone $this->fly2;\n        $this->c1Fly->mated = \"true\";\n        $this->c2Fly->fecundity = \"186\";\n        $this->upDatadCloneFly->eyeColor = \"purple\";\n        $this->upDatadCloneFly->wingBeat = \"220\";\n        $this->upDatadCloneFly->unitEyes = \"750\";\n        $this->upDatadCloneFly->fecundity = \"92\";\n\n        $this->showFly($this->c1Fly);\n        $this->showFly($this->c2Fly);\n        $this->showFly($this->upDatadCloneFly);\n    }\n\n    public function showFly(IProtoType $fly) {\n        echo \"Eye color : \" . $fly->eyeColor . \"\\n\";\n        echo \"Wing Beats/second : \" . $fly->wingBeat . \"\\n\";\n        echo \"Eye units : \" . $fly->unitEyes . \"\\n\";\n        $genderNow = $fly::gender;\n        echo \"Gender : \" . $genderNow . \"\\n\";\n        if ($genderNow == \"FEMALE\") {\n            echo \"Numbers of eges : \" . $fly->fecundity .  \"\\n\";\n        } else {\n            echo \"Mate : \" . $fly->mated . \"\\n\";\n        }\n    }\n}\n\n$woker = new Client();\n```\n\n输出 Eye color : red Wing Beats/second : 220 Eye units : 760 Gender : MALE Mate : true Eye color : red Wing Beats/second : 220 Eye units : 760 Gender : FEMALE Numbers of eges : 186 Eye color : purple Wing Beats/second : 220 Eye units : 750 Gender : FEMALE Numbers of eges : 92\n\n#### 总结\n\n作为被克隆的类，默认构造函数不应该做太多的初始化，否则结果往往不灵活，而且是过度的耦合设计。构造函数不应完成具体的工作，一种做法是忽略模式类中的构造函数，除非你有充分的理由包含这些构造函数；另外一种做法是，允许在需要的时间调用，让客户端负责实例化和克隆的有关事务。\n\n#### 参考文献\n\n*   Learning PHP设计模式\n\n#### 附件\n\n*   [PHP原型模式demo](/uploads/2018/02/test2.zip)","source":"_posts/php-prototype-pattern.md","raw":"---\ntitle: PHP设计模式-原型模式\ntags:\n  - PHP原型模式\n  - PHP设计模式\nid: '228'\ncategories:\n  - - PHP设计模式\ncomments: false\ndate: 2018-02-21 20:28:08\n---\n\n#### 原型模式\n\n原型设计模式是通过使用一种克隆技术复制实例化的对象。新对象是通过复制原型而进行创建的。原型设计模式的目的是通过克隆以减少实例化对象的开销。\n\n![](/uploads/2018/02/%E5%8E%9F%E5%9E%8B%E7%B1%BB%E5%9B%BE.png)\n\n#### 何时使用原型模式\n\n原型模式要求你创建某个原型对象的多个实例，这个时候就可以使用原型模式。比如，在关于进化的研究，通常使用果蝇作为研究对象。果蝇很快繁殖，基本上一个小时就能进行产卵，和其他的生物相比，找到和记录变异的几率更大。如果换做大象的话（比如大象的孕育期长达22个月），那么整个研究过程将会消耗很长的时间。因此，只需要完成两个实例化（一个雄性和一个雌性），然后就可以跟进克隆多个变异，而不需要由具体类另外创建实例。\n\n#### 克隆函数\n\n使用原型模式，首先就要了解如何使用PHP的\\_\\_clone()。\n\n```php\nabstract class CloneMe {\n    public $name;\n    abstract function __clone();\n}\n\nclass Person extends CloneMe {\n\n    public function __construct() {\n        $this->name = \"Original\";\n        echo 'hello';\n    }\n\n    public function display() {\n        echo \"\\n$this->name\\n\";\n    }\n\n    public function __clone() {}\n\n}\n$worker = new Person();\n$worker->display();\n\n$slacker = clone $worker;\n$slacker->display();\n```\n\n定义了一个抽象类`CloneMe`，然后定义一个`Person`类进行实现。定义一个变量`$worker` 进行实例化，然后使用关键字`clone`进行对象的克隆。\n\n输出结果: hello Original\n\nOriginal\n\n不过需要注意的是，\\_\\_clone()不能直接调用，会出现报错`Fatal error: Cannot call __clone() method on objects - use 'clone $obj' instead`\n\n#### 克隆不会启动构造函数\n\n上面的输出结果可能已经见到了，clone是不会启动构造函数的。其实这个也是比较理解的。举个例子，现在有一个人A，那么这个人肯定会有手脚，那么`手脚`就算是默认构造函数进行的初始化，如果要根据A克隆一个人B，那么B不用再造`手脚`，而是克隆之后，就自带了A的`手脚`，当然，你也可以把B的`手脚`砍掉(比如$slacker->name=\"Tyler Teng\")。\n\n```php\nabstract class CloneMe {\n    public $name;\n    abstract function __clone();\n}\n\nclass Person extends CloneMe {\n\n    public function __construct() {\n        $this->name = \"Original\";\n        echo 'hello';\n    }\n\n    public function display() {\n        echo \"\\n$this->name\\n\";\n    }\n\n    public function __clone() {\n    }\n\n}\n$worker = new Person();\n$worker->display();\n\n$slacker = clone $worker;\n$slacker->name = \"Tyler Teng\";\n$slacker->display();\n```\n\n输出结果 hello Original\n\nTyler Teng\n\n#### 研究果蝇\n\n##### 抽象类和具体实现\n\n简单定义三个属性：眼睛的颜色，翅膀震动次数，眼睛个数\n\n```php\nabstract class IPrototype {\n    public $eyeColor;\n    public $wingBeat;\n    public $uniyEyes;\n    abstract function __clone();\n}\n```\n\n除了一些基本的属性，还需要区别雄性和雌性\n\n```php\ninclude_once 'IPrototype.php';\nclass FemaleProto extends IProtoType {\n\n    const gender = \"FEMALE\";\n    public $fecundity;\n\n    public function __construct() {\n        $this->eyeColor = \"red\";\n        $this->wingBeat = \"220\";\n        $this->unitEyes = \"760\";\n    }\n\n    public function __clone() {}\n\n}\n```\n\n```php\ninclude_once \"IPrototype.php\";\nclass MaleProto extends IPrototype {\n\n    const gender = \"MALE\";\n\n    public $mated;\n\n    public function __construct() {\n        $this->eyeColor = \"red\";\n        $this->wingBeat = \"220\";\n        $this->unitEyes = \"760\";\n    }\n\n    public function __clone() {}\n\n}\n```\n\n##### 客户端\n\n我们定义一个`Client`类，首先从具体类中实例化$fly1和$fly2，$c1Fly、$c2Fly和$updateCloneFly则分别是这两个类实例的克隆\n\n```php\nfunction __autoload($class_name) {\n    include_once realpath(__DIR__) . '/' .  $class_name . '.php';\n}\nclass Client {\n    private $fly1;\n    private $fly2;\n\n    private $c1Fly;\n    private $c2Fly;\n    private $upDatadCloneFly;\n\n    public function __construct() {\n        $this->fly1 = new MaleProto();\n        $this->fly2 = new FemaleProto();\n\n        $this->c1Fly = clone $this->fly1;\n        $this->c2Fly = clone $this->fly2;\n\n        $this->upDatadCloneFly = clone $this->fly2;\n        $this->c1Fly->mated = \"true\";\n        $this->c2Fly->fecundity = \"186\";\n        $this->upDatadCloneFly->eyeColor = \"purple\";\n        $this->upDatadCloneFly->wingBeat = \"220\";\n        $this->upDatadCloneFly->unitEyes = \"750\";\n        $this->upDatadCloneFly->fecundity = \"92\";\n\n        $this->showFly($this->c1Fly);\n        $this->showFly($this->c2Fly);\n        $this->showFly($this->upDatadCloneFly);\n    }\n\n    public function showFly(IProtoType $fly) {\n        echo \"Eye color : \" . $fly->eyeColor . \"\\n\";\n        echo \"Wing Beats/second : \" . $fly->wingBeat . \"\\n\";\n        echo \"Eye units : \" . $fly->unitEyes . \"\\n\";\n        $genderNow = $fly::gender;\n        echo \"Gender : \" . $genderNow . \"\\n\";\n        if ($genderNow == \"FEMALE\") {\n            echo \"Numbers of eges : \" . $fly->fecundity .  \"\\n\";\n        } else {\n            echo \"Mate : \" . $fly->mated . \"\\n\";\n        }\n    }\n}\n\n$woker = new Client();\n```\n\n输出 Eye color : red Wing Beats/second : 220 Eye units : 760 Gender : MALE Mate : true Eye color : red Wing Beats/second : 220 Eye units : 760 Gender : FEMALE Numbers of eges : 186 Eye color : purple Wing Beats/second : 220 Eye units : 750 Gender : FEMALE Numbers of eges : 92\n\n#### 总结\n\n作为被克隆的类，默认构造函数不应该做太多的初始化，否则结果往往不灵活，而且是过度的耦合设计。构造函数不应完成具体的工作，一种做法是忽略模式类中的构造函数，除非你有充分的理由包含这些构造函数；另外一种做法是，允许在需要的时间调用，让客户端负责实例化和克隆的有关事务。\n\n#### 参考文献\n\n*   Learning PHP设计模式\n\n#### 附件\n\n*   [PHP原型模式demo](/uploads/2018/02/test2.zip)","slug":"php-prototype-pattern","published":1,"updated":"2022-03-13T01:17:12.493Z","_id":"cl0oi8mhk005z417t58mr094i","layout":"post","photos":[],"link":"","content":"<h4 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h4><p>原型设计模式是通过使用一种克隆技术复制实例化的对象。新对象是通过复制原型而进行创建的。原型设计模式的目的是通过克隆以减少实例化对象的开销。</p>\n<p><img src=\"/uploads/2018/02/%E5%8E%9F%E5%9E%8B%E7%B1%BB%E5%9B%BE.png\"></p>\n<h4 id=\"何时使用原型模式\"><a href=\"#何时使用原型模式\" class=\"headerlink\" title=\"何时使用原型模式\"></a>何时使用原型模式</h4><p>原型模式要求你创建某个原型对象的多个实例，这个时候就可以使用原型模式。比如，在关于进化的研究，通常使用果蝇作为研究对象。果蝇很快繁殖，基本上一个小时就能进行产卵，和其他的生物相比，找到和记录变异的几率更大。如果换做大象的话（比如大象的孕育期长达22个月），那么整个研究过程将会消耗很长的时间。因此，只需要完成两个实例化（一个雄性和一个雌性），然后就可以跟进克隆多个变异，而不需要由具体类另外创建实例。</p>\n<h4 id=\"克隆函数\"><a href=\"#克隆函数\" class=\"headerlink\" title=\"克隆函数\"></a>克隆函数</h4><p>使用原型模式，首先就要了解如何使用PHP的__clone()。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;Original&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n<span class=\"subst\">$this</span>-&gt;name\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$worker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable\">$worker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$slacker</span> = <span class=\"keyword\">clone</span> <span class=\"variable\">$worker</span>;</span><br><span class=\"line\"><span class=\"variable\">$slacker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br></pre></td></tr></table></figure>\n\n<p>定义了一个抽象类<code>CloneMe</code>，然后定义一个<code>Person</code>类进行实现。定义一个变量<code>$worker</code> 进行实例化，然后使用关键字<code>clone</code>进行对象的克隆。</p>\n<p>输出结果: hello Original</p>\n<p>Original</p>\n<p>不过需要注意的是，__clone()不能直接调用，会出现报错<code>Fatal error: Cannot call __clone() method on objects - use &#39;clone $obj&#39; instead</code></p>\n<h4 id=\"克隆不会启动构造函数\"><a href=\"#克隆不会启动构造函数\" class=\"headerlink\" title=\"克隆不会启动构造函数\"></a>克隆不会启动构造函数</h4><p>上面的输出结果可能已经见到了，clone是不会启动构造函数的。其实这个也是比较理解的。举个例子，现在有一个人A，那么这个人肯定会有手脚，那么<code>手脚</code>就算是默认构造函数进行的初始化，如果要根据A克隆一个人B，那么B不用再造<code>手脚</code>，而是克隆之后，就自带了A的<code>手脚</code>，当然，你也可以把B的<code>手脚</code>砍掉(比如$slacker-&gt;name&#x3D;”Tyler Teng”)。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;Original&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n<span class=\"subst\">$this</span>-&gt;name\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$worker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable\">$worker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$slacker</span> = <span class=\"keyword\">clone</span> <span class=\"variable\">$worker</span>;</span><br><span class=\"line\"><span class=\"variable\">$slacker</span>-&gt;name = <span class=\"string\">&quot;Tyler Teng&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$slacker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br></pre></td></tr></table></figure>\n\n<p>输出结果 hello Original</p>\n<p>Tyler Teng</p>\n<h4 id=\"研究果蝇\"><a href=\"#研究果蝇\" class=\"headerlink\" title=\"研究果蝇\"></a>研究果蝇</h4><h5 id=\"抽象类和具体实现\"><a href=\"#抽象类和具体实现\" class=\"headerlink\" title=\"抽象类和具体实现\"></a>抽象类和具体实现</h5><p>简单定义三个属性：眼睛的颜色，翅膀震动次数，眼睛个数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IPrototype</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$eyeColor</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$wingBeat</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$uniyEyes</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了一些基本的属性，还需要区别雄性和雌性</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;IPrototype.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FemaleProto</span> <span class=\"keyword\">extends</span> <span class=\"title\">IProtoType</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">gender</span> = <span class=\"string\">&quot;FEMALE&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$fecundity</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;eyeColor = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;wingBeat = <span class=\"string\">&quot;220&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;unitEyes = <span class=\"string\">&quot;760&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&quot;IPrototype.php&quot;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaleProto</span> <span class=\"keyword\">extends</span> <span class=\"title\">IPrototype</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">gender</span> = <span class=\"string\">&quot;MALE&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$mated</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;eyeColor = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;wingBeat = <span class=\"string\">&quot;220&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;unitEyes = <span class=\"string\">&quot;760&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h5><p>我们定义一个<code>Client</code>类，首先从具体类中实例化$fly1和$fly2，$c1Fly、$c2Fly和$updateCloneFly则分别是这两个类实例的克隆</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span>(<span class=\"params\"><span class=\"variable\">$class_name</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">include_once</span> <span class=\"title function_ invoke__\">realpath</span>(<span class=\"keyword\">__DIR__</span>) . <span class=\"string\">&#x27;/&#x27;</span> .  <span class=\"variable\">$class_name</span> . <span class=\"string\">&#x27;.php&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$fly1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$fly2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$c1Fly</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$c2Fly</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$upDatadCloneFly</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;fly1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MaleProto</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;fly2 = <span class=\"keyword\">new</span> <span class=\"title class_\">FemaleProto</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c1Fly = <span class=\"keyword\">clone</span> <span class=\"variable language_\">$this</span>-&gt;fly1;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c2Fly = <span class=\"keyword\">clone</span> <span class=\"variable language_\">$this</span>-&gt;fly2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly = <span class=\"keyword\">clone</span> <span class=\"variable language_\">$this</span>-&gt;fly2;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c1Fly-&gt;mated = <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c2Fly-&gt;fecundity = <span class=\"string\">&quot;186&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;eyeColor = <span class=\"string\">&quot;purple&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;wingBeat = <span class=\"string\">&quot;220&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;unitEyes = <span class=\"string\">&quot;750&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;fecundity = <span class=\"string\">&quot;92&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">showFly</span>(<span class=\"variable\">$this</span>-&gt;c1Fly);</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">showFly</span>(<span class=\"variable\">$this</span>-&gt;c2Fly);</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">showFly</span>(<span class=\"variable\">$this</span>-&gt;upDatadCloneFly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFly</span>(<span class=\"params\">IProtoType <span class=\"variable\">$fly</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Eye color : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;eyeColor . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Wing Beats/second : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;wingBeat . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Eye units : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;unitEyes . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$genderNow</span> = <span class=\"variable\">$fly</span>::<span class=\"variable constant_\">gender</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Gender : &quot;</span> . <span class=\"variable\">$genderNow</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$genderNow</span> == <span class=\"string\">&quot;FEMALE&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Numbers of eges : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;fecundity .  <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Mate : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;mated . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$woker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Client</span>();</span><br></pre></td></tr></table></figure>\n\n<p>输出 Eye color : red Wing Beats&#x2F;second : 220 Eye units : 760 Gender : MALE Mate : true Eye color : red Wing Beats&#x2F;second : 220 Eye units : 760 Gender : FEMALE Numbers of eges : 186 Eye color : purple Wing Beats&#x2F;second : 220 Eye units : 750 Gender : FEMALE Numbers of eges : 92</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>作为被克隆的类，默认构造函数不应该做太多的初始化，否则结果往往不灵活，而且是过度的耦合设计。构造函数不应完成具体的工作，一种做法是忽略模式类中的构造函数，除非你有充分的理由包含这些构造函数；另外一种做法是，允许在需要的时间调用，让客户端负责实例化和克隆的有关事务。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li>Learning PHP设计模式</li>\n</ul>\n<h4 id=\"附件\"><a href=\"#附件\" class=\"headerlink\" title=\"附件\"></a>附件</h4><ul>\n<li><a href=\"/uploads/2018/02/test2.zip\">PHP原型模式demo</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h4><p>原型设计模式是通过使用一种克隆技术复制实例化的对象。新对象是通过复制原型而进行创建的。原型设计模式的目的是通过克隆以减少实例化对象的开销。</p>\n<p><img src=\"/uploads/2018/02/%E5%8E%9F%E5%9E%8B%E7%B1%BB%E5%9B%BE.png\"></p>\n<h4 id=\"何时使用原型模式\"><a href=\"#何时使用原型模式\" class=\"headerlink\" title=\"何时使用原型模式\"></a>何时使用原型模式</h4><p>原型模式要求你创建某个原型对象的多个实例，这个时候就可以使用原型模式。比如，在关于进化的研究，通常使用果蝇作为研究对象。果蝇很快繁殖，基本上一个小时就能进行产卵，和其他的生物相比，找到和记录变异的几率更大。如果换做大象的话（比如大象的孕育期长达22个月），那么整个研究过程将会消耗很长的时间。因此，只需要完成两个实例化（一个雄性和一个雌性），然后就可以跟进克隆多个变异，而不需要由具体类另外创建实例。</p>\n<h4 id=\"克隆函数\"><a href=\"#克隆函数\" class=\"headerlink\" title=\"克隆函数\"></a>克隆函数</h4><p>使用原型模式，首先就要了解如何使用PHP的__clone()。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;Original&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n<span class=\"subst\">$this</span>-&gt;name\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$worker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable\">$worker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$slacker</span> = <span class=\"keyword\">clone</span> <span class=\"variable\">$worker</span>;</span><br><span class=\"line\"><span class=\"variable\">$slacker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br></pre></td></tr></table></figure>\n\n<p>定义了一个抽象类<code>CloneMe</code>，然后定义一个<code>Person</code>类进行实现。定义一个变量<code>$worker</code> 进行实例化，然后使用关键字<code>clone</code>进行对象的克隆。</p>\n<p>输出结果: hello Original</p>\n<p>Original</p>\n<p>不过需要注意的是，__clone()不能直接调用，会出现报错<code>Fatal error: Cannot call __clone() method on objects - use &#39;clone $obj&#39; instead</code></p>\n<h4 id=\"克隆不会启动构造函数\"><a href=\"#克隆不会启动构造函数\" class=\"headerlink\" title=\"克隆不会启动构造函数\"></a>克隆不会启动构造函数</h4><p>上面的输出结果可能已经见到了，clone是不会启动构造函数的。其实这个也是比较理解的。举个例子，现在有一个人A，那么这个人肯定会有手脚，那么<code>手脚</code>就算是默认构造函数进行的初始化，如果要根据A克隆一个人B，那么B不用再造<code>手脚</code>，而是克隆之后，就自带了A的<code>手脚</code>，当然，你也可以把B的<code>手脚</code>砍掉(比如$slacker-&gt;name&#x3D;”Tyler Teng”)。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">CloneMe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;Original&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n<span class=\"subst\">$this</span>-&gt;name\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$worker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable\">$worker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$slacker</span> = <span class=\"keyword\">clone</span> <span class=\"variable\">$worker</span>;</span><br><span class=\"line\"><span class=\"variable\">$slacker</span>-&gt;name = <span class=\"string\">&quot;Tyler Teng&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$slacker</span>-&gt;<span class=\"title function_ invoke__\">display</span>();</span><br></pre></td></tr></table></figure>\n\n<p>输出结果 hello Original</p>\n<p>Tyler Teng</p>\n<h4 id=\"研究果蝇\"><a href=\"#研究果蝇\" class=\"headerlink\" title=\"研究果蝇\"></a>研究果蝇</h4><h5 id=\"抽象类和具体实现\"><a href=\"#抽象类和具体实现\" class=\"headerlink\" title=\"抽象类和具体实现\"></a>抽象类和具体实现</h5><p>简单定义三个属性：眼睛的颜色，翅膀震动次数，眼睛个数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IPrototype</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$eyeColor</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$wingBeat</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$uniyEyes</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了一些基本的属性，还需要区别雄性和雌性</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&#x27;IPrototype.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FemaleProto</span> <span class=\"keyword\">extends</span> <span class=\"title\">IProtoType</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">gender</span> = <span class=\"string\">&quot;FEMALE&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$fecundity</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;eyeColor = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;wingBeat = <span class=\"string\">&quot;220&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;unitEyes = <span class=\"string\">&quot;760&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&quot;IPrototype.php&quot;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaleProto</span> <span class=\"keyword\">extends</span> <span class=\"title\">IPrototype</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">gender</span> = <span class=\"string\">&quot;MALE&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$mated</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;eyeColor = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;wingBeat = <span class=\"string\">&quot;220&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;unitEyes = <span class=\"string\">&quot;760&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h5><p>我们定义一个<code>Client</code>类，首先从具体类中实例化$fly1和$fly2，$c1Fly、$c2Fly和$updateCloneFly则分别是这两个类实例的克隆</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span>(<span class=\"params\"><span class=\"variable\">$class_name</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">include_once</span> <span class=\"title function_ invoke__\">realpath</span>(<span class=\"keyword\">__DIR__</span>) . <span class=\"string\">&#x27;/&#x27;</span> .  <span class=\"variable\">$class_name</span> . <span class=\"string\">&#x27;.php&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$fly1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$fly2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$c1Fly</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$c2Fly</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$upDatadCloneFly</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;fly1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MaleProto</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;fly2 = <span class=\"keyword\">new</span> <span class=\"title class_\">FemaleProto</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c1Fly = <span class=\"keyword\">clone</span> <span class=\"variable language_\">$this</span>-&gt;fly1;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c2Fly = <span class=\"keyword\">clone</span> <span class=\"variable language_\">$this</span>-&gt;fly2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly = <span class=\"keyword\">clone</span> <span class=\"variable language_\">$this</span>-&gt;fly2;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c1Fly-&gt;mated = <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;c2Fly-&gt;fecundity = <span class=\"string\">&quot;186&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;eyeColor = <span class=\"string\">&quot;purple&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;wingBeat = <span class=\"string\">&quot;220&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;unitEyes = <span class=\"string\">&quot;750&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;upDatadCloneFly-&gt;fecundity = <span class=\"string\">&quot;92&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">showFly</span>(<span class=\"variable\">$this</span>-&gt;c1Fly);</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">showFly</span>(<span class=\"variable\">$this</span>-&gt;c2Fly);</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">showFly</span>(<span class=\"variable\">$this</span>-&gt;upDatadCloneFly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFly</span>(<span class=\"params\">IProtoType <span class=\"variable\">$fly</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Eye color : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;eyeColor . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Wing Beats/second : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;wingBeat . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Eye units : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;unitEyes . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$genderNow</span> = <span class=\"variable\">$fly</span>::<span class=\"variable constant_\">gender</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Gender : &quot;</span> . <span class=\"variable\">$genderNow</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$genderNow</span> == <span class=\"string\">&quot;FEMALE&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Numbers of eges : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;fecundity .  <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Mate : &quot;</span> . <span class=\"variable\">$fly</span>-&gt;mated . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$woker</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Client</span>();</span><br></pre></td></tr></table></figure>\n\n<p>输出 Eye color : red Wing Beats&#x2F;second : 220 Eye units : 760 Gender : MALE Mate : true Eye color : red Wing Beats&#x2F;second : 220 Eye units : 760 Gender : FEMALE Numbers of eges : 186 Eye color : purple Wing Beats&#x2F;second : 220 Eye units : 750 Gender : FEMALE Numbers of eges : 92</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>作为被克隆的类，默认构造函数不应该做太多的初始化，否则结果往往不灵活，而且是过度的耦合设计。构造函数不应完成具体的工作，一种做法是忽略模式类中的构造函数，除非你有充分的理由包含这些构造函数；另外一种做法是，允许在需要的时间调用，让客户端负责实例化和克隆的有关事务。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li>Learning PHP设计模式</li>\n</ul>\n<h4 id=\"附件\"><a href=\"#附件\" class=\"headerlink\" title=\"附件\"></a>附件</h4><ul>\n<li><a href=\"/uploads/2018/02/test2.zip\">PHP原型模式demo</a></li>\n</ul>\n"},{"title":"PHP实现RSA加密、解密操作","id":"138","date":"2017-08-24T12:16:45.000Z","_content":"\n#### [RSA生成工具](https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip)\n\n#### 现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名`sign`验证。\n<!-- more -->\n#### 签名的作用\n\n#### 签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\n\n#### RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\n\n#### 使用方法\n\n> *   使用私钥进行加密，公钥用于解密\n> *   私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露\n\n#### 实现代码\n\n```php\n//生成签名\nfunction build_sign($data) {\n    $private_key = openssl_pkey_get_private('file://C:/key/rsa_private_key.pem');//私钥位置\n    openssl_sign($data, $sign, OPENSSL_ALGO_SHA1);\n    $sign = base64_encode($sign);\n\n    return $sign;\n}\n//解密\nfunction check_sign($date, $sign) {\n    $sign = base64_decode($sign);\n    $public_key = openssl_pkey_get_public('file://C:/key/rsa_public_key.pem');//公钥位置\n    $result = openssl_verify($data, $sign, $key, OPENSSL_ALGO_SHA1) == 1;\n\n    return $result;\n}\n```","source":"_posts/php-rsa.md","raw":"---\ntitle: PHP实现RSA加密、解密操作\ntags: []\nid: '138'\ncategories:\n  - - PHP\ndate: 2017-08-24 20:16:45\n---\n\n#### [RSA生成工具](https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip)\n\n#### 现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名`sign`验证。\n<!-- more -->\n#### 签名的作用\n\n#### 签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\n\n#### RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\n\n#### 使用方法\n\n> *   使用私钥进行加密，公钥用于解密\n> *   私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露\n\n#### 实现代码\n\n```php\n//生成签名\nfunction build_sign($data) {\n    $private_key = openssl_pkey_get_private('file://C:/key/rsa_private_key.pem');//私钥位置\n    openssl_sign($data, $sign, OPENSSL_ALGO_SHA1);\n    $sign = base64_encode($sign);\n\n    return $sign;\n}\n//解密\nfunction check_sign($date, $sign) {\n    $sign = base64_decode($sign);\n    $public_key = openssl_pkey_get_public('file://C:/key/rsa_public_key.pem');//公钥位置\n    $result = openssl_verify($data, $sign, $key, OPENSSL_ALGO_SHA1) == 1;\n\n    return $result;\n}\n```","slug":"php-rsa","published":1,"updated":"2022-03-12T23:52:58.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mhm0064417tcr6jc46e","content":"<h4 id=\"RSA生成工具\"><a href=\"#RSA生成工具\" class=\"headerlink\" title=\"RSA生成工具\"></a><a href=\"https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip\">RSA生成工具</a></h4><h4 id=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"><a href=\"#现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\" class=\"headerlink\" title=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"></a>现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名<code>sign</code>验证。</h4><span id=\"more\"></span>\n<h4 id=\"签名的作用\"><a href=\"#签名的作用\" class=\"headerlink\" title=\"签名的作用\"></a>签名的作用</h4><h4 id=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"><a href=\"#签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\" class=\"headerlink\" title=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"></a>签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。</h4><h4 id=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"><a href=\"#RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\" class=\"headerlink\" title=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"></a>RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。</h4><h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><blockquote>\n<ul>\n<li>使用私钥进行加密，公钥用于解密</li>\n<li>私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露</li>\n</ul>\n</blockquote>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成签名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_sign</span>(<span class=\"params\"><span class=\"variable\">$data</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$private_key</span> = <span class=\"title function_ invoke__\">openssl_pkey_get_private</span>(<span class=\"string\">&#x27;file://C:/key/rsa_private_key.pem&#x27;</span>);<span class=\"comment\">//私钥位置</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">openssl_sign</span>(<span class=\"variable\">$data</span>, <span class=\"variable\">$sign</span>, OPENSSL_ALGO_SHA1);</span><br><span class=\"line\">    <span class=\"variable\">$sign</span> = <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$sign</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$sign</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_sign</span>(<span class=\"params\"><span class=\"variable\">$date</span>, <span class=\"variable\">$sign</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$sign</span> = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$sign</span>);</span><br><span class=\"line\">    <span class=\"variable\">$public_key</span> = <span class=\"title function_ invoke__\">openssl_pkey_get_public</span>(<span class=\"string\">&#x27;file://C:/key/rsa_public_key.pem&#x27;</span>);<span class=\"comment\">//公钥位置</span></span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">openssl_verify</span>(<span class=\"variable\">$data</span>, <span class=\"variable\">$sign</span>, <span class=\"variable\">$key</span>, OPENSSL_ALGO_SHA1) == <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$result</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"RSA生成工具\"><a href=\"#RSA生成工具\" class=\"headerlink\" title=\"RSA生成工具\"></a><a href=\"https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip\">RSA生成工具</a></h4><h4 id=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"><a href=\"#现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\" class=\"headerlink\" title=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"></a>现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名<code>sign</code>验证。</h4>","more":"<h4 id=\"签名的作用\"><a href=\"#签名的作用\" class=\"headerlink\" title=\"签名的作用\"></a>签名的作用</h4><h4 id=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"><a href=\"#签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\" class=\"headerlink\" title=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"></a>签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。</h4><h4 id=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"><a href=\"#RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\" class=\"headerlink\" title=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"></a>RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。</h4><h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><blockquote>\n<ul>\n<li>使用私钥进行加密，公钥用于解密</li>\n<li>私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露</li>\n</ul>\n</blockquote>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成签名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_sign</span>(<span class=\"params\"><span class=\"variable\">$data</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$private_key</span> = <span class=\"title function_ invoke__\">openssl_pkey_get_private</span>(<span class=\"string\">&#x27;file://C:/key/rsa_private_key.pem&#x27;</span>);<span class=\"comment\">//私钥位置</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">openssl_sign</span>(<span class=\"variable\">$data</span>, <span class=\"variable\">$sign</span>, OPENSSL_ALGO_SHA1);</span><br><span class=\"line\">    <span class=\"variable\">$sign</span> = <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$sign</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$sign</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_sign</span>(<span class=\"params\"><span class=\"variable\">$date</span>, <span class=\"variable\">$sign</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$sign</span> = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$sign</span>);</span><br><span class=\"line\">    <span class=\"variable\">$public_key</span> = <span class=\"title function_ invoke__\">openssl_pkey_get_public</span>(<span class=\"string\">&#x27;file://C:/key/rsa_public_key.pem&#x27;</span>);<span class=\"comment\">//公钥位置</span></span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">openssl_verify</span>(<span class=\"variable\">$data</span>, <span class=\"variable\">$sign</span>, <span class=\"variable\">$key</span>, OPENSSL_ALGO_SHA1) == <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$result</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PHP 底层: SAPI概述","id":"133","date":"2017-08-24T12:08:44.000Z","_content":"\n### 概述\n\n> 各个服务器抽象层遵守着相同的规定，统一称为SAPI接口。而SAPI接口的格式由一个\\_sapi\\_module\\_struct的结构体定义好。在PHP中，如果需要调用服务器的信息，统一通过SPAI接口进行实现。\n\n下面是SAPI调用的简单示意图\n\n![](/uploads/2017/07/02-02-01-sapi.png)\n<!-- more -->\n以CGI模式和apache2为例，启动方式如下：\n\n```cpp\n.... // 上面都是初始化启动前的赋值操作\n/* startup after we get the above ini override se we get things right */\ncgi_sapi_module.startup(&cgi_sapi_module)   //  cgi模式 cgi/cgi_main.c文件 main方法内\n\napache2_sapi_module.startup(&apache2_sapi_module);\n //  apache2服务器  apache2handler/sapi_apache2.c文件 php_apache_server_startup方法\n\n// 虽然方法不一样，但是使用的都是一个相同的结构体 _sapi_module_struct\n```\n\n这里的cgi\\_sapi\\_module和apache2\\_sapi\\_module都是\\_sapi\\_module\\_struct格式的静态变量。cgi\\_sapi\\_module的startup方法指向php\\_cgi\\_startup函数指针。\n\n![](/uploads/2017/08/14994211711.png)\n\n### \\_sapi\\_module\\_struct结构体\n\n在结构体\\_sapi\\_module\\_struct中除了startup函数指针，还有许多其它方法或字段。\n\n结构体大概是如下的格式：\n\n```cpp\nstruct _sapi_module_struct {\n    char *name;\n    char *pretty_name;\n\n    int (*startup)(struct _sapi_module_struct *sapi_module);\n    int (*shutdown)(struct _sapi_module_struct *sapi_module);\n\n    int (*activate)(TSRMLS_D);\n    int (*deactivate)(TSRMLS_D);\n\n    int (*ub_write)(const char *str, unsigned int str_length TSRMLS_DC);\n    void (*flush)(void *server_context);\n    struct stat *(*get_stat)(TSRMLS_D);\n    char *(*getenv)(char *name, size_t name_len TSRMLS_DC);\n\n    void (*sapi_error)(int type, const char *error_msg, ...);\n\n    int (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);\n    int (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);\n    void (*send_header)(sapi_header_struct *sapi_header, void *server_context TSRMLS_DC);\n\n    int (*read_post)(char *buffer, uint count_bytes TSRMLS_DC);\n    char *(*read_cookies)(TSRMLS_D);\n\n    void (*register_server_variables)(zval *track_vars_array TSRMLS_DC);\n    void (*log_message)(char *message);\n    time_t (*get_request_time)(TSRMLS_D);\n    void (*terminate_process)(TSRMLS_D);\n\n    char *php_ini_path_override;\n\n    void (*block_interruptions)(void);\n    void (*unblock_interruptions)(void);\n\n    void (*default_post_reader)(TSRMLS_D);\n    void (*treat_data)(int arg, char *str, zval *destArray TSRMLS_DC);\n    char *executable_location;\n\n    int php_ini_ignore;\n\n    int (*get_fd)(int *fd TSRMLS_DC);\n\n    int (*force_http_10)(TSRMLS_D);\n\n    int (*get_target_uid)(uid_t * TSRMLS_DC);\n    int (*get_target_gid)(gid_t * TSRMLS_DC);\n\n    unsigned int (*input_filter)(int arg, char *var, char **val, unsigned int val_len, unsigned int *new_val_len TSRMLS_DC);\n\n    void (*ini_defaults)(HashTable *configuration_hash);\n    int phpinfo_as_text;\n\n    char *ini_entries;\n    const zend_function_entry *additional_functions;\n    unsigned int (*input_filter_init)(TSRMLS_D);\n};\n```\n\n其中一些函数指针的说明如下：\n\n*   **startup 当SAPI初始化时，首先会调用该函数。如果服务器处理多个请求时，该函数只会调用一次。 比如Apache的SAPI，它是以mod\\_php5的Apache模块的形式加载到Apache中的， 在这个SAPI中，startup函数只在父进程中创建一次，在其fork的子进程中不会调用。**\n*   **activate 此函数会在每个请求开始时调用，它会再次初始化每个请求前的数据结构。**\n*   **deactivate 此函数会在每个请求结束时调用，它用来确保所有的数据都，以及释放在activate中初始化的数据结构。**\n*   **shutdown 关闭函数，它用来释放所有的SAPI的数据结构、内存等。**\n*   **ub\\_write 不缓存的写操作(unbuffered write)，它是用来将PHP的数据输出给客户端， 如在CLI模式下，其最终是调用fwrite实现向标准输出输出内容；在Apache模块中，它最终是调用Apache提供的方法rwrite。**\n*   **sapi\\_error 报告错误用，大多数的SAPI都是使用的PHP的默认实现php\\_error。**\n*   **flush 刷新输出，在CLI模式下通过使用C语言的库函数fflush实现，在php\\_mode5模式下，使用Apache的提供的函数函数rflush实现。**\n*   **read\\_cookie 在SAPI激活时，程序会调用此函数，并且将此函数获取的值赋值给SG(request\\_info).cookie\\_data。 在CLI模式下，此函数会返回NULL。**\n*   **read\\_post 此函数和read\\_cookie一样也是在SAPI激活时调用，它与请求的方法相关，当请求的方法是POST时，程序会操作\\\\$\\_POST、\\\\$HTTP\\_RAW\\_POST\\_DATA等变量。**\n*   **send\\_header 发送头部信息，此方法一般的SAPI都会定制，其所不同的是，有些的会调服务器自带的（如Apache），有些的需要你自己实现（如 FastCGI）。**\n\n以上的这些结构在各服务器的接口实现中都有定义。如Apache2的定义：\n\n```cpp\nstatic sapi_module_struct apache2_sapi_module = {\n    \"apache2filter\",                       /* name */\n    \"Apache 2.0 Filter\",                   /* pretty_name*/\n\n    php_apache2_startup,                        /* startup */\n    php_module_shutdown_wrapper,            /* shutdown */\n\n    NULL,                                   /* activate */\n    NULL,                                   /* deactivate */\n\n    php_apache_sapi_ub_write,               /* unbuffered write */\n    php_apache_sapi_flush,                  /* flush */\n    php_apache_sapi_get_stat,                       /* get uid */\n    php_apache_sapi_getenv,                 /* getenv */\n\n    php_error,                              /* error handler */\n\n    php_apache_sapi_header_handler,         /* header handler */\n    php_apache_sapi_send_headers,           /* send headers handler */\n    NULL,                                   /* send header handler */\n\n    php_apache_sapi_read_post,              /* read POST data */\n    php_apache_sapi_read_cookies,           /* read Cookies */\n\n    php_apache_sapi_register_variables,\n    php_apache_sapi_log_message,            /* Log message */\n    php_apache_sapi_get_request_time,       /* Get Request Time */\n    NULL,                       /* Child terminate */\n\n    STANDARD_SAPI_MODULE_PROPERTIES\n};\n```\n\n整个SAPI类似于一个面向对象中的模板方法模式的应用。 SAPI.c和SAPI.h文件所包含的一些函数就是模板方法模式中的抽象模板， 各个服务器对于sapi\\_module的定义及相关实现则是一个个具体的模板。\n\n这样的结构在PHP的源码中有多处使用， 比如在PHP扩展开发中，每个扩展都需要定义一个zend\\_module\\_entry结构体。 这个结构体的作用与sapi\\_module\\_struct结构体类似，都是一个类似模板方法模式的应用。 在PHP的生命周期中如果需要调用某个扩展，其调用的方法都是zend\\_module\\_entry结构体中指定的方法， 如在上一小节中提到的在执行各个扩展的请求初始化时，都是统一调用request\\_startup\\_func方法， 而在每个扩展的定义时，都通过宏PHP\\_RINIT指定request\\_startup\\_func对应的函数。 以VLD扩展为例：其请求初始化为PHP\\_RINIT(vld),与之对应在扩展中需要有这个函数的实现：\n\n```cpp\nPHP_RINIT_FUNCTION(vld) {\n}\n```\n\n所以， 我们在写扩展时也需要实现扩展的这些接口，同样，当实现各服务器接口时也需要实现其对应的SAPI。","source":"_posts/php-sapi.md","raw":"---\ntitle: 'PHP 底层: SAPI概述'\ntags: []\nid: '133'\ncategories:\n  - - Linux\ndate: 2017-08-24 20:08:44\n---\n\n### 概述\n\n> 各个服务器抽象层遵守着相同的规定，统一称为SAPI接口。而SAPI接口的格式由一个\\_sapi\\_module\\_struct的结构体定义好。在PHP中，如果需要调用服务器的信息，统一通过SPAI接口进行实现。\n\n下面是SAPI调用的简单示意图\n\n![](/uploads/2017/07/02-02-01-sapi.png)\n<!-- more -->\n以CGI模式和apache2为例，启动方式如下：\n\n```cpp\n.... // 上面都是初始化启动前的赋值操作\n/* startup after we get the above ini override se we get things right */\ncgi_sapi_module.startup(&cgi_sapi_module)   //  cgi模式 cgi/cgi_main.c文件 main方法内\n\napache2_sapi_module.startup(&apache2_sapi_module);\n //  apache2服务器  apache2handler/sapi_apache2.c文件 php_apache_server_startup方法\n\n// 虽然方法不一样，但是使用的都是一个相同的结构体 _sapi_module_struct\n```\n\n这里的cgi\\_sapi\\_module和apache2\\_sapi\\_module都是\\_sapi\\_module\\_struct格式的静态变量。cgi\\_sapi\\_module的startup方法指向php\\_cgi\\_startup函数指针。\n\n![](/uploads/2017/08/14994211711.png)\n\n### \\_sapi\\_module\\_struct结构体\n\n在结构体\\_sapi\\_module\\_struct中除了startup函数指针，还有许多其它方法或字段。\n\n结构体大概是如下的格式：\n\n```cpp\nstruct _sapi_module_struct {\n    char *name;\n    char *pretty_name;\n\n    int (*startup)(struct _sapi_module_struct *sapi_module);\n    int (*shutdown)(struct _sapi_module_struct *sapi_module);\n\n    int (*activate)(TSRMLS_D);\n    int (*deactivate)(TSRMLS_D);\n\n    int (*ub_write)(const char *str, unsigned int str_length TSRMLS_DC);\n    void (*flush)(void *server_context);\n    struct stat *(*get_stat)(TSRMLS_D);\n    char *(*getenv)(char *name, size_t name_len TSRMLS_DC);\n\n    void (*sapi_error)(int type, const char *error_msg, ...);\n\n    int (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);\n    int (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);\n    void (*send_header)(sapi_header_struct *sapi_header, void *server_context TSRMLS_DC);\n\n    int (*read_post)(char *buffer, uint count_bytes TSRMLS_DC);\n    char *(*read_cookies)(TSRMLS_D);\n\n    void (*register_server_variables)(zval *track_vars_array TSRMLS_DC);\n    void (*log_message)(char *message);\n    time_t (*get_request_time)(TSRMLS_D);\n    void (*terminate_process)(TSRMLS_D);\n\n    char *php_ini_path_override;\n\n    void (*block_interruptions)(void);\n    void (*unblock_interruptions)(void);\n\n    void (*default_post_reader)(TSRMLS_D);\n    void (*treat_data)(int arg, char *str, zval *destArray TSRMLS_DC);\n    char *executable_location;\n\n    int php_ini_ignore;\n\n    int (*get_fd)(int *fd TSRMLS_DC);\n\n    int (*force_http_10)(TSRMLS_D);\n\n    int (*get_target_uid)(uid_t * TSRMLS_DC);\n    int (*get_target_gid)(gid_t * TSRMLS_DC);\n\n    unsigned int (*input_filter)(int arg, char *var, char **val, unsigned int val_len, unsigned int *new_val_len TSRMLS_DC);\n\n    void (*ini_defaults)(HashTable *configuration_hash);\n    int phpinfo_as_text;\n\n    char *ini_entries;\n    const zend_function_entry *additional_functions;\n    unsigned int (*input_filter_init)(TSRMLS_D);\n};\n```\n\n其中一些函数指针的说明如下：\n\n*   **startup 当SAPI初始化时，首先会调用该函数。如果服务器处理多个请求时，该函数只会调用一次。 比如Apache的SAPI，它是以mod\\_php5的Apache模块的形式加载到Apache中的， 在这个SAPI中，startup函数只在父进程中创建一次，在其fork的子进程中不会调用。**\n*   **activate 此函数会在每个请求开始时调用，它会再次初始化每个请求前的数据结构。**\n*   **deactivate 此函数会在每个请求结束时调用，它用来确保所有的数据都，以及释放在activate中初始化的数据结构。**\n*   **shutdown 关闭函数，它用来释放所有的SAPI的数据结构、内存等。**\n*   **ub\\_write 不缓存的写操作(unbuffered write)，它是用来将PHP的数据输出给客户端， 如在CLI模式下，其最终是调用fwrite实现向标准输出输出内容；在Apache模块中，它最终是调用Apache提供的方法rwrite。**\n*   **sapi\\_error 报告错误用，大多数的SAPI都是使用的PHP的默认实现php\\_error。**\n*   **flush 刷新输出，在CLI模式下通过使用C语言的库函数fflush实现，在php\\_mode5模式下，使用Apache的提供的函数函数rflush实现。**\n*   **read\\_cookie 在SAPI激活时，程序会调用此函数，并且将此函数获取的值赋值给SG(request\\_info).cookie\\_data。 在CLI模式下，此函数会返回NULL。**\n*   **read\\_post 此函数和read\\_cookie一样也是在SAPI激活时调用，它与请求的方法相关，当请求的方法是POST时，程序会操作\\\\$\\_POST、\\\\$HTTP\\_RAW\\_POST\\_DATA等变量。**\n*   **send\\_header 发送头部信息，此方法一般的SAPI都会定制，其所不同的是，有些的会调服务器自带的（如Apache），有些的需要你自己实现（如 FastCGI）。**\n\n以上的这些结构在各服务器的接口实现中都有定义。如Apache2的定义：\n\n```cpp\nstatic sapi_module_struct apache2_sapi_module = {\n    \"apache2filter\",                       /* name */\n    \"Apache 2.0 Filter\",                   /* pretty_name*/\n\n    php_apache2_startup,                        /* startup */\n    php_module_shutdown_wrapper,            /* shutdown */\n\n    NULL,                                   /* activate */\n    NULL,                                   /* deactivate */\n\n    php_apache_sapi_ub_write,               /* unbuffered write */\n    php_apache_sapi_flush,                  /* flush */\n    php_apache_sapi_get_stat,                       /* get uid */\n    php_apache_sapi_getenv,                 /* getenv */\n\n    php_error,                              /* error handler */\n\n    php_apache_sapi_header_handler,         /* header handler */\n    php_apache_sapi_send_headers,           /* send headers handler */\n    NULL,                                   /* send header handler */\n\n    php_apache_sapi_read_post,              /* read POST data */\n    php_apache_sapi_read_cookies,           /* read Cookies */\n\n    php_apache_sapi_register_variables,\n    php_apache_sapi_log_message,            /* Log message */\n    php_apache_sapi_get_request_time,       /* Get Request Time */\n    NULL,                       /* Child terminate */\n\n    STANDARD_SAPI_MODULE_PROPERTIES\n};\n```\n\n整个SAPI类似于一个面向对象中的模板方法模式的应用。 SAPI.c和SAPI.h文件所包含的一些函数就是模板方法模式中的抽象模板， 各个服务器对于sapi\\_module的定义及相关实现则是一个个具体的模板。\n\n这样的结构在PHP的源码中有多处使用， 比如在PHP扩展开发中，每个扩展都需要定义一个zend\\_module\\_entry结构体。 这个结构体的作用与sapi\\_module\\_struct结构体类似，都是一个类似模板方法模式的应用。 在PHP的生命周期中如果需要调用某个扩展，其调用的方法都是zend\\_module\\_entry结构体中指定的方法， 如在上一小节中提到的在执行各个扩展的请求初始化时，都是统一调用request\\_startup\\_func方法， 而在每个扩展的定义时，都通过宏PHP\\_RINIT指定request\\_startup\\_func对应的函数。 以VLD扩展为例：其请求初始化为PHP\\_RINIT(vld),与之对应在扩展中需要有这个函数的实现：\n\n```cpp\nPHP_RINIT_FUNCTION(vld) {\n}\n```\n\n所以， 我们在写扩展时也需要实现扩展的这些接口，同样，当实现各服务器接口时也需要实现其对应的SAPI。","slug":"php-sapi","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mhn0067417t9my81qfn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><blockquote>\n<p>各个服务器抽象层遵守着相同的规定，统一称为SAPI接口。而SAPI接口的格式由一个_sapi_module_struct的结构体定义好。在PHP中，如果需要调用服务器的信息，统一通过SPAI接口进行实现。</p>\n</blockquote>\n<p>下面是SAPI调用的简单示意图</p>\n<p><img src=\"/uploads/2017/07/02-02-01-sapi.png\"></p>\n<span id=\"more\"></span>\n<p>以CGI模式和apache2为例，启动方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.... <span class=\"comment\">// 上面都是初始化启动前的赋值操作</span></span><br><span class=\"line\"><span class=\"comment\">/* startup after we get the above ini override se we get things right */</span></span><br><span class=\"line\">cgi_sapi_module.<span class=\"built_in\">startup</span>(&amp;cgi_sapi_module)   <span class=\"comment\">//  cgi模式 cgi/cgi_main.c文件 main方法内</span></span><br><span class=\"line\"></span><br><span class=\"line\">apache2_sapi_module.<span class=\"built_in\">startup</span>(&amp;apache2_sapi_module);</span><br><span class=\"line\"> <span class=\"comment\">//  apache2服务器  apache2handler/sapi_apache2.c文件 php_apache_server_startup方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 虽然方法不一样，但是使用的都是一个相同的结构体 _sapi_module_struct</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的cgi_sapi_module和apache2_sapi_module都是_sapi_module_struct格式的静态变量。cgi_sapi_module的startup方法指向php_cgi_startup函数指针。</p>\n<p><img src=\"/uploads/2017/08/14994211711.png\"></p>\n<h3 id=\"sapi-module-struct结构体\"><a href=\"#sapi-module-struct结构体\" class=\"headerlink\" title=\"_sapi_module_struct结构体\"></a>_sapi_module_struct结构体</h3><p>在结构体_sapi_module_struct中除了startup函数指针，还有许多其它方法或字段。</p>\n<p>结构体大概是如下的格式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_sapi_module_struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *name;</span><br><span class=\"line\">    <span class=\"type\">char</span> *pretty_name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*startup)(<span class=\"keyword\">struct</span> _sapi_module_struct *sapi_module);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*shutdown)(<span class=\"keyword\">struct</span> _sapi_module_struct *sapi_module);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*activate)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*deactivate)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*ub_write)(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> str_length TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*flush)(<span class=\"type\">void</span> *server_context);</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">stat</span> *(*get_stat)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"type\">char</span> *(*getenv)(<span class=\"type\">char</span> *name, <span class=\"type\">size_t</span> name_len TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*sapi_error)(<span class=\"type\">int</span> type, <span class=\"type\">const</span> <span class=\"type\">char</span> *error_msg, ...);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*send_header)(sapi_header_struct *sapi_header, <span class=\"type\">void</span> *server_context TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*read_post)(<span class=\"type\">char</span> *buffer, uint count_bytes TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"type\">char</span> *(*read_cookies)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*register_server_variables)(zval *track_vars_array TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*log_message)(<span class=\"type\">char</span> *message);</span><br><span class=\"line\">    <span class=\"built_in\">time_t</span> (*get_request_time)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*terminate_process)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *php_ini_path_override;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*block_interruptions)(<span class=\"type\">void</span>);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*unblock_interruptions)(<span class=\"type\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*default_post_reader)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*treat_data)(<span class=\"type\">int</span> arg, <span class=\"type\">char</span> *str, zval *destArray TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"type\">char</span> *executable_location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> php_ini_ignore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*get_fd)(<span class=\"type\">int</span> *fd TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*force_http_10)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*get_target_uid)(<span class=\"type\">uid_t</span> * TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*get_target_gid)(<span class=\"type\">gid_t</span> * TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter)</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">char</span> *var, <span class=\"type\">char</span> **val, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> val_len, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> *new_val_len TSRMLS_DC)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*ini_defaults)(HashTable *configuration_hash);</span><br><span class=\"line\">    <span class=\"type\">int</span> phpinfo_as_text;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *ini_entries;</span><br><span class=\"line\">    <span class=\"type\">const</span> zend_function_entry *additional_functions;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter_init)</span><span class=\"params\">(TSRMLS_D)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中一些函数指针的说明如下：</p>\n<ul>\n<li><strong>startup 当SAPI初始化时，首先会调用该函数。如果服务器处理多个请求时，该函数只会调用一次。 比如Apache的SAPI，它是以mod_php5的Apache模块的形式加载到Apache中的， 在这个SAPI中，startup函数只在父进程中创建一次，在其fork的子进程中不会调用。</strong></li>\n<li><strong>activate 此函数会在每个请求开始时调用，它会再次初始化每个请求前的数据结构。</strong></li>\n<li><strong>deactivate 此函数会在每个请求结束时调用，它用来确保所有的数据都，以及释放在activate中初始化的数据结构。</strong></li>\n<li><strong>shutdown 关闭函数，它用来释放所有的SAPI的数据结构、内存等。</strong></li>\n<li><strong>ub_write 不缓存的写操作(unbuffered write)，它是用来将PHP的数据输出给客户端， 如在CLI模式下，其最终是调用fwrite实现向标准输出输出内容；在Apache模块中，它最终是调用Apache提供的方法rwrite。</strong></li>\n<li><strong>sapi_error 报告错误用，大多数的SAPI都是使用的PHP的默认实现php_error。</strong></li>\n<li><strong>flush 刷新输出，在CLI模式下通过使用C语言的库函数fflush实现，在php_mode5模式下，使用Apache的提供的函数函数rflush实现。</strong></li>\n<li><strong>read_cookie 在SAPI激活时，程序会调用此函数，并且将此函数获取的值赋值给SG(request_info).cookie_data。 在CLI模式下，此函数会返回NULL。</strong></li>\n<li><strong>read_post 此函数和read_cookie一样也是在SAPI激活时调用，它与请求的方法相关，当请求的方法是POST时，程序会操作\\$_POST、\\$HTTP_RAW_POST_DATA等变量。</strong></li>\n<li><strong>send_header 发送头部信息，此方法一般的SAPI都会定制，其所不同的是，有些的会调服务器自带的（如Apache），有些的需要你自己实现（如 FastCGI）。</strong></li>\n</ul>\n<p>以上的这些结构在各服务器的接口实现中都有定义。如Apache2的定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> sapi_module_struct apache2_sapi_module = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;apache2filter&quot;</span>,                       <span class=\"comment\">/* name */</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Apache 2.0 Filter&quot;</span>,                   <span class=\"comment\">/* pretty_name*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache2_startup,                        <span class=\"comment\">/* startup */</span></span><br><span class=\"line\">    php_module_shutdown_wrapper,            <span class=\"comment\">/* shutdown */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                                   <span class=\"comment\">/* activate */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                                   <span class=\"comment\">/* deactivate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_ub_write,               <span class=\"comment\">/* unbuffered write */</span></span><br><span class=\"line\">    php_apache_sapi_flush,                  <span class=\"comment\">/* flush */</span></span><br><span class=\"line\">    php_apache_sapi_get_stat,                       <span class=\"comment\">/* get uid */</span></span><br><span class=\"line\">    php_apache_sapi_getenv,                 <span class=\"comment\">/* getenv */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_error,                              <span class=\"comment\">/* error handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_header_handler,         <span class=\"comment\">/* header handler */</span></span><br><span class=\"line\">    php_apache_sapi_send_headers,           <span class=\"comment\">/* send headers handler */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                                   <span class=\"comment\">/* send header handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_read_post,              <span class=\"comment\">/* read POST data */</span></span><br><span class=\"line\">    php_apache_sapi_read_cookies,           <span class=\"comment\">/* read Cookies */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_register_variables,</span><br><span class=\"line\">    php_apache_sapi_log_message,            <span class=\"comment\">/* Log message */</span></span><br><span class=\"line\">    php_apache_sapi_get_request_time,       <span class=\"comment\">/* Get Request Time */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                       <span class=\"comment\">/* Child terminate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    STANDARD_SAPI_MODULE_PROPERTIES</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>整个SAPI类似于一个面向对象中的模板方法模式的应用。 SAPI.c和SAPI.h文件所包含的一些函数就是模板方法模式中的抽象模板， 各个服务器对于sapi_module的定义及相关实现则是一个个具体的模板。</p>\n<p>这样的结构在PHP的源码中有多处使用， 比如在PHP扩展开发中，每个扩展都需要定义一个zend_module_entry结构体。 这个结构体的作用与sapi_module_struct结构体类似，都是一个类似模板方法模式的应用。 在PHP的生命周期中如果需要调用某个扩展，其调用的方法都是zend_module_entry结构体中指定的方法， 如在上一小节中提到的在执行各个扩展的请求初始化时，都是统一调用request_startup_func方法， 而在每个扩展的定义时，都通过宏PHP_RINIT指定request_startup_func对应的函数。 以VLD扩展为例：其请求初始化为PHP_RINIT(vld),与之对应在扩展中需要有这个函数的实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_RINIT_FUNCTION</span>(vld) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以， 我们在写扩展时也需要实现扩展的这些接口，同样，当实现各服务器接口时也需要实现其对应的SAPI。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><blockquote>\n<p>各个服务器抽象层遵守着相同的规定，统一称为SAPI接口。而SAPI接口的格式由一个_sapi_module_struct的结构体定义好。在PHP中，如果需要调用服务器的信息，统一通过SPAI接口进行实现。</p>\n</blockquote>\n<p>下面是SAPI调用的简单示意图</p>\n<p><img src=\"/uploads/2017/07/02-02-01-sapi.png\"></p>","more":"<p>以CGI模式和apache2为例，启动方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.... <span class=\"comment\">// 上面都是初始化启动前的赋值操作</span></span><br><span class=\"line\"><span class=\"comment\">/* startup after we get the above ini override se we get things right */</span></span><br><span class=\"line\">cgi_sapi_module.<span class=\"built_in\">startup</span>(&amp;cgi_sapi_module)   <span class=\"comment\">//  cgi模式 cgi/cgi_main.c文件 main方法内</span></span><br><span class=\"line\"></span><br><span class=\"line\">apache2_sapi_module.<span class=\"built_in\">startup</span>(&amp;apache2_sapi_module);</span><br><span class=\"line\"> <span class=\"comment\">//  apache2服务器  apache2handler/sapi_apache2.c文件 php_apache_server_startup方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 虽然方法不一样，但是使用的都是一个相同的结构体 _sapi_module_struct</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的cgi_sapi_module和apache2_sapi_module都是_sapi_module_struct格式的静态变量。cgi_sapi_module的startup方法指向php_cgi_startup函数指针。</p>\n<p><img src=\"/uploads/2017/08/14994211711.png\"></p>\n<h3 id=\"sapi-module-struct结构体\"><a href=\"#sapi-module-struct结构体\" class=\"headerlink\" title=\"_sapi_module_struct结构体\"></a>_sapi_module_struct结构体</h3><p>在结构体_sapi_module_struct中除了startup函数指针，还有许多其它方法或字段。</p>\n<p>结构体大概是如下的格式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_sapi_module_struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *name;</span><br><span class=\"line\">    <span class=\"type\">char</span> *pretty_name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*startup)(<span class=\"keyword\">struct</span> _sapi_module_struct *sapi_module);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*shutdown)(<span class=\"keyword\">struct</span> _sapi_module_struct *sapi_module);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*activate)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*deactivate)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*ub_write)(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> str_length TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*flush)(<span class=\"type\">void</span> *server_context);</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">stat</span> *(*get_stat)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"type\">char</span> *(*getenv)(<span class=\"type\">char</span> *name, <span class=\"type\">size_t</span> name_len TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*sapi_error)(<span class=\"type\">int</span> type, <span class=\"type\">const</span> <span class=\"type\">char</span> *error_msg, ...);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*send_header)(sapi_header_struct *sapi_header, <span class=\"type\">void</span> *server_context TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*read_post)(<span class=\"type\">char</span> *buffer, uint count_bytes TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"type\">char</span> *(*read_cookies)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*register_server_variables)(zval *track_vars_array TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*log_message)(<span class=\"type\">char</span> *message);</span><br><span class=\"line\">    <span class=\"built_in\">time_t</span> (*get_request_time)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*terminate_process)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *php_ini_path_override;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*block_interruptions)(<span class=\"type\">void</span>);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*unblock_interruptions)(<span class=\"type\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*default_post_reader)(TSRMLS_D);</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*treat_data)(<span class=\"type\">int</span> arg, <span class=\"type\">char</span> *str, zval *destArray TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"type\">char</span> *executable_location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> php_ini_ignore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*get_fd)(<span class=\"type\">int</span> *fd TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*force_http_10)(TSRMLS_D);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*get_target_uid)(<span class=\"type\">uid_t</span> * TSRMLS_DC);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> (*get_target_gid)(<span class=\"type\">gid_t</span> * TSRMLS_DC);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter)</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">char</span> *var, <span class=\"type\">char</span> **val, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> val_len, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> *new_val_len TSRMLS_DC)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*ini_defaults)(HashTable *configuration_hash);</span><br><span class=\"line\">    <span class=\"type\">int</span> phpinfo_as_text;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *ini_entries;</span><br><span class=\"line\">    <span class=\"type\">const</span> zend_function_entry *additional_functions;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter_init)</span><span class=\"params\">(TSRMLS_D)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中一些函数指针的说明如下：</p>\n<ul>\n<li><strong>startup 当SAPI初始化时，首先会调用该函数。如果服务器处理多个请求时，该函数只会调用一次。 比如Apache的SAPI，它是以mod_php5的Apache模块的形式加载到Apache中的， 在这个SAPI中，startup函数只在父进程中创建一次，在其fork的子进程中不会调用。</strong></li>\n<li><strong>activate 此函数会在每个请求开始时调用，它会再次初始化每个请求前的数据结构。</strong></li>\n<li><strong>deactivate 此函数会在每个请求结束时调用，它用来确保所有的数据都，以及释放在activate中初始化的数据结构。</strong></li>\n<li><strong>shutdown 关闭函数，它用来释放所有的SAPI的数据结构、内存等。</strong></li>\n<li><strong>ub_write 不缓存的写操作(unbuffered write)，它是用来将PHP的数据输出给客户端， 如在CLI模式下，其最终是调用fwrite实现向标准输出输出内容；在Apache模块中，它最终是调用Apache提供的方法rwrite。</strong></li>\n<li><strong>sapi_error 报告错误用，大多数的SAPI都是使用的PHP的默认实现php_error。</strong></li>\n<li><strong>flush 刷新输出，在CLI模式下通过使用C语言的库函数fflush实现，在php_mode5模式下，使用Apache的提供的函数函数rflush实现。</strong></li>\n<li><strong>read_cookie 在SAPI激活时，程序会调用此函数，并且将此函数获取的值赋值给SG(request_info).cookie_data。 在CLI模式下，此函数会返回NULL。</strong></li>\n<li><strong>read_post 此函数和read_cookie一样也是在SAPI激活时调用，它与请求的方法相关，当请求的方法是POST时，程序会操作\\$_POST、\\$HTTP_RAW_POST_DATA等变量。</strong></li>\n<li><strong>send_header 发送头部信息，此方法一般的SAPI都会定制，其所不同的是，有些的会调服务器自带的（如Apache），有些的需要你自己实现（如 FastCGI）。</strong></li>\n</ul>\n<p>以上的这些结构在各服务器的接口实现中都有定义。如Apache2的定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> sapi_module_struct apache2_sapi_module = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;apache2filter&quot;</span>,                       <span class=\"comment\">/* name */</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Apache 2.0 Filter&quot;</span>,                   <span class=\"comment\">/* pretty_name*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache2_startup,                        <span class=\"comment\">/* startup */</span></span><br><span class=\"line\">    php_module_shutdown_wrapper,            <span class=\"comment\">/* shutdown */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                                   <span class=\"comment\">/* activate */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                                   <span class=\"comment\">/* deactivate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_ub_write,               <span class=\"comment\">/* unbuffered write */</span></span><br><span class=\"line\">    php_apache_sapi_flush,                  <span class=\"comment\">/* flush */</span></span><br><span class=\"line\">    php_apache_sapi_get_stat,                       <span class=\"comment\">/* get uid */</span></span><br><span class=\"line\">    php_apache_sapi_getenv,                 <span class=\"comment\">/* getenv */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_error,                              <span class=\"comment\">/* error handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_header_handler,         <span class=\"comment\">/* header handler */</span></span><br><span class=\"line\">    php_apache_sapi_send_headers,           <span class=\"comment\">/* send headers handler */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                                   <span class=\"comment\">/* send header handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_read_post,              <span class=\"comment\">/* read POST data */</span></span><br><span class=\"line\">    php_apache_sapi_read_cookies,           <span class=\"comment\">/* read Cookies */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_apache_sapi_register_variables,</span><br><span class=\"line\">    php_apache_sapi_log_message,            <span class=\"comment\">/* Log message */</span></span><br><span class=\"line\">    php_apache_sapi_get_request_time,       <span class=\"comment\">/* Get Request Time */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                       <span class=\"comment\">/* Child terminate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    STANDARD_SAPI_MODULE_PROPERTIES</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>整个SAPI类似于一个面向对象中的模板方法模式的应用。 SAPI.c和SAPI.h文件所包含的一些函数就是模板方法模式中的抽象模板， 各个服务器对于sapi_module的定义及相关实现则是一个个具体的模板。</p>\n<p>这样的结构在PHP的源码中有多处使用， 比如在PHP扩展开发中，每个扩展都需要定义一个zend_module_entry结构体。 这个结构体的作用与sapi_module_struct结构体类似，都是一个类似模板方法模式的应用。 在PHP的生命周期中如果需要调用某个扩展，其调用的方法都是zend_module_entry结构体中指定的方法， 如在上一小节中提到的在执行各个扩展的请求初始化时，都是统一调用request_startup_func方法， 而在每个扩展的定义时，都通过宏PHP_RINIT指定request_startup_func对应的函数。 以VLD扩展为例：其请求初始化为PHP_RINIT(vld),与之对应在扩展中需要有这个函数的实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_RINIT_FUNCTION</span>(vld) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以， 我们在写扩展时也需要实现扩展的这些接口，同样，当实现各服务器接口时也需要实现其对应的SAPI。</p>"},{"title":"PHP UTC转GMT时区","id":"137","date":"2017-08-24T12:12:56.000Z","_content":"\n> 很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。\n> \n> 背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。\n<!-- more -->\n#### 用过ci的都知道，`index.php`的第一句话就是\n\n```php\ndate_default_timezone_set('UTC');\n```\n\n#### 这就决定了，整个项目的时区是UTC时区。\n\n#### 但是客户端传上来的时区基本上是GMT开头，例如`GMT+8(北京时间)`\n\n#### 所以要把UTC时区转换成GMT时区\n\n#### Code如下\n\n```php\n$time_zone = \"GMT+8\";\n$time = time();\n$date = date_create(date(\"Y-m-d H:i\", $time), timezone_open('UTC'));\n$date = date_timezone_set($date, timezone_open($time_zone));\n$date = date_format($date, 'Y-m-d H:i');\n```\n\n#### 或者参照[php时区转换转换函数](http://www.poluoluo.com/jzxy/201401/258989.html):\n\n```php\nfunction toTimeZone($src, $from_tz = 'America/Denver', $to_tz = 'Asia/Shanghai', $fm = 'Y-m-d H:i:s') {\n    $datetime = new DateTime($src, new DateTimeZone($from_tz));\n    $datetime->setTimezone(new DateTimeZone($to_tz));\n    return $datetime->format($fm);\n}\n```","source":"_posts/php-utc2gmt.md","raw":"---\ntitle: PHP UTC转GMT时区\ntags: []\nid: '137'\ncategories:\n  - - PHP\ndate: 2017-08-24 20:12:56\n---\n\n> 很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。\n> \n> 背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。\n<!-- more -->\n#### 用过ci的都知道，`index.php`的第一句话就是\n\n```php\ndate_default_timezone_set('UTC');\n```\n\n#### 这就决定了，整个项目的时区是UTC时区。\n\n#### 但是客户端传上来的时区基本上是GMT开头，例如`GMT+8(北京时间)`\n\n#### 所以要把UTC时区转换成GMT时区\n\n#### Code如下\n\n```php\n$time_zone = \"GMT+8\";\n$time = time();\n$date = date_create(date(\"Y-m-d H:i\", $time), timezone_open('UTC'));\n$date = date_timezone_set($date, timezone_open($time_zone));\n$date = date_format($date, 'Y-m-d H:i');\n```\n\n#### 或者参照[php时区转换转换函数](http://www.poluoluo.com/jzxy/201401/258989.html):\n\n```php\nfunction toTimeZone($src, $from_tz = 'America/Denver', $to_tz = 'Asia/Shanghai', $fm = 'Y-m-d H:i:s') {\n    $datetime = new DateTime($src, new DateTimeZone($from_tz));\n    $datetime->setTimezone(new DateTimeZone($to_tz));\n    return $datetime->format($fm);\n}\n```","slug":"php-utc2gmt","published":1,"updated":"2022-03-12T23:52:58.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mhp006b417tessz5qh4","content":"<blockquote>\n<p>很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。</p>\n<p>背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h4 id=\"用过ci的都知道，index-php的第一句话就是\"><a href=\"#用过ci的都知道，index-php的第一句话就是\" class=\"headerlink\" title=\"用过ci的都知道，index.php的第一句话就是\"></a>用过ci的都知道，<code>index.php</code>的第一句话就是</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">date_default_timezone_set</span>(<span class=\"string\">&#x27;UTC&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"这就决定了，整个项目的时区是UTC时区。\"><a href=\"#这就决定了，整个项目的时区是UTC时区。\" class=\"headerlink\" title=\"这就决定了，整个项目的时区是UTC时区。\"></a>这就决定了，整个项目的时区是UTC时区。</h4><h4 id=\"但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\"><a href=\"#但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\" class=\"headerlink\" title=\"但是客户端传上来的时区基本上是GMT开头，例如GMT+8(北京时间)\"></a>但是客户端传上来的时区基本上是GMT开头，例如<code>GMT+8(北京时间)</code></h4><h4 id=\"所以要把UTC时区转换成GMT时区\"><a href=\"#所以要把UTC时区转换成GMT时区\" class=\"headerlink\" title=\"所以要把UTC时区转换成GMT时区\"></a>所以要把UTC时区转换成GMT时区</h4><h4 id=\"Code如下\"><a href=\"#Code如下\" class=\"headerlink\" title=\"Code如下\"></a>Code如下</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$time_zone</span> = <span class=\"string\">&quot;GMT+8&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$time</span> = <span class=\"title function_ invoke__\">time</span>();</span><br><span class=\"line\"><span class=\"variable\">$date</span> = <span class=\"title function_ invoke__\">date_create</span>(<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;Y-m-d H:i&quot;</span>, <span class=\"variable\">$time</span>), <span class=\"title function_ invoke__\">timezone_open</span>(<span class=\"string\">&#x27;UTC&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable\">$date</span> = <span class=\"title function_ invoke__\">date_timezone_set</span>(<span class=\"variable\">$date</span>, <span class=\"title function_ invoke__\">timezone_open</span>(<span class=\"variable\">$time_zone</span>));</span><br><span class=\"line\"><span class=\"variable\">$date</span> = <span class=\"title function_ invoke__\">date_format</span>(<span class=\"variable\">$date</span>, <span class=\"string\">&#x27;Y-m-d H:i&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"或者参照php时区转换转换函数\"><a href=\"#或者参照php时区转换转换函数\" class=\"headerlink\" title=\"或者参照php时区转换转换函数:\"></a>或者参照<a href=\"http://www.poluoluo.com/jzxy/201401/258989.html\">php时区转换转换函数</a>:</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toTimeZone</span>(<span class=\"params\"><span class=\"variable\">$src</span>, <span class=\"variable\">$from_tz</span> = <span class=\"string\">&#x27;America/Denver&#x27;</span>, <span class=\"variable\">$to_tz</span> = <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span>, <span class=\"variable\">$fm</span> = <span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$datetime</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">DateTime</span>(<span class=\"variable\">$src</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DateTimeZone</span>(<span class=\"variable\">$from_tz</span>));</span><br><span class=\"line\">    <span class=\"variable\">$datetime</span>-&gt;<span class=\"title function_ invoke__\">setTimezone</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">DateTimeZone</span>(<span class=\"variable\">$to_tz</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$datetime</span>-&gt;<span class=\"title function_ invoke__\">format</span>(<span class=\"variable\">$fm</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。</p>\n<p>背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。</p>\n</blockquote>","more":"<h4 id=\"用过ci的都知道，index-php的第一句话就是\"><a href=\"#用过ci的都知道，index-php的第一句话就是\" class=\"headerlink\" title=\"用过ci的都知道，index.php的第一句话就是\"></a>用过ci的都知道，<code>index.php</code>的第一句话就是</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">date_default_timezone_set</span>(<span class=\"string\">&#x27;UTC&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"这就决定了，整个项目的时区是UTC时区。\"><a href=\"#这就决定了，整个项目的时区是UTC时区。\" class=\"headerlink\" title=\"这就决定了，整个项目的时区是UTC时区。\"></a>这就决定了，整个项目的时区是UTC时区。</h4><h4 id=\"但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\"><a href=\"#但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\" class=\"headerlink\" title=\"但是客户端传上来的时区基本上是GMT开头，例如GMT+8(北京时间)\"></a>但是客户端传上来的时区基本上是GMT开头，例如<code>GMT+8(北京时间)</code></h4><h4 id=\"所以要把UTC时区转换成GMT时区\"><a href=\"#所以要把UTC时区转换成GMT时区\" class=\"headerlink\" title=\"所以要把UTC时区转换成GMT时区\"></a>所以要把UTC时区转换成GMT时区</h4><h4 id=\"Code如下\"><a href=\"#Code如下\" class=\"headerlink\" title=\"Code如下\"></a>Code如下</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$time_zone</span> = <span class=\"string\">&quot;GMT+8&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$time</span> = <span class=\"title function_ invoke__\">time</span>();</span><br><span class=\"line\"><span class=\"variable\">$date</span> = <span class=\"title function_ invoke__\">date_create</span>(<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;Y-m-d H:i&quot;</span>, <span class=\"variable\">$time</span>), <span class=\"title function_ invoke__\">timezone_open</span>(<span class=\"string\">&#x27;UTC&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable\">$date</span> = <span class=\"title function_ invoke__\">date_timezone_set</span>(<span class=\"variable\">$date</span>, <span class=\"title function_ invoke__\">timezone_open</span>(<span class=\"variable\">$time_zone</span>));</span><br><span class=\"line\"><span class=\"variable\">$date</span> = <span class=\"title function_ invoke__\">date_format</span>(<span class=\"variable\">$date</span>, <span class=\"string\">&#x27;Y-m-d H:i&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"或者参照php时区转换转换函数\"><a href=\"#或者参照php时区转换转换函数\" class=\"headerlink\" title=\"或者参照php时区转换转换函数:\"></a>或者参照<a href=\"http://www.poluoluo.com/jzxy/201401/258989.html\">php时区转换转换函数</a>:</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toTimeZone</span>(<span class=\"params\"><span class=\"variable\">$src</span>, <span class=\"variable\">$from_tz</span> = <span class=\"string\">&#x27;America/Denver&#x27;</span>, <span class=\"variable\">$to_tz</span> = <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span>, <span class=\"variable\">$fm</span> = <span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$datetime</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">DateTime</span>(<span class=\"variable\">$src</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DateTimeZone</span>(<span class=\"variable\">$from_tz</span>));</span><br><span class=\"line\">    <span class=\"variable\">$datetime</span>-&gt;<span class=\"title function_ invoke__\">setTimezone</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">DateTimeZone</span>(<span class=\"variable\">$to_tz</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$datetime</span>-&gt;<span class=\"title function_ invoke__\">format</span>(<span class=\"variable\">$fm</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"php 创建xml的几种方式","id":"132","date":"2017-08-24T12:06:20.000Z","_content":"\n#### 1、直接创建字符串\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n        <people>\n        <name>Tyler Teng</name>\n        <sex>man</sex>\n        </people>\";\necho $xml;\n```\n<!-- more -->\n#### 2、使用DOMDocument进行创建\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = new DOMDocument('1.0', 'utf-8');\n$root = $xml->createElement('people');\n$name = $xml->createElement('name', 'Tyler Teng');\n$sex = $xml->createElement('sex', 'man');\n$root->appendChild($name);\n$root->appendChild($sex);\n$xml->appendChild($root);\n\necho $xml->saveXML();\n```\n\n#### 3、使用XMLWriter进行创建\n\n```php\nheader('Content-type:application/xml');\n$xml_writer = new XMLWriter;\n$xml_writer->openMemory();\n$xml_writer->startDocument('1.0', 'utf-8');\n$xml_writer->startElement('people');\n$xml_writer->writeElement('name', 'Tyler Teng');\n$xml_writer->writeElement('sex', 'man');\n$xml_writer->endElement();\n$xml_writer->endDocument();\n\necho $xml_writer->outputMemory();\n```","source":"_posts/php-xml.md","raw":"---\ntitle: php 创建xml的几种方式\ntags: []\nid: '132'\ncategories:\n  - - PHP\ndate: 2017-08-24 20:06:20\n---\n\n#### 1、直接创建字符串\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n        <people>\n        <name>Tyler Teng</name>\n        <sex>man</sex>\n        </people>\";\necho $xml;\n```\n<!-- more -->\n#### 2、使用DOMDocument进行创建\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = new DOMDocument('1.0', 'utf-8');\n$root = $xml->createElement('people');\n$name = $xml->createElement('name', 'Tyler Teng');\n$sex = $xml->createElement('sex', 'man');\n$root->appendChild($name);\n$root->appendChild($sex);\n$xml->appendChild($root);\n\necho $xml->saveXML();\n```\n\n#### 3、使用XMLWriter进行创建\n\n```php\nheader('Content-type:application/xml');\n$xml_writer = new XMLWriter;\n$xml_writer->openMemory();\n$xml_writer->startDocument('1.0', 'utf-8');\n$xml_writer->startElement('people');\n$xml_writer->writeElement('name', 'Tyler Teng');\n$xml_writer->writeElement('sex', 'man');\n$xml_writer->endElement();\n$xml_writer->endDocument();\n\necho $xml_writer->outputMemory();\n```","slug":"php-xml","published":1,"updated":"2022-03-12T23:52:58.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mhr006d417t4xsx259a","content":"<h4 id=\"1、直接创建字符串\"><a href=\"#1、直接创建字符串\" class=\"headerlink\" title=\"1、直接创建字符串\"></a>1、直接创建字符串</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;content-type:application/xml;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml</span> = <span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;utf-8\\&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;people&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;name&gt;Tyler Teng&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;sex&gt;man&lt;/sex&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/people&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$xml</span>;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"2、使用DOMDocument进行创建\"><a href=\"#2、使用DOMDocument进行创建\" class=\"headerlink\" title=\"2、使用DOMDocument进行创建\"></a>2、使用DOMDocument进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;content-type:application/xml;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">DOMDocument</span>(<span class=\"string\">&#x27;1.0&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$root</span> = <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">createElement</span>(<span class=\"string\">&#x27;people&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$name</span> = <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">createElement</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tyler Teng&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$sex</span> = <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">createElement</span>(<span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;man&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$root</span>-&gt;<span class=\"title function_ invoke__\">appendChild</span>(<span class=\"variable\">$name</span>);</span><br><span class=\"line\"><span class=\"variable\">$root</span>-&gt;<span class=\"title function_ invoke__\">appendChild</span>(<span class=\"variable\">$sex</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">appendChild</span>(<span class=\"variable\">$root</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">saveXML</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、使用XMLWriter进行创建\"><a href=\"#3、使用XMLWriter进行创建\" class=\"headerlink\" title=\"3、使用XMLWriter进行创建\"></a>3、使用XMLWriter进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Content-type:application/xml&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLWriter</span>;</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">openMemory</span>();</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">startDocument</span>(<span class=\"string\">&#x27;1.0&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">startElement</span>(<span class=\"string\">&#x27;people&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">writeElement</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tyler Teng&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">writeElement</span>(<span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;man&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">endElement</span>();</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">endDocument</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">outputMemory</span>();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"1、直接创建字符串\"><a href=\"#1、直接创建字符串\" class=\"headerlink\" title=\"1、直接创建字符串\"></a>1、直接创建字符串</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;content-type:application/xml;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml</span> = <span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;utf-8\\&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;people&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;name&gt;Tyler Teng&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;sex&gt;man&lt;/sex&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/people&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$xml</span>;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"2、使用DOMDocument进行创建\"><a href=\"#2、使用DOMDocument进行创建\" class=\"headerlink\" title=\"2、使用DOMDocument进行创建\"></a>2、使用DOMDocument进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;content-type:application/xml;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">DOMDocument</span>(<span class=\"string\">&#x27;1.0&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$root</span> = <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">createElement</span>(<span class=\"string\">&#x27;people&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$name</span> = <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">createElement</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tyler Teng&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$sex</span> = <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">createElement</span>(<span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;man&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$root</span>-&gt;<span class=\"title function_ invoke__\">appendChild</span>(<span class=\"variable\">$name</span>);</span><br><span class=\"line\"><span class=\"variable\">$root</span>-&gt;<span class=\"title function_ invoke__\">appendChild</span>(<span class=\"variable\">$sex</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">appendChild</span>(<span class=\"variable\">$root</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$xml</span>-&gt;<span class=\"title function_ invoke__\">saveXML</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、使用XMLWriter进行创建\"><a href=\"#3、使用XMLWriter进行创建\" class=\"headerlink\" title=\"3、使用XMLWriter进行创建\"></a>3、使用XMLWriter进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Content-type:application/xml&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLWriter</span>;</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">openMemory</span>();</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">startDocument</span>(<span class=\"string\">&#x27;1.0&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">startElement</span>(<span class=\"string\">&#x27;people&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">writeElement</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Tyler Teng&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">writeElement</span>(<span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;man&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">endElement</span>();</span><br><span class=\"line\"><span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">endDocument</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$xml_writer</span>-&gt;<span class=\"title function_ invoke__\">outputMemory</span>();</span><br></pre></td></tr></table></figure>"},{"title":"PHP7内存管理之写时复制","id":"201","comments":0,"date":"2018-01-21T13:23:59.000Z","_content":"\n其实PHP的内存管理是包含[引用计数](http://feilong.tech/?p=199)和写时复制两部分，这篇文章主要是介绍写时复制。\n\n#### 简要介绍\n\n其实写时复制在计算机中有很多应用，它只在必要的时候才会进行深拷贝，也就是把保存的值连同内存一块拷贝一份，可以很好的节省效率。比如，Linux在fork子进程的时候，不会立刻复制父进程的地址空间，而是和父进程共享一个地址空间，只有在必要写入的时候，才会复制地址空间，和父进程进行分离。简单来讲，资源的复制是只有需要写入的时候，再回进行，再次之前，都是以只读的方式进行共享。\n\n#### PHP的写时复制\n\nPHP的写时复制原理是一样的。当变量要修改value的结构的时候，这个时候，就会对之前共享的内存资源进行复制一份进行修改，同事断开原来的指向，指向复制后的内存地址。 举个例子：\n\n```php\n<?php\n$a = array(1, 2);\n$b = $a;\n$c = $b;\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=3, is\\_ref=0)=array (0 => (refcount=0, is\\_ref=0)=1, 1 => (refcount=0, is\\_ref=0)=2)\n\n```php\n<?php\n$a = array(1, 2);\n$b = $a;\n$c = $b;\n//进行分离\n$c[] = 3;\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=2, is\\_ref=0)=array (0 => (refcount=0, is\\_ref=0)=1, 1 => (refcount=0, is\\_ref=0)=2)\n\n运行结果很明显，当变量c新插入了一个元素，对那么就没有在继续引用变量a，而是独立复制了一份。\n\n![](/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png)\n\n然而并不是所有的类型都是支持写时复制，比如对象、资源就无法进行复制，也就是无法进行分离，如果多个变量指向同一个对象，当其中一个变量修改对象的时候，其修改将会反应到所有对象上面。事实上只有string和array两种支持分离。 举个例子：\n\n```php\n<?php\nclass test {\n        public $c = 123;\n}\n\n$a = new test();\n$b = $a;\n$c = $b;\necho xdebug_debug_zval('a');\n$c->c = 456;\necho $a->c;\necho \"\\n\";\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=3, is\\_ref=0)=class test { public $c = (refcount=0, is\\_ref=0)=123 } 456 a: (refcount=3, is\\_ref=0)=class test { public $c = (refcount=0, is\\_ref=0)=456 }\n\n同样，变量a实例化了一个新的对象，然后依次进行赋值给其他变量，使用xdebug\\_debug\\_zval的时候，打印出来了变量a的3次引用计数，然后对变量c进行赋值，咦？居然发现变量a的引用计数没有变化，所以object的类型是不支持写时复制的。\n\n支持复制的value类型：\n\ntype\n\ncopyable\n\nsimple types\n\nN\n\nstring\n\nY\n\ninterned string\n\nN\n\narray\n\nY\n\nimmutable array\n\nN\n\nobject\n\nN\n\nresource\n\nN\n\nreference\n\nN\n\n### 参考文献\n\n《PHP7内核剖析》","source":"_posts/php7-copy-on-write.md","raw":"---\ntitle: PHP7内存管理之写时复制\ntags:\n  - PHP7\n  - PHP源码\n  - 内存\nid: '201'\ncategories:\n  - - Linux\n  - - PHP\n  - - PHP源码\ncomments: false\ndate: 2018-01-21 21:23:59\n---\n\n其实PHP的内存管理是包含[引用计数](http://feilong.tech/?p=199)和写时复制两部分，这篇文章主要是介绍写时复制。\n\n#### 简要介绍\n\n其实写时复制在计算机中有很多应用，它只在必要的时候才会进行深拷贝，也就是把保存的值连同内存一块拷贝一份，可以很好的节省效率。比如，Linux在fork子进程的时候，不会立刻复制父进程的地址空间，而是和父进程共享一个地址空间，只有在必要写入的时候，才会复制地址空间，和父进程进行分离。简单来讲，资源的复制是只有需要写入的时候，再回进行，再次之前，都是以只读的方式进行共享。\n\n#### PHP的写时复制\n\nPHP的写时复制原理是一样的。当变量要修改value的结构的时候，这个时候，就会对之前共享的内存资源进行复制一份进行修改，同事断开原来的指向，指向复制后的内存地址。 举个例子：\n\n```php\n<?php\n$a = array(1, 2);\n$b = $a;\n$c = $b;\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=3, is\\_ref=0)=array (0 => (refcount=0, is\\_ref=0)=1, 1 => (refcount=0, is\\_ref=0)=2)\n\n```php\n<?php\n$a = array(1, 2);\n$b = $a;\n$c = $b;\n//进行分离\n$c[] = 3;\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=2, is\\_ref=0)=array (0 => (refcount=0, is\\_ref=0)=1, 1 => (refcount=0, is\\_ref=0)=2)\n\n运行结果很明显，当变量c新插入了一个元素，对那么就没有在继续引用变量a，而是独立复制了一份。\n\n![](/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png)\n\n然而并不是所有的类型都是支持写时复制，比如对象、资源就无法进行复制，也就是无法进行分离，如果多个变量指向同一个对象，当其中一个变量修改对象的时候，其修改将会反应到所有对象上面。事实上只有string和array两种支持分离。 举个例子：\n\n```php\n<?php\nclass test {\n        public $c = 123;\n}\n\n$a = new test();\n$b = $a;\n$c = $b;\necho xdebug_debug_zval('a');\n$c->c = 456;\necho $a->c;\necho \"\\n\";\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=3, is\\_ref=0)=class test { public $c = (refcount=0, is\\_ref=0)=123 } 456 a: (refcount=3, is\\_ref=0)=class test { public $c = (refcount=0, is\\_ref=0)=456 }\n\n同样，变量a实例化了一个新的对象，然后依次进行赋值给其他变量，使用xdebug\\_debug\\_zval的时候，打印出来了变量a的3次引用计数，然后对变量c进行赋值，咦？居然发现变量a的引用计数没有变化，所以object的类型是不支持写时复制的。\n\n支持复制的value类型：\n\ntype\n\ncopyable\n\nsimple types\n\nN\n\nstring\n\nY\n\ninterned string\n\nN\n\narray\n\nY\n\nimmutable array\n\nN\n\nobject\n\nN\n\nresource\n\nN\n\nreference\n\nN\n\n### 参考文献\n\n《PHP7内核剖析》","slug":"php7-copy-on-write","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mht006g417t39fy2gle","layout":"post","photos":[],"link":"","content":"<p>其实PHP的内存管理是包含<a href=\"http://feilong.tech/?p=199\">引用计数</a>和写时复制两部分，这篇文章主要是介绍写时复制。</p>\n<h4 id=\"简要介绍\"><a href=\"#简要介绍\" class=\"headerlink\" title=\"简要介绍\"></a>简要介绍</h4><p>其实写时复制在计算机中有很多应用，它只在必要的时候才会进行深拷贝，也就是把保存的值连同内存一块拷贝一份，可以很好的节省效率。比如，Linux在fork子进程的时候，不会立刻复制父进程的地址空间，而是和父进程共享一个地址空间，只有在必要写入的时候，才会复制地址空间，和父进程进行分离。简单来讲，资源的复制是只有需要写入的时候，再回进行，再次之前，都是以只读的方式进行共享。</p>\n<h4 id=\"PHP的写时复制\"><a href=\"#PHP的写时复制\" class=\"headerlink\" title=\"PHP的写时复制\"></a>PHP的写时复制</h4><p>PHP的写时复制原理是一样的。当变量要修改value的结构的时候，这个时候，就会对之前共享的内存资源进行复制一份进行修改，同事断开原来的指向，指向复制后的内存地址。 举个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;1, 1 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;2)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"comment\">//进行分离</span></span><br><span class=\"line\"><span class=\"variable\">$c</span>[] = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;1, 1 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;2)</p>\n<p>运行结果很明显，当变量c新插入了一个元素，对那么就没有在继续引用变量a，而是独立复制了一份。</p>\n<p><img src=\"/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png\"></p>\n<p>然而并不是所有的类型都是支持写时复制，比如对象、资源就无法进行复制，也就是无法进行分离，如果多个变量指向同一个对象，当其中一个变量修改对象的时候，其修改将会反应到所有对象上面。事实上只有string和array两种支持分离。 举个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$c</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">test</span>();</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$c</span>-&gt;c = <span class=\"number\">456</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>-&gt;c;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;class test { public $c &#x3D; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;123 } 456 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;class test { public $c &#x3D; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;456 }</p>\n<p>同样，变量a实例化了一个新的对象，然后依次进行赋值给其他变量，使用xdebug_debug_zval的时候，打印出来了变量a的3次引用计数，然后对变量c进行赋值，咦？居然发现变量a的引用计数没有变化，所以object的类型是不支持写时复制的。</p>\n<p>支持复制的value类型：</p>\n<p>type</p>\n<p>copyable</p>\n<p>simple types</p>\n<p>N</p>\n<p>string</p>\n<p>Y</p>\n<p>interned string</p>\n<p>N</p>\n<p>array</p>\n<p>Y</p>\n<p>immutable array</p>\n<p>N</p>\n<p>object</p>\n<p>N</p>\n<p>resource</p>\n<p>N</p>\n<p>reference</p>\n<p>N</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p>《PHP7内核剖析》</p>\n","site":{"data":{}},"excerpt":"","more":"<p>其实PHP的内存管理是包含<a href=\"http://feilong.tech/?p=199\">引用计数</a>和写时复制两部分，这篇文章主要是介绍写时复制。</p>\n<h4 id=\"简要介绍\"><a href=\"#简要介绍\" class=\"headerlink\" title=\"简要介绍\"></a>简要介绍</h4><p>其实写时复制在计算机中有很多应用，它只在必要的时候才会进行深拷贝，也就是把保存的值连同内存一块拷贝一份，可以很好的节省效率。比如，Linux在fork子进程的时候，不会立刻复制父进程的地址空间，而是和父进程共享一个地址空间，只有在必要写入的时候，才会复制地址空间，和父进程进行分离。简单来讲，资源的复制是只有需要写入的时候，再回进行，再次之前，都是以只读的方式进行共享。</p>\n<h4 id=\"PHP的写时复制\"><a href=\"#PHP的写时复制\" class=\"headerlink\" title=\"PHP的写时复制\"></a>PHP的写时复制</h4><p>PHP的写时复制原理是一样的。当变量要修改value的结构的时候，这个时候，就会对之前共享的内存资源进行复制一份进行修改，同事断开原来的指向，指向复制后的内存地址。 举个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;1, 1 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;2)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"comment\">//进行分离</span></span><br><span class=\"line\"><span class=\"variable\">$c</span>[] = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;array (0 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;1, 1 &#x3D;&gt; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;2)</p>\n<p>运行结果很明显，当变量c新插入了一个元素，对那么就没有在继续引用变量a，而是独立复制了一份。</p>\n<p><img src=\"/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png\"></p>\n<p>然而并不是所有的类型都是支持写时复制，比如对象、资源就无法进行复制，也就是无法进行分离，如果多个变量指向同一个对象，当其中一个变量修改对象的时候，其修改将会反应到所有对象上面。事实上只有string和array两种支持分离。 举个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$c</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">test</span>();</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$c</span>-&gt;c = <span class=\"number\">456</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>-&gt;c;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;class test { public $c &#x3D; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;123 } 456 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;class test { public $c &#x3D; (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;456 }</p>\n<p>同样，变量a实例化了一个新的对象，然后依次进行赋值给其他变量，使用xdebug_debug_zval的时候，打印出来了变量a的3次引用计数，然后对变量c进行赋值，咦？居然发现变量a的引用计数没有变化，所以object的类型是不支持写时复制的。</p>\n<p>支持复制的value类型：</p>\n<p>type</p>\n<p>copyable</p>\n<p>simple types</p>\n<p>N</p>\n<p>string</p>\n<p>Y</p>\n<p>interned string</p>\n<p>N</p>\n<p>array</p>\n<p>Y</p>\n<p>immutable array</p>\n<p>N</p>\n<p>object</p>\n<p>N</p>\n<p>resource</p>\n<p>N</p>\n<p>reference</p>\n<p>N</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p>《PHP7内核剖析》</p>\n"},{"title":"PHP7 拓展编写--在拓展中调用函数","id":"131","date":"2017-08-24T12:05:52.000Z","_content":"\nPHP中调用函数都比较简单，今天要实现如下效果的代码\n\n```php\n<?php\nclass demo {\n    public function get_site_name($prefix)\n    {\n        return $prefix . \"肥龙的博客\\n\";\n    }\n}\n\nfunction get_site_url($prefix)\n{\n    return $prefix . \"www.feilong.tech\\n\";\n}\n\nfunction call_function($obj, $fun, $param)\n{\n    if ($obj == null)\n    {\n        $result = $fun($param);\n    }\n    else\n    {\n        $result = $obj->$fun($param);\n    }\n    return $result;\n}\n$demo = new demo();\necho call_function($demo, \"get_site_name\", \"site name:\");\necho call_function(null, \"get_site_url\", \"site url:\");\n?>\n```\n<!-- more -->\n我们将要实现call\\_function的方法的功能\n\n#### 代码实现\n\n```cpp\nPHP_FUNCTION(call_function)\n{\n    zval            *obj = NULL;\n    zval             *fun = NULL;\n    zval             *param = NULL;\n    zval             retval;\n    zval             args[1];\n\n#ifndef FAST_ZPP\n    /* Get function parameters and do error-checking. */\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), \"zzz\", &obj, &fun, &param) == FAILURE) {\n        return;\n    }\n#else\n    ZEND_PARSE_PARAMETERS_START(3, 3)\n        Z_PARAM_ZVAL(obj)\n        Z_PARAM_ZVAL(fun)\n        Z_PARAM_ZVAL(param)\n    ZEND_PARSE_PARAMETERS_END();\n#endif\n\n    args[0] = *param;\n    if (obj == NULL  Z_TYPE_P(obj) == IS_NULL) {\n        call_user_function_ex(EG(function_table), NULL, fun, &retval, 1, args, 0, NULL);\n    } else {\n        call_user_function_ex(EG(function_table), obj, fun, &retval, 1, args, 0, NULL);\n    }\n    RETURN_ZVAL(&retval, 0, 1);\n}\n```\n\n#### 代码解读\n\n`zend_parse_parameters` 在PHP7中提供了两种获取参数的方法。`zend_parse_parameters`和`FAST ZPP`方式. 在PHP7之前一直使用zend\\_parse\\_parameters函数获取参数。这个函数的作用，就是把传入的参数转换为PHP内核中相应的类型，方便在PHP扩展中使用。 `zend_parse_parameters(ZEND_NUM_ARGS(), type_spec, &param1, &param2)` `ZEND_NUM_ARGS()`代表参数的个数， `type_spec`代表参数的类型：具体的类型如下\n\n参数\n\n对应数据类型\n\n之后的参数是可选。可以传，也可以不传\n\nb\n\nBoolean\n\nl\n\nlong\n\nd\n\ndouble\n\ns\n\nString 字符串\n\nr\n\nResource 资源\n\na\n\nArray 数组\n\no\n\nObject instance 对象\n\nO\n\nObject instance of a specified type 特定类型的对象\n\nz\n\nNon-specific zval 任意类型\n\nZ\n\nzval\\*\\*类型\n\n`fast zpp` 在PHP7中新提供的方式。是为了提高参数解析的性能。对应经常使用的方法，建议使用 `FAST ZPP` 方式。 使用方式： 以 `ZEND_PARSE_PARAMETERS_START(1, 2)` 开头。 第一个参数表示必传的参数个数，第二个参数表示最多传入的参数个数。 `以ZEND_PARSE_PARAMETERS_END();`结束。 中间是传入参数的解析。\n\n值得注意的是，一般FAST ZPP的宏方法与 `zend_parse_parameters` 的specifier是一一对应的。如： `Z_PARAM_OPTIONAL` 对应 `Z_PARAM_STR` 对应 `S` `Z_PARAM_ZVAL` 对应 `z` 但是，`Z_PARAM_ZVAL_EX`方法比较特殊。它对应两个specifier，分别是 ! 和 / 。! 对应宏方法的第二个参数。/ 对应宏方法的第三个参数。如果想开启，只要设置为1即可。\n\n`call_user_function_ex`\n\n`call_user_function_ex`方法用于调用函数和方法。参数说明如下：\n\n第一个参数：方法表。通常情况下，写 `EG(function_table)` 第二个参数：对象。如果不是调用对象的方法，而是调用函数，填写NULL 第三个参数：方法名。 第四个参数：返回值。 第五个参数：参数个数。 第六个参数：参数值。是一个zval数组。 第七个参数：参数是否进行分离操作。 第八个参数：符号表。一般情况写设置为NULL即可。","source":"_posts/php7-function.md","raw":"---\ntitle: PHP7 拓展编写--在拓展中调用函数\ntags: []\nid: '131'\ncategories:\n  - - PHP\ndate: 2017-08-24 20:05:52\n---\n\nPHP中调用函数都比较简单，今天要实现如下效果的代码\n\n```php\n<?php\nclass demo {\n    public function get_site_name($prefix)\n    {\n        return $prefix . \"肥龙的博客\\n\";\n    }\n}\n\nfunction get_site_url($prefix)\n{\n    return $prefix . \"www.feilong.tech\\n\";\n}\n\nfunction call_function($obj, $fun, $param)\n{\n    if ($obj == null)\n    {\n        $result = $fun($param);\n    }\n    else\n    {\n        $result = $obj->$fun($param);\n    }\n    return $result;\n}\n$demo = new demo();\necho call_function($demo, \"get_site_name\", \"site name:\");\necho call_function(null, \"get_site_url\", \"site url:\");\n?>\n```\n<!-- more -->\n我们将要实现call\\_function的方法的功能\n\n#### 代码实现\n\n```cpp\nPHP_FUNCTION(call_function)\n{\n    zval            *obj = NULL;\n    zval             *fun = NULL;\n    zval             *param = NULL;\n    zval             retval;\n    zval             args[1];\n\n#ifndef FAST_ZPP\n    /* Get function parameters and do error-checking. */\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), \"zzz\", &obj, &fun, &param) == FAILURE) {\n        return;\n    }\n#else\n    ZEND_PARSE_PARAMETERS_START(3, 3)\n        Z_PARAM_ZVAL(obj)\n        Z_PARAM_ZVAL(fun)\n        Z_PARAM_ZVAL(param)\n    ZEND_PARSE_PARAMETERS_END();\n#endif\n\n    args[0] = *param;\n    if (obj == NULL  Z_TYPE_P(obj) == IS_NULL) {\n        call_user_function_ex(EG(function_table), NULL, fun, &retval, 1, args, 0, NULL);\n    } else {\n        call_user_function_ex(EG(function_table), obj, fun, &retval, 1, args, 0, NULL);\n    }\n    RETURN_ZVAL(&retval, 0, 1);\n}\n```\n\n#### 代码解读\n\n`zend_parse_parameters` 在PHP7中提供了两种获取参数的方法。`zend_parse_parameters`和`FAST ZPP`方式. 在PHP7之前一直使用zend\\_parse\\_parameters函数获取参数。这个函数的作用，就是把传入的参数转换为PHP内核中相应的类型，方便在PHP扩展中使用。 `zend_parse_parameters(ZEND_NUM_ARGS(), type_spec, &param1, &param2)` `ZEND_NUM_ARGS()`代表参数的个数， `type_spec`代表参数的类型：具体的类型如下\n\n参数\n\n对应数据类型\n\n之后的参数是可选。可以传，也可以不传\n\nb\n\nBoolean\n\nl\n\nlong\n\nd\n\ndouble\n\ns\n\nString 字符串\n\nr\n\nResource 资源\n\na\n\nArray 数组\n\no\n\nObject instance 对象\n\nO\n\nObject instance of a specified type 特定类型的对象\n\nz\n\nNon-specific zval 任意类型\n\nZ\n\nzval\\*\\*类型\n\n`fast zpp` 在PHP7中新提供的方式。是为了提高参数解析的性能。对应经常使用的方法，建议使用 `FAST ZPP` 方式。 使用方式： 以 `ZEND_PARSE_PARAMETERS_START(1, 2)` 开头。 第一个参数表示必传的参数个数，第二个参数表示最多传入的参数个数。 `以ZEND_PARSE_PARAMETERS_END();`结束。 中间是传入参数的解析。\n\n值得注意的是，一般FAST ZPP的宏方法与 `zend_parse_parameters` 的specifier是一一对应的。如： `Z_PARAM_OPTIONAL` 对应 `Z_PARAM_STR` 对应 `S` `Z_PARAM_ZVAL` 对应 `z` 但是，`Z_PARAM_ZVAL_EX`方法比较特殊。它对应两个specifier，分别是 ! 和 / 。! 对应宏方法的第二个参数。/ 对应宏方法的第三个参数。如果想开启，只要设置为1即可。\n\n`call_user_function_ex`\n\n`call_user_function_ex`方法用于调用函数和方法。参数说明如下：\n\n第一个参数：方法表。通常情况下，写 `EG(function_table)` 第二个参数：对象。如果不是调用对象的方法，而是调用函数，填写NULL 第三个参数：方法名。 第四个参数：返回值。 第五个参数：参数个数。 第六个参数：参数值。是一个zval数组。 第七个参数：参数是否进行分离操作。 第八个参数：符号表。一般情况写设置为NULL即可。","slug":"php7-function","published":1,"updated":"2022-03-12T23:52:58.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mhv006k417tc32o05ml","content":"<p>PHP中调用函数都比较简单，今天要实现如下效果的代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_site_name</span>(<span class=\"params\"><span class=\"variable\">$prefix</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$prefix</span> . <span class=\"string\">&quot;肥龙的博客\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_site_url</span>(<span class=\"params\"><span class=\"variable\">$prefix</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$prefix</span> . <span class=\"string\">&quot;www.feilong.tech\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">call_function</span>(<span class=\"params\"><span class=\"variable\">$obj</span>, <span class=\"variable\">$fun</span>, <span class=\"variable\">$param</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$obj</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$fun</span>(<span class=\"variable\">$param</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$obj</span>-&gt;<span class=\"variable\">$fun</span>(<span class=\"variable\">$param</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$result</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$demo</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">demo</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">call_function</span>(<span class=\"variable\">$demo</span>, <span class=\"string\">&quot;get_site_name&quot;</span>, <span class=\"string\">&quot;site name:&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">call_function</span>(<span class=\"literal\">null</span>, <span class=\"string\">&quot;get_site_url&quot;</span>, <span class=\"string\">&quot;site url:&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>我们将要实现call_function的方法的功能</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_FUNCTION</span>(call_function)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zval            *obj = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    zval             *fun = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    zval             *param = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    zval             retval;</span><br><span class=\"line\">    zval             args[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FAST_ZPP</span></span><br><span class=\"line\">    <span class=\"comment\">/* Get function parameters and do error-checking. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">zend_parse_parameters</span>(<span class=\"built_in\">ZEND_NUM_ARGS</span>(), <span class=\"string\">&quot;zzz&quot;</span>, &amp;obj, &amp;fun, &amp;param) == FAILURE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"built_in\">ZEND_PARSE_PARAMETERS_START</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"built_in\">Z_PARAM_ZVAL</span>(obj)</span><br><span class=\"line\">        <span class=\"built_in\">Z_PARAM_ZVAL</span>(fun)</span><br><span class=\"line\">        <span class=\"built_in\">Z_PARAM_ZVAL</span>(param)</span><br><span class=\"line\">    <span class=\"built_in\">ZEND_PARSE_PARAMETERS_END</span>();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    args[<span class=\"number\">0</span>] = *param;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">NULL</span>  <span class=\"built_in\">Z_TYPE_P</span>(obj) == IS_NULL) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">call_user_function_ex</span>(<span class=\"built_in\">EG</span>(function_table), <span class=\"literal\">NULL</span>, fun, &amp;retval, <span class=\"number\">1</span>, args, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">call_user_function_ex</span>(<span class=\"built_in\">EG</span>(function_table), obj, fun, &amp;retval, <span class=\"number\">1</span>, args, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">RETURN_ZVAL</span>(&amp;retval, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码解读\"><a href=\"#代码解读\" class=\"headerlink\" title=\"代码解读\"></a>代码解读</h4><p><code>zend_parse_parameters</code> 在PHP7中提供了两种获取参数的方法。<code>zend_parse_parameters</code>和<code>FAST ZPP</code>方式. 在PHP7之前一直使用zend_parse_parameters函数获取参数。这个函数的作用，就是把传入的参数转换为PHP内核中相应的类型，方便在PHP扩展中使用。 <code>zend_parse_parameters(ZEND_NUM_ARGS(), type_spec, &amp;param1, &amp;param2)</code> <code>ZEND_NUM_ARGS()</code>代表参数的个数， <code>type_spec</code>代表参数的类型：具体的类型如下</p>\n<p>参数</p>\n<p>对应数据类型</p>\n<p>之后的参数是可选。可以传，也可以不传</p>\n<p>b</p>\n<p>Boolean</p>\n<p>l</p>\n<p>long</p>\n<p>d</p>\n<p>double</p>\n<p>s</p>\n<p>String 字符串</p>\n<p>r</p>\n<p>Resource 资源</p>\n<p>a</p>\n<p>Array 数组</p>\n<p>o</p>\n<p>Object instance 对象</p>\n<p>O</p>\n<p>Object instance of a specified type 特定类型的对象</p>\n<p>z</p>\n<p>Non-specific zval 任意类型</p>\n<p>Z</p>\n<p>zval**类型</p>\n<p><code>fast zpp</code> 在PHP7中新提供的方式。是为了提高参数解析的性能。对应经常使用的方法，建议使用 <code>FAST ZPP</code> 方式。 使用方式： 以 <code>ZEND_PARSE_PARAMETERS_START(1, 2)</code> 开头。 第一个参数表示必传的参数个数，第二个参数表示最多传入的参数个数。 <code>以ZEND_PARSE_PARAMETERS_END();</code>结束。 中间是传入参数的解析。</p>\n<p>值得注意的是，一般FAST ZPP的宏方法与 <code>zend_parse_parameters</code> 的specifier是一一对应的。如： <code>Z_PARAM_OPTIONAL</code> 对应 <code>Z_PARAM_STR</code> 对应 <code>S</code> <code>Z_PARAM_ZVAL</code> 对应 <code>z</code> 但是，<code>Z_PARAM_ZVAL_EX</code>方法比较特殊。它对应两个specifier，分别是 ! 和 &#x2F; 。! 对应宏方法的第二个参数。&#x2F; 对应宏方法的第三个参数。如果想开启，只要设置为1即可。</p>\n<p><code>call_user_function_ex</code></p>\n<p><code>call_user_function_ex</code>方法用于调用函数和方法。参数说明如下：</p>\n<p>第一个参数：方法表。通常情况下，写 <code>EG(function_table)</code> 第二个参数：对象。如果不是调用对象的方法，而是调用函数，填写NULL 第三个参数：方法名。 第四个参数：返回值。 第五个参数：参数个数。 第六个参数：参数值。是一个zval数组。 第七个参数：参数是否进行分离操作。 第八个参数：符号表。一般情况写设置为NULL即可。</p>\n","site":{"data":{}},"excerpt":"<p>PHP中调用函数都比较简单，今天要实现如下效果的代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_site_name</span>(<span class=\"params\"><span class=\"variable\">$prefix</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$prefix</span> . <span class=\"string\">&quot;肥龙的博客\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_site_url</span>(<span class=\"params\"><span class=\"variable\">$prefix</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$prefix</span> . <span class=\"string\">&quot;www.feilong.tech\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">call_function</span>(<span class=\"params\"><span class=\"variable\">$obj</span>, <span class=\"variable\">$fun</span>, <span class=\"variable\">$param</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$obj</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$fun</span>(<span class=\"variable\">$param</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$obj</span>-&gt;<span class=\"variable\">$fun</span>(<span class=\"variable\">$param</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$result</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$demo</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">demo</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">call_function</span>(<span class=\"variable\">$demo</span>, <span class=\"string\">&quot;get_site_name&quot;</span>, <span class=\"string\">&quot;site name:&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">call_function</span>(<span class=\"literal\">null</span>, <span class=\"string\">&quot;get_site_url&quot;</span>, <span class=\"string\">&quot;site url:&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>我们将要实现call_function的方法的功能</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PHP_FUNCTION</span>(call_function)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zval            *obj = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    zval             *fun = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    zval             *param = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    zval             retval;</span><br><span class=\"line\">    zval             args[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FAST_ZPP</span></span><br><span class=\"line\">    <span class=\"comment\">/* Get function parameters and do error-checking. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">zend_parse_parameters</span>(<span class=\"built_in\">ZEND_NUM_ARGS</span>(), <span class=\"string\">&quot;zzz&quot;</span>, &amp;obj, &amp;fun, &amp;param) == FAILURE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"built_in\">ZEND_PARSE_PARAMETERS_START</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"built_in\">Z_PARAM_ZVAL</span>(obj)</span><br><span class=\"line\">        <span class=\"built_in\">Z_PARAM_ZVAL</span>(fun)</span><br><span class=\"line\">        <span class=\"built_in\">Z_PARAM_ZVAL</span>(param)</span><br><span class=\"line\">    <span class=\"built_in\">ZEND_PARSE_PARAMETERS_END</span>();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    args[<span class=\"number\">0</span>] = *param;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">NULL</span>  <span class=\"built_in\">Z_TYPE_P</span>(obj) == IS_NULL) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">call_user_function_ex</span>(<span class=\"built_in\">EG</span>(function_table), <span class=\"literal\">NULL</span>, fun, &amp;retval, <span class=\"number\">1</span>, args, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">call_user_function_ex</span>(<span class=\"built_in\">EG</span>(function_table), obj, fun, &amp;retval, <span class=\"number\">1</span>, args, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">RETURN_ZVAL</span>(&amp;retval, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码解读\"><a href=\"#代码解读\" class=\"headerlink\" title=\"代码解读\"></a>代码解读</h4><p><code>zend_parse_parameters</code> 在PHP7中提供了两种获取参数的方法。<code>zend_parse_parameters</code>和<code>FAST ZPP</code>方式. 在PHP7之前一直使用zend_parse_parameters函数获取参数。这个函数的作用，就是把传入的参数转换为PHP内核中相应的类型，方便在PHP扩展中使用。 <code>zend_parse_parameters(ZEND_NUM_ARGS(), type_spec, &amp;param1, &amp;param2)</code> <code>ZEND_NUM_ARGS()</code>代表参数的个数， <code>type_spec</code>代表参数的类型：具体的类型如下</p>\n<p>参数</p>\n<p>对应数据类型</p>\n<p>之后的参数是可选。可以传，也可以不传</p>\n<p>b</p>\n<p>Boolean</p>\n<p>l</p>\n<p>long</p>\n<p>d</p>\n<p>double</p>\n<p>s</p>\n<p>String 字符串</p>\n<p>r</p>\n<p>Resource 资源</p>\n<p>a</p>\n<p>Array 数组</p>\n<p>o</p>\n<p>Object instance 对象</p>\n<p>O</p>\n<p>Object instance of a specified type 特定类型的对象</p>\n<p>z</p>\n<p>Non-specific zval 任意类型</p>\n<p>Z</p>\n<p>zval**类型</p>\n<p><code>fast zpp</code> 在PHP7中新提供的方式。是为了提高参数解析的性能。对应经常使用的方法，建议使用 <code>FAST ZPP</code> 方式。 使用方式： 以 <code>ZEND_PARSE_PARAMETERS_START(1, 2)</code> 开头。 第一个参数表示必传的参数个数，第二个参数表示最多传入的参数个数。 <code>以ZEND_PARSE_PARAMETERS_END();</code>结束。 中间是传入参数的解析。</p>\n<p>值得注意的是，一般FAST ZPP的宏方法与 <code>zend_parse_parameters</code> 的specifier是一一对应的。如： <code>Z_PARAM_OPTIONAL</code> 对应 <code>Z_PARAM_STR</code> 对应 <code>S</code> <code>Z_PARAM_ZVAL</code> 对应 <code>z</code> 但是，<code>Z_PARAM_ZVAL_EX</code>方法比较特殊。它对应两个specifier，分别是 ! 和 &#x2F; 。! 对应宏方法的第二个参数。&#x2F; 对应宏方法的第三个参数。如果想开启，只要设置为1即可。</p>\n<p><code>call_user_function_ex</code></p>\n<p><code>call_user_function_ex</code>方法用于调用函数和方法。参数说明如下：</p>\n<p>第一个参数：方法表。通常情况下，写 <code>EG(function_table)</code> 第二个参数：对象。如果不是调用对象的方法，而是调用函数，填写NULL 第三个参数：方法名。 第四个参数：返回值。 第五个参数：参数个数。 第六个参数：参数值。是一个zval数组。 第七个参数：参数是否进行分离操作。 第八个参数：符号表。一般情况写设置为NULL即可。</p>"},{"title":"PHP7内存管理之垃圾回收","id":"205","comments":0,"date":"2018-02-21T10:54:26.000Z","_content":"\n#### 回收过程\n\n在自动GC机制中，在zval断开value指向的时候如果发现refcount=0的时候，则会直接释放value，这就是自动回收GC的过程。发生断开的两种情况为修改变量与函数返回的时候，修改变量的时候，会断开原有的value指向，函数返回的时候，则会释放局部变量，也就是把所有局部变量的refcount计数-1。 此外，当使用unset函数的时候，也会主动销毁这个变量。\n\n#### 垃圾回收\n\n虽然有了自动GC机制，但是有一种情况是没办法解决的，那就是因为变量因为循环引用而无法回收造成的内存泄露，这种情况通常是循环引用。简单来讲，循环引用就是引用自身，这种情况一般只会发生在数组或者对象的身上。比如定义了`$a = array()` ，插入一个新元素，这个元素对数组自身进行引用`$a[] = &$a`，当所有的外部引用都断开了，但是数据的refcount仍然大于0而得不到释放，但是事实上，这个变量没有在使用的价值了。\n\n```php\n<?php\n$a = array();\n$a[] = &$a;\nunset($a);\n?>\n```\n\n在unset之前，变量a是有两次引用的，一个来自$a，一个来自$a\\[1\\]\n\n![](/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png)\n\nunset($a)之后，减少了一次引用的recount，这个时候，已经没有了外部的引用，但是还有一个内部还有一个元素指向该引用。\n\n![](/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png)\n\n像这种因为循环指向没办法释放的变量称之为垃圾。PHP引入了另外的一种机制来进行垃圾回收。\n\n*   如果一个变量的value的refcount减少到0，说明这个value可以释放，那么这就不属于垃圾\n*   如果一个变量的value减少之后大于0，那么这个value还不能被释放，那么这个value就是垃圾。 所以，判断一个变量是不是垃圾，要看value的refcount是否减少到了0。\n\n目前垃圾回收只会出现在array和object两种类型中，当一个value被视为垃圾的时候，PHP会将这个value收集起来，等到打到了规定的数量，启动垃圾回收机制，进行统一的释放。\n\n#### 回收的时机\n\n前面说了，PHP垃圾回收并不是产生一个垃圾value，就进行释放，而是把value收集起来统一释放，以为value的分析和释放，也是有性能消耗的。 在php.ini中，`zend.enable_gc`用来设置是否启动垃圾回收机制。绝大多数都是默认开启的，因为每个都有可能在写程序的时候，出现内存垃圾，如果把这个配置关闭了，那么就有可能造成所谓的垃圾泄露。 除了`zend.enable_gc`以为，还会配合`zend/zend_gc.c`里面的变量`GC_ROOT_BUFFER_MAX_ENTRIES`实现垃圾回收，默认`GC_ROOT_BUFFER_MAX_ENTRIES`的值是10001，GC\\_ROOT\\_BUFFER\\_MAX\\_ENTRIES\\[0\\]是用来保存一些header的数据，GC\\_ROOT\\_BUFFER\\_MAX\\_ENTRIES\\[1\\]~GC\\_ROOT\\_BUFFER\\_MAX\\_ENTRIES\\[10000\\]用来收集垃圾的数据。如果你想强制执行垃圾回收，也可使用函数[gc\\_collect\\_cycles()](http://php.net/manual/zh/function.gc-collect-cycles.php)实现。\n\n#### 参考文献\n\n*   PHP7内核剖析\n*   PHP手册","source":"_posts/php7-gc.md","raw":"---\ntitle: PHP7内存管理之垃圾回收\ntags:\n  - PHP7垃圾回收\n  - PHP源码\nid: '205'\ncategories:\n  - - PHP源码\ncomments: false\ndate: 2018-02-21 18:54:26\n---\n\n#### 回收过程\n\n在自动GC机制中，在zval断开value指向的时候如果发现refcount=0的时候，则会直接释放value，这就是自动回收GC的过程。发生断开的两种情况为修改变量与函数返回的时候，修改变量的时候，会断开原有的value指向，函数返回的时候，则会释放局部变量，也就是把所有局部变量的refcount计数-1。 此外，当使用unset函数的时候，也会主动销毁这个变量。\n\n#### 垃圾回收\n\n虽然有了自动GC机制，但是有一种情况是没办法解决的，那就是因为变量因为循环引用而无法回收造成的内存泄露，这种情况通常是循环引用。简单来讲，循环引用就是引用自身，这种情况一般只会发生在数组或者对象的身上。比如定义了`$a = array()` ，插入一个新元素，这个元素对数组自身进行引用`$a[] = &$a`，当所有的外部引用都断开了，但是数据的refcount仍然大于0而得不到释放，但是事实上，这个变量没有在使用的价值了。\n\n```php\n<?php\n$a = array();\n$a[] = &$a;\nunset($a);\n?>\n```\n\n在unset之前，变量a是有两次引用的，一个来自$a，一个来自$a\\[1\\]\n\n![](/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png)\n\nunset($a)之后，减少了一次引用的recount，这个时候，已经没有了外部的引用，但是还有一个内部还有一个元素指向该引用。\n\n![](/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png)\n\n像这种因为循环指向没办法释放的变量称之为垃圾。PHP引入了另外的一种机制来进行垃圾回收。\n\n*   如果一个变量的value的refcount减少到0，说明这个value可以释放，那么这就不属于垃圾\n*   如果一个变量的value减少之后大于0，那么这个value还不能被释放，那么这个value就是垃圾。 所以，判断一个变量是不是垃圾，要看value的refcount是否减少到了0。\n\n目前垃圾回收只会出现在array和object两种类型中，当一个value被视为垃圾的时候，PHP会将这个value收集起来，等到打到了规定的数量，启动垃圾回收机制，进行统一的释放。\n\n#### 回收的时机\n\n前面说了，PHP垃圾回收并不是产生一个垃圾value，就进行释放，而是把value收集起来统一释放，以为value的分析和释放，也是有性能消耗的。 在php.ini中，`zend.enable_gc`用来设置是否启动垃圾回收机制。绝大多数都是默认开启的，因为每个都有可能在写程序的时候，出现内存垃圾，如果把这个配置关闭了，那么就有可能造成所谓的垃圾泄露。 除了`zend.enable_gc`以为，还会配合`zend/zend_gc.c`里面的变量`GC_ROOT_BUFFER_MAX_ENTRIES`实现垃圾回收，默认`GC_ROOT_BUFFER_MAX_ENTRIES`的值是10001，GC\\_ROOT\\_BUFFER\\_MAX\\_ENTRIES\\[0\\]是用来保存一些header的数据，GC\\_ROOT\\_BUFFER\\_MAX\\_ENTRIES\\[1\\]~GC\\_ROOT\\_BUFFER\\_MAX\\_ENTRIES\\[10000\\]用来收集垃圾的数据。如果你想强制执行垃圾回收，也可使用函数[gc\\_collect\\_cycles()](http://php.net/manual/zh/function.gc-collect-cycles.php)实现。\n\n#### 参考文献\n\n*   PHP7内核剖析\n*   PHP手册","slug":"php7-gc","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mhw006o417tcynu9n5p","layout":"post","photos":[],"link":"","content":"<h4 id=\"回收过程\"><a href=\"#回收过程\" class=\"headerlink\" title=\"回收过程\"></a>回收过程</h4><p>在自动GC机制中，在zval断开value指向的时候如果发现refcount&#x3D;0的时候，则会直接释放value，这就是自动回收GC的过程。发生断开的两种情况为修改变量与函数返回的时候，修改变量的时候，会断开原有的value指向，函数返回的时候，则会释放局部变量，也就是把所有局部变量的refcount计数-1。 此外，当使用unset函数的时候，也会主动销毁这个变量。</p>\n<h4 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h4><p>虽然有了自动GC机制，但是有一种情况是没办法解决的，那就是因为变量因为循环引用而无法回收造成的内存泄露，这种情况通常是循环引用。简单来讲，循环引用就是引用自身，这种情况一般只会发生在数组或者对象的身上。比如定义了<code>$a = array()</code> ，插入一个新元素，这个元素对数组自身进行引用<code>$a[] = &amp;$a</code>，当所有的外部引用都断开了，但是数据的refcount仍然大于0而得不到释放，但是事实上，这个变量没有在使用的价值了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"><span class=\"variable\">$a</span>[] = &amp;<span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"keyword\">unset</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在unset之前，变量a是有两次引用的，一个来自$a，一个来自$a[1]</p>\n<p><img src=\"/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png\"></p>\n<p>unset($a)之后，减少了一次引用的recount，这个时候，已经没有了外部的引用，但是还有一个内部还有一个元素指向该引用。</p>\n<p><img src=\"/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png\"></p>\n<p>像这种因为循环指向没办法释放的变量称之为垃圾。PHP引入了另外的一种机制来进行垃圾回收。</p>\n<ul>\n<li>如果一个变量的value的refcount减少到0，说明这个value可以释放，那么这就不属于垃圾</li>\n<li>如果一个变量的value减少之后大于0，那么这个value还不能被释放，那么这个value就是垃圾。 所以，判断一个变量是不是垃圾，要看value的refcount是否减少到了0。</li>\n</ul>\n<p>目前垃圾回收只会出现在array和object两种类型中，当一个value被视为垃圾的时候，PHP会将这个value收集起来，等到打到了规定的数量，启动垃圾回收机制，进行统一的释放。</p>\n<h4 id=\"回收的时机\"><a href=\"#回收的时机\" class=\"headerlink\" title=\"回收的时机\"></a>回收的时机</h4><p>前面说了，PHP垃圾回收并不是产生一个垃圾value，就进行释放，而是把value收集起来统一释放，以为value的分析和释放，也是有性能消耗的。 在php.ini中，<code>zend.enable_gc</code>用来设置是否启动垃圾回收机制。绝大多数都是默认开启的，因为每个都有可能在写程序的时候，出现内存垃圾，如果把这个配置关闭了，那么就有可能造成所谓的垃圾泄露。 除了<code>zend.enable_gc</code>以为，还会配合<code>zend/zend_gc.c</code>里面的变量<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>实现垃圾回收，默认<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>的值是10001，GC_ROOT_BUFFER_MAX_ENTRIES[0]是用来保存一些header的数据，GC_ROOT_BUFFER_MAX_ENTRIES[1]~GC_ROOT_BUFFER_MAX_ENTRIES[10000]用来收集垃圾的数据。如果你想强制执行垃圾回收，也可使用函数<a href=\"http://php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a>实现。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li>PHP7内核剖析</li>\n<li>PHP手册</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"回收过程\"><a href=\"#回收过程\" class=\"headerlink\" title=\"回收过程\"></a>回收过程</h4><p>在自动GC机制中，在zval断开value指向的时候如果发现refcount&#x3D;0的时候，则会直接释放value，这就是自动回收GC的过程。发生断开的两种情况为修改变量与函数返回的时候，修改变量的时候，会断开原有的value指向，函数返回的时候，则会释放局部变量，也就是把所有局部变量的refcount计数-1。 此外，当使用unset函数的时候，也会主动销毁这个变量。</p>\n<h4 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h4><p>虽然有了自动GC机制，但是有一种情况是没办法解决的，那就是因为变量因为循环引用而无法回收造成的内存泄露，这种情况通常是循环引用。简单来讲，循环引用就是引用自身，这种情况一般只会发生在数组或者对象的身上。比如定义了<code>$a = array()</code> ，插入一个新元素，这个元素对数组自身进行引用<code>$a[] = &amp;$a</code>，当所有的外部引用都断开了，但是数据的refcount仍然大于0而得不到释放，但是事实上，这个变量没有在使用的价值了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"><span class=\"variable\">$a</span>[] = &amp;<span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"keyword\">unset</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在unset之前，变量a是有两次引用的，一个来自$a，一个来自$a[1]</p>\n<p><img src=\"/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png\"></p>\n<p>unset($a)之后，减少了一次引用的recount，这个时候，已经没有了外部的引用，但是还有一个内部还有一个元素指向该引用。</p>\n<p><img src=\"/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png\"></p>\n<p>像这种因为循环指向没办法释放的变量称之为垃圾。PHP引入了另外的一种机制来进行垃圾回收。</p>\n<ul>\n<li>如果一个变量的value的refcount减少到0，说明这个value可以释放，那么这就不属于垃圾</li>\n<li>如果一个变量的value减少之后大于0，那么这个value还不能被释放，那么这个value就是垃圾。 所以，判断一个变量是不是垃圾，要看value的refcount是否减少到了0。</li>\n</ul>\n<p>目前垃圾回收只会出现在array和object两种类型中，当一个value被视为垃圾的时候，PHP会将这个value收集起来，等到打到了规定的数量，启动垃圾回收机制，进行统一的释放。</p>\n<h4 id=\"回收的时机\"><a href=\"#回收的时机\" class=\"headerlink\" title=\"回收的时机\"></a>回收的时机</h4><p>前面说了，PHP垃圾回收并不是产生一个垃圾value，就进行释放，而是把value收集起来统一释放，以为value的分析和释放，也是有性能消耗的。 在php.ini中，<code>zend.enable_gc</code>用来设置是否启动垃圾回收机制。绝大多数都是默认开启的，因为每个都有可能在写程序的时候，出现内存垃圾，如果把这个配置关闭了，那么就有可能造成所谓的垃圾泄露。 除了<code>zend.enable_gc</code>以为，还会配合<code>zend/zend_gc.c</code>里面的变量<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>实现垃圾回收，默认<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>的值是10001，GC_ROOT_BUFFER_MAX_ENTRIES[0]是用来保存一些header的数据，GC_ROOT_BUFFER_MAX_ENTRIES[1]~GC_ROOT_BUFFER_MAX_ENTRIES[10000]用来收集垃圾的数据。如果你想强制执行垃圾回收，也可使用函数<a href=\"http://php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a>实现。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li>PHP7内核剖析</li>\n<li>PHP手册</li>\n</ul>\n"},{"title":"PHP源码分析之cli模式执行的过程","id":"180","comments":0,"date":"2017-09-26T12:50:15.000Z","_content":"\n众所周知，PHP在web上应用很广泛。接近80%的web网站都是使用PHP+MySQL，虽然越来越多的新语种崛起，但是现在PHP依然是中小型web系统的首选。PHP除了在web上有很多应用，也经常被用作脚本工具，虽然没有原生shell效率高，但是起点比较低。今天就和大家分享下PHP cli模式的执行过程。\n<!-- more -->\n#### 前期准备\n\n```\nPHP的版本：5.3\n代码查看工具：VSCODE 或者sublime text\n```\n\n#### 一切从SAPI开始\n\n`SAPI`是`Server Application Programming Interface`的缩写，翻译过来就是服务应用程序接口，可以理解称是一种接口的规范，只要是符合规范的语言，都是可以通过SAPI和服务器进行数据交互。\n\n通常，在web模式下，PHP通常都是运行在Apache或者nginx这类web服务器上面，程序执行结束后，将结果显示在浏览器上面。其实命令行和web执行过程是稍微有点不同的。命令行是将参数传给PHP的解释器，然后把运行结果显示在窗口上面。有兴趣的可以阅读下[深入PHP内核：用户代码的执行](http://www.php-internals.com/book/?p=chapt02/02-01-php-life-cycle-and-zend-engine) 了解一下PHP的生命周期。\n\nPHP的cli模式最开始是随着PHP 4.2.0的版本发布的，但是当时只是一个实验版本，并且需要使用`./configure --enable-cli`参数才会进行安装。直到PHP 4.3.0之后，才把cli模式当成正式的模块，`--enable-cli` 参数会被默认得设置为 on，也可以用参数 `--disable-cli` 来屏蔽。\n\n#### 入口的位置\n\n当我们忘记一个命令的option的时候，我们通常会使用`-h/--help`来查看帮助\n\n```bash\n    [root@root ~]$ php -h\n    Usage: php [options] [-f] <file> [--] [args...]\n       php [options] -r <code> [--] [args...]\n       php [options] [-B <begin_code>] -R <code> [-E <end_code>] [--] [args...]\n       php [options] [-B <begin_code>] -F <file> [-E <end_code>] [--] [args...]\n       php [options] -- [args...]\n       php [options] -a\n\n      -a               Run as interactive shell\n      -c <path><file> Look for php.ini file in this directory\n      -n               No php.ini file will be used\n      -d foo[=bar]     Define INI entry foo with value 'bar'\n      -e               Generate extended information for debugger/profiler\n      -f <file>        Parse and execute <file>.\n      -h               This help\n      -i               PHP information\n      -l               Syntax check only (lint)\n      -m               Show compiled in modules\n      -r <code>        Run PHP <code> without using script tags <?..?>\n      -B <begin_code>  Run PHP <begin_code> before processing input lines\n      -R <code>        Run PHP <code> for every input line\n      -F <file>        Parse and execute <file> for every input line\n      -E <end_code>    Run PHP <end_code> after processing all input lines\n      -H               Hide any passed arguments from external tools.\n      -s               Output HTML syntax highlighted source.\n      -v               Version number\n      -w               Output source with stripped comments and whitespace.\n      -z <file>        Load Zend extension <file>.\n\n      args...          Arguments passed to script. Use -- args when first argument\n                       starts with - or script is read from stdin\n\n      --ini            Show configuration file names\n\n      --rf <name>      Show information about function <name>.\n      --rc <name>      Show information about class <name>.\n      --re <name>      Show information about extension <name>.\n      --ri <name>      Show configuration for extension <name>.\n```\n\n以上就是PHP的命令已经一些参数。 在`/sapi/cli/php_cli.c`文件里面有个`main`方法，可以说这个方法就是程序的入口位置了。\n\n#### 运行的流程\n\n从代码可以看得出来，这个过程大概可以分为：\n\n*   参数的处理\n*   cli\\_sapi\\_module的初始化\n*   cli\\_sapi\\_module的启动(starup)\n*   函数的执行\n*   垃圾回收\n*   输出信息\n\n##### 参数的处理\n\nPHP的命令可以接受一系列的参数，比如常见的`php -i`或者`php -m`等等，传递给全局变量`$argv` ，该数组中下标为零的成员为脚本的名称（当 PHP 代码来自标准输入获直接用 -r 参数以命令行方式运行时，该名称为\"-\"）。另外，全局变量 \\\\$argc 存有 \\\\$argv 数组中成员变量的个数（而非传送给脚本程序的参数的个数）。\n\n对于参数的解析，可以查看下PHP的源码 `/sapi/cli/php_cli.c` 大概725行左右\n\n```cpp\n    .....\n    while ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2))!=-1) { //对参数进行解析\n        switch (c) {\n            case 'c':\n                if (cli_sapi_module.php_ini_path_override) {\n                    free(cli_sapi_module.php_ini_path_override);\n                }\n    .....\n```\n\n完整的解析方法就是`php_getopt`，在`/main/getopt.c` 的第58行左右，在php\\_getopt方法里面，通过对 '-' 或者 '--' 的处理，获取具体的参数，然后返回。\n\n```cpp\nPHPAPI int php_getopt(int argc, char* const *argv, const opt_struct opts[], char **optarg, int *optind, int show_err, int arg_start) \n```\n\n##### cli\\_sapi\\_module的初始化\n\n其实cli\\_sapi\\_module的初始化和参数的处理两个过程的先后并不是很明显，因为在参数处理之前，也有一些简单的初始化操作，比如对cli模式下的PHP配置文件的初始化，因为在使用cli命令的时候是需要一些初始化的值才行。\n\n```cpp\n    cli_sapi_module.ini_defaults = sapi_cli_ini_defaults;\n    cli_sapi_module.php_ini_path_override = NULL;\n    cli_sapi_module.phpinfo_as_text = 1;\n    sapi_startup(&cli_sapi_module);\n```\n\n我之所以放到后面，是因为大部分的成员变量初始化都是在参数处理之后的。\n\ncli\\_sapi\\_module是一个静态全局变量，数据结构比较容易理解\n\n```cpp\nstatic sapi_module_struct cli_sapi_module = {\n    \"cli\",                            /* name */\n    \"Command Line Interface\",     /* pretty name */\n\n    php_cli_startup,                /* startup */\n    php_module_shutdown_wrapper,    /* shutdown */\n\n    NULL,                           /* activate */\n    sapi_cli_deactivate,            /* deactivate */\n\n    sapi_cli_ub_write,              /* unbuffered write */\n    sapi_cli_flush,                 /* flush */\n    NULL,                           /* get uid */\n    NULL,                           /* getenv */\n    .....\n```\n\n**其实伴随着cli\\_sapi\\_module初始化，PHP也会对模块进行启动的操作**\n\n```cpp\nstatic int php_cli_startup(sapi_module_struct *sapi_module) /* {{{ */\n{\n    if (php_module_startup(sapi_module, NULL, 0)==FAILURE) {\n        return FAILURE;\n    }\n    return SUCCESS;\n}\n```\n\n##### cli\\_sapi\\_module启动(startup)\n\n启动的过程比较简单明白，如果启动失败的话，那就goto错误信息处理阶段，在控制台输出错误信息\n\n```cpp\n    /* startup after we get the above ini override se we get things right */\n    if (cli_sapi_module.startup(&cli_sapi_module)==FAILURE) {\n        /* there is no way to see if we must call zend_ini_deactivate()\n         * since we cannot check if EG(ini_directives) has been initialised\n         * because the executor's constructor does not set initialize it.\n         * Apart from that there seems no need for zend_ini_deactivate() yet.\n         * So we goto out_err.*/\n        exit_status = 1;\n        goto out_err;\n    }\n```\n\n##### 函数的执行\n\n启动结束后，PHP会根据参数不同，调用不同的函数，比如当用户输入`php -i`的时候，那么就打印出PHP的info信息；输入`php -m`的时候打印出已经安装的模块...\n\n```cpp\nwhile ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2)) != -1) {\n    switch (c) {\n        ......              \n        case 'i': /* php info & quit */\n            if (php_request_startup(TSRMLS_C)==FAILURE) { ## 请求初始化操作\n                goto err;\n            }\n            request_started = 1;\n            php_print_info(0xFFFFFFFF TSRMLS_CC);\n            php_end_ob_buffers(1 TSRMLS_CC);\n            exit_status=0;\n            goto out;\n        case 'm': /* list compiled in modules */\n            if (php_request_startup(TSRMLS_C)==FAILURE) {\n                goto err;\n            }\n            request_started = 1;\n            php_printf(\"[PHP Modules]\\n\");\n            print_modules(TSRMLS_C);\n            php_printf(\"\\n[Zend Modules]\\n\");\n            print_extensions(TSRMLS_C);\n            php_printf(\"\\n\");\n            php_end_ob_buffers(1 TSRMLS_CC);\n            exit_status=0;\n            goto out;\n        case 'v': /* show php version & quit */\n            if (php_request_startup(TSRMLS_C) == FAILURE) {\n                goto err;\n            }\n            request_started = 1;\n            php_printf(\"PHP %s (%s) (built: %s %s) %s\\nCopyright (c) 1997-2010 The PHP Group\\n%s\",\n            PHP_VERSION, sapi_module.name, __DATE__, __TIME__,\n            ....\n```\n\n此外，根据对参数的switch的case的比较，确定behavior （解释器行为）根据解释器行为，然后根据不同的behavior 做出想用的动作。\n\n```cpp\n...\ncase PHP_MODE_LINT:\n    exit_status = php_lint_script(&file_handle TSRMLS_CC);\n    if (exit_status==SUCCESS) {\n        zend_printf(\"No syntax errors detected in %s\\n\", file_handle.filename);\n    } else {\n        zend_printf(\"Errors parsing %s\\n\", file_handle.filename);\n    }\n    break;\ncase PHP_MODE_STRIP:\n    if (open_file_for_scanning(&file_handle TSRMLS_CC)==SUCCESS) {\n        zend_strip(TSRMLS_C);\n    }\n    goto out;\n    break;\n....\n```\n\n伴随着不同的解释器行为，进行请求的处理\n\n```cpp\n    if (php_request_startup(TSRMLS_C)==FAILURE) {\n        *arg_excp = arg_free;\n        fclose(file_handle.handle.fp);\n        PUTS(\"Could not startup.\\n\");\n        goto err;\n    }\n```\n\n##### 垃圾回收\n\n在代码的执行过程中，PHP会通过全局函数`CG()`或者函数`free()`将内存和数据进行释放，进行垃圾的回收。\n\n##### 输出信息\n\n运行的最后应该就是对信息的输出和对SAPI的关闭。这部分其实和web请求类似，输出（错误信息）之后，PHP会通过`php_request_shutdown`，`php_module_shutdown`和`sapi_shutdown`等对相应的请求、模块和SAPI等进行关闭。**但是和web请求不一样的是，每次结束cli模式的时候都是会对模块进行关闭(`php_module_shutdown`)，但是web模式缺不是，web模式在PHP启动和关闭的时候才会知心模块的初始化以及关闭，并是不每处理完一个请求就开启/关闭一次。**\n\n#### 总结\n\ncli模式和web模式其实大同小异，整个PHP的生命周期基本一致：开始->模块初始化->请求初始化->执行PHP脚本->关闭请求->关闭模块。但是最大的不同是因为是否重复的启动，因为在web模式下，往往是连续的请求，也就是通常用户经常做页面的跳转，如果重复的启动也关闭模块，势必会造成性能上的差异。但是cli模式往往都是单次的请求，是不连续的。\n\n#### 文献参考\n\n[深入理解PHP的内核](http://www.php-internals.com)\n\n[PHP的命令行模式](http://www.php100.com/manual/php/features.commandline.html)","source":"_posts/phpsource-cli.md","raw":"---\ntitle: PHP源码分析之cli模式执行的过程\ntags:\n  - PHP源码\nid: '180'\ncategories:\n  - - PHP\n  - - PHP源码\ncomments: false\ndate: 2017-09-26 20:50:15\n---\n\n众所周知，PHP在web上应用很广泛。接近80%的web网站都是使用PHP+MySQL，虽然越来越多的新语种崛起，但是现在PHP依然是中小型web系统的首选。PHP除了在web上有很多应用，也经常被用作脚本工具，虽然没有原生shell效率高，但是起点比较低。今天就和大家分享下PHP cli模式的执行过程。\n<!-- more -->\n#### 前期准备\n\n```\nPHP的版本：5.3\n代码查看工具：VSCODE 或者sublime text\n```\n\n#### 一切从SAPI开始\n\n`SAPI`是`Server Application Programming Interface`的缩写，翻译过来就是服务应用程序接口，可以理解称是一种接口的规范，只要是符合规范的语言，都是可以通过SAPI和服务器进行数据交互。\n\n通常，在web模式下，PHP通常都是运行在Apache或者nginx这类web服务器上面，程序执行结束后，将结果显示在浏览器上面。其实命令行和web执行过程是稍微有点不同的。命令行是将参数传给PHP的解释器，然后把运行结果显示在窗口上面。有兴趣的可以阅读下[深入PHP内核：用户代码的执行](http://www.php-internals.com/book/?p=chapt02/02-01-php-life-cycle-and-zend-engine) 了解一下PHP的生命周期。\n\nPHP的cli模式最开始是随着PHP 4.2.0的版本发布的，但是当时只是一个实验版本，并且需要使用`./configure --enable-cli`参数才会进行安装。直到PHP 4.3.0之后，才把cli模式当成正式的模块，`--enable-cli` 参数会被默认得设置为 on，也可以用参数 `--disable-cli` 来屏蔽。\n\n#### 入口的位置\n\n当我们忘记一个命令的option的时候，我们通常会使用`-h/--help`来查看帮助\n\n```bash\n    [root@root ~]$ php -h\n    Usage: php [options] [-f] <file> [--] [args...]\n       php [options] -r <code> [--] [args...]\n       php [options] [-B <begin_code>] -R <code> [-E <end_code>] [--] [args...]\n       php [options] [-B <begin_code>] -F <file> [-E <end_code>] [--] [args...]\n       php [options] -- [args...]\n       php [options] -a\n\n      -a               Run as interactive shell\n      -c <path><file> Look for php.ini file in this directory\n      -n               No php.ini file will be used\n      -d foo[=bar]     Define INI entry foo with value 'bar'\n      -e               Generate extended information for debugger/profiler\n      -f <file>        Parse and execute <file>.\n      -h               This help\n      -i               PHP information\n      -l               Syntax check only (lint)\n      -m               Show compiled in modules\n      -r <code>        Run PHP <code> without using script tags <?..?>\n      -B <begin_code>  Run PHP <begin_code> before processing input lines\n      -R <code>        Run PHP <code> for every input line\n      -F <file>        Parse and execute <file> for every input line\n      -E <end_code>    Run PHP <end_code> after processing all input lines\n      -H               Hide any passed arguments from external tools.\n      -s               Output HTML syntax highlighted source.\n      -v               Version number\n      -w               Output source with stripped comments and whitespace.\n      -z <file>        Load Zend extension <file>.\n\n      args...          Arguments passed to script. Use -- args when first argument\n                       starts with - or script is read from stdin\n\n      --ini            Show configuration file names\n\n      --rf <name>      Show information about function <name>.\n      --rc <name>      Show information about class <name>.\n      --re <name>      Show information about extension <name>.\n      --ri <name>      Show configuration for extension <name>.\n```\n\n以上就是PHP的命令已经一些参数。 在`/sapi/cli/php_cli.c`文件里面有个`main`方法，可以说这个方法就是程序的入口位置了。\n\n#### 运行的流程\n\n从代码可以看得出来，这个过程大概可以分为：\n\n*   参数的处理\n*   cli\\_sapi\\_module的初始化\n*   cli\\_sapi\\_module的启动(starup)\n*   函数的执行\n*   垃圾回收\n*   输出信息\n\n##### 参数的处理\n\nPHP的命令可以接受一系列的参数，比如常见的`php -i`或者`php -m`等等，传递给全局变量`$argv` ，该数组中下标为零的成员为脚本的名称（当 PHP 代码来自标准输入获直接用 -r 参数以命令行方式运行时，该名称为\"-\"）。另外，全局变量 \\\\$argc 存有 \\\\$argv 数组中成员变量的个数（而非传送给脚本程序的参数的个数）。\n\n对于参数的解析，可以查看下PHP的源码 `/sapi/cli/php_cli.c` 大概725行左右\n\n```cpp\n    .....\n    while ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2))!=-1) { //对参数进行解析\n        switch (c) {\n            case 'c':\n                if (cli_sapi_module.php_ini_path_override) {\n                    free(cli_sapi_module.php_ini_path_override);\n                }\n    .....\n```\n\n完整的解析方法就是`php_getopt`，在`/main/getopt.c` 的第58行左右，在php\\_getopt方法里面，通过对 '-' 或者 '--' 的处理，获取具体的参数，然后返回。\n\n```cpp\nPHPAPI int php_getopt(int argc, char* const *argv, const opt_struct opts[], char **optarg, int *optind, int show_err, int arg_start) \n```\n\n##### cli\\_sapi\\_module的初始化\n\n其实cli\\_sapi\\_module的初始化和参数的处理两个过程的先后并不是很明显，因为在参数处理之前，也有一些简单的初始化操作，比如对cli模式下的PHP配置文件的初始化，因为在使用cli命令的时候是需要一些初始化的值才行。\n\n```cpp\n    cli_sapi_module.ini_defaults = sapi_cli_ini_defaults;\n    cli_sapi_module.php_ini_path_override = NULL;\n    cli_sapi_module.phpinfo_as_text = 1;\n    sapi_startup(&cli_sapi_module);\n```\n\n我之所以放到后面，是因为大部分的成员变量初始化都是在参数处理之后的。\n\ncli\\_sapi\\_module是一个静态全局变量，数据结构比较容易理解\n\n```cpp\nstatic sapi_module_struct cli_sapi_module = {\n    \"cli\",                            /* name */\n    \"Command Line Interface\",     /* pretty name */\n\n    php_cli_startup,                /* startup */\n    php_module_shutdown_wrapper,    /* shutdown */\n\n    NULL,                           /* activate */\n    sapi_cli_deactivate,            /* deactivate */\n\n    sapi_cli_ub_write,              /* unbuffered write */\n    sapi_cli_flush,                 /* flush */\n    NULL,                           /* get uid */\n    NULL,                           /* getenv */\n    .....\n```\n\n**其实伴随着cli\\_sapi\\_module初始化，PHP也会对模块进行启动的操作**\n\n```cpp\nstatic int php_cli_startup(sapi_module_struct *sapi_module) /* {{{ */\n{\n    if (php_module_startup(sapi_module, NULL, 0)==FAILURE) {\n        return FAILURE;\n    }\n    return SUCCESS;\n}\n```\n\n##### cli\\_sapi\\_module启动(startup)\n\n启动的过程比较简单明白，如果启动失败的话，那就goto错误信息处理阶段，在控制台输出错误信息\n\n```cpp\n    /* startup after we get the above ini override se we get things right */\n    if (cli_sapi_module.startup(&cli_sapi_module)==FAILURE) {\n        /* there is no way to see if we must call zend_ini_deactivate()\n         * since we cannot check if EG(ini_directives) has been initialised\n         * because the executor's constructor does not set initialize it.\n         * Apart from that there seems no need for zend_ini_deactivate() yet.\n         * So we goto out_err.*/\n        exit_status = 1;\n        goto out_err;\n    }\n```\n\n##### 函数的执行\n\n启动结束后，PHP会根据参数不同，调用不同的函数，比如当用户输入`php -i`的时候，那么就打印出PHP的info信息；输入`php -m`的时候打印出已经安装的模块...\n\n```cpp\nwhile ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2)) != -1) {\n    switch (c) {\n        ......              \n        case 'i': /* php info & quit */\n            if (php_request_startup(TSRMLS_C)==FAILURE) { ## 请求初始化操作\n                goto err;\n            }\n            request_started = 1;\n            php_print_info(0xFFFFFFFF TSRMLS_CC);\n            php_end_ob_buffers(1 TSRMLS_CC);\n            exit_status=0;\n            goto out;\n        case 'm': /* list compiled in modules */\n            if (php_request_startup(TSRMLS_C)==FAILURE) {\n                goto err;\n            }\n            request_started = 1;\n            php_printf(\"[PHP Modules]\\n\");\n            print_modules(TSRMLS_C);\n            php_printf(\"\\n[Zend Modules]\\n\");\n            print_extensions(TSRMLS_C);\n            php_printf(\"\\n\");\n            php_end_ob_buffers(1 TSRMLS_CC);\n            exit_status=0;\n            goto out;\n        case 'v': /* show php version & quit */\n            if (php_request_startup(TSRMLS_C) == FAILURE) {\n                goto err;\n            }\n            request_started = 1;\n            php_printf(\"PHP %s (%s) (built: %s %s) %s\\nCopyright (c) 1997-2010 The PHP Group\\n%s\",\n            PHP_VERSION, sapi_module.name, __DATE__, __TIME__,\n            ....\n```\n\n此外，根据对参数的switch的case的比较，确定behavior （解释器行为）根据解释器行为，然后根据不同的behavior 做出想用的动作。\n\n```cpp\n...\ncase PHP_MODE_LINT:\n    exit_status = php_lint_script(&file_handle TSRMLS_CC);\n    if (exit_status==SUCCESS) {\n        zend_printf(\"No syntax errors detected in %s\\n\", file_handle.filename);\n    } else {\n        zend_printf(\"Errors parsing %s\\n\", file_handle.filename);\n    }\n    break;\ncase PHP_MODE_STRIP:\n    if (open_file_for_scanning(&file_handle TSRMLS_CC)==SUCCESS) {\n        zend_strip(TSRMLS_C);\n    }\n    goto out;\n    break;\n....\n```\n\n伴随着不同的解释器行为，进行请求的处理\n\n```cpp\n    if (php_request_startup(TSRMLS_C)==FAILURE) {\n        *arg_excp = arg_free;\n        fclose(file_handle.handle.fp);\n        PUTS(\"Could not startup.\\n\");\n        goto err;\n    }\n```\n\n##### 垃圾回收\n\n在代码的执行过程中，PHP会通过全局函数`CG()`或者函数`free()`将内存和数据进行释放，进行垃圾的回收。\n\n##### 输出信息\n\n运行的最后应该就是对信息的输出和对SAPI的关闭。这部分其实和web请求类似，输出（错误信息）之后，PHP会通过`php_request_shutdown`，`php_module_shutdown`和`sapi_shutdown`等对相应的请求、模块和SAPI等进行关闭。**但是和web请求不一样的是，每次结束cli模式的时候都是会对模块进行关闭(`php_module_shutdown`)，但是web模式缺不是，web模式在PHP启动和关闭的时候才会知心模块的初始化以及关闭，并是不每处理完一个请求就开启/关闭一次。**\n\n#### 总结\n\ncli模式和web模式其实大同小异，整个PHP的生命周期基本一致：开始->模块初始化->请求初始化->执行PHP脚本->关闭请求->关闭模块。但是最大的不同是因为是否重复的启动，因为在web模式下，往往是连续的请求，也就是通常用户经常做页面的跳转，如果重复的启动也关闭模块，势必会造成性能上的差异。但是cli模式往往都是单次的请求，是不连续的。\n\n#### 文献参考\n\n[深入理解PHP的内核](http://www.php-internals.com)\n\n[PHP的命令行模式](http://www.php100.com/manual/php/features.commandline.html)","slug":"phpsource-cli","published":1,"updated":"2022-03-12T23:52:58.727Z","layout":"post","photos":[],"link":"","_id":"cl0oi8mhy006s417tdil6eop5","content":"<p>众所周知，PHP在web上应用很广泛。接近80%的web网站都是使用PHP+MySQL，虽然越来越多的新语种崛起，但是现在PHP依然是中小型web系统的首选。PHP除了在web上有很多应用，也经常被用作脚本工具，虽然没有原生shell效率高，但是起点比较低。今天就和大家分享下PHP cli模式的执行过程。</p>\n<span id=\"more\"></span>\n<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP的版本：5.3</span><br><span class=\"line\">代码查看工具：VSCODE 或者sublime text</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一切从SAPI开始\"><a href=\"#一切从SAPI开始\" class=\"headerlink\" title=\"一切从SAPI开始\"></a>一切从SAPI开始</h4><p><code>SAPI</code>是<code>Server Application Programming Interface</code>的缩写，翻译过来就是服务应用程序接口，可以理解称是一种接口的规范，只要是符合规范的语言，都是可以通过SAPI和服务器进行数据交互。</p>\n<p>通常，在web模式下，PHP通常都是运行在Apache或者nginx这类web服务器上面，程序执行结束后，将结果显示在浏览器上面。其实命令行和web执行过程是稍微有点不同的。命令行是将参数传给PHP的解释器，然后把运行结果显示在窗口上面。有兴趣的可以阅读下<a href=\"http://www.php-internals.com/book/?p=chapt02/02-01-php-life-cycle-and-zend-engine\">深入PHP内核：用户代码的执行</a> 了解一下PHP的生命周期。</p>\n<p>PHP的cli模式最开始是随着PHP 4.2.0的版本发布的，但是当时只是一个实验版本，并且需要使用<code>./configure --enable-cli</code>参数才会进行安装。直到PHP 4.3.0之后，才把cli模式当成正式的模块，<code>--enable-cli</code> 参数会被默认得设置为 on，也可以用参数 <code>--disable-cli</code> 来屏蔽。</p>\n<h4 id=\"入口的位置\"><a href=\"#入口的位置\" class=\"headerlink\" title=\"入口的位置\"></a>入口的位置</h4><p>当我们忘记一个命令的option的时候，我们通常会使用<code>-h/--help</code>来查看帮助</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@root ~]$ php -h</span><br><span class=\"line\">Usage: php [options] [-f] &lt;file&gt; [--] [args...]</span><br><span class=\"line\">   php [options] -r &lt;code&gt; [--] [args...]</span><br><span class=\"line\">   php [options] [-B &lt;begin_code&gt;] -R &lt;code&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class=\"line\">   php [options] [-B &lt;begin_code&gt;] -F &lt;file&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class=\"line\">   php [options] -- [args...]</span><br><span class=\"line\">   php [options] -a</span><br><span class=\"line\"></span><br><span class=\"line\">  -a               Run as interactive shell</span><br><span class=\"line\">  -c &lt;path&gt;&lt;file&gt; Look <span class=\"keyword\">for</span> php.ini file <span class=\"keyword\">in</span> this directory</span><br><span class=\"line\">  -n               No php.ini file will be used</span><br><span class=\"line\">  -d foo[=bar]     Define INI entry foo with value <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  -e               Generate extended information <span class=\"keyword\">for</span> debugger/profiler</span><br><span class=\"line\">  -f &lt;file&gt;        Parse and execute &lt;file&gt;.</span><br><span class=\"line\">  -h               This <span class=\"built_in\">help</span></span><br><span class=\"line\">  -i               PHP information</span><br><span class=\"line\">  -l               Syntax check only (lint)</span><br><span class=\"line\">  -m               Show compiled <span class=\"keyword\">in</span> modules</span><br><span class=\"line\">  -r &lt;code&gt;        Run PHP &lt;code&gt; without using script tags &lt;?..?&gt;</span><br><span class=\"line\">  -B &lt;begin_code&gt;  Run PHP &lt;begin_code&gt; before processing input lines</span><br><span class=\"line\">  -R &lt;code&gt;        Run PHP &lt;code&gt; <span class=\"keyword\">for</span> every input line</span><br><span class=\"line\">  -F &lt;file&gt;        Parse and execute &lt;file&gt; <span class=\"keyword\">for</span> every input line</span><br><span class=\"line\">  -E &lt;end_code&gt;    Run PHP &lt;end_code&gt; after processing all input lines</span><br><span class=\"line\">  -H               Hide any passed arguments from external tools.</span><br><span class=\"line\">  -s               Output HTML syntax highlighted <span class=\"built_in\">source</span>.</span><br><span class=\"line\">  -v               Version number</span><br><span class=\"line\">  -w               Output <span class=\"built_in\">source</span> with stripped comments and whitespace.</span><br><span class=\"line\">  -z &lt;file&gt;        Load Zend extension &lt;file&gt;.</span><br><span class=\"line\"></span><br><span class=\"line\">  args...          Arguments passed to script. Use -- args when first argument</span><br><span class=\"line\">                   starts with - or script is <span class=\"built_in\">read</span> from stdin</span><br><span class=\"line\"></span><br><span class=\"line\">  --ini            Show configuration file names</span><br><span class=\"line\"></span><br><span class=\"line\">  --rf &lt;name&gt;      Show information about <span class=\"keyword\">function</span> &lt;name&gt;.</span><br><span class=\"line\">  --rc &lt;name&gt;      Show information about class &lt;name&gt;.</span><br><span class=\"line\">  --re &lt;name&gt;      Show information about extension &lt;name&gt;.</span><br><span class=\"line\">  --ri &lt;name&gt;      Show configuration <span class=\"keyword\">for</span> extension &lt;name&gt;.</span><br></pre></td></tr></table></figure>\n\n<p>以上就是PHP的命令已经一些参数。 在<code>/sapi/cli/php_cli.c</code>文件里面有个<code>main</code>方法，可以说这个方法就是程序的入口位置了。</p>\n<h4 id=\"运行的流程\"><a href=\"#运行的流程\" class=\"headerlink\" title=\"运行的流程\"></a>运行的流程</h4><p>从代码可以看得出来，这个过程大概可以分为：</p>\n<ul>\n<li>参数的处理</li>\n<li>cli_sapi_module的初始化</li>\n<li>cli_sapi_module的启动(starup)</li>\n<li>函数的执行</li>\n<li>垃圾回收</li>\n<li>输出信息</li>\n</ul>\n<h5 id=\"参数的处理\"><a href=\"#参数的处理\" class=\"headerlink\" title=\"参数的处理\"></a>参数的处理</h5><p>PHP的命令可以接受一系列的参数，比如常见的<code>php -i</code>或者<code>php -m</code>等等，传递给全局变量<code>$argv</code> ，该数组中下标为零的成员为脚本的名称（当 PHP 代码来自标准输入获直接用 -r 参数以命令行方式运行时，该名称为”-“）。另外，全局变量 \\$argc 存有 \\$argv 数组中成员变量的个数（而非传送给脚本程序的参数的个数）。</p>\n<p>对于参数的解析，可以查看下PHP的源码 <code>/sapi/cli/php_cli.c</code> 大概725行左右</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((c = <span class=\"built_in\">php_getopt</span>(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, <span class=\"number\">0</span>, <span class=\"number\">2</span>))!=<span class=\"number\">-1</span>) &#123; <span class=\"comment\">//对参数进行解析</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;c&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cli_sapi_module.php_ini_path_override) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(cli_sapi_module.php_ini_path_override);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<p>完整的解析方法就是<code>php_getopt</code>，在<code>/main/getopt.c</code> 的第58行左右，在php_getopt方法里面，通过对 ‘-‘ 或者 ‘–’ 的处理，获取具体的参数，然后返回。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PHPAPI <span class=\"type\">int</span> <span class=\"title\">php_getopt</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* <span class=\"type\">const</span> *argv, <span class=\"type\">const</span> opt_struct opts[], <span class=\"type\">char</span> **optarg, <span class=\"type\">int</span> *optind, <span class=\"type\">int</span> show_err, <span class=\"type\">int</span> arg_start)</span> </span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"cli-sapi-module的初始化\"><a href=\"#cli-sapi-module的初始化\" class=\"headerlink\" title=\"cli_sapi_module的初始化\"></a>cli_sapi_module的初始化</h5><p>其实cli_sapi_module的初始化和参数的处理两个过程的先后并不是很明显，因为在参数处理之前，也有一些简单的初始化操作，比如对cli模式下的PHP配置文件的初始化，因为在使用cli命令的时候是需要一些初始化的值才行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cli_sapi_module.ini_defaults = sapi_cli_ini_defaults;</span><br><span class=\"line\">cli_sapi_module.php_ini_path_override = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">cli_sapi_module.phpinfo_as_text = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">sapi_startup</span>(&amp;cli_sapi_module);</span><br></pre></td></tr></table></figure>\n\n<p>我之所以放到后面，是因为大部分的成员变量初始化都是在参数处理之后的。</p>\n<p>cli_sapi_module是一个静态全局变量，数据结构比较容易理解</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> sapi_module_struct cli_sapi_module = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;cli&quot;</span>,                            <span class=\"comment\">/* name */</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Command Line Interface&quot;</span>,     <span class=\"comment\">/* pretty name */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_cli_startup,                <span class=\"comment\">/* startup */</span></span><br><span class=\"line\">    php_module_shutdown_wrapper,    <span class=\"comment\">/* shutdown */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                           <span class=\"comment\">/* activate */</span></span><br><span class=\"line\">    sapi_cli_deactivate,            <span class=\"comment\">/* deactivate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sapi_cli_ub_write,              <span class=\"comment\">/* unbuffered write */</span></span><br><span class=\"line\">    sapi_cli_flush,                 <span class=\"comment\">/* flush */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                           <span class=\"comment\">/* get uid */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                           <span class=\"comment\">/* getenv */</span></span><br><span class=\"line\">    .....</span><br></pre></td></tr></table></figure>\n\n<p><strong>其实伴随着cli_sapi_module初始化，PHP也会对模块进行启动的操作</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">php_cli_startup</span><span class=\"params\">(sapi_module_struct *sapi_module)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">php_module_startup</span>(sapi_module, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>)==FAILURE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"cli-sapi-module启动-startup\"><a href=\"#cli-sapi-module启动-startup\" class=\"headerlink\" title=\"cli_sapi_module启动(startup)\"></a>cli_sapi_module启动(startup)</h5><p>启动的过程比较简单明白，如果启动失败的话，那就goto错误信息处理阶段，在控制台输出错误信息</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* startup after we get the above ini override se we get things right */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cli_sapi_module.<span class=\"built_in\">startup</span>(&amp;cli_sapi_module)==FAILURE) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* there is no way to see if we must call zend_ini_deactivate()</span></span><br><span class=\"line\"><span class=\"comment\">     * since we cannot check if EG(ini_directives) has been initialised</span></span><br><span class=\"line\"><span class=\"comment\">     * because the executor&#x27;s constructor does not set initialize it.</span></span><br><span class=\"line\"><span class=\"comment\">     * Apart from that there seems no need for zend_ini_deactivate() yet.</span></span><br><span class=\"line\"><span class=\"comment\">     * So we goto out_err.*/</span></span><br><span class=\"line\">    exit_status = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> out_err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数的执行\"><a href=\"#函数的执行\" class=\"headerlink\" title=\"函数的执行\"></a>函数的执行</h5><p>启动结束后，PHP会根据参数不同，调用不同的函数，比如当用户输入<code>php -i</code>的时候，那么就打印出PHP的info信息；输入<code>php -m</code>的时候打印出已经安装的模块…</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((c = <span class=\"built_in\">php_getopt</span>(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, <span class=\"number\">0</span>, <span class=\"number\">2</span>)) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">        ......              </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;i&#x27;</span>: <span class=\"comment\">/* php info &amp; quit */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C)==FAILURE) &#123; ## 请求初始化操作</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request_started = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">php_print_info</span>(<span class=\"number\">0xFFFFFFFF</span> TSRMLS_CC);</span><br><span class=\"line\">            <span class=\"built_in\">php_end_ob_buffers</span>(<span class=\"number\">1</span> TSRMLS_CC);</span><br><span class=\"line\">            exit_status=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;m&#x27;</span>: <span class=\"comment\">/* list compiled in modules */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C)==FAILURE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request_started = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;[PHP Modules]\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">print_modules</span>(TSRMLS_C);</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;\\n[Zend Modules]\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">print_extensions</span>(TSRMLS_C);</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">php_end_ob_buffers</span>(<span class=\"number\">1</span> TSRMLS_CC);</span><br><span class=\"line\">            exit_status=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;v&#x27;</span>: <span class=\"comment\">/* show php version &amp; quit */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C) == FAILURE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request_started = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;PHP %s (%s) (built: %s %s) %s\\nCopyright (c) 1997-2010 The PHP Group\\n%s&quot;</span>,</span><br><span class=\"line\">            PHP_VERSION, sapi_module.name, __DATE__, __TIME__,</span><br><span class=\"line\">            ....</span><br></pre></td></tr></table></figure>\n\n<p>此外，根据对参数的switch的case的比较，确定behavior （解释器行为）根据解释器行为，然后根据不同的behavior 做出想用的动作。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">case</span> PHP_MODE_LINT:</span><br><span class=\"line\">    exit_status = <span class=\"built_in\">php_lint_script</span>(&amp;file_handle TSRMLS_CC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exit_status==SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">zend_printf</span>(<span class=\"string\">&quot;No syntax errors detected in %s\\n&quot;</span>, file_handle.filename);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">zend_printf</span>(<span class=\"string\">&quot;Errors parsing %s\\n&quot;</span>, file_handle.filename);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> PHP_MODE_STRIP:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">open_file_for_scanning</span>(&amp;file_handle TSRMLS_CC)==SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">zend_strip</span>(TSRMLS_C);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>伴随着不同的解释器行为，进行请求的处理</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C)==FAILURE) &#123;</span><br><span class=\"line\">    *arg_excp = arg_free;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(file_handle.handle.fp);</span><br><span class=\"line\">    <span class=\"built_in\">PUTS</span>(<span class=\"string\">&quot;Could not startup.\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h5><p>在代码的执行过程中，PHP会通过全局函数<code>CG()</code>或者函数<code>free()</code>将内存和数据进行释放，进行垃圾的回收。</p>\n<h5 id=\"输出信息\"><a href=\"#输出信息\" class=\"headerlink\" title=\"输出信息\"></a>输出信息</h5><p>运行的最后应该就是对信息的输出和对SAPI的关闭。这部分其实和web请求类似，输出（错误信息）之后，PHP会通过<code>php_request_shutdown</code>，<code>php_module_shutdown</code>和<code>sapi_shutdown</code>等对相应的请求、模块和SAPI等进行关闭。<strong>但是和web请求不一样的是，每次结束cli模式的时候都是会对模块进行关闭(<code>php_module_shutdown</code>)，但是web模式缺不是，web模式在PHP启动和关闭的时候才会知心模块的初始化以及关闭，并是不每处理完一个请求就开启&#x2F;关闭一次。</strong></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>cli模式和web模式其实大同小异，整个PHP的生命周期基本一致：开始-&gt;模块初始化-&gt;请求初始化-&gt;执行PHP脚本-&gt;关闭请求-&gt;关闭模块。但是最大的不同是因为是否重复的启动，因为在web模式下，往往是连续的请求，也就是通常用户经常做页面的跳转，如果重复的启动也关闭模块，势必会造成性能上的差异。但是cli模式往往都是单次的请求，是不连续的。</p>\n<h4 id=\"文献参考\"><a href=\"#文献参考\" class=\"headerlink\" title=\"文献参考\"></a>文献参考</h4><p><a href=\"http://www.php-internals.com/\">深入理解PHP的内核</a></p>\n<p><a href=\"http://www.php100.com/manual/php/features.commandline.html\">PHP的命令行模式</a></p>\n","site":{"data":{}},"excerpt":"<p>众所周知，PHP在web上应用很广泛。接近80%的web网站都是使用PHP+MySQL，虽然越来越多的新语种崛起，但是现在PHP依然是中小型web系统的首选。PHP除了在web上有很多应用，也经常被用作脚本工具，虽然没有原生shell效率高，但是起点比较低。今天就和大家分享下PHP cli模式的执行过程。</p>","more":"<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP的版本：5.3</span><br><span class=\"line\">代码查看工具：VSCODE 或者sublime text</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一切从SAPI开始\"><a href=\"#一切从SAPI开始\" class=\"headerlink\" title=\"一切从SAPI开始\"></a>一切从SAPI开始</h4><p><code>SAPI</code>是<code>Server Application Programming Interface</code>的缩写，翻译过来就是服务应用程序接口，可以理解称是一种接口的规范，只要是符合规范的语言，都是可以通过SAPI和服务器进行数据交互。</p>\n<p>通常，在web模式下，PHP通常都是运行在Apache或者nginx这类web服务器上面，程序执行结束后，将结果显示在浏览器上面。其实命令行和web执行过程是稍微有点不同的。命令行是将参数传给PHP的解释器，然后把运行结果显示在窗口上面。有兴趣的可以阅读下<a href=\"http://www.php-internals.com/book/?p=chapt02/02-01-php-life-cycle-and-zend-engine\">深入PHP内核：用户代码的执行</a> 了解一下PHP的生命周期。</p>\n<p>PHP的cli模式最开始是随着PHP 4.2.0的版本发布的，但是当时只是一个实验版本，并且需要使用<code>./configure --enable-cli</code>参数才会进行安装。直到PHP 4.3.0之后，才把cli模式当成正式的模块，<code>--enable-cli</code> 参数会被默认得设置为 on，也可以用参数 <code>--disable-cli</code> 来屏蔽。</p>\n<h4 id=\"入口的位置\"><a href=\"#入口的位置\" class=\"headerlink\" title=\"入口的位置\"></a>入口的位置</h4><p>当我们忘记一个命令的option的时候，我们通常会使用<code>-h/--help</code>来查看帮助</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@root ~]$ php -h</span><br><span class=\"line\">Usage: php [options] [-f] &lt;file&gt; [--] [args...]</span><br><span class=\"line\">   php [options] -r &lt;code&gt; [--] [args...]</span><br><span class=\"line\">   php [options] [-B &lt;begin_code&gt;] -R &lt;code&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class=\"line\">   php [options] [-B &lt;begin_code&gt;] -F &lt;file&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class=\"line\">   php [options] -- [args...]</span><br><span class=\"line\">   php [options] -a</span><br><span class=\"line\"></span><br><span class=\"line\">  -a               Run as interactive shell</span><br><span class=\"line\">  -c &lt;path&gt;&lt;file&gt; Look <span class=\"keyword\">for</span> php.ini file <span class=\"keyword\">in</span> this directory</span><br><span class=\"line\">  -n               No php.ini file will be used</span><br><span class=\"line\">  -d foo[=bar]     Define INI entry foo with value <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">  -e               Generate extended information <span class=\"keyword\">for</span> debugger/profiler</span><br><span class=\"line\">  -f &lt;file&gt;        Parse and execute &lt;file&gt;.</span><br><span class=\"line\">  -h               This <span class=\"built_in\">help</span></span><br><span class=\"line\">  -i               PHP information</span><br><span class=\"line\">  -l               Syntax check only (lint)</span><br><span class=\"line\">  -m               Show compiled <span class=\"keyword\">in</span> modules</span><br><span class=\"line\">  -r &lt;code&gt;        Run PHP &lt;code&gt; without using script tags &lt;?..?&gt;</span><br><span class=\"line\">  -B &lt;begin_code&gt;  Run PHP &lt;begin_code&gt; before processing input lines</span><br><span class=\"line\">  -R &lt;code&gt;        Run PHP &lt;code&gt; <span class=\"keyword\">for</span> every input line</span><br><span class=\"line\">  -F &lt;file&gt;        Parse and execute &lt;file&gt; <span class=\"keyword\">for</span> every input line</span><br><span class=\"line\">  -E &lt;end_code&gt;    Run PHP &lt;end_code&gt; after processing all input lines</span><br><span class=\"line\">  -H               Hide any passed arguments from external tools.</span><br><span class=\"line\">  -s               Output HTML syntax highlighted <span class=\"built_in\">source</span>.</span><br><span class=\"line\">  -v               Version number</span><br><span class=\"line\">  -w               Output <span class=\"built_in\">source</span> with stripped comments and whitespace.</span><br><span class=\"line\">  -z &lt;file&gt;        Load Zend extension &lt;file&gt;.</span><br><span class=\"line\"></span><br><span class=\"line\">  args...          Arguments passed to script. Use -- args when first argument</span><br><span class=\"line\">                   starts with - or script is <span class=\"built_in\">read</span> from stdin</span><br><span class=\"line\"></span><br><span class=\"line\">  --ini            Show configuration file names</span><br><span class=\"line\"></span><br><span class=\"line\">  --rf &lt;name&gt;      Show information about <span class=\"keyword\">function</span> &lt;name&gt;.</span><br><span class=\"line\">  --rc &lt;name&gt;      Show information about class &lt;name&gt;.</span><br><span class=\"line\">  --re &lt;name&gt;      Show information about extension &lt;name&gt;.</span><br><span class=\"line\">  --ri &lt;name&gt;      Show configuration <span class=\"keyword\">for</span> extension &lt;name&gt;.</span><br></pre></td></tr></table></figure>\n\n<p>以上就是PHP的命令已经一些参数。 在<code>/sapi/cli/php_cli.c</code>文件里面有个<code>main</code>方法，可以说这个方法就是程序的入口位置了。</p>\n<h4 id=\"运行的流程\"><a href=\"#运行的流程\" class=\"headerlink\" title=\"运行的流程\"></a>运行的流程</h4><p>从代码可以看得出来，这个过程大概可以分为：</p>\n<ul>\n<li>参数的处理</li>\n<li>cli_sapi_module的初始化</li>\n<li>cli_sapi_module的启动(starup)</li>\n<li>函数的执行</li>\n<li>垃圾回收</li>\n<li>输出信息</li>\n</ul>\n<h5 id=\"参数的处理\"><a href=\"#参数的处理\" class=\"headerlink\" title=\"参数的处理\"></a>参数的处理</h5><p>PHP的命令可以接受一系列的参数，比如常见的<code>php -i</code>或者<code>php -m</code>等等，传递给全局变量<code>$argv</code> ，该数组中下标为零的成员为脚本的名称（当 PHP 代码来自标准输入获直接用 -r 参数以命令行方式运行时，该名称为”-“）。另外，全局变量 \\$argc 存有 \\$argv 数组中成员变量的个数（而非传送给脚本程序的参数的个数）。</p>\n<p>对于参数的解析，可以查看下PHP的源码 <code>/sapi/cli/php_cli.c</code> 大概725行左右</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((c = <span class=\"built_in\">php_getopt</span>(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, <span class=\"number\">0</span>, <span class=\"number\">2</span>))!=<span class=\"number\">-1</span>) &#123; <span class=\"comment\">//对参数进行解析</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;c&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cli_sapi_module.php_ini_path_override) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(cli_sapi_module.php_ini_path_override);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<p>完整的解析方法就是<code>php_getopt</code>，在<code>/main/getopt.c</code> 的第58行左右，在php_getopt方法里面，通过对 ‘-‘ 或者 ‘–’ 的处理，获取具体的参数，然后返回。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PHPAPI <span class=\"type\">int</span> <span class=\"title\">php_getopt</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* <span class=\"type\">const</span> *argv, <span class=\"type\">const</span> opt_struct opts[], <span class=\"type\">char</span> **optarg, <span class=\"type\">int</span> *optind, <span class=\"type\">int</span> show_err, <span class=\"type\">int</span> arg_start)</span> </span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"cli-sapi-module的初始化\"><a href=\"#cli-sapi-module的初始化\" class=\"headerlink\" title=\"cli_sapi_module的初始化\"></a>cli_sapi_module的初始化</h5><p>其实cli_sapi_module的初始化和参数的处理两个过程的先后并不是很明显，因为在参数处理之前，也有一些简单的初始化操作，比如对cli模式下的PHP配置文件的初始化，因为在使用cli命令的时候是需要一些初始化的值才行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cli_sapi_module.ini_defaults = sapi_cli_ini_defaults;</span><br><span class=\"line\">cli_sapi_module.php_ini_path_override = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">cli_sapi_module.phpinfo_as_text = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">sapi_startup</span>(&amp;cli_sapi_module);</span><br></pre></td></tr></table></figure>\n\n<p>我之所以放到后面，是因为大部分的成员变量初始化都是在参数处理之后的。</p>\n<p>cli_sapi_module是一个静态全局变量，数据结构比较容易理解</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> sapi_module_struct cli_sapi_module = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;cli&quot;</span>,                            <span class=\"comment\">/* name */</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Command Line Interface&quot;</span>,     <span class=\"comment\">/* pretty name */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    php_cli_startup,                <span class=\"comment\">/* startup */</span></span><br><span class=\"line\">    php_module_shutdown_wrapper,    <span class=\"comment\">/* shutdown */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                           <span class=\"comment\">/* activate */</span></span><br><span class=\"line\">    sapi_cli_deactivate,            <span class=\"comment\">/* deactivate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sapi_cli_ub_write,              <span class=\"comment\">/* unbuffered write */</span></span><br><span class=\"line\">    sapi_cli_flush,                 <span class=\"comment\">/* flush */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                           <span class=\"comment\">/* get uid */</span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                           <span class=\"comment\">/* getenv */</span></span><br><span class=\"line\">    .....</span><br></pre></td></tr></table></figure>\n\n<p><strong>其实伴随着cli_sapi_module初始化，PHP也会对模块进行启动的操作</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">php_cli_startup</span><span class=\"params\">(sapi_module_struct *sapi_module)</span> <span class=\"comment\">/* &#123;&#123;&#123; */</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">php_module_startup</span>(sapi_module, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>)==FAILURE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"cli-sapi-module启动-startup\"><a href=\"#cli-sapi-module启动-startup\" class=\"headerlink\" title=\"cli_sapi_module启动(startup)\"></a>cli_sapi_module启动(startup)</h5><p>启动的过程比较简单明白，如果启动失败的话，那就goto错误信息处理阶段，在控制台输出错误信息</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* startup after we get the above ini override se we get things right */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cli_sapi_module.<span class=\"built_in\">startup</span>(&amp;cli_sapi_module)==FAILURE) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* there is no way to see if we must call zend_ini_deactivate()</span></span><br><span class=\"line\"><span class=\"comment\">     * since we cannot check if EG(ini_directives) has been initialised</span></span><br><span class=\"line\"><span class=\"comment\">     * because the executor&#x27;s constructor does not set initialize it.</span></span><br><span class=\"line\"><span class=\"comment\">     * Apart from that there seems no need for zend_ini_deactivate() yet.</span></span><br><span class=\"line\"><span class=\"comment\">     * So we goto out_err.*/</span></span><br><span class=\"line\">    exit_status = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> out_err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数的执行\"><a href=\"#函数的执行\" class=\"headerlink\" title=\"函数的执行\"></a>函数的执行</h5><p>启动结束后，PHP会根据参数不同，调用不同的函数，比如当用户输入<code>php -i</code>的时候，那么就打印出PHP的info信息；输入<code>php -m</code>的时候打印出已经安装的模块…</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((c = <span class=\"built_in\">php_getopt</span>(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, <span class=\"number\">0</span>, <span class=\"number\">2</span>)) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">        ......              </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;i&#x27;</span>: <span class=\"comment\">/* php info &amp; quit */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C)==FAILURE) &#123; ## 请求初始化操作</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request_started = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">php_print_info</span>(<span class=\"number\">0xFFFFFFFF</span> TSRMLS_CC);</span><br><span class=\"line\">            <span class=\"built_in\">php_end_ob_buffers</span>(<span class=\"number\">1</span> TSRMLS_CC);</span><br><span class=\"line\">            exit_status=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;m&#x27;</span>: <span class=\"comment\">/* list compiled in modules */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C)==FAILURE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request_started = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;[PHP Modules]\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">print_modules</span>(TSRMLS_C);</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;\\n[Zend Modules]\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">print_extensions</span>(TSRMLS_C);</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">php_end_ob_buffers</span>(<span class=\"number\">1</span> TSRMLS_CC);</span><br><span class=\"line\">            exit_status=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;v&#x27;</span>: <span class=\"comment\">/* show php version &amp; quit */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C) == FAILURE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            request_started = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">php_printf</span>(<span class=\"string\">&quot;PHP %s (%s) (built: %s %s) %s\\nCopyright (c) 1997-2010 The PHP Group\\n%s&quot;</span>,</span><br><span class=\"line\">            PHP_VERSION, sapi_module.name, __DATE__, __TIME__,</span><br><span class=\"line\">            ....</span><br></pre></td></tr></table></figure>\n\n<p>此外，根据对参数的switch的case的比较，确定behavior （解释器行为）根据解释器行为，然后根据不同的behavior 做出想用的动作。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">case</span> PHP_MODE_LINT:</span><br><span class=\"line\">    exit_status = <span class=\"built_in\">php_lint_script</span>(&amp;file_handle TSRMLS_CC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exit_status==SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">zend_printf</span>(<span class=\"string\">&quot;No syntax errors detected in %s\\n&quot;</span>, file_handle.filename);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">zend_printf</span>(<span class=\"string\">&quot;Errors parsing %s\\n&quot;</span>, file_handle.filename);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> PHP_MODE_STRIP:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">open_file_for_scanning</span>(&amp;file_handle TSRMLS_CC)==SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">zend_strip</span>(TSRMLS_C);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>伴随着不同的解释器行为，进行请求的处理</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">php_request_startup</span>(TSRMLS_C)==FAILURE) &#123;</span><br><span class=\"line\">    *arg_excp = arg_free;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(file_handle.handle.fp);</span><br><span class=\"line\">    <span class=\"built_in\">PUTS</span>(<span class=\"string\">&quot;Could not startup.\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h5><p>在代码的执行过程中，PHP会通过全局函数<code>CG()</code>或者函数<code>free()</code>将内存和数据进行释放，进行垃圾的回收。</p>\n<h5 id=\"输出信息\"><a href=\"#输出信息\" class=\"headerlink\" title=\"输出信息\"></a>输出信息</h5><p>运行的最后应该就是对信息的输出和对SAPI的关闭。这部分其实和web请求类似，输出（错误信息）之后，PHP会通过<code>php_request_shutdown</code>，<code>php_module_shutdown</code>和<code>sapi_shutdown</code>等对相应的请求、模块和SAPI等进行关闭。<strong>但是和web请求不一样的是，每次结束cli模式的时候都是会对模块进行关闭(<code>php_module_shutdown</code>)，但是web模式缺不是，web模式在PHP启动和关闭的时候才会知心模块的初始化以及关闭，并是不每处理完一个请求就开启&#x2F;关闭一次。</strong></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>cli模式和web模式其实大同小异，整个PHP的生命周期基本一致：开始-&gt;模块初始化-&gt;请求初始化-&gt;执行PHP脚本-&gt;关闭请求-&gt;关闭模块。但是最大的不同是因为是否重复的启动，因为在web模式下，往往是连续的请求，也就是通常用户经常做页面的跳转，如果重复的启动也关闭模块，势必会造成性能上的差异。但是cli模式往往都是单次的请求，是不连续的。</p>\n<h4 id=\"文献参考\"><a href=\"#文献参考\" class=\"headerlink\" title=\"文献参考\"></a>文献参考</h4><p><a href=\"http://www.php-internals.com/\">深入理解PHP的内核</a></p>\n<p><a href=\"http://www.php100.com/manual/php/features.commandline.html\">PHP的命令行模式</a></p>"},{"title":"PHP7内存管理之引用计数","id":"199","comments":0,"date":"2018-01-17T15:38:53.000Z","_content":"\n#### C/C++的内存管理\n\nC/C++想要在堆上面分配内存，需要手动进行内存的分配和释放，变量管理非常的麻烦和繁琐，稍有不慎，就可能会造成内存上的错误使用。现在的一些高级语言，都普遍实行自动GC机制。\n\n#### 自己的意淫\n\n我们自己先思考下实行自动GC的方法，当我们定义一个变量的时候，给变量分配一块内存，用于保存zval和value的值，等到函数返回的时候，再讲内存回收。如果将变量赋值给其他变量的时候，再进行内存的复制，变量之间相互独立，互不影响。\n\n![](/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1.png)\n\n#### PHP的内存管理\n\nPHP的内存管理肯定不会像是我们想象的那么简单，如果那么简单，那该要浪费多少内存。PHP的内存管理是采用：**引用计数+写时复制** 的方法。\n\n#### 引用计数\n\n引用计数是指会有多少个zval指向同一个zend\\_value。当把变量赋值给一个新的变量的时候，引用计数就会+1。PHP7是将引用计数保存到了zval的结构中。\n\n```cpp\n//php7\ntypedef union _zend_value {\n    zend_long         lval;             /* long value */\n    double            dval;             /* double value */\n    zend_refcounted  *counted;  // 引用计数\n    zend_string      *str;\n    zend_array       *arr;\n    zend_object      *obj;\n    zend_resource    *res;\n    zend_reference   *ref;\n    zend_ast_ref     *ast;\n    zval             *zv;\n    void             *ptr;\n    zend_class_entry *ce;\n    zend_function    *func;\n    struct {\n        uint32_t w1;\n        uint32_t w2;\n    } ww;\n} zend_value;\n```\n\nPHP5是把引用计数放到了zend\\_struct里面\n\n```cpp\nstruct _zval_struct {\n    /* Variable information */\n    zvalue_value value;     /* value */\n    zend_uint refcount__gc; //引用计数\n    zend_uchar type;    /* active type */\n    zend_uchar is_ref__gc;\n};\n```\n\nPHP5不是这篇文章的重点，暂且不说。\n\n下面我们看下PHP7 `zend_refcounted`具体的结构\n\n```cpp\ntypedef struct _zend_refcounted_h {\n    uint32_t         refcount;          /* reference counter 32-bit */\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_3(\n                zend_uchar    type,\n                zend_uchar    flags,    /* used for strings & objects */\n                uint16_t      gc_info)  /* keeps GC root number (or 0) and color */\n        } v;\n        uint32_t type_info;\n    } u;\n} zend_refcounted_h;\n\nstruct _zend_refcounted {\n    zend_refcounted_h gc;\n};\n```\n\n很明显，`refcount`字段使用了进行计数操作的。 举个例子来看看：\n\n```php\n<?php\n$a = array();\necho xdebug_debug_zval('a');\n$b = $a;\necho xdebug_debug_zval('a');\n$c = $b;\necho xdebug_debug_zval('a');\nunset($c);\necho xdebug_debug_zval('a');\n?>\n```\n\n运行结果如下： a: (refcount=1, is\\_ref=0)=array () a: (refcount=2, is\\_ref=0)=array () a: (refcount=3, is\\_ref=0)=array () a: (refcount=2, is\\_ref=0)=array ()\n\n就像代码运行结果一样，首先定义了一个变量a，引用给数组分配了一块空间，引用计数为1，然后把a赋值给变量b，引用计数+1，然后赋值给变量c，继续+1，然后把变量c释放，引用计数-1。\n\n但是，并不是所有的变量都会使用引用计数。**比如整形，浮点型，布尔型，NULL，他们的值是直接保存在zval中，所以他们的引用计数是0。这个也是PHP5和PHP7的一个不同点。**\n\n举例说明：\n\n```php\n<?php\n$a = 123;\necho xdebug_debug_zval('a');\n$b = $a;\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP5 a: (refcount=1, is\\_ref=0)=123 a: (refcount=2, is\\_ref=0)=123\n\nPHP7 a: (refcount=0, is\\_ref=0)=123 a: (refcount=0, is\\_ref=0)=123\n\n#### 特殊情况\n\n在PHP7中还有两种特殊的情况\n\n举例说明：\n\n```php\n<?php\n$a = \"hi\";\n$b = $a;\n$c = $a;\nxdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=0, is\\_ref=0)='hi'\n\n```php\n<?php\n$a = \"hi\".time();\n$b = $a;\n$c = $a;\nxdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=3, is\\_ref=0)='hi1516202718'\n\nwtf，为什么这两个是不一样的？这就是另外的特殊情况了。\n\n*   在PHP中，函数名、类名、变量名、静态字符串等这种类型，比如第一个例子`$a = \"hi\"`，后面的字符串是唯一不变的，这等同于C语言中的`char *a = \"hi\"`，这些字符串是整个请求周期，请求结束后，同意销毁，自然不用引用计数来进行管理。\n*   不可变数组，这是opcache的一种优化类型，这里不做详细说明。\n\n#### 总结\n\n引用计数算是PHP7和PHP5的一个重要的变更，这个也是内存的一个优化的地方。 在PHP5中，引用计数是在zval中，而不是在zend\\_value中，这样一来，导致变量复制的时候要复制两个结构(zval和zend\\_value)，PHP7将引用计数放到zend\\_value中，这样就可以进行公用，设计也更加合理。\n\n#### 参考文献\n\n*   《PHP7内核剖析》","source":"_posts/php7-refcount.md","raw":"---\ntitle: PHP7内存管理之引用计数\ntags:\n  - PHP7\n  - PHP源码\nid: '199'\ncategories:\n  - - PHP\n  - - PHP源码\ncomments: false\ndate: 2018-01-17 23:38:53\n---\n\n#### C/C++的内存管理\n\nC/C++想要在堆上面分配内存，需要手动进行内存的分配和释放，变量管理非常的麻烦和繁琐，稍有不慎，就可能会造成内存上的错误使用。现在的一些高级语言，都普遍实行自动GC机制。\n\n#### 自己的意淫\n\n我们自己先思考下实行自动GC的方法，当我们定义一个变量的时候，给变量分配一块内存，用于保存zval和value的值，等到函数返回的时候，再讲内存回收。如果将变量赋值给其他变量的时候，再进行内存的复制，变量之间相互独立，互不影响。\n\n![](/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1.png)\n\n#### PHP的内存管理\n\nPHP的内存管理肯定不会像是我们想象的那么简单，如果那么简单，那该要浪费多少内存。PHP的内存管理是采用：**引用计数+写时复制** 的方法。\n\n#### 引用计数\n\n引用计数是指会有多少个zval指向同一个zend\\_value。当把变量赋值给一个新的变量的时候，引用计数就会+1。PHP7是将引用计数保存到了zval的结构中。\n\n```cpp\n//php7\ntypedef union _zend_value {\n    zend_long         lval;             /* long value */\n    double            dval;             /* double value */\n    zend_refcounted  *counted;  // 引用计数\n    zend_string      *str;\n    zend_array       *arr;\n    zend_object      *obj;\n    zend_resource    *res;\n    zend_reference   *ref;\n    zend_ast_ref     *ast;\n    zval             *zv;\n    void             *ptr;\n    zend_class_entry *ce;\n    zend_function    *func;\n    struct {\n        uint32_t w1;\n        uint32_t w2;\n    } ww;\n} zend_value;\n```\n\nPHP5是把引用计数放到了zend\\_struct里面\n\n```cpp\nstruct _zval_struct {\n    /* Variable information */\n    zvalue_value value;     /* value */\n    zend_uint refcount__gc; //引用计数\n    zend_uchar type;    /* active type */\n    zend_uchar is_ref__gc;\n};\n```\n\nPHP5不是这篇文章的重点，暂且不说。\n\n下面我们看下PHP7 `zend_refcounted`具体的结构\n\n```cpp\ntypedef struct _zend_refcounted_h {\n    uint32_t         refcount;          /* reference counter 32-bit */\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_3(\n                zend_uchar    type,\n                zend_uchar    flags,    /* used for strings & objects */\n                uint16_t      gc_info)  /* keeps GC root number (or 0) and color */\n        } v;\n        uint32_t type_info;\n    } u;\n} zend_refcounted_h;\n\nstruct _zend_refcounted {\n    zend_refcounted_h gc;\n};\n```\n\n很明显，`refcount`字段使用了进行计数操作的。 举个例子来看看：\n\n```php\n<?php\n$a = array();\necho xdebug_debug_zval('a');\n$b = $a;\necho xdebug_debug_zval('a');\n$c = $b;\necho xdebug_debug_zval('a');\nunset($c);\necho xdebug_debug_zval('a');\n?>\n```\n\n运行结果如下： a: (refcount=1, is\\_ref=0)=array () a: (refcount=2, is\\_ref=0)=array () a: (refcount=3, is\\_ref=0)=array () a: (refcount=2, is\\_ref=0)=array ()\n\n就像代码运行结果一样，首先定义了一个变量a，引用给数组分配了一块空间，引用计数为1，然后把a赋值给变量b，引用计数+1，然后赋值给变量c，继续+1，然后把变量c释放，引用计数-1。\n\n但是，并不是所有的变量都会使用引用计数。**比如整形，浮点型，布尔型，NULL，他们的值是直接保存在zval中，所以他们的引用计数是0。这个也是PHP5和PHP7的一个不同点。**\n\n举例说明：\n\n```php\n<?php\n$a = 123;\necho xdebug_debug_zval('a');\n$b = $a;\necho xdebug_debug_zval('a');\n?>\n```\n\nPHP5 a: (refcount=1, is\\_ref=0)=123 a: (refcount=2, is\\_ref=0)=123\n\nPHP7 a: (refcount=0, is\\_ref=0)=123 a: (refcount=0, is\\_ref=0)=123\n\n#### 特殊情况\n\n在PHP7中还有两种特殊的情况\n\n举例说明：\n\n```php\n<?php\n$a = \"hi\";\n$b = $a;\n$c = $a;\nxdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=0, is\\_ref=0)='hi'\n\n```php\n<?php\n$a = \"hi\".time();\n$b = $a;\n$c = $a;\nxdebug_debug_zval('a');\n?>\n```\n\nPHP7 a: (refcount=3, is\\_ref=0)='hi1516202718'\n\nwtf，为什么这两个是不一样的？这就是另外的特殊情况了。\n\n*   在PHP中，函数名、类名、变量名、静态字符串等这种类型，比如第一个例子`$a = \"hi\"`，后面的字符串是唯一不变的，这等同于C语言中的`char *a = \"hi\"`，这些字符串是整个请求周期，请求结束后，同意销毁，自然不用引用计数来进行管理。\n*   不可变数组，这是opcache的一种优化类型，这里不做详细说明。\n\n#### 总结\n\n引用计数算是PHP7和PHP5的一个重要的变更，这个也是内存的一个优化的地方。 在PHP5中，引用计数是在zval中，而不是在zend\\_value中，这样一来，导致变量复制的时候要复制两个结构(zval和zend\\_value)，PHP7将引用计数放到zend\\_value中，这样就可以进行公用，设计也更加合理。\n\n#### 参考文献\n\n*   《PHP7内核剖析》","slug":"php7-refcount","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mhz006u417t4fzacrw0","layout":"post","photos":[],"link":"","content":"<h4 id=\"C-x2F-C-的内存管理\"><a href=\"#C-x2F-C-的内存管理\" class=\"headerlink\" title=\"C&#x2F;C++的内存管理\"></a>C&#x2F;C++的内存管理</h4><p>C&#x2F;C++想要在堆上面分配内存，需要手动进行内存的分配和释放，变量管理非常的麻烦和繁琐，稍有不慎，就可能会造成内存上的错误使用。现在的一些高级语言，都普遍实行自动GC机制。</p>\n<h4 id=\"自己的意淫\"><a href=\"#自己的意淫\" class=\"headerlink\" title=\"自己的意淫\"></a>自己的意淫</h4><p>我们自己先思考下实行自动GC的方法，当我们定义一个变量的时候，给变量分配一块内存，用于保存zval和value的值，等到函数返回的时候，再讲内存回收。如果将变量赋值给其他变量的时候，再进行内存的复制，变量之间相互独立，互不影响。</p>\n<p><img src=\"/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1.png\"></p>\n<h4 id=\"PHP的内存管理\"><a href=\"#PHP的内存管理\" class=\"headerlink\" title=\"PHP的内存管理\"></a>PHP的内存管理</h4><p>PHP的内存管理肯定不会像是我们想象的那么简单，如果那么简单，那该要浪费多少内存。PHP的内存管理是采用：<strong>引用计数+写时复制</strong> 的方法。</p>\n<h4 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h4><p>引用计数是指会有多少个zval指向同一个zend_value。当把变量赋值给一个新的变量的时候，引用计数就会+1。PHP7是将引用计数保存到了zval的结构中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//php7</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> <span class=\"title class_\">_zend_value</span> &#123;</span><br><span class=\"line\">    zend_long         lval;             <span class=\"comment\">/* long value */</span></span><br><span class=\"line\">    <span class=\"type\">double</span>            dval;             <span class=\"comment\">/* double value */</span></span><br><span class=\"line\">    zend_refcounted  *counted;  <span class=\"comment\">// 引用计数</span></span><br><span class=\"line\">    zend_string      *str;</span><br><span class=\"line\">    zend_array       *arr;</span><br><span class=\"line\">    zend_object      *obj;</span><br><span class=\"line\">    zend_resource    *res;</span><br><span class=\"line\">    zend_reference   *ref;</span><br><span class=\"line\">    zend_ast_ref     *ast;</span><br><span class=\"line\">    zval             *zv;</span><br><span class=\"line\">    <span class=\"type\">void</span>             *ptr;</span><br><span class=\"line\">    zend_class_entry *ce;</span><br><span class=\"line\">    zend_function    *func;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> w1;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> w2;</span><br><span class=\"line\">    &#125; ww;</span><br><span class=\"line\">&#125; zend_value;</span><br></pre></td></tr></table></figure>\n\n<p>PHP5是把引用计数放到了zend_struct里面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_zval_struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Variable information */</span></span><br><span class=\"line\">    zvalue_value value;     <span class=\"comment\">/* value */</span></span><br><span class=\"line\">    zend_uint refcount__gc; <span class=\"comment\">//引用计数</span></span><br><span class=\"line\">    zend_uchar type;    <span class=\"comment\">/* active type */</span></span><br><span class=\"line\">    zend_uchar is_ref__gc;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>PHP5不是这篇文章的重点，暂且不说。</p>\n<p>下面我们看下PHP7 <code>zend_refcounted</code>具体的结构</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_zend_refcounted_h</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>         refcount;          <span class=\"comment\">/* reference counter 32-bit */</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ZEND_ENDIAN_LOHI_3</span>(</span><br><span class=\"line\">                zend_uchar    type,</span><br><span class=\"line\">                zend_uchar    flags,    <span class=\"comment\">/* used for strings &amp; objects */</span></span><br><span class=\"line\">                <span class=\"type\">uint16_t</span>      gc_info)  <span class=\"comment\">/* keeps GC root number (or 0) and color */</span></span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> type_info;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">&#125; zend_refcounted_h;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_zend_refcounted</span> &#123;</span><br><span class=\"line\">    zend_refcounted_h gc;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>很明显，<code>refcount</code>字段使用了进行计数操作的。 举个例子来看看：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">unset</span>(<span class=\"variable\">$c</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下： a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;array () a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;array () a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;array () a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;array ()</p>\n<p>就像代码运行结果一样，首先定义了一个变量a，引用给数组分配了一块空间，引用计数为1，然后把a赋值给变量b，引用计数+1，然后赋值给变量c，继续+1，然后把变量c释放，引用计数-1。</p>\n<p>但是，并不是所有的变量都会使用引用计数。<strong>比如整形，浮点型，布尔型，NULL，他们的值是直接保存在zval中，所以他们的引用计数是0。这个也是PHP5和PHP7的一个不同点。</strong></p>\n<p>举例说明：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP5 a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;123 a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;123</p>\n<p>PHP7 a: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;123 a: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;123</p>\n<h4 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h4><p>在PHP7中还有两种特殊的情况</p>\n<p>举例说明：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;hi&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;’hi’</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;hi&quot;</span>.<span class=\"title function_ invoke__\">time</span>();</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;’hi1516202718’</p>\n<p>wtf，为什么这两个是不一样的？这就是另外的特殊情况了。</p>\n<ul>\n<li>在PHP中，函数名、类名、变量名、静态字符串等这种类型，比如第一个例子<code>$a = &quot;hi&quot;</code>，后面的字符串是唯一不变的，这等同于C语言中的<code>char *a = &quot;hi&quot;</code>，这些字符串是整个请求周期，请求结束后，同意销毁，自然不用引用计数来进行管理。</li>\n<li>不可变数组，这是opcache的一种优化类型，这里不做详细说明。</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>引用计数算是PHP7和PHP5的一个重要的变更，这个也是内存的一个优化的地方。 在PHP5中，引用计数是在zval中，而不是在zend_value中，这样一来，导致变量复制的时候要复制两个结构(zval和zend_value)，PHP7将引用计数放到zend_value中，这样就可以进行公用，设计也更加合理。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li>《PHP7内核剖析》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"C-x2F-C-的内存管理\"><a href=\"#C-x2F-C-的内存管理\" class=\"headerlink\" title=\"C&#x2F;C++的内存管理\"></a>C&#x2F;C++的内存管理</h4><p>C&#x2F;C++想要在堆上面分配内存，需要手动进行内存的分配和释放，变量管理非常的麻烦和繁琐，稍有不慎，就可能会造成内存上的错误使用。现在的一些高级语言，都普遍实行自动GC机制。</p>\n<h4 id=\"自己的意淫\"><a href=\"#自己的意淫\" class=\"headerlink\" title=\"自己的意淫\"></a>自己的意淫</h4><p>我们自己先思考下实行自动GC的方法，当我们定义一个变量的时候，给变量分配一块内存，用于保存zval和value的值，等到函数返回的时候，再讲内存回收。如果将变量赋值给其他变量的时候，再进行内存的复制，变量之间相互独立，互不影响。</p>\n<p><img src=\"/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1.png\"></p>\n<h4 id=\"PHP的内存管理\"><a href=\"#PHP的内存管理\" class=\"headerlink\" title=\"PHP的内存管理\"></a>PHP的内存管理</h4><p>PHP的内存管理肯定不会像是我们想象的那么简单，如果那么简单，那该要浪费多少内存。PHP的内存管理是采用：<strong>引用计数+写时复制</strong> 的方法。</p>\n<h4 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h4><p>引用计数是指会有多少个zval指向同一个zend_value。当把变量赋值给一个新的变量的时候，引用计数就会+1。PHP7是将引用计数保存到了zval的结构中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//php7</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> <span class=\"title class_\">_zend_value</span> &#123;</span><br><span class=\"line\">    zend_long         lval;             <span class=\"comment\">/* long value */</span></span><br><span class=\"line\">    <span class=\"type\">double</span>            dval;             <span class=\"comment\">/* double value */</span></span><br><span class=\"line\">    zend_refcounted  *counted;  <span class=\"comment\">// 引用计数</span></span><br><span class=\"line\">    zend_string      *str;</span><br><span class=\"line\">    zend_array       *arr;</span><br><span class=\"line\">    zend_object      *obj;</span><br><span class=\"line\">    zend_resource    *res;</span><br><span class=\"line\">    zend_reference   *ref;</span><br><span class=\"line\">    zend_ast_ref     *ast;</span><br><span class=\"line\">    zval             *zv;</span><br><span class=\"line\">    <span class=\"type\">void</span>             *ptr;</span><br><span class=\"line\">    zend_class_entry *ce;</span><br><span class=\"line\">    zend_function    *func;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> w1;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> w2;</span><br><span class=\"line\">    &#125; ww;</span><br><span class=\"line\">&#125; zend_value;</span><br></pre></td></tr></table></figure>\n\n<p>PHP5是把引用计数放到了zend_struct里面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_zval_struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Variable information */</span></span><br><span class=\"line\">    zvalue_value value;     <span class=\"comment\">/* value */</span></span><br><span class=\"line\">    zend_uint refcount__gc; <span class=\"comment\">//引用计数</span></span><br><span class=\"line\">    zend_uchar type;    <span class=\"comment\">/* active type */</span></span><br><span class=\"line\">    zend_uchar is_ref__gc;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>PHP5不是这篇文章的重点，暂且不说。</p>\n<p>下面我们看下PHP7 <code>zend_refcounted</code>具体的结构</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_zend_refcounted_h</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>         refcount;          <span class=\"comment\">/* reference counter 32-bit */</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ZEND_ENDIAN_LOHI_3</span>(</span><br><span class=\"line\">                zend_uchar    type,</span><br><span class=\"line\">                zend_uchar    flags,    <span class=\"comment\">/* used for strings &amp; objects */</span></span><br><span class=\"line\">                <span class=\"type\">uint16_t</span>      gc_info)  <span class=\"comment\">/* keeps GC root number (or 0) and color */</span></span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> type_info;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">&#125; zend_refcounted_h;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_zend_refcounted</span> &#123;</span><br><span class=\"line\">    zend_refcounted_h gc;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>很明显，<code>refcount</code>字段使用了进行计数操作的。 举个例子来看看：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">unset</span>(<span class=\"variable\">$c</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下： a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;array () a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;array () a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;array () a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;array ()</p>\n<p>就像代码运行结果一样，首先定义了一个变量a，引用给数组分配了一块空间，引用计数为1，然后把a赋值给变量b，引用计数+1，然后赋值给变量c，继续+1，然后把变量c释放，引用计数-1。</p>\n<p>但是，并不是所有的变量都会使用引用计数。<strong>比如整形，浮点型，布尔型，NULL，他们的值是直接保存在zval中，所以他们的引用计数是0。这个也是PHP5和PHP7的一个不同点。</strong></p>\n<p>举例说明：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP5 a: (refcount&#x3D;1, is_ref&#x3D;0)&#x3D;123 a: (refcount&#x3D;2, is_ref&#x3D;0)&#x3D;123</p>\n<p>PHP7 a: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;123 a: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;123</p>\n<h4 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h4><p>在PHP7中还有两种特殊的情况</p>\n<p>举例说明：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;hi&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;0, is_ref&#x3D;0)&#x3D;’hi’</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;hi&quot;</span>.<span class=\"title function_ invoke__\">time</span>();</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">xdebug_debug_zval</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP7 a: (refcount&#x3D;3, is_ref&#x3D;0)&#x3D;’hi1516202718’</p>\n<p>wtf，为什么这两个是不一样的？这就是另外的特殊情况了。</p>\n<ul>\n<li>在PHP中，函数名、类名、变量名、静态字符串等这种类型，比如第一个例子<code>$a = &quot;hi&quot;</code>，后面的字符串是唯一不变的，这等同于C语言中的<code>char *a = &quot;hi&quot;</code>，这些字符串是整个请求周期，请求结束后，同意销毁，自然不用引用计数来进行管理。</li>\n<li>不可变数组，这是opcache的一种优化类型，这里不做详细说明。</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>引用计数算是PHP7和PHP5的一个重要的变更，这个也是内存的一个优化的地方。 在PHP5中，引用计数是在zval中，而不是在zend_value中，这样一来，导致变量复制的时候要复制两个结构(zval和zend_value)，PHP7将引用计数放到zend_value中，这样就可以进行公用，设计也更加合理。</p>\n<h4 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h4><ul>\n<li>《PHP7内核剖析》</li>\n</ul>\n"},{"title":"普吉岛之行--出行篇","id":"488","date":"2019-09-11T03:56:27.000Z","_content":"\n#### 伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\n\n### 出行前准备\n\n由于普吉岛的紫外线很强，所以提前在淘宝购买了防晒霜。此外，泰国的电话卡也是必不可少的，比较现在没网的生活实在是有点难熬。\n\n我本身有一些皮肤问题，由于行程安排了出海，所以难免会要穿着泳衣，光着膀子。所以为了防止尴尬，在迪卡侬买了防晒服，一来可以遮挡一下自己的皮肤，还可以防止晒伤。\n\n### 出发\n\n机票是公司统一安排的标准仓，出发时间是凌晨的一点半。从北京的国际机场T3飞到吉隆坡转机，然后再飞普吉岛。在吉隆坡，有几个小时的自由时间，可以在免税店逛一逛。\n\n![](/uploads/2019/09/WechatIMG55-576x1024.jpeg)\n\n### 转机\n\n免税店大多数是化妆品，这也是很多代购化妆品的原因。\n\n在吉隆坡的免税店，帮助朋友代购了一瓶阿玛尼的粉底液，折合人民币是400块，听朋友讲，比国内便宜200多块。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120f-1024x576.jpg)\n\n除了基本的化妆品以外，另外一个吸引人的就算是香水了，香水要在整个免税店占了一半左右。我也算是一个比较注意个人形象的人，所以对香水，还是比较感兴趣的。\n\n可能是由于区域的问题，吉隆坡的男士香水太刺鼻了，不管是channel还是其他大牌，前调的味道都大同小异。实在是接受不了。还是默默的使用我的止汗香氛好了。\n\n转机的时间虽然比较长，但是伴随着在机场来回闲逛，很快就到了转机的时间，另附几张在吉隆坡机场的照片。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1216-768x1024.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1210-1024x768.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120e-1024x768.jpg)\n\n### 抵达目的地\n\n吉隆坡距离普吉岛很近，飞机也就将近飞了一个小时，就抵达了普吉岛的机场。\n\n![](/uploads/2019/09/WechatIMG56-1024x768.jpeg)\n\n刚下飞机的时候，天气下起了蒙蒙雨，不过小雨也无法抵挡我们的热情。","source":"_posts/phuket-travel.md","raw":"---\ntitle: 普吉岛之行--出行篇\ntags:\n  - 出国游\n  - 团建\n  - 普吉岛\n  - 泰国\nid: '488'\ncategories:\n  - - Life\ndate: 2019-09-11 11:56:27\n---\n\n#### 伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\n\n### 出行前准备\n\n由于普吉岛的紫外线很强，所以提前在淘宝购买了防晒霜。此外，泰国的电话卡也是必不可少的，比较现在没网的生活实在是有点难熬。\n\n我本身有一些皮肤问题，由于行程安排了出海，所以难免会要穿着泳衣，光着膀子。所以为了防止尴尬，在迪卡侬买了防晒服，一来可以遮挡一下自己的皮肤，还可以防止晒伤。\n\n### 出发\n\n机票是公司统一安排的标准仓，出发时间是凌晨的一点半。从北京的国际机场T3飞到吉隆坡转机，然后再飞普吉岛。在吉隆坡，有几个小时的自由时间，可以在免税店逛一逛。\n\n![](/uploads/2019/09/WechatIMG55-576x1024.jpeg)\n\n### 转机\n\n免税店大多数是化妆品，这也是很多代购化妆品的原因。\n\n在吉隆坡的免税店，帮助朋友代购了一瓶阿玛尼的粉底液，折合人民币是400块，听朋友讲，比国内便宜200多块。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120f-1024x576.jpg)\n\n除了基本的化妆品以外，另外一个吸引人的就算是香水了，香水要在整个免税店占了一半左右。我也算是一个比较注意个人形象的人，所以对香水，还是比较感兴趣的。\n\n可能是由于区域的问题，吉隆坡的男士香水太刺鼻了，不管是channel还是其他大牌，前调的味道都大同小异。实在是接受不了。还是默默的使用我的止汗香氛好了。\n\n转机的时间虽然比较长，但是伴随着在机场来回闲逛，很快就到了转机的时间，另附几张在吉隆坡机场的照片。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1216-768x1024.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1210-1024x768.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120e-1024x768.jpg)\n\n### 抵达目的地\n\n吉隆坡距离普吉岛很近，飞机也就将近飞了一个小时，就抵达了普吉岛的机场。\n\n![](/uploads/2019/09/WechatIMG56-1024x768.jpeg)\n\n刚下飞机的时候，天气下起了蒙蒙雨，不过小雨也无法抵挡我们的热情。","slug":"phuket-travel","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mi1006y417t39p15k9n","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\"><a href=\"#伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\" class=\"headerlink\" title=\"伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\"></a>伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。</h4><h3 id=\"出行前准备\"><a href=\"#出行前准备\" class=\"headerlink\" title=\"出行前准备\"></a>出行前准备</h3><p>由于普吉岛的紫外线很强，所以提前在淘宝购买了防晒霜。此外，泰国的电话卡也是必不可少的，比较现在没网的生活实在是有点难熬。</p>\n<p>我本身有一些皮肤问题，由于行程安排了出海，所以难免会要穿着泳衣，光着膀子。所以为了防止尴尬，在迪卡侬买了防晒服，一来可以遮挡一下自己的皮肤，还可以防止晒伤。</p>\n<h3 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h3><p>机票是公司统一安排的标准仓，出发时间是凌晨的一点半。从北京的国际机场T3飞到吉隆坡转机，然后再飞普吉岛。在吉隆坡，有几个小时的自由时间，可以在免税店逛一逛。</p>\n<p><img src=\"/uploads/2019/09/WechatIMG55-576x1024.jpeg\"></p>\n<h3 id=\"转机\"><a href=\"#转机\" class=\"headerlink\" title=\"转机\"></a>转机</h3><p>免税店大多数是化妆品，这也是很多代购化妆品的原因。</p>\n<p>在吉隆坡的免税店，帮助朋友代购了一瓶阿玛尼的粉底液，折合人民币是400块，听朋友讲，比国内便宜200多块。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120f-1024x576.jpg\"></p>\n<p>除了基本的化妆品以外，另外一个吸引人的就算是香水了，香水要在整个免税店占了一半左右。我也算是一个比较注意个人形象的人，所以对香水，还是比较感兴趣的。</p>\n<p>可能是由于区域的问题，吉隆坡的男士香水太刺鼻了，不管是channel还是其他大牌，前调的味道都大同小异。实在是接受不了。还是默默的使用我的止汗香氛好了。</p>\n<p>转机的时间虽然比较长，但是伴随着在机场来回闲逛，很快就到了转机的时间，另附几张在吉隆坡机场的照片。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1216-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1210-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120e-1024x768.jpg\"></p>\n<h3 id=\"抵达目的地\"><a href=\"#抵达目的地\" class=\"headerlink\" title=\"抵达目的地\"></a>抵达目的地</h3><p>吉隆坡距离普吉岛很近，飞机也就将近飞了一个小时，就抵达了普吉岛的机场。</p>\n<p><img src=\"/uploads/2019/09/WechatIMG56-1024x768.jpeg\"></p>\n<p>刚下飞机的时候，天气下起了蒙蒙雨，不过小雨也无法抵挡我们的热情。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\"><a href=\"#伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\" class=\"headerlink\" title=\"伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。\"></a>伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。</h4><h3 id=\"出行前准备\"><a href=\"#出行前准备\" class=\"headerlink\" title=\"出行前准备\"></a>出行前准备</h3><p>由于普吉岛的紫外线很强，所以提前在淘宝购买了防晒霜。此外，泰国的电话卡也是必不可少的，比较现在没网的生活实在是有点难熬。</p>\n<p>我本身有一些皮肤问题，由于行程安排了出海，所以难免会要穿着泳衣，光着膀子。所以为了防止尴尬，在迪卡侬买了防晒服，一来可以遮挡一下自己的皮肤，还可以防止晒伤。</p>\n<h3 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h3><p>机票是公司统一安排的标准仓，出发时间是凌晨的一点半。从北京的国际机场T3飞到吉隆坡转机，然后再飞普吉岛。在吉隆坡，有几个小时的自由时间，可以在免税店逛一逛。</p>\n<p><img src=\"/uploads/2019/09/WechatIMG55-576x1024.jpeg\"></p>\n<h3 id=\"转机\"><a href=\"#转机\" class=\"headerlink\" title=\"转机\"></a>转机</h3><p>免税店大多数是化妆品，这也是很多代购化妆品的原因。</p>\n<p>在吉隆坡的免税店，帮助朋友代购了一瓶阿玛尼的粉底液，折合人民币是400块，听朋友讲，比国内便宜200多块。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120f-1024x576.jpg\"></p>\n<p>除了基本的化妆品以外，另外一个吸引人的就算是香水了，香水要在整个免税店占了一半左右。我也算是一个比较注意个人形象的人，所以对香水，还是比较感兴趣的。</p>\n<p>可能是由于区域的问题，吉隆坡的男士香水太刺鼻了，不管是channel还是其他大牌，前调的味道都大同小异。实在是接受不了。还是默默的使用我的止汗香氛好了。</p>\n<p>转机的时间虽然比较长，但是伴随着在机场来回闲逛，很快就到了转机的时间，另附几张在吉隆坡机场的照片。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1216-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1210-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120e-1024x768.jpg\"></p>\n<h3 id=\"抵达目的地\"><a href=\"#抵达目的地\" class=\"headerlink\" title=\"抵达目的地\"></a>抵达目的地</h3><p>吉隆坡距离普吉岛很近，飞机也就将近飞了一个小时，就抵达了普吉岛的机场。</p>\n<p><img src=\"/uploads/2019/09/WechatIMG56-1024x768.jpeg\"></p>\n<p>刚下飞机的时候，天气下起了蒙蒙雨，不过小雨也无法抵挡我们的热情。</p>\n"},{"title":"PHP源码分析之哈希表","id":"178","comments":0,"date":"2017-09-20T12:04:15.000Z","_content":"\nPHP中使用最频繁的莫过于字符串和数组了，然而PHP中的数组主要是基于哈希表，这篇文章主要是分析一下PHP源码的内部哈希表的实现方式。PHP版本基于PHP 5.3。\n<!-- more -->\n## 基本概念\n\n哈希表在实践中使用非常的广泛，哈希表的优势在于查询的时间复杂度是O(1), 哈希表提供增删改查等操作，这些操作在最坏的情况下就是和链表的性能O(n)一样。\n\n哈希表主要有一下组成：\n\n*   键（key）：用于操作数据的标示，例如PHP数组中的索引，或者字符串键等等。\n*   槽(slot/bucket)：哈希表中用于保存数据的一个单元，也就是数据真正存放的容器。\n*   哈希函数(hash function)：将key映射(map)到数据应该存放的slot所在位置的函数。\n*   哈希冲突(hash collision)：哈希函数将两个不同的key映射到同一个索引的情况。\n\n哈希表可以理解为数组的拓展，哈希表使用的是键的方式，然后通过哈希函数映射到一个索引，这个索引可以理解称是这个值得实际的存储位置。\n\n```\nhash（key）-> index\n```\n\n通过合理设计的哈希函数，我们就能将key映射到合适的范围，因为我们的key空间可以很大(例如字符串key)， 在映射到一个较小的空间中时可能会出现两个不同的key映射被到同一个index上的情况， 这就是我们所说的出现了冲突。 目前解决hash冲突的方法主要有两种：链接法和开放寻址法。\n\n## 哈希冲突\n\n### 链接法\n\n链接法通常是通过一个链表保存bucket值的方式来解决冲突，链接法的最坏情况就是所有的key都映射到一个槽位，这样就使哈希表成了一个链表，然后在查询的时候，时间复杂度就成了O（n）。所以选择一哈希函数非常重要，最好能够使哈希值的散列度大一些，分布均匀一些。\n\n由于目前大部分的编程语言的哈希表实现都是开源的，大部分语言的哈希算法都是公开的算法， 虽然目前的哈希算法都能良好的将key进行比较均匀的分布，而这个假使的前提是key是随机的，正是由于算法的确定性， 这就导致了别有用心的黑客能利用已知算法的可确定性来构造一些特殊的key，让这些key都映射到 同一个槽位导致哈希表退化成单链表，导致程序的性能急剧下降，从而造成一些应用的吞吐能力急剧下降， 尤其是对于高并发的应用影响很大，通过大量类似的请求可以让服务器遭受DoS(服务拒绝攻击)， 这个问题一直就存在着，只是最近才被各个语言重视起来。\n\n哈希冲突攻击利用的哈希表最根本的弱点是：**开源算法和哈希实现的确定性以及可预测性**，这样攻击者才可以利用特殊构造的key来进行攻击。要解决这个问题的方法则是让攻击者无法轻易构造 能够进行攻击的key序列。\n\n> **NOTE** 在笔者编写这节内容的时候PHP语言也采取了相应的措施来防止这类的攻击，PHP采用的是一种 治标不治本的做法: [限制用户提交数据字段数量](http://cn2.php.net/manual/en/info.configuration.php#ini.max-input-vars) 这样可以避免大部分的攻击，不过应用程序通常会有很多的数据输入方式，比如，SOAP，REST等等， 比如很多应用都会接受用户传入的JSON字符串，在执行json\\_decode()的时候也可能会遭受攻击。 所以最根本的解决方法是让哈希表的碰撞key序列无法轻易的构造，目前PHP中还没有引入不增加额外的复杂性情况下的完美解决方案。\n\n目前PHP中HashTable的哈希冲突解决方法就是链接法。\n\n### 开放寻址法\n\n通常还有另外一种解决冲突的方法：开放寻址法。使用开放寻址法是槽本身直接存放数据， 在插入数据时如果key所映射到的索引已经有数据了，这说明发生了冲突，这是会寻找下一个槽， 如果该槽也被占用了则继续寻找下一个槽，直到寻找到没有被占用的槽，在查找时也使用同样的策略来进行。\n\n由于开放寻址法处理冲突的时候占用的是其他槽位的空间,这可能会导致后续的key在插入的时候更加容易出现 哈希冲突，所以采用开放寻址法的哈希表的装载因子不能太高，否则容易出现性能下降。\n\n> **NOTE** _装载因子_是哈希表保存的元素数量和哈希表容量的比，通常采用链接法解决冲突的哈希表的装载 因子最好不要大于1，而采用开放寻址法的哈希表最好不要大于0.5。\n\n## PHP的实现\n\nPHP中的哈希表实现在Zend/zend\\_hash.c中，还是按照上一小节的方式，先看看PHP实现中的数据结构， PHP使用如下两个数据结构来实现哈希表，HashTable结构体用于保存整个哈希表需要的基本信息， 而Bucket结构体用于保存具体的数据内容，如下：\n\n```c\ntypedef struct _hashtable { \n    uint nTableSize;        // hash Bucket的大小，最小为8，以2x增长。\n    uint nTableMask;        // nTableSize-1 ， 索引取值的优化\n    uint nNumOfElements;    // hash Bucket中当前存在的元素个数，count()函数会直接返回此值 \n    ulong nNextFreeElement; // 下一个数字索引的位置\n    Bucket *pInternalPointer;   // 当前遍历的指针（foreach比for快的原因之一）\n    Bucket *pListHead;          // 存储数组头元素指针\n    Bucket *pListTail;          // 存储数组尾元素指针\n    Bucket **arBuckets;         // 存储hash数组\n    dtor_func_t pDestructor;    // 在删除元素时执行的回调函数，用于资源的释放\n    zend_bool persistent;       //指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。\n    unsigned char nApplyCount; // 标记当前hash Bucket被递归访问的次数（防止多次递归）\n    zend_bool bApplyProtection;// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次\n#if ZEND_DEBUG\n    int inconsistent;\n#endif\n} HashTable;\n```\n\nnTableSize字段用于标示哈希表的容量，哈希表的初始容量最小为8。首先看看哈希表的初始化函数:\n\n```c\nZEND_API int _zend_hash_init(HashTable *ht, uint nSize, hash_func_t pHashFunction,\n                    dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n    uint i = 3;\n    //...\n    if (nSize >= 0x80000000) {\n        /* prevent overflow */\n        ht->nTableSize = 0x80000000;\n    } else {\n        while ((1U << i) < nSize) {\n            i++;\n        }\n        ht->nTableSize = 1 << i;\n    }\n    // ...\n    ht->nTableMask = ht->nTableSize - 1;\n\n    /* Uses ecalloc() so that Bucket* == NULL */\n    if (persistent) {\n        tmp = (Bucket **) calloc(ht->nTableSize, sizeof(Bucket *));\n        if (!tmp) {\n            return FAILURE;\n        }\n        ht->arBuckets = tmp;\n    } else {\n        tmp = (Bucket **) ecalloc_rel(ht->nTableSize, sizeof(Bucket *));\n        if (tmp) {\n            ht->arBuckets = tmp;\n        }\n    }\n\n    return SUCCESS;\n}\n```\n\n例如如果设置初始大小为10，则上面的算法将会将大小调整为16。也就是始终将大小调整为接近初始大小的 2的整数次方。\n\n为什么会做这样的调整呢？我们先看看HashTable将哈希值映射到槽位的方法，上一小节我们使用了取模的方式来将哈希值 映射到槽位，例如大小为8的哈希表，哈希值为100， 则映射的槽位索引为: 100 % 8 = 4，由于索引通常从0开始， 所以槽位的索引值为3，在PHP中使用如下的方式计算索引：\n\n```c\nh = zend_inline_hash_func(arKey, nKeyLength);\nnIndex = h & ht->nTableMask;\n```\n\n从上面的\\_zend\\_hash\\_init()函数中可知，ht->nTableMask的大小为ht->nTableSize -1。 这里使用&操作而不是使用取模，这是因为是相对来说取模操作的消耗和按位与的操作大很多。\n\n> **NOTE** mask的作用就是将哈希值映射到槽位所能存储的索引范围内。 例如：某个key的索引值是21， 哈希表的大小为8，则mask为7，则求与时的二进制表示为： 10101 & 111 = 101 也就是十进制的5。 因为2的整数次方-1的二进制比较特殊：后面N位的值都是1，这样比较容易能将值进行映射， 如果是普通数字进行了二进制与之后会影响哈希值的结果。那么哈希函数计算的值的平均分布就可能出现影响。\n\n设置好哈希表大小之后就需要为哈希表申请存储数据的空间了，如上面初始化的代码， 根据是否需要持久保存而调用了不同的内存申请方法。如前面PHP生命周期里介绍的,是否需要持久保存体现在：持久内容能在多个请求之间访问，而非持久存储是会在请求结束时释放占用的空间。 具体内容将在内存管理章节中进行介绍。\n\nHashTable中的nNumOfElements字段很好理解，每插入一个元素或者unset删掉元素时会更新这个字段。 这样在进行count()函数统计数组元素个数时就能快速的返回。\n\nnNextFreeElement字段非常有用。先看一段PHP代码：\n\n```php\n<?php\n$a = array(10 => 'Hello');\n$a[] = 'TIPI';\nvar_dump($a);\n\n// ouput\narray(2) {\n  [10]=>\n  string(5) \"Hello\"\n  [11]=>\n  string(5) \"TIPI\"\n}\n```\n\nPHP中可以不指定索引值向数组中添加元素，这时将默认使用数字作为索引， 和[C语言中的枚举](http://en.wikipedia.org/wiki/Enumerated_type)类似， 而这个元素的索引到底是多少就由nNextFreeElement字段决定了。 如果数组中存在了数字key，则会默认使用最新使用的key + 1，例如上例中已经存在了10作为key的元素， 这样新插入的默认索引就为11了。\n\n#### 数据容器：槽位\n\n下面看看保存哈希表数据的槽位数据结构体：\n\n```c\ntypedef struct bucket {\n    ulong h;            // 对char *key进行hash后的值，或者是用户指定的数字索引值\n    uint nKeyLength;    // hash关键字的长度，如果数组索引为数字，此值为0\n    void *pData;        // 指向value，一般是用户数据的副本，如果是指针数据，则指向pDataPtr\n    void *pDataPtr;     //如果是指针数据，此值会指向真正的value，同时上面pData会指向此值\n    struct bucket *pListNext;   // 整个hash表的下一元素\n    struct bucket *pListLast;   // 整个哈希表该元素的上一个元素\n    struct bucket *pNext;       // 存放在同一个hash Bucket内的下一个元素\n    struct bucket *pLast;       // 同一个哈希bucket的上一个元素\n    // 保存当前值所对于的key字符串，这个字段只能定义在最后，实现变长结构体\n    char arKey[1];              \n} Bucket;\n```\n\n如上面各字段的注释。h字段保存哈希表key哈希后的值。这里保存的哈希值而不是在哈希表中的索引值， 这是因为索引值和哈希表的容量有直接关系，如果哈希表扩容了，那么这些索引还得重新进行哈希在进行索引映射， 这也是一种优化手段。 在PHP中可以使用字符串或者数字作为数组的索引。 数字索引直接就可以作为哈希表的索引，数字也无需进行哈希处理。h字段后面的nKeyLength字段是作为key长度的标示， 如果索引是数字的话，则nKeyLength为0。在PHP数组中如果索引字符串可以被转换成数字也会被转换成数字索引。 **所以在PHP中例如'10'，'11'这类的字符索引和数字索引10， 11没有区别。**\n\n上面结构体的最后一个字段用来保存key的字符串，而这个字段却申明为只有一个字符的数组， 其实这里是一种长见的[变长结构体](http://stackoverflow.com/a/4690976/319672)，主要的目的是增加灵活性。 以下为哈希表插入新元素时申请空间的代码\n\n```c\np = (Bucket *) pemalloc(sizeof(Bucket) - 1 + nKeyLength, ht->persistent);\nif (!p) {\n    return FAILURE;\n}\n```\n\n如代码，申请的空间大小加上了字符串key的长度，然后把key拷贝到新申请的空间里。 在后面比如需要进行hash查找的时候就需要对比key这样就可以通过对比p->arKey和查找的key是否一样来进行数据的 查找。申请空间的大小-1是因为结构体内本身的那个字节还是可以使用的。\n\n> **NOTE** 在PHP5.4中将这个字段定义成const char\\* arKey类型了。\n\n![哈希表](/uploads/2017/09/03-01-02-zend_hashtable.png)memcpy(p->arKey, arKey, nKeyLength);\n\n上图来源于[网络](http://gsm56.com/?p=124)。\n\n*   Bucket结构体维护了两个双向链表，pNext和pLast指针分别指向本槽位所在的链表的关系。\n*   而pListNext和pListLast指针指向的则是整个哈希表所有的数据之间的链接关系。 HashTable结构体中的pListHead和pListTail则维护整个哈希表的头元素指针和最后一个元素的指针。\n\n> **NOTE** PHP中数组的操作函数非常多，例如：array\\_shift()和array\\_pop()函数，分别从数组的头部和尾部弹出元素。 哈希表中保存了头部和尾部指针，这样在执行这些操作时就能在常数时间内找到目标。 PHP中还有一些使用的相对不那么多的数组操作函数：next()，prev()等的循环中， 哈希表的另外一个指针就能发挥作用了：pInternalPointer，这个用于保存当前哈希表内部的指针。 这在循环时就非常有用。\n\n如图中左下角的假设，假设依次插入了Bucket1，Bucket2，Bucket3三个元素：\n\n1.  插入Bucket1时，哈希表为空，经过哈希后定位到索引为1的槽位。此时的1槽位只有一个元素Bucket1。 其中Bucket1的pData或者pDataPtr指向的是Bucket1所存储的数据。此时由于没有链接关系。pNext， pLast，pListNext，pListLast指针均为空。同时在HashTable结构体中也保存了整个哈希表的第一个元素指针， 和最后一个元素指针，此时HashTable的pListHead和pListTail指针均指向Bucket1。\n2.  插入Bucket2时，由于Bucket2的key和Bucket1的key出现冲突，此时将Bucket2放在双链表的前面。 由于Bucket2后插入并置于链表的前端，此时Bucket2.pNext指向Bucket1，由于Bucket2后插入。 Bucket1.pListNext指向Bucket2，这时Bucket2就是哈希表的最后一个元素，这是HashTable.pListTail指向Bucket2。\n3.  插入Bucket3，该key没有哈希到槽位1，这时Bucket2.pListNext指向Bucket3，因为Bucket3后插入。 同时HashTable.pListTail改为指向Bucket3。\n\n简单来说就是哈希表的Bucket结构维护了哈希表中插入元素的先后顺序，哈希表结构维护了整个哈希表的头和尾。 在操作哈希表的过程中始终保持预算之间的关系。\n\n### 哈希表的操作接口\n\n和上一节类似，将简单介绍PHP哈希表的操作接口实现。提供了如下几类操作接口：\n\n*   初始化操作，例如zend\\_hash\\_init()函数，用于初始化哈希表接口，分配空间等。\n*   查找，插入，删除和更新操作接口，这是比较常规的操作。\n*   迭代和循环，这类的接口用于循环对哈希表进行操作。\n*   复制，排序，倒置和销毁等操作。\n\n本小节选取其中的插入操作进行介绍。 在PHP中不管是对数组的添加操作（zend\\_hash\\_add），还是对数组的更新操作（zend\\_hash\\_update）， 其最终都是调用\\_zend\\_hash\\_add\\_or\\_update函数完成，这在面向对象编程中相当于两个公有方法和一个公共的私有方法的结构， 以实现一定程度上的代码复用。\n\n```c\nZEND_API int _zend_hash_add_or_update(HashTable *ht, const char *arKey, uint nKeyLength, void *pData, uint nDataSize, void **pDest, int flag ZEND_FILE_LINE_DC)\n{\n     //...省略变量初始化和nKeyLength <=0 的异常处理\n\n    h = zend_inline_hash_func(arKey, nKeyLength);\n    nIndex = h & ht->nTableMask;\n\n    p = ht->arBuckets[nIndex];\n    while (p != NULL) {\n        if ((p->h == h) && (p->nKeyLength == nKeyLength)) {\n            if (!memcmp(p->arKey, arKey, nKeyLength)) { //  更新操作\n                if (flag & HASH_ADD) {\n                    return FAILURE;\n                }\n                HANDLE_BLOCK_INTERRUPTIONS();\n\n                //..省略debug输出\n                if (ht->pDestructor) {\n                    ht->pDestructor(p->pData);\n                }\n                UPDATE_DATA(ht, p, pData, nDataSize);\n                if (pDest) {\n                    *pDest = p->pData;\n                }\n                HANDLE_UNBLOCK_INTERRUPTIONS();\n                return SUCCESS;\n            }\n        }\n        p = p->pNext;\n    }\n\n    p = (Bucket *) pemalloc(sizeof(Bucket) - 1 + nKeyLength, ht->persistent);\n    if (!p) {\n        return FAILURE;\n    }\n    memcpy(p->arKey, arKey, nKeyLength);\n    p->nKeyLength = nKeyLength;\n    INIT_DATA(ht, p, pData, nDataSize);\n    p->h = h;\n    CONNECT_TO_BUCKET_DLLIST(p, ht->arBuckets[nIndex]); //Bucket双向链表操作\n    if (pDest) {\n        *pDest = p->pData;\n    }\n\n    HANDLE_BLOCK_INTERRUPTIONS();\n    CONNECT_TO_GLOBAL_DLLIST(p, ht);    // 将新的Bucket元素添加到数组的链接表的最后面\n    ht->arBuckets[nIndex] = p;\n    HANDLE_UNBLOCK_INTERRUPTIONS();\n\n    ht->nNumOfElements++;\n    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        /*  如果此时数组的容量满了，则对其进行扩容。*/\n    return SUCCESS;\n}\n```\n\n整个写入或更新的操作流程如下：\n\n1.  生成hash值，通过与nTableMask执行与操作，获取在arBuckets数组中的Bucket。\n2.  如果Bucket中已经存在元素，则遍历整个Bucket，查找是否存在相同的key值元素，如果有并且是update调用，则执行update数据操作。\n3.  创建新的Bucket元素，初始化数据，并将新元素添加到当前hash值对应的Bucket链表的最前面（CONNECT\\_TO\\_BUCKET\\_DLLIST）。\n4.  将新的Bucket元素添加到数组的链接表的最后面（CONNECT\\_TO\\_GLOBAL\\_DLLIST）。\n5.  将元素个数加1，如果此时数组的容量满了，则对其进行扩容。这里的判断是依据nNumOfElements和nTableSize的大小。 如果nNumOfElements > nTableSize则会调用zend\\_hash\\_do\\_resize以2X的方式扩容（nTableSize << 1）。\n\n## 参考文献\n\n*   《深入理解PHP内核》","source":"_posts/phpsource-hash.md","raw":"---\ntitle: PHP源码分析之哈希表\ntags: []\nid: '178'\ncategories:\n  - - PHP\n  - - PHP源码\ncomments: false\ndate: 2017-09-20 20:04:15\n---\n\nPHP中使用最频繁的莫过于字符串和数组了，然而PHP中的数组主要是基于哈希表，这篇文章主要是分析一下PHP源码的内部哈希表的实现方式。PHP版本基于PHP 5.3。\n<!-- more -->\n## 基本概念\n\n哈希表在实践中使用非常的广泛，哈希表的优势在于查询的时间复杂度是O(1), 哈希表提供增删改查等操作，这些操作在最坏的情况下就是和链表的性能O(n)一样。\n\n哈希表主要有一下组成：\n\n*   键（key）：用于操作数据的标示，例如PHP数组中的索引，或者字符串键等等。\n*   槽(slot/bucket)：哈希表中用于保存数据的一个单元，也就是数据真正存放的容器。\n*   哈希函数(hash function)：将key映射(map)到数据应该存放的slot所在位置的函数。\n*   哈希冲突(hash collision)：哈希函数将两个不同的key映射到同一个索引的情况。\n\n哈希表可以理解为数组的拓展，哈希表使用的是键的方式，然后通过哈希函数映射到一个索引，这个索引可以理解称是这个值得实际的存储位置。\n\n```\nhash（key）-> index\n```\n\n通过合理设计的哈希函数，我们就能将key映射到合适的范围，因为我们的key空间可以很大(例如字符串key)， 在映射到一个较小的空间中时可能会出现两个不同的key映射被到同一个index上的情况， 这就是我们所说的出现了冲突。 目前解决hash冲突的方法主要有两种：链接法和开放寻址法。\n\n## 哈希冲突\n\n### 链接法\n\n链接法通常是通过一个链表保存bucket值的方式来解决冲突，链接法的最坏情况就是所有的key都映射到一个槽位，这样就使哈希表成了一个链表，然后在查询的时候，时间复杂度就成了O（n）。所以选择一哈希函数非常重要，最好能够使哈希值的散列度大一些，分布均匀一些。\n\n由于目前大部分的编程语言的哈希表实现都是开源的，大部分语言的哈希算法都是公开的算法， 虽然目前的哈希算法都能良好的将key进行比较均匀的分布，而这个假使的前提是key是随机的，正是由于算法的确定性， 这就导致了别有用心的黑客能利用已知算法的可确定性来构造一些特殊的key，让这些key都映射到 同一个槽位导致哈希表退化成单链表，导致程序的性能急剧下降，从而造成一些应用的吞吐能力急剧下降， 尤其是对于高并发的应用影响很大，通过大量类似的请求可以让服务器遭受DoS(服务拒绝攻击)， 这个问题一直就存在着，只是最近才被各个语言重视起来。\n\n哈希冲突攻击利用的哈希表最根本的弱点是：**开源算法和哈希实现的确定性以及可预测性**，这样攻击者才可以利用特殊构造的key来进行攻击。要解决这个问题的方法则是让攻击者无法轻易构造 能够进行攻击的key序列。\n\n> **NOTE** 在笔者编写这节内容的时候PHP语言也采取了相应的措施来防止这类的攻击，PHP采用的是一种 治标不治本的做法: [限制用户提交数据字段数量](http://cn2.php.net/manual/en/info.configuration.php#ini.max-input-vars) 这样可以避免大部分的攻击，不过应用程序通常会有很多的数据输入方式，比如，SOAP，REST等等， 比如很多应用都会接受用户传入的JSON字符串，在执行json\\_decode()的时候也可能会遭受攻击。 所以最根本的解决方法是让哈希表的碰撞key序列无法轻易的构造，目前PHP中还没有引入不增加额外的复杂性情况下的完美解决方案。\n\n目前PHP中HashTable的哈希冲突解决方法就是链接法。\n\n### 开放寻址法\n\n通常还有另外一种解决冲突的方法：开放寻址法。使用开放寻址法是槽本身直接存放数据， 在插入数据时如果key所映射到的索引已经有数据了，这说明发生了冲突，这是会寻找下一个槽， 如果该槽也被占用了则继续寻找下一个槽，直到寻找到没有被占用的槽，在查找时也使用同样的策略来进行。\n\n由于开放寻址法处理冲突的时候占用的是其他槽位的空间,这可能会导致后续的key在插入的时候更加容易出现 哈希冲突，所以采用开放寻址法的哈希表的装载因子不能太高，否则容易出现性能下降。\n\n> **NOTE** _装载因子_是哈希表保存的元素数量和哈希表容量的比，通常采用链接法解决冲突的哈希表的装载 因子最好不要大于1，而采用开放寻址法的哈希表最好不要大于0.5。\n\n## PHP的实现\n\nPHP中的哈希表实现在Zend/zend\\_hash.c中，还是按照上一小节的方式，先看看PHP实现中的数据结构， PHP使用如下两个数据结构来实现哈希表，HashTable结构体用于保存整个哈希表需要的基本信息， 而Bucket结构体用于保存具体的数据内容，如下：\n\n```c\ntypedef struct _hashtable { \n    uint nTableSize;        // hash Bucket的大小，最小为8，以2x增长。\n    uint nTableMask;        // nTableSize-1 ， 索引取值的优化\n    uint nNumOfElements;    // hash Bucket中当前存在的元素个数，count()函数会直接返回此值 \n    ulong nNextFreeElement; // 下一个数字索引的位置\n    Bucket *pInternalPointer;   // 当前遍历的指针（foreach比for快的原因之一）\n    Bucket *pListHead;          // 存储数组头元素指针\n    Bucket *pListTail;          // 存储数组尾元素指针\n    Bucket **arBuckets;         // 存储hash数组\n    dtor_func_t pDestructor;    // 在删除元素时执行的回调函数，用于资源的释放\n    zend_bool persistent;       //指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。\n    unsigned char nApplyCount; // 标记当前hash Bucket被递归访问的次数（防止多次递归）\n    zend_bool bApplyProtection;// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次\n#if ZEND_DEBUG\n    int inconsistent;\n#endif\n} HashTable;\n```\n\nnTableSize字段用于标示哈希表的容量，哈希表的初始容量最小为8。首先看看哈希表的初始化函数:\n\n```c\nZEND_API int _zend_hash_init(HashTable *ht, uint nSize, hash_func_t pHashFunction,\n                    dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n    uint i = 3;\n    //...\n    if (nSize >= 0x80000000) {\n        /* prevent overflow */\n        ht->nTableSize = 0x80000000;\n    } else {\n        while ((1U << i) < nSize) {\n            i++;\n        }\n        ht->nTableSize = 1 << i;\n    }\n    // ...\n    ht->nTableMask = ht->nTableSize - 1;\n\n    /* Uses ecalloc() so that Bucket* == NULL */\n    if (persistent) {\n        tmp = (Bucket **) calloc(ht->nTableSize, sizeof(Bucket *));\n        if (!tmp) {\n            return FAILURE;\n        }\n        ht->arBuckets = tmp;\n    } else {\n        tmp = (Bucket **) ecalloc_rel(ht->nTableSize, sizeof(Bucket *));\n        if (tmp) {\n            ht->arBuckets = tmp;\n        }\n    }\n\n    return SUCCESS;\n}\n```\n\n例如如果设置初始大小为10，则上面的算法将会将大小调整为16。也就是始终将大小调整为接近初始大小的 2的整数次方。\n\n为什么会做这样的调整呢？我们先看看HashTable将哈希值映射到槽位的方法，上一小节我们使用了取模的方式来将哈希值 映射到槽位，例如大小为8的哈希表，哈希值为100， 则映射的槽位索引为: 100 % 8 = 4，由于索引通常从0开始， 所以槽位的索引值为3，在PHP中使用如下的方式计算索引：\n\n```c\nh = zend_inline_hash_func(arKey, nKeyLength);\nnIndex = h & ht->nTableMask;\n```\n\n从上面的\\_zend\\_hash\\_init()函数中可知，ht->nTableMask的大小为ht->nTableSize -1。 这里使用&操作而不是使用取模，这是因为是相对来说取模操作的消耗和按位与的操作大很多。\n\n> **NOTE** mask的作用就是将哈希值映射到槽位所能存储的索引范围内。 例如：某个key的索引值是21， 哈希表的大小为8，则mask为7，则求与时的二进制表示为： 10101 & 111 = 101 也就是十进制的5。 因为2的整数次方-1的二进制比较特殊：后面N位的值都是1，这样比较容易能将值进行映射， 如果是普通数字进行了二进制与之后会影响哈希值的结果。那么哈希函数计算的值的平均分布就可能出现影响。\n\n设置好哈希表大小之后就需要为哈希表申请存储数据的空间了，如上面初始化的代码， 根据是否需要持久保存而调用了不同的内存申请方法。如前面PHP生命周期里介绍的,是否需要持久保存体现在：持久内容能在多个请求之间访问，而非持久存储是会在请求结束时释放占用的空间。 具体内容将在内存管理章节中进行介绍。\n\nHashTable中的nNumOfElements字段很好理解，每插入一个元素或者unset删掉元素时会更新这个字段。 这样在进行count()函数统计数组元素个数时就能快速的返回。\n\nnNextFreeElement字段非常有用。先看一段PHP代码：\n\n```php\n<?php\n$a = array(10 => 'Hello');\n$a[] = 'TIPI';\nvar_dump($a);\n\n// ouput\narray(2) {\n  [10]=>\n  string(5) \"Hello\"\n  [11]=>\n  string(5) \"TIPI\"\n}\n```\n\nPHP中可以不指定索引值向数组中添加元素，这时将默认使用数字作为索引， 和[C语言中的枚举](http://en.wikipedia.org/wiki/Enumerated_type)类似， 而这个元素的索引到底是多少就由nNextFreeElement字段决定了。 如果数组中存在了数字key，则会默认使用最新使用的key + 1，例如上例中已经存在了10作为key的元素， 这样新插入的默认索引就为11了。\n\n#### 数据容器：槽位\n\n下面看看保存哈希表数据的槽位数据结构体：\n\n```c\ntypedef struct bucket {\n    ulong h;            // 对char *key进行hash后的值，或者是用户指定的数字索引值\n    uint nKeyLength;    // hash关键字的长度，如果数组索引为数字，此值为0\n    void *pData;        // 指向value，一般是用户数据的副本，如果是指针数据，则指向pDataPtr\n    void *pDataPtr;     //如果是指针数据，此值会指向真正的value，同时上面pData会指向此值\n    struct bucket *pListNext;   // 整个hash表的下一元素\n    struct bucket *pListLast;   // 整个哈希表该元素的上一个元素\n    struct bucket *pNext;       // 存放在同一个hash Bucket内的下一个元素\n    struct bucket *pLast;       // 同一个哈希bucket的上一个元素\n    // 保存当前值所对于的key字符串，这个字段只能定义在最后，实现变长结构体\n    char arKey[1];              \n} Bucket;\n```\n\n如上面各字段的注释。h字段保存哈希表key哈希后的值。这里保存的哈希值而不是在哈希表中的索引值， 这是因为索引值和哈希表的容量有直接关系，如果哈希表扩容了，那么这些索引还得重新进行哈希在进行索引映射， 这也是一种优化手段。 在PHP中可以使用字符串或者数字作为数组的索引。 数字索引直接就可以作为哈希表的索引，数字也无需进行哈希处理。h字段后面的nKeyLength字段是作为key长度的标示， 如果索引是数字的话，则nKeyLength为0。在PHP数组中如果索引字符串可以被转换成数字也会被转换成数字索引。 **所以在PHP中例如'10'，'11'这类的字符索引和数字索引10， 11没有区别。**\n\n上面结构体的最后一个字段用来保存key的字符串，而这个字段却申明为只有一个字符的数组， 其实这里是一种长见的[变长结构体](http://stackoverflow.com/a/4690976/319672)，主要的目的是增加灵活性。 以下为哈希表插入新元素时申请空间的代码\n\n```c\np = (Bucket *) pemalloc(sizeof(Bucket) - 1 + nKeyLength, ht->persistent);\nif (!p) {\n    return FAILURE;\n}\n```\n\n如代码，申请的空间大小加上了字符串key的长度，然后把key拷贝到新申请的空间里。 在后面比如需要进行hash查找的时候就需要对比key这样就可以通过对比p->arKey和查找的key是否一样来进行数据的 查找。申请空间的大小-1是因为结构体内本身的那个字节还是可以使用的。\n\n> **NOTE** 在PHP5.4中将这个字段定义成const char\\* arKey类型了。\n\n![哈希表](/uploads/2017/09/03-01-02-zend_hashtable.png)memcpy(p->arKey, arKey, nKeyLength);\n\n上图来源于[网络](http://gsm56.com/?p=124)。\n\n*   Bucket结构体维护了两个双向链表，pNext和pLast指针分别指向本槽位所在的链表的关系。\n*   而pListNext和pListLast指针指向的则是整个哈希表所有的数据之间的链接关系。 HashTable结构体中的pListHead和pListTail则维护整个哈希表的头元素指针和最后一个元素的指针。\n\n> **NOTE** PHP中数组的操作函数非常多，例如：array\\_shift()和array\\_pop()函数，分别从数组的头部和尾部弹出元素。 哈希表中保存了头部和尾部指针，这样在执行这些操作时就能在常数时间内找到目标。 PHP中还有一些使用的相对不那么多的数组操作函数：next()，prev()等的循环中， 哈希表的另外一个指针就能发挥作用了：pInternalPointer，这个用于保存当前哈希表内部的指针。 这在循环时就非常有用。\n\n如图中左下角的假设，假设依次插入了Bucket1，Bucket2，Bucket3三个元素：\n\n1.  插入Bucket1时，哈希表为空，经过哈希后定位到索引为1的槽位。此时的1槽位只有一个元素Bucket1。 其中Bucket1的pData或者pDataPtr指向的是Bucket1所存储的数据。此时由于没有链接关系。pNext， pLast，pListNext，pListLast指针均为空。同时在HashTable结构体中也保存了整个哈希表的第一个元素指针， 和最后一个元素指针，此时HashTable的pListHead和pListTail指针均指向Bucket1。\n2.  插入Bucket2时，由于Bucket2的key和Bucket1的key出现冲突，此时将Bucket2放在双链表的前面。 由于Bucket2后插入并置于链表的前端，此时Bucket2.pNext指向Bucket1，由于Bucket2后插入。 Bucket1.pListNext指向Bucket2，这时Bucket2就是哈希表的最后一个元素，这是HashTable.pListTail指向Bucket2。\n3.  插入Bucket3，该key没有哈希到槽位1，这时Bucket2.pListNext指向Bucket3，因为Bucket3后插入。 同时HashTable.pListTail改为指向Bucket3。\n\n简单来说就是哈希表的Bucket结构维护了哈希表中插入元素的先后顺序，哈希表结构维护了整个哈希表的头和尾。 在操作哈希表的过程中始终保持预算之间的关系。\n\n### 哈希表的操作接口\n\n和上一节类似，将简单介绍PHP哈希表的操作接口实现。提供了如下几类操作接口：\n\n*   初始化操作，例如zend\\_hash\\_init()函数，用于初始化哈希表接口，分配空间等。\n*   查找，插入，删除和更新操作接口，这是比较常规的操作。\n*   迭代和循环，这类的接口用于循环对哈希表进行操作。\n*   复制，排序，倒置和销毁等操作。\n\n本小节选取其中的插入操作进行介绍。 在PHP中不管是对数组的添加操作（zend\\_hash\\_add），还是对数组的更新操作（zend\\_hash\\_update）， 其最终都是调用\\_zend\\_hash\\_add\\_or\\_update函数完成，这在面向对象编程中相当于两个公有方法和一个公共的私有方法的结构， 以实现一定程度上的代码复用。\n\n```c\nZEND_API int _zend_hash_add_or_update(HashTable *ht, const char *arKey, uint nKeyLength, void *pData, uint nDataSize, void **pDest, int flag ZEND_FILE_LINE_DC)\n{\n     //...省略变量初始化和nKeyLength <=0 的异常处理\n\n    h = zend_inline_hash_func(arKey, nKeyLength);\n    nIndex = h & ht->nTableMask;\n\n    p = ht->arBuckets[nIndex];\n    while (p != NULL) {\n        if ((p->h == h) && (p->nKeyLength == nKeyLength)) {\n            if (!memcmp(p->arKey, arKey, nKeyLength)) { //  更新操作\n                if (flag & HASH_ADD) {\n                    return FAILURE;\n                }\n                HANDLE_BLOCK_INTERRUPTIONS();\n\n                //..省略debug输出\n                if (ht->pDestructor) {\n                    ht->pDestructor(p->pData);\n                }\n                UPDATE_DATA(ht, p, pData, nDataSize);\n                if (pDest) {\n                    *pDest = p->pData;\n                }\n                HANDLE_UNBLOCK_INTERRUPTIONS();\n                return SUCCESS;\n            }\n        }\n        p = p->pNext;\n    }\n\n    p = (Bucket *) pemalloc(sizeof(Bucket) - 1 + nKeyLength, ht->persistent);\n    if (!p) {\n        return FAILURE;\n    }\n    memcpy(p->arKey, arKey, nKeyLength);\n    p->nKeyLength = nKeyLength;\n    INIT_DATA(ht, p, pData, nDataSize);\n    p->h = h;\n    CONNECT_TO_BUCKET_DLLIST(p, ht->arBuckets[nIndex]); //Bucket双向链表操作\n    if (pDest) {\n        *pDest = p->pData;\n    }\n\n    HANDLE_BLOCK_INTERRUPTIONS();\n    CONNECT_TO_GLOBAL_DLLIST(p, ht);    // 将新的Bucket元素添加到数组的链接表的最后面\n    ht->arBuckets[nIndex] = p;\n    HANDLE_UNBLOCK_INTERRUPTIONS();\n\n    ht->nNumOfElements++;\n    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        /*  如果此时数组的容量满了，则对其进行扩容。*/\n    return SUCCESS;\n}\n```\n\n整个写入或更新的操作流程如下：\n\n1.  生成hash值，通过与nTableMask执行与操作，获取在arBuckets数组中的Bucket。\n2.  如果Bucket中已经存在元素，则遍历整个Bucket，查找是否存在相同的key值元素，如果有并且是update调用，则执行update数据操作。\n3.  创建新的Bucket元素，初始化数据，并将新元素添加到当前hash值对应的Bucket链表的最前面（CONNECT\\_TO\\_BUCKET\\_DLLIST）。\n4.  将新的Bucket元素添加到数组的链接表的最后面（CONNECT\\_TO\\_GLOBAL\\_DLLIST）。\n5.  将元素个数加1，如果此时数组的容量满了，则对其进行扩容。这里的判断是依据nNumOfElements和nTableSize的大小。 如果nNumOfElements > nTableSize则会调用zend\\_hash\\_do\\_resize以2X的方式扩容（nTableSize << 1）。\n\n## 参考文献\n\n*   《深入理解PHP内核》","slug":"phpsource-hash","published":1,"updated":"2022-03-13T01:17:12.413Z","_id":"cl0oi8mi30071417t1nv2f6ff","layout":"post","photos":[],"link":"","content":"<p>PHP中使用最频繁的莫过于字符串和数组了，然而PHP中的数组主要是基于哈希表，这篇文章主要是分析一下PHP源码的内部哈希表的实现方式。PHP版本基于PHP 5.3。</p>\n<span id=\"more\"></span>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>哈希表在实践中使用非常的广泛，哈希表的优势在于查询的时间复杂度是O(1), 哈希表提供增删改查等操作，这些操作在最坏的情况下就是和链表的性能O(n)一样。</p>\n<p>哈希表主要有一下组成：</p>\n<ul>\n<li>键（key）：用于操作数据的标示，例如PHP数组中的索引，或者字符串键等等。</li>\n<li>槽(slot&#x2F;bucket)：哈希表中用于保存数据的一个单元，也就是数据真正存放的容器。</li>\n<li>哈希函数(hash function)：将key映射(map)到数据应该存放的slot所在位置的函数。</li>\n<li>哈希冲突(hash collision)：哈希函数将两个不同的key映射到同一个索引的情况。</li>\n</ul>\n<p>哈希表可以理解为数组的拓展，哈希表使用的是键的方式，然后通过哈希函数映射到一个索引，这个索引可以理解称是这个值得实际的存储位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash（key）-&gt; index</span><br></pre></td></tr></table></figure>\n\n<p>通过合理设计的哈希函数，我们就能将key映射到合适的范围，因为我们的key空间可以很大(例如字符串key)， 在映射到一个较小的空间中时可能会出现两个不同的key映射被到同一个index上的情况， 这就是我们所说的出现了冲突。 目前解决hash冲突的方法主要有两种：链接法和开放寻址法。</p>\n<h2 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h2><h3 id=\"链接法\"><a href=\"#链接法\" class=\"headerlink\" title=\"链接法\"></a>链接法</h3><p>链接法通常是通过一个链表保存bucket值的方式来解决冲突，链接法的最坏情况就是所有的key都映射到一个槽位，这样就使哈希表成了一个链表，然后在查询的时候，时间复杂度就成了O（n）。所以选择一哈希函数非常重要，最好能够使哈希值的散列度大一些，分布均匀一些。</p>\n<p>由于目前大部分的编程语言的哈希表实现都是开源的，大部分语言的哈希算法都是公开的算法， 虽然目前的哈希算法都能良好的将key进行比较均匀的分布，而这个假使的前提是key是随机的，正是由于算法的确定性， 这就导致了别有用心的黑客能利用已知算法的可确定性来构造一些特殊的key，让这些key都映射到 同一个槽位导致哈希表退化成单链表，导致程序的性能急剧下降，从而造成一些应用的吞吐能力急剧下降， 尤其是对于高并发的应用影响很大，通过大量类似的请求可以让服务器遭受DoS(服务拒绝攻击)， 这个问题一直就存在着，只是最近才被各个语言重视起来。</p>\n<p>哈希冲突攻击利用的哈希表最根本的弱点是：<strong>开源算法和哈希实现的确定性以及可预测性</strong>，这样攻击者才可以利用特殊构造的key来进行攻击。要解决这个问题的方法则是让攻击者无法轻易构造 能够进行攻击的key序列。</p>\n<blockquote>\n<p><strong>NOTE</strong> 在笔者编写这节内容的时候PHP语言也采取了相应的措施来防止这类的攻击，PHP采用的是一种 治标不治本的做法: <a href=\"http://cn2.php.net/manual/en/info.configuration.php#ini.max-input-vars\">限制用户提交数据字段数量</a> 这样可以避免大部分的攻击，不过应用程序通常会有很多的数据输入方式，比如，SOAP，REST等等， 比如很多应用都会接受用户传入的JSON字符串，在执行json_decode()的时候也可能会遭受攻击。 所以最根本的解决方法是让哈希表的碰撞key序列无法轻易的构造，目前PHP中还没有引入不增加额外的复杂性情况下的完美解决方案。</p>\n</blockquote>\n<p>目前PHP中HashTable的哈希冲突解决方法就是链接法。</p>\n<h3 id=\"开放寻址法\"><a href=\"#开放寻址法\" class=\"headerlink\" title=\"开放寻址法\"></a>开放寻址法</h3><p>通常还有另外一种解决冲突的方法：开放寻址法。使用开放寻址法是槽本身直接存放数据， 在插入数据时如果key所映射到的索引已经有数据了，这说明发生了冲突，这是会寻找下一个槽， 如果该槽也被占用了则继续寻找下一个槽，直到寻找到没有被占用的槽，在查找时也使用同样的策略来进行。</p>\n<p>由于开放寻址法处理冲突的时候占用的是其他槽位的空间,这可能会导致后续的key在插入的时候更加容易出现 哈希冲突，所以采用开放寻址法的哈希表的装载因子不能太高，否则容易出现性能下降。</p>\n<blockquote>\n<p><strong>NOTE</strong> _装载因子_是哈希表保存的元素数量和哈希表容量的比，通常采用链接法解决冲突的哈希表的装载 因子最好不要大于1，而采用开放寻址法的哈希表最好不要大于0.5。</p>\n</blockquote>\n<h2 id=\"PHP的实现\"><a href=\"#PHP的实现\" class=\"headerlink\" title=\"PHP的实现\"></a>PHP的实现</h2><p>PHP中的哈希表实现在Zend&#x2F;zend_hash.c中，还是按照上一小节的方式，先看看PHP实现中的数据结构， PHP使用如下两个数据结构来实现哈希表，HashTable结构体用于保存整个哈希表需要的基本信息， 而Bucket结构体用于保存具体的数据内容，如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">hashtable</span> &#123;</span> </span><br><span class=\"line\">    uint nTableSize;        <span class=\"comment\">// hash Bucket的大小，最小为8，以2x增长。</span></span><br><span class=\"line\">    uint nTableMask;        <span class=\"comment\">// nTableSize-1 ， 索引取值的优化</span></span><br><span class=\"line\">    uint nNumOfElements;    <span class=\"comment\">// hash Bucket中当前存在的元素个数，count()函数会直接返回此值 </span></span><br><span class=\"line\">    ulong nNextFreeElement; <span class=\"comment\">// 下一个数字索引的位置</span></span><br><span class=\"line\">    Bucket *pInternalPointer;   <span class=\"comment\">// 当前遍历的指针（foreach比for快的原因之一）</span></span><br><span class=\"line\">    Bucket *pListHead;          <span class=\"comment\">// 存储数组头元素指针</span></span><br><span class=\"line\">    Bucket *pListTail;          <span class=\"comment\">// 存储数组尾元素指针</span></span><br><span class=\"line\">    Bucket **arBuckets;         <span class=\"comment\">// 存储hash数组</span></span><br><span class=\"line\">    <span class=\"type\">dtor_func_t</span> pDestructor;    <span class=\"comment\">// 在删除元素时执行的回调函数，用于资源的释放</span></span><br><span class=\"line\">    zend_bool persistent;       <span class=\"comment\">//指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> nApplyCount; <span class=\"comment\">// 标记当前hash Bucket被递归访问的次数（防止多次递归）</span></span><br><span class=\"line\">    zend_bool bApplyProtection;<span class=\"comment\">// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> ZEND_DEBUG</span></span><br><span class=\"line\">    <span class=\"type\">int</span> inconsistent;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125; HashTable;</span><br></pre></td></tr></table></figure>\n\n<p>nTableSize字段用于标示哈希表的容量，哈希表的初始容量最小为8。首先看看哈希表的初始化函数:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_API <span class=\"type\">int</span> _zend_hash_init(HashTable *ht, uint nSize, <span class=\"type\">hash_func_t</span> pHashFunction,</span><br><span class=\"line\">                    <span class=\"type\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    uint i = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize &gt;= <span class=\"number\">0x80000000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* prevent overflow */</span></span><br><span class=\"line\">        ht-&gt;nTableSize = <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((<span class=\"number\">1U</span> &lt;&lt; i) &lt; nSize) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ht-&gt;nTableSize = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ht-&gt;nTableMask = ht-&gt;nTableSize - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Uses ecalloc() so that Bucket* == NULL */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (persistent) &#123;</span><br><span class=\"line\">        tmp = (Bucket **) <span class=\"built_in\">calloc</span>(ht-&gt;nTableSize, <span class=\"keyword\">sizeof</span>(Bucket *));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tmp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ht-&gt;arBuckets = tmp;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        tmp = (Bucket **) ecalloc_rel(ht-&gt;nTableSize, <span class=\"keyword\">sizeof</span>(Bucket *));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp) &#123;</span><br><span class=\"line\">            ht-&gt;arBuckets = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如如果设置初始大小为10，则上面的算法将会将大小调整为16。也就是始终将大小调整为接近初始大小的 2的整数次方。</p>\n<p>为什么会做这样的调整呢？我们先看看HashTable将哈希值映射到槽位的方法，上一小节我们使用了取模的方式来将哈希值 映射到槽位，例如大小为8的哈希表，哈希值为100， 则映射的槽位索引为: 100 % 8 &#x3D; 4，由于索引通常从0开始， 所以槽位的索引值为3，在PHP中使用如下的方式计算索引：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = zend_inline_hash_func(arKey, nKeyLength);</span><br><span class=\"line\">nIndex = h &amp; ht-&gt;nTableMask;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的_zend_hash_init()函数中可知，ht-&gt;nTableMask的大小为ht-&gt;nTableSize -1。 这里使用&amp;操作而不是使用取模，这是因为是相对来说取模操作的消耗和按位与的操作大很多。</p>\n<blockquote>\n<p><strong>NOTE</strong> mask的作用就是将哈希值映射到槽位所能存储的索引范围内。 例如：某个key的索引值是21， 哈希表的大小为8，则mask为7，则求与时的二进制表示为： 10101 &amp; 111 &#x3D; 101 也就是十进制的5。 因为2的整数次方-1的二进制比较特殊：后面N位的值都是1，这样比较容易能将值进行映射， 如果是普通数字进行了二进制与之后会影响哈希值的结果。那么哈希函数计算的值的平均分布就可能出现影响。</p>\n</blockquote>\n<p>设置好哈希表大小之后就需要为哈希表申请存储数据的空间了，如上面初始化的代码， 根据是否需要持久保存而调用了不同的内存申请方法。如前面PHP生命周期里介绍的,是否需要持久保存体现在：持久内容能在多个请求之间访问，而非持久存储是会在请求结束时释放占用的空间。 具体内容将在内存管理章节中进行介绍。</p>\n<p>HashTable中的nNumOfElements字段很好理解，每插入一个元素或者unset删掉元素时会更新这个字段。 这样在进行count()函数统计数组元素个数时就能快速的返回。</p>\n<p>nNextFreeElement字段非常有用。先看一段PHP代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>(<span class=\"number\">10</span> =&gt; <span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$a</span>[] = <span class=\"string\">&#x27;TIPI&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ouput</span></span><br><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  [<span class=\"number\">10</span>]=&gt;</span><br><span class=\"line\">  <span class=\"keyword\">string</span>(<span class=\"number\">5</span>) <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">  [<span class=\"number\">11</span>]=&gt;</span><br><span class=\"line\">  <span class=\"keyword\">string</span>(<span class=\"number\">5</span>) <span class=\"string\">&quot;TIPI&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PHP中可以不指定索引值向数组中添加元素，这时将默认使用数字作为索引， 和<a href=\"http://en.wikipedia.org/wiki/Enumerated_type\">C语言中的枚举</a>类似， 而这个元素的索引到底是多少就由nNextFreeElement字段决定了。 如果数组中存在了数字key，则会默认使用最新使用的key + 1，例如上例中已经存在了10作为key的元素， 这样新插入的默认索引就为11了。</p>\n<h4 id=\"数据容器：槽位\"><a href=\"#数据容器：槽位\" class=\"headerlink\" title=\"数据容器：槽位\"></a>数据容器：槽位</h4><p>下面看看保存哈希表数据的槽位数据结构体：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> &#123;</span></span><br><span class=\"line\">    ulong h;            <span class=\"comment\">// 对char *key进行hash后的值，或者是用户指定的数字索引值</span></span><br><span class=\"line\">    uint nKeyLength;    <span class=\"comment\">// hash关键字的长度，如果数组索引为数字，此值为0</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *pData;        <span class=\"comment\">// 指向value，一般是用户数据的副本，如果是指针数据，则指向pDataPtr</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *pDataPtr;     <span class=\"comment\">//如果是指针数据，此值会指向真正的value，同时上面pData会指向此值</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pListNext</span>;</span>   <span class=\"comment\">// 整个hash表的下一元素</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pListLast</span>;</span>   <span class=\"comment\">// 整个哈希表该元素的上一个元素</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pNext</span>;</span>       <span class=\"comment\">// 存放在同一个hash Bucket内的下一个元素</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pLast</span>;</span>       <span class=\"comment\">// 同一个哈希bucket的上一个元素</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存当前值所对于的key字符串，这个字段只能定义在最后，实现变长结构体</span></span><br><span class=\"line\">    <span class=\"type\">char</span> arKey[<span class=\"number\">1</span>];              </span><br><span class=\"line\">&#125; Bucket;</span><br></pre></td></tr></table></figure>\n\n<p>如上面各字段的注释。h字段保存哈希表key哈希后的值。这里保存的哈希值而不是在哈希表中的索引值， 这是因为索引值和哈希表的容量有直接关系，如果哈希表扩容了，那么这些索引还得重新进行哈希在进行索引映射， 这也是一种优化手段。 在PHP中可以使用字符串或者数字作为数组的索引。 数字索引直接就可以作为哈希表的索引，数字也无需进行哈希处理。h字段后面的nKeyLength字段是作为key长度的标示， 如果索引是数字的话，则nKeyLength为0。在PHP数组中如果索引字符串可以被转换成数字也会被转换成数字索引。 <strong>所以在PHP中例如’10’，’11’这类的字符索引和数字索引10， 11没有区别。</strong></p>\n<p>上面结构体的最后一个字段用来保存key的字符串，而这个字段却申明为只有一个字符的数组， 其实这里是一种长见的<a href=\"http://stackoverflow.com/a/4690976/319672\">变长结构体</a>，主要的目的是增加灵活性。 以下为哈希表插入新元素时申请空间的代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = (Bucket *) pemalloc(<span class=\"keyword\">sizeof</span>(Bucket) - <span class=\"number\">1</span> + nKeyLength, ht-&gt;persistent);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码，申请的空间大小加上了字符串key的长度，然后把key拷贝到新申请的空间里。 在后面比如需要进行hash查找的时候就需要对比key这样就可以通过对比p-&gt;arKey和查找的key是否一样来进行数据的 查找。申请空间的大小-1是因为结构体内本身的那个字节还是可以使用的。</p>\n<blockquote>\n<p><strong>NOTE</strong> 在PHP5.4中将这个字段定义成const char* arKey类型了。</p>\n</blockquote>\n<p><img src=\"/uploads/2017/09/03-01-02-zend_hashtable.png\" alt=\"哈希表\">memcpy(p-&gt;arKey, arKey, nKeyLength);</p>\n<p>上图来源于<a href=\"http://gsm56.com/?p=124\">网络</a>。</p>\n<ul>\n<li>Bucket结构体维护了两个双向链表，pNext和pLast指针分别指向本槽位所在的链表的关系。</li>\n<li>而pListNext和pListLast指针指向的则是整个哈希表所有的数据之间的链接关系。 HashTable结构体中的pListHead和pListTail则维护整个哈希表的头元素指针和最后一个元素的指针。</li>\n</ul>\n<blockquote>\n<p><strong>NOTE</strong> PHP中数组的操作函数非常多，例如：array_shift()和array_pop()函数，分别从数组的头部和尾部弹出元素。 哈希表中保存了头部和尾部指针，这样在执行这些操作时就能在常数时间内找到目标。 PHP中还有一些使用的相对不那么多的数组操作函数：next()，prev()等的循环中， 哈希表的另外一个指针就能发挥作用了：pInternalPointer，这个用于保存当前哈希表内部的指针。 这在循环时就非常有用。</p>\n</blockquote>\n<p>如图中左下角的假设，假设依次插入了Bucket1，Bucket2，Bucket3三个元素：</p>\n<ol>\n<li>插入Bucket1时，哈希表为空，经过哈希后定位到索引为1的槽位。此时的1槽位只有一个元素Bucket1。 其中Bucket1的pData或者pDataPtr指向的是Bucket1所存储的数据。此时由于没有链接关系。pNext， pLast，pListNext，pListLast指针均为空。同时在HashTable结构体中也保存了整个哈希表的第一个元素指针， 和最后一个元素指针，此时HashTable的pListHead和pListTail指针均指向Bucket1。</li>\n<li>插入Bucket2时，由于Bucket2的key和Bucket1的key出现冲突，此时将Bucket2放在双链表的前面。 由于Bucket2后插入并置于链表的前端，此时Bucket2.pNext指向Bucket1，由于Bucket2后插入。 Bucket1.pListNext指向Bucket2，这时Bucket2就是哈希表的最后一个元素，这是HashTable.pListTail指向Bucket2。</li>\n<li>插入Bucket3，该key没有哈希到槽位1，这时Bucket2.pListNext指向Bucket3，因为Bucket3后插入。 同时HashTable.pListTail改为指向Bucket3。</li>\n</ol>\n<p>简单来说就是哈希表的Bucket结构维护了哈希表中插入元素的先后顺序，哈希表结构维护了整个哈希表的头和尾。 在操作哈希表的过程中始终保持预算之间的关系。</p>\n<h3 id=\"哈希表的操作接口\"><a href=\"#哈希表的操作接口\" class=\"headerlink\" title=\"哈希表的操作接口\"></a>哈希表的操作接口</h3><p>和上一节类似，将简单介绍PHP哈希表的操作接口实现。提供了如下几类操作接口：</p>\n<ul>\n<li>初始化操作，例如zend_hash_init()函数，用于初始化哈希表接口，分配空间等。</li>\n<li>查找，插入，删除和更新操作接口，这是比较常规的操作。</li>\n<li>迭代和循环，这类的接口用于循环对哈希表进行操作。</li>\n<li>复制，排序，倒置和销毁等操作。</li>\n</ul>\n<p>本小节选取其中的插入操作进行介绍。 在PHP中不管是对数组的添加操作（zend_hash_add），还是对数组的更新操作（zend_hash_update）， 其最终都是调用_zend_hash_add_or_update函数完成，这在面向对象编程中相当于两个公有方法和一个公共的私有方法的结构， 以实现一定程度上的代码复用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_API <span class=\"type\">int</span> _zend_hash_add_or_update(HashTable *ht, <span class=\"type\">const</span> <span class=\"type\">char</span> *arKey, uint nKeyLength, <span class=\"type\">void</span> *pData, uint nDataSize, <span class=\"type\">void</span> **pDest, <span class=\"type\">int</span> flag ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"comment\">//...省略变量初始化和nKeyLength &lt;=0 的异常处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    h = zend_inline_hash_func(arKey, nKeyLength);</span><br><span class=\"line\">    nIndex = h &amp; ht-&gt;nTableMask;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = ht-&gt;arBuckets[nIndex];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p-&gt;h == h) &amp;&amp; (p-&gt;nKeyLength == nKeyLength)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">memcmp</span>(p-&gt;arKey, arKey, nKeyLength)) &#123; <span class=\"comment\">//  更新操作</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (flag &amp; HASH_ADD) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                HANDLE_BLOCK_INTERRUPTIONS();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//..省略debug输出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ht-&gt;pDestructor) &#123;</span><br><span class=\"line\">                    ht-&gt;pDestructor(p-&gt;pData);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                UPDATE_DATA(ht, p, pData, nDataSize);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pDest) &#123;</span><br><span class=\"line\">                    *pDest = p-&gt;pData;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                HANDLE_UNBLOCK_INTERRUPTIONS();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p-&gt;pNext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = (Bucket *) pemalloc(<span class=\"keyword\">sizeof</span>(Bucket) - <span class=\"number\">1</span> + nKeyLength, ht-&gt;persistent);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(p-&gt;arKey, arKey, nKeyLength);</span><br><span class=\"line\">    p-&gt;nKeyLength = nKeyLength;</span><br><span class=\"line\">    INIT_DATA(ht, p, pData, nDataSize);</span><br><span class=\"line\">    p-&gt;h = h;</span><br><span class=\"line\">    CONNECT_TO_BUCKET_DLLIST(p, ht-&gt;arBuckets[nIndex]); <span class=\"comment\">//Bucket双向链表操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pDest) &#123;</span><br><span class=\"line\">        *pDest = p-&gt;pData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE_BLOCK_INTERRUPTIONS();</span><br><span class=\"line\">    CONNECT_TO_GLOBAL_DLLIST(p, ht);    <span class=\"comment\">// 将新的Bucket元素添加到数组的链接表的最后面</span></span><br><span class=\"line\">    ht-&gt;arBuckets[nIndex] = p;</span><br><span class=\"line\">    HANDLE_UNBLOCK_INTERRUPTIONS();</span><br><span class=\"line\"></span><br><span class=\"line\">    ht-&gt;nNumOfElements++;</span><br><span class=\"line\">    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        <span class=\"comment\">/*  如果此时数组的容量满了，则对其进行扩容。*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个写入或更新的操作流程如下：</p>\n<ol>\n<li>生成hash值，通过与nTableMask执行与操作，获取在arBuckets数组中的Bucket。</li>\n<li>如果Bucket中已经存在元素，则遍历整个Bucket，查找是否存在相同的key值元素，如果有并且是update调用，则执行update数据操作。</li>\n<li>创建新的Bucket元素，初始化数据，并将新元素添加到当前hash值对应的Bucket链表的最前面（CONNECT_TO_BUCKET_DLLIST）。</li>\n<li>将新的Bucket元素添加到数组的链接表的最后面（CONNECT_TO_GLOBAL_DLLIST）。</li>\n<li>将元素个数加1，如果此时数组的容量满了，则对其进行扩容。这里的判断是依据nNumOfElements和nTableSize的大小。 如果nNumOfElements &gt; nTableSize则会调用zend_hash_do_resize以2X的方式扩容（nTableSize &lt;&lt; 1）。</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>《深入理解PHP内核》</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>PHP中使用最频繁的莫过于字符串和数组了，然而PHP中的数组主要是基于哈希表，这篇文章主要是分析一下PHP源码的内部哈希表的实现方式。PHP版本基于PHP 5.3。</p>","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>哈希表在实践中使用非常的广泛，哈希表的优势在于查询的时间复杂度是O(1), 哈希表提供增删改查等操作，这些操作在最坏的情况下就是和链表的性能O(n)一样。</p>\n<p>哈希表主要有一下组成：</p>\n<ul>\n<li>键（key）：用于操作数据的标示，例如PHP数组中的索引，或者字符串键等等。</li>\n<li>槽(slot&#x2F;bucket)：哈希表中用于保存数据的一个单元，也就是数据真正存放的容器。</li>\n<li>哈希函数(hash function)：将key映射(map)到数据应该存放的slot所在位置的函数。</li>\n<li>哈希冲突(hash collision)：哈希函数将两个不同的key映射到同一个索引的情况。</li>\n</ul>\n<p>哈希表可以理解为数组的拓展，哈希表使用的是键的方式，然后通过哈希函数映射到一个索引，这个索引可以理解称是这个值得实际的存储位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash（key）-&gt; index</span><br></pre></td></tr></table></figure>\n\n<p>通过合理设计的哈希函数，我们就能将key映射到合适的范围，因为我们的key空间可以很大(例如字符串key)， 在映射到一个较小的空间中时可能会出现两个不同的key映射被到同一个index上的情况， 这就是我们所说的出现了冲突。 目前解决hash冲突的方法主要有两种：链接法和开放寻址法。</p>\n<h2 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h2><h3 id=\"链接法\"><a href=\"#链接法\" class=\"headerlink\" title=\"链接法\"></a>链接法</h3><p>链接法通常是通过一个链表保存bucket值的方式来解决冲突，链接法的最坏情况就是所有的key都映射到一个槽位，这样就使哈希表成了一个链表，然后在查询的时候，时间复杂度就成了O（n）。所以选择一哈希函数非常重要，最好能够使哈希值的散列度大一些，分布均匀一些。</p>\n<p>由于目前大部分的编程语言的哈希表实现都是开源的，大部分语言的哈希算法都是公开的算法， 虽然目前的哈希算法都能良好的将key进行比较均匀的分布，而这个假使的前提是key是随机的，正是由于算法的确定性， 这就导致了别有用心的黑客能利用已知算法的可确定性来构造一些特殊的key，让这些key都映射到 同一个槽位导致哈希表退化成单链表，导致程序的性能急剧下降，从而造成一些应用的吞吐能力急剧下降， 尤其是对于高并发的应用影响很大，通过大量类似的请求可以让服务器遭受DoS(服务拒绝攻击)， 这个问题一直就存在着，只是最近才被各个语言重视起来。</p>\n<p>哈希冲突攻击利用的哈希表最根本的弱点是：<strong>开源算法和哈希实现的确定性以及可预测性</strong>，这样攻击者才可以利用特殊构造的key来进行攻击。要解决这个问题的方法则是让攻击者无法轻易构造 能够进行攻击的key序列。</p>\n<blockquote>\n<p><strong>NOTE</strong> 在笔者编写这节内容的时候PHP语言也采取了相应的措施来防止这类的攻击，PHP采用的是一种 治标不治本的做法: <a href=\"http://cn2.php.net/manual/en/info.configuration.php#ini.max-input-vars\">限制用户提交数据字段数量</a> 这样可以避免大部分的攻击，不过应用程序通常会有很多的数据输入方式，比如，SOAP，REST等等， 比如很多应用都会接受用户传入的JSON字符串，在执行json_decode()的时候也可能会遭受攻击。 所以最根本的解决方法是让哈希表的碰撞key序列无法轻易的构造，目前PHP中还没有引入不增加额外的复杂性情况下的完美解决方案。</p>\n</blockquote>\n<p>目前PHP中HashTable的哈希冲突解决方法就是链接法。</p>\n<h3 id=\"开放寻址法\"><a href=\"#开放寻址法\" class=\"headerlink\" title=\"开放寻址法\"></a>开放寻址法</h3><p>通常还有另外一种解决冲突的方法：开放寻址法。使用开放寻址法是槽本身直接存放数据， 在插入数据时如果key所映射到的索引已经有数据了，这说明发生了冲突，这是会寻找下一个槽， 如果该槽也被占用了则继续寻找下一个槽，直到寻找到没有被占用的槽，在查找时也使用同样的策略来进行。</p>\n<p>由于开放寻址法处理冲突的时候占用的是其他槽位的空间,这可能会导致后续的key在插入的时候更加容易出现 哈希冲突，所以采用开放寻址法的哈希表的装载因子不能太高，否则容易出现性能下降。</p>\n<blockquote>\n<p><strong>NOTE</strong> _装载因子_是哈希表保存的元素数量和哈希表容量的比，通常采用链接法解决冲突的哈希表的装载 因子最好不要大于1，而采用开放寻址法的哈希表最好不要大于0.5。</p>\n</blockquote>\n<h2 id=\"PHP的实现\"><a href=\"#PHP的实现\" class=\"headerlink\" title=\"PHP的实现\"></a>PHP的实现</h2><p>PHP中的哈希表实现在Zend&#x2F;zend_hash.c中，还是按照上一小节的方式，先看看PHP实现中的数据结构， PHP使用如下两个数据结构来实现哈希表，HashTable结构体用于保存整个哈希表需要的基本信息， 而Bucket结构体用于保存具体的数据内容，如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">hashtable</span> &#123;</span> </span><br><span class=\"line\">    uint nTableSize;        <span class=\"comment\">// hash Bucket的大小，最小为8，以2x增长。</span></span><br><span class=\"line\">    uint nTableMask;        <span class=\"comment\">// nTableSize-1 ， 索引取值的优化</span></span><br><span class=\"line\">    uint nNumOfElements;    <span class=\"comment\">// hash Bucket中当前存在的元素个数，count()函数会直接返回此值 </span></span><br><span class=\"line\">    ulong nNextFreeElement; <span class=\"comment\">// 下一个数字索引的位置</span></span><br><span class=\"line\">    Bucket *pInternalPointer;   <span class=\"comment\">// 当前遍历的指针（foreach比for快的原因之一）</span></span><br><span class=\"line\">    Bucket *pListHead;          <span class=\"comment\">// 存储数组头元素指针</span></span><br><span class=\"line\">    Bucket *pListTail;          <span class=\"comment\">// 存储数组尾元素指针</span></span><br><span class=\"line\">    Bucket **arBuckets;         <span class=\"comment\">// 存储hash数组</span></span><br><span class=\"line\">    <span class=\"type\">dtor_func_t</span> pDestructor;    <span class=\"comment\">// 在删除元素时执行的回调函数，用于资源的释放</span></span><br><span class=\"line\">    zend_bool persistent;       <span class=\"comment\">//指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> nApplyCount; <span class=\"comment\">// 标记当前hash Bucket被递归访问的次数（防止多次递归）</span></span><br><span class=\"line\">    zend_bool bApplyProtection;<span class=\"comment\">// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> ZEND_DEBUG</span></span><br><span class=\"line\">    <span class=\"type\">int</span> inconsistent;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125; HashTable;</span><br></pre></td></tr></table></figure>\n\n<p>nTableSize字段用于标示哈希表的容量，哈希表的初始容量最小为8。首先看看哈希表的初始化函数:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_API <span class=\"type\">int</span> _zend_hash_init(HashTable *ht, uint nSize, <span class=\"type\">hash_func_t</span> pHashFunction,</span><br><span class=\"line\">                    <span class=\"type\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    uint i = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nSize &gt;= <span class=\"number\">0x80000000</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* prevent overflow */</span></span><br><span class=\"line\">        ht-&gt;nTableSize = <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((<span class=\"number\">1U</span> &lt;&lt; i) &lt; nSize) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ht-&gt;nTableSize = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ht-&gt;nTableMask = ht-&gt;nTableSize - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Uses ecalloc() so that Bucket* == NULL */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (persistent) &#123;</span><br><span class=\"line\">        tmp = (Bucket **) <span class=\"built_in\">calloc</span>(ht-&gt;nTableSize, <span class=\"keyword\">sizeof</span>(Bucket *));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tmp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ht-&gt;arBuckets = tmp;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        tmp = (Bucket **) ecalloc_rel(ht-&gt;nTableSize, <span class=\"keyword\">sizeof</span>(Bucket *));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp) &#123;</span><br><span class=\"line\">            ht-&gt;arBuckets = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如如果设置初始大小为10，则上面的算法将会将大小调整为16。也就是始终将大小调整为接近初始大小的 2的整数次方。</p>\n<p>为什么会做这样的调整呢？我们先看看HashTable将哈希值映射到槽位的方法，上一小节我们使用了取模的方式来将哈希值 映射到槽位，例如大小为8的哈希表，哈希值为100， 则映射的槽位索引为: 100 % 8 &#x3D; 4，由于索引通常从0开始， 所以槽位的索引值为3，在PHP中使用如下的方式计算索引：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = zend_inline_hash_func(arKey, nKeyLength);</span><br><span class=\"line\">nIndex = h &amp; ht-&gt;nTableMask;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的_zend_hash_init()函数中可知，ht-&gt;nTableMask的大小为ht-&gt;nTableSize -1。 这里使用&amp;操作而不是使用取模，这是因为是相对来说取模操作的消耗和按位与的操作大很多。</p>\n<blockquote>\n<p><strong>NOTE</strong> mask的作用就是将哈希值映射到槽位所能存储的索引范围内。 例如：某个key的索引值是21， 哈希表的大小为8，则mask为7，则求与时的二进制表示为： 10101 &amp; 111 &#x3D; 101 也就是十进制的5。 因为2的整数次方-1的二进制比较特殊：后面N位的值都是1，这样比较容易能将值进行映射， 如果是普通数字进行了二进制与之后会影响哈希值的结果。那么哈希函数计算的值的平均分布就可能出现影响。</p>\n</blockquote>\n<p>设置好哈希表大小之后就需要为哈希表申请存储数据的空间了，如上面初始化的代码， 根据是否需要持久保存而调用了不同的内存申请方法。如前面PHP生命周期里介绍的,是否需要持久保存体现在：持久内容能在多个请求之间访问，而非持久存储是会在请求结束时释放占用的空间。 具体内容将在内存管理章节中进行介绍。</p>\n<p>HashTable中的nNumOfElements字段很好理解，每插入一个元素或者unset删掉元素时会更新这个字段。 这样在进行count()函数统计数组元素个数时就能快速的返回。</p>\n<p>nNextFreeElement字段非常有用。先看一段PHP代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>(<span class=\"number\">10</span> =&gt; <span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$a</span>[] = <span class=\"string\">&#x27;TIPI&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ouput</span></span><br><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  [<span class=\"number\">10</span>]=&gt;</span><br><span class=\"line\">  <span class=\"keyword\">string</span>(<span class=\"number\">5</span>) <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">  [<span class=\"number\">11</span>]=&gt;</span><br><span class=\"line\">  <span class=\"keyword\">string</span>(<span class=\"number\">5</span>) <span class=\"string\">&quot;TIPI&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PHP中可以不指定索引值向数组中添加元素，这时将默认使用数字作为索引， 和<a href=\"http://en.wikipedia.org/wiki/Enumerated_type\">C语言中的枚举</a>类似， 而这个元素的索引到底是多少就由nNextFreeElement字段决定了。 如果数组中存在了数字key，则会默认使用最新使用的key + 1，例如上例中已经存在了10作为key的元素， 这样新插入的默认索引就为11了。</p>\n<h4 id=\"数据容器：槽位\"><a href=\"#数据容器：槽位\" class=\"headerlink\" title=\"数据容器：槽位\"></a>数据容器：槽位</h4><p>下面看看保存哈希表数据的槽位数据结构体：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> &#123;</span></span><br><span class=\"line\">    ulong h;            <span class=\"comment\">// 对char *key进行hash后的值，或者是用户指定的数字索引值</span></span><br><span class=\"line\">    uint nKeyLength;    <span class=\"comment\">// hash关键字的长度，如果数组索引为数字，此值为0</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *pData;        <span class=\"comment\">// 指向value，一般是用户数据的副本，如果是指针数据，则指向pDataPtr</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *pDataPtr;     <span class=\"comment\">//如果是指针数据，此值会指向真正的value，同时上面pData会指向此值</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pListNext</span>;</span>   <span class=\"comment\">// 整个hash表的下一元素</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pListLast</span>;</span>   <span class=\"comment\">// 整个哈希表该元素的上一个元素</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pNext</span>;</span>       <span class=\"comment\">// 存放在同一个hash Bucket内的下一个元素</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bucket</span> *<span class=\"title\">pLast</span>;</span>       <span class=\"comment\">// 同一个哈希bucket的上一个元素</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存当前值所对于的key字符串，这个字段只能定义在最后，实现变长结构体</span></span><br><span class=\"line\">    <span class=\"type\">char</span> arKey[<span class=\"number\">1</span>];              </span><br><span class=\"line\">&#125; Bucket;</span><br></pre></td></tr></table></figure>\n\n<p>如上面各字段的注释。h字段保存哈希表key哈希后的值。这里保存的哈希值而不是在哈希表中的索引值， 这是因为索引值和哈希表的容量有直接关系，如果哈希表扩容了，那么这些索引还得重新进行哈希在进行索引映射， 这也是一种优化手段。 在PHP中可以使用字符串或者数字作为数组的索引。 数字索引直接就可以作为哈希表的索引，数字也无需进行哈希处理。h字段后面的nKeyLength字段是作为key长度的标示， 如果索引是数字的话，则nKeyLength为0。在PHP数组中如果索引字符串可以被转换成数字也会被转换成数字索引。 <strong>所以在PHP中例如’10’，’11’这类的字符索引和数字索引10， 11没有区别。</strong></p>\n<p>上面结构体的最后一个字段用来保存key的字符串，而这个字段却申明为只有一个字符的数组， 其实这里是一种长见的<a href=\"http://stackoverflow.com/a/4690976/319672\">变长结构体</a>，主要的目的是增加灵活性。 以下为哈希表插入新元素时申请空间的代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = (Bucket *) pemalloc(<span class=\"keyword\">sizeof</span>(Bucket) - <span class=\"number\">1</span> + nKeyLength, ht-&gt;persistent);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码，申请的空间大小加上了字符串key的长度，然后把key拷贝到新申请的空间里。 在后面比如需要进行hash查找的时候就需要对比key这样就可以通过对比p-&gt;arKey和查找的key是否一样来进行数据的 查找。申请空间的大小-1是因为结构体内本身的那个字节还是可以使用的。</p>\n<blockquote>\n<p><strong>NOTE</strong> 在PHP5.4中将这个字段定义成const char* arKey类型了。</p>\n</blockquote>\n<p><img src=\"/uploads/2017/09/03-01-02-zend_hashtable.png\" alt=\"哈希表\">memcpy(p-&gt;arKey, arKey, nKeyLength);</p>\n<p>上图来源于<a href=\"http://gsm56.com/?p=124\">网络</a>。</p>\n<ul>\n<li>Bucket结构体维护了两个双向链表，pNext和pLast指针分别指向本槽位所在的链表的关系。</li>\n<li>而pListNext和pListLast指针指向的则是整个哈希表所有的数据之间的链接关系。 HashTable结构体中的pListHead和pListTail则维护整个哈希表的头元素指针和最后一个元素的指针。</li>\n</ul>\n<blockquote>\n<p><strong>NOTE</strong> PHP中数组的操作函数非常多，例如：array_shift()和array_pop()函数，分别从数组的头部和尾部弹出元素。 哈希表中保存了头部和尾部指针，这样在执行这些操作时就能在常数时间内找到目标。 PHP中还有一些使用的相对不那么多的数组操作函数：next()，prev()等的循环中， 哈希表的另外一个指针就能发挥作用了：pInternalPointer，这个用于保存当前哈希表内部的指针。 这在循环时就非常有用。</p>\n</blockquote>\n<p>如图中左下角的假设，假设依次插入了Bucket1，Bucket2，Bucket3三个元素：</p>\n<ol>\n<li>插入Bucket1时，哈希表为空，经过哈希后定位到索引为1的槽位。此时的1槽位只有一个元素Bucket1。 其中Bucket1的pData或者pDataPtr指向的是Bucket1所存储的数据。此时由于没有链接关系。pNext， pLast，pListNext，pListLast指针均为空。同时在HashTable结构体中也保存了整个哈希表的第一个元素指针， 和最后一个元素指针，此时HashTable的pListHead和pListTail指针均指向Bucket1。</li>\n<li>插入Bucket2时，由于Bucket2的key和Bucket1的key出现冲突，此时将Bucket2放在双链表的前面。 由于Bucket2后插入并置于链表的前端，此时Bucket2.pNext指向Bucket1，由于Bucket2后插入。 Bucket1.pListNext指向Bucket2，这时Bucket2就是哈希表的最后一个元素，这是HashTable.pListTail指向Bucket2。</li>\n<li>插入Bucket3，该key没有哈希到槽位1，这时Bucket2.pListNext指向Bucket3，因为Bucket3后插入。 同时HashTable.pListTail改为指向Bucket3。</li>\n</ol>\n<p>简单来说就是哈希表的Bucket结构维护了哈希表中插入元素的先后顺序，哈希表结构维护了整个哈希表的头和尾。 在操作哈希表的过程中始终保持预算之间的关系。</p>\n<h3 id=\"哈希表的操作接口\"><a href=\"#哈希表的操作接口\" class=\"headerlink\" title=\"哈希表的操作接口\"></a>哈希表的操作接口</h3><p>和上一节类似，将简单介绍PHP哈希表的操作接口实现。提供了如下几类操作接口：</p>\n<ul>\n<li>初始化操作，例如zend_hash_init()函数，用于初始化哈希表接口，分配空间等。</li>\n<li>查找，插入，删除和更新操作接口，这是比较常规的操作。</li>\n<li>迭代和循环，这类的接口用于循环对哈希表进行操作。</li>\n<li>复制，排序，倒置和销毁等操作。</li>\n</ul>\n<p>本小节选取其中的插入操作进行介绍。 在PHP中不管是对数组的添加操作（zend_hash_add），还是对数组的更新操作（zend_hash_update）， 其最终都是调用_zend_hash_add_or_update函数完成，这在面向对象编程中相当于两个公有方法和一个公共的私有方法的结构， 以实现一定程度上的代码复用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_API <span class=\"type\">int</span> _zend_hash_add_or_update(HashTable *ht, <span class=\"type\">const</span> <span class=\"type\">char</span> *arKey, uint nKeyLength, <span class=\"type\">void</span> *pData, uint nDataSize, <span class=\"type\">void</span> **pDest, <span class=\"type\">int</span> flag ZEND_FILE_LINE_DC)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"comment\">//...省略变量初始化和nKeyLength &lt;=0 的异常处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    h = zend_inline_hash_func(arKey, nKeyLength);</span><br><span class=\"line\">    nIndex = h &amp; ht-&gt;nTableMask;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = ht-&gt;arBuckets[nIndex];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p-&gt;h == h) &amp;&amp; (p-&gt;nKeyLength == nKeyLength)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">memcmp</span>(p-&gt;arKey, arKey, nKeyLength)) &#123; <span class=\"comment\">//  更新操作</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (flag &amp; HASH_ADD) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                HANDLE_BLOCK_INTERRUPTIONS();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//..省略debug输出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ht-&gt;pDestructor) &#123;</span><br><span class=\"line\">                    ht-&gt;pDestructor(p-&gt;pData);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                UPDATE_DATA(ht, p, pData, nDataSize);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pDest) &#123;</span><br><span class=\"line\">                    *pDest = p-&gt;pData;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                HANDLE_UNBLOCK_INTERRUPTIONS();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p-&gt;pNext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = (Bucket *) pemalloc(<span class=\"keyword\">sizeof</span>(Bucket) - <span class=\"number\">1</span> + nKeyLength, ht-&gt;persistent);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(p-&gt;arKey, arKey, nKeyLength);</span><br><span class=\"line\">    p-&gt;nKeyLength = nKeyLength;</span><br><span class=\"line\">    INIT_DATA(ht, p, pData, nDataSize);</span><br><span class=\"line\">    p-&gt;h = h;</span><br><span class=\"line\">    CONNECT_TO_BUCKET_DLLIST(p, ht-&gt;arBuckets[nIndex]); <span class=\"comment\">//Bucket双向链表操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pDest) &#123;</span><br><span class=\"line\">        *pDest = p-&gt;pData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE_BLOCK_INTERRUPTIONS();</span><br><span class=\"line\">    CONNECT_TO_GLOBAL_DLLIST(p, ht);    <span class=\"comment\">// 将新的Bucket元素添加到数组的链接表的最后面</span></span><br><span class=\"line\">    ht-&gt;arBuckets[nIndex] = p;</span><br><span class=\"line\">    HANDLE_UNBLOCK_INTERRUPTIONS();</span><br><span class=\"line\"></span><br><span class=\"line\">    ht-&gt;nNumOfElements++;</span><br><span class=\"line\">    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        <span class=\"comment\">/*  如果此时数组的容量满了，则对其进行扩容。*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个写入或更新的操作流程如下：</p>\n<ol>\n<li>生成hash值，通过与nTableMask执行与操作，获取在arBuckets数组中的Bucket。</li>\n<li>如果Bucket中已经存在元素，则遍历整个Bucket，查找是否存在相同的key值元素，如果有并且是update调用，则执行update数据操作。</li>\n<li>创建新的Bucket元素，初始化数据，并将新元素添加到当前hash值对应的Bucket链表的最前面（CONNECT_TO_BUCKET_DLLIST）。</li>\n<li>将新的Bucket元素添加到数组的链接表的最后面（CONNECT_TO_GLOBAL_DLLIST）。</li>\n<li>将元素个数加1，如果此时数组的容量满了，则对其进行扩容。这里的判断是依据nNumOfElements和nTableSize的大小。 如果nNumOfElements &gt; nTableSize则会调用zend_hash_do_resize以2X的方式扩容（nTableSize &lt;&lt; 1）。</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>《深入理解PHP内核》</li>\n</ul>"},{"title":"写给工程师的十条精进原则(转自美团点评技术团队)","id":"400","date":"2018-09-27T04:22:55.000Z","_content":"\n# 引言\n\n时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”......那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。 8年过去了，自己从一个职场小白逐步成长为一名技术Leader。我发现团队中的很多同学在不停地重复犯着自己当年类似的错误。他们并不是不努力，到底是哪里出了问题？经过一段时间的观察与思考后，我想我找到了答案。那就是：我们大多数同学在工作中缺乏原则的指导。原则，犹如指引行动的“灯塔”，它连接着我们的价值观与行动。不久前，桥水基金创始人雷·达里奥在《原则》一书中所传达的理念，引爆了朋友圈。**每个人都应该有自己的原则，当我们需要作出选择时，一定要坚持以原则为中心。**但是在现实生活中，我们往往缺少对原则的总结，对于很多人来说这是一门“只可意会不可言传”的玄学，是属于老司机的秘密，其实不然。 “追求卓越”是美团的价值观。作为一名技术人员，我们应该如何践行呢？本文总结了十条精进原则，希望能够给大家带来一些启发，更好地指导我们的行动。 ![](https://tech.meituan.com/img/10_principles_for_engineers/10-1.jpg)\n\n# 原则一：Owner意识\n\n“Owner意识”主要体现在两个层面：一是认真负责的态度，二是积极主动的精神。 **认真负责是工作的底线。**首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD的工程交付质量，还会对协同工作的RD、QA、PM等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。 **积极主动是“Owner意识”更高一级的要求。**RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。\n\n# 原则二：时间观念\n\n相信大家都有时间观念，但是真正能执行到位的可能并没有那么多。互联网是一个快速发展的行业，RD的研发效率是一个公司硬实力的重要体现。项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱程度的评价。大家可能会问：难度几乎相同的项目，为什么有的同学经常Delay，而有的同学每次都能按时上线？一个很重要的原因，就是这些按时交付的同学往往具备如下两个特质：**做事有计划，工作分主次。** **工作安排要有计划性。**通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。 **工作安排要分清楚主次。**我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。\n\n# 原则三：以终为始\n\n“以终为始”（Begin With The End In Mind），是史蒂芬·柯维在《高效能人士的七个习惯》中提到的一个习惯。它是以所有事物都经过两次创造的原则（第一次为心智上的创造，第二次为实际的创造）为基础的。直观的表达就是：**先想清楚目标，然后努力实现。** 在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现得尤为明显。例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，**所以要根据问题设定目标，再进行优化**。 “以终为始”，这一原则还可以作用于我们的学习中。很多同学看过很多技术文章，但是总是感觉自己仍然一无所知。很重要的一个原因，就是没有**带着目标去学习**。在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？是想把Redis的持久化原理搞清楚，还是把Redis的主从同步机制弄明白，亦或是想学习整个Redis Cluster的架构体系。如果我们能够带着问题与目标，再进行相关的资料搜集与学习，就会事半功倍。这种学习模式的效果会比碎片化阅读好很多。\n\n# 原则四：闭环思维\n\n你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。 之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。**它强调的是一种即时反馈闭环，**如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的To Do进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入“沟通-发现问题-再沟通-再发现问题”的恶性循环中。**真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收。** **“闭环思维”还要求能够定期主动进行阶段性的反馈。**刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。\n\n# 原则五：保持敬畏\n\n“君子之心，常怀敬畏”，保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。 **当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致。**以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。类似的问题，还包括对上线流程不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。 保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，**让规范与约定与时俱进，也是另一种形式的敬畏。** ![](https://tech.meituan.com/img/10_principles_for_engineers/10-2.jpg)\n\n# 原则六：事不过二\n\n“事不过二”，是我们团队一贯坚持的原则，它可以解读为两层含义。 一层含义是**“所有的评审与问题讨论，不要超过两次”**。之所以有这样的要求，是因为我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此，我们团队规定：**所有的评审最多两次。**通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。 “事不过二”原则的另一层含义，是**“同样的错误不能犯第二次”**。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。\n\n# 原则七：设计优先\n\n“设计优先”这条原则，相对来说更加具体一些。之所以单列一项，是因为架构设计太重要了。Uncle Bob曾说过：“软件架构的目标，是为了让构建与维护系统的所需人力资源最小化。” **架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题。**很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计得足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。**无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构。**因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。 **“设计优先”这一原则，要求写别人看得懂的设计**。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。 ![](https://tech.meituan.com/img/10_principles_for_engineers/10-3.jpg)\n\n# 原则八：P/PC平衡\n\n“P/PC平衡”原则，即产出与产能平衡原则。伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。**产出与产能必须平衡，才能达到真正的高效能**。为了让大家更清晰的了解这一原则，本文举两个例子。 从系统的角度看，每一个系统都是通过持续不断地叠加功能来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消亡。 再从RD的角度来看这个问题，RD通过做需求来给公司创造价值，实现自己的产出。而RD的产能是指技术能力、软素质、身体健康状况，有这些资本后，我们才能进行持续的产出。在日常工作中，我发现很多RD往往只重视产出。他们也在很努力地做项目，但是每一个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做得一般，还会抱怨自己得不到任何成长。这就是P/PC不平衡的体现。**如果能在做项目的过程中，通过学习总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果。** “P/PC平衡”原则还适用于很多其他的领域，例如团队、家庭等，我本人也非常推崇这一原则。希望大家也能将其作为自身的一项基本原则，努力寻找到产出与产能的平衡点。\n\n# 原则九：善于提问\n\n**“善于提问”，首先要勤于提问**。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，**只有在争辩中，才可能诞生最好的主意和最好的决定**。 在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。 **“善于提问”，还要懂得如何提问**。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：批判性思维。 批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。同样，在阅读一篇技术博客的时候，也要使用批判性的思维，多问几个为什么，作者得出的结论是否合理？论据是否充分？只有这样，才能不断地获取真正的知识。\n\n# 原则十：空杯心态\n\n“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。 **保持“空杯心态”这一原则要求我们时刻进行自我检视与反省**。在工作中，多去跟不同级别的同学聊一聊，或者做一个360度评估，这有助于我们更加客观地评价自己。在横向对比中，多向那些优秀的同学看齐，学习他人的优点。很多同学在设计评审或者代码review过程中，针对别人提出的问题与建议，往往都采用一种对立的态度。错误地认为别人是在挑刺，是在针对自己。诚然，在某些方面，我们可能确实比其他人想得深入，但是这不代表在所有方面都能考虑周全。对于别人的建议，建议使用“善于提问”原则里提到的批判性思维仔细分析一下，虚心地吸取那些好的建议。 工作学习就像“练级打怪”，技能储备的越多，就越容易走到最后。保持空杯心态，可以让我们发现很多以前注意不到的新能力，我们要做的就是努力学习它，将它们转化为自己能力库的一部分。\n\n# 总结\n\n以上，是我总结的工作与学习的十条基本原则。其中有的侧重于个人做事情的方法，如“Owner意识”、“时间观念”、“以终为始”、”闭环思维”；有的侧重于团队工作标准规范，如“保持敬畏”、“事不过二”、“设计优先”；有的侧重于团队或个人效能提升，如“P/PC平衡”、“善于提问”、“空杯心态”。这些原则是我多年在工作与学习中，不断总结得来的经验。希望在大家面临选择时，这些原则能够起到一定的帮助和指导作用。 以原则为中心地工作与生活，让自己与团队变得更加强大。\n\n# 作者介绍\n\n云鹏，2014年加入美团，先后参与了美团酒店供应链体系、分布式调度系统的建设，现在负责美团旅行客户关系管理系统、基础信息服务的建设工作。\n\n#### 原文地址https://tech.meituan.com/10\\_principles\\_for\\_engineers.html","source":"_posts/principle-of-diligence.md","raw":"---\ntitle: 写给工程师的十条精进原则(转自美团点评技术团队)\ntags:\n  - 成长进阶\n  - 程序员\nid: '400'\ncategories:\n  - - Life\ndate: 2018-09-27 12:22:55\n---\n\n# 引言\n\n时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”......那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。 8年过去了，自己从一个职场小白逐步成长为一名技术Leader。我发现团队中的很多同学在不停地重复犯着自己当年类似的错误。他们并不是不努力，到底是哪里出了问题？经过一段时间的观察与思考后，我想我找到了答案。那就是：我们大多数同学在工作中缺乏原则的指导。原则，犹如指引行动的“灯塔”，它连接着我们的价值观与行动。不久前，桥水基金创始人雷·达里奥在《原则》一书中所传达的理念，引爆了朋友圈。**每个人都应该有自己的原则，当我们需要作出选择时，一定要坚持以原则为中心。**但是在现实生活中，我们往往缺少对原则的总结，对于很多人来说这是一门“只可意会不可言传”的玄学，是属于老司机的秘密，其实不然。 “追求卓越”是美团的价值观。作为一名技术人员，我们应该如何践行呢？本文总结了十条精进原则，希望能够给大家带来一些启发，更好地指导我们的行动。 ![](https://tech.meituan.com/img/10_principles_for_engineers/10-1.jpg)\n\n# 原则一：Owner意识\n\n“Owner意识”主要体现在两个层面：一是认真负责的态度，二是积极主动的精神。 **认真负责是工作的底线。**首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD的工程交付质量，还会对协同工作的RD、QA、PM等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。 **积极主动是“Owner意识”更高一级的要求。**RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。\n\n# 原则二：时间观念\n\n相信大家都有时间观念，但是真正能执行到位的可能并没有那么多。互联网是一个快速发展的行业，RD的研发效率是一个公司硬实力的重要体现。项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱程度的评价。大家可能会问：难度几乎相同的项目，为什么有的同学经常Delay，而有的同学每次都能按时上线？一个很重要的原因，就是这些按时交付的同学往往具备如下两个特质：**做事有计划，工作分主次。** **工作安排要有计划性。**通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。 **工作安排要分清楚主次。**我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。\n\n# 原则三：以终为始\n\n“以终为始”（Begin With The End In Mind），是史蒂芬·柯维在《高效能人士的七个习惯》中提到的一个习惯。它是以所有事物都经过两次创造的原则（第一次为心智上的创造，第二次为实际的创造）为基础的。直观的表达就是：**先想清楚目标，然后努力实现。** 在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现得尤为明显。例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，**所以要根据问题设定目标，再进行优化**。 “以终为始”，这一原则还可以作用于我们的学习中。很多同学看过很多技术文章，但是总是感觉自己仍然一无所知。很重要的一个原因，就是没有**带着目标去学习**。在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？是想把Redis的持久化原理搞清楚，还是把Redis的主从同步机制弄明白，亦或是想学习整个Redis Cluster的架构体系。如果我们能够带着问题与目标，再进行相关的资料搜集与学习，就会事半功倍。这种学习模式的效果会比碎片化阅读好很多。\n\n# 原则四：闭环思维\n\n你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。 之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。**它强调的是一种即时反馈闭环，**如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的To Do进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入“沟通-发现问题-再沟通-再发现问题”的恶性循环中。**真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收。** **“闭环思维”还要求能够定期主动进行阶段性的反馈。**刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。\n\n# 原则五：保持敬畏\n\n“君子之心，常怀敬畏”，保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。 **当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致。**以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。类似的问题，还包括对上线流程不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。 保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，**让规范与约定与时俱进，也是另一种形式的敬畏。** ![](https://tech.meituan.com/img/10_principles_for_engineers/10-2.jpg)\n\n# 原则六：事不过二\n\n“事不过二”，是我们团队一贯坚持的原则，它可以解读为两层含义。 一层含义是**“所有的评审与问题讨论，不要超过两次”**。之所以有这样的要求，是因为我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此，我们团队规定：**所有的评审最多两次。**通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。 “事不过二”原则的另一层含义，是**“同样的错误不能犯第二次”**。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。\n\n# 原则七：设计优先\n\n“设计优先”这条原则，相对来说更加具体一些。之所以单列一项，是因为架构设计太重要了。Uncle Bob曾说过：“软件架构的目标，是为了让构建与维护系统的所需人力资源最小化。” **架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题。**很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计得足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。**无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构。**因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。 **“设计优先”这一原则，要求写别人看得懂的设计**。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。 ![](https://tech.meituan.com/img/10_principles_for_engineers/10-3.jpg)\n\n# 原则八：P/PC平衡\n\n“P/PC平衡”原则，即产出与产能平衡原则。伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。**产出与产能必须平衡，才能达到真正的高效能**。为了让大家更清晰的了解这一原则，本文举两个例子。 从系统的角度看，每一个系统都是通过持续不断地叠加功能来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消亡。 再从RD的角度来看这个问题，RD通过做需求来给公司创造价值，实现自己的产出。而RD的产能是指技术能力、软素质、身体健康状况，有这些资本后，我们才能进行持续的产出。在日常工作中，我发现很多RD往往只重视产出。他们也在很努力地做项目，但是每一个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做得一般，还会抱怨自己得不到任何成长。这就是P/PC不平衡的体现。**如果能在做项目的过程中，通过学习总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果。** “P/PC平衡”原则还适用于很多其他的领域，例如团队、家庭等，我本人也非常推崇这一原则。希望大家也能将其作为自身的一项基本原则，努力寻找到产出与产能的平衡点。\n\n# 原则九：善于提问\n\n**“善于提问”，首先要勤于提问**。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，**只有在争辩中，才可能诞生最好的主意和最好的决定**。 在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。 **“善于提问”，还要懂得如何提问**。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：批判性思维。 批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。同样，在阅读一篇技术博客的时候，也要使用批判性的思维，多问几个为什么，作者得出的结论是否合理？论据是否充分？只有这样，才能不断地获取真正的知识。\n\n# 原则十：空杯心态\n\n“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。 **保持“空杯心态”这一原则要求我们时刻进行自我检视与反省**。在工作中，多去跟不同级别的同学聊一聊，或者做一个360度评估，这有助于我们更加客观地评价自己。在横向对比中，多向那些优秀的同学看齐，学习他人的优点。很多同学在设计评审或者代码review过程中，针对别人提出的问题与建议，往往都采用一种对立的态度。错误地认为别人是在挑刺，是在针对自己。诚然，在某些方面，我们可能确实比其他人想得深入，但是这不代表在所有方面都能考虑周全。对于别人的建议，建议使用“善于提问”原则里提到的批判性思维仔细分析一下，虚心地吸取那些好的建议。 工作学习就像“练级打怪”，技能储备的越多，就越容易走到最后。保持空杯心态，可以让我们发现很多以前注意不到的新能力，我们要做的就是努力学习它，将它们转化为自己能力库的一部分。\n\n# 总结\n\n以上，是我总结的工作与学习的十条基本原则。其中有的侧重于个人做事情的方法，如“Owner意识”、“时间观念”、“以终为始”、”闭环思维”；有的侧重于团队工作标准规范，如“保持敬畏”、“事不过二”、“设计优先”；有的侧重于团队或个人效能提升，如“P/PC平衡”、“善于提问”、“空杯心态”。这些原则是我多年在工作与学习中，不断总结得来的经验。希望在大家面临选择时，这些原则能够起到一定的帮助和指导作用。 以原则为中心地工作与生活，让自己与团队变得更加强大。\n\n# 作者介绍\n\n云鹏，2014年加入美团，先后参与了美团酒店供应链体系、分布式调度系统的建设，现在负责美团旅行客户关系管理系统、基础信息服务的建设工作。\n\n#### 原文地址https://tech.meituan.com/10\\_principles\\_for\\_engineers.html","slug":"principle-of-diligence","published":1,"updated":"2022-03-12T23:52:58.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mi40075417t57os6bwx","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”……那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。 8年过去了，自己从一个职场小白逐步成长为一名技术Leader。我发现团队中的很多同学在不停地重复犯着自己当年类似的错误。他们并不是不努力，到底是哪里出了问题？经过一段时间的观察与思考后，我想我找到了答案。那就是：我们大多数同学在工作中缺乏原则的指导。原则，犹如指引行动的“灯塔”，它连接着我们的价值观与行动。不久前，桥水基金创始人雷·达里奥在《原则》一书中所传达的理念，引爆了朋友圈。<strong>每个人都应该有自己的原则，当我们需要作出选择时，一定要坚持以原则为中心。</strong>但是在现实生活中，我们往往缺少对原则的总结，对于很多人来说这是一门“只可意会不可言传”的玄学，是属于老司机的秘密，其实不然。 “追求卓越”是美团的价值观。作为一名技术人员，我们应该如何践行呢？本文总结了十条精进原则，希望能够给大家带来一些启发，更好地指导我们的行动。 <img src=\"https://tech.meituan.com/img/10_principles_for_engineers/10-1.jpg\"></p>\n<h1 id=\"原则一：Owner意识\"><a href=\"#原则一：Owner意识\" class=\"headerlink\" title=\"原则一：Owner意识\"></a>原则一：Owner意识</h1><p>“Owner意识”主要体现在两个层面：一是认真负责的态度，二是积极主动的精神。 <strong>认真负责是工作的底线。</strong>首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD的工程交付质量，还会对协同工作的RD、QA、PM等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。 <strong>积极主动是“Owner意识”更高一级的要求。</strong>RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。</p>\n<h1 id=\"原则二：时间观念\"><a href=\"#原则二：时间观念\" class=\"headerlink\" title=\"原则二：时间观念\"></a>原则二：时间观念</h1><p>相信大家都有时间观念，但是真正能执行到位的可能并没有那么多。互联网是一个快速发展的行业，RD的研发效率是一个公司硬实力的重要体现。项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱程度的评价。大家可能会问：难度几乎相同的项目，为什么有的同学经常Delay，而有的同学每次都能按时上线？一个很重要的原因，就是这些按时交付的同学往往具备如下两个特质：<strong>做事有计划，工作分主次。</strong> <strong>工作安排要有计划性。</strong>通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。 <strong>工作安排要分清楚主次。</strong>我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。</p>\n<h1 id=\"原则三：以终为始\"><a href=\"#原则三：以终为始\" class=\"headerlink\" title=\"原则三：以终为始\"></a>原则三：以终为始</h1><p>“以终为始”（Begin With The End In Mind），是史蒂芬·柯维在《高效能人士的七个习惯》中提到的一个习惯。它是以所有事物都经过两次创造的原则（第一次为心智上的创造，第二次为实际的创造）为基础的。直观的表达就是：<strong>先想清楚目标，然后努力实现。</strong> 在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现得尤为明显。例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，<strong>所以要根据问题设定目标，再进行优化</strong>。 “以终为始”，这一原则还可以作用于我们的学习中。很多同学看过很多技术文章，但是总是感觉自己仍然一无所知。很重要的一个原因，就是没有<strong>带着目标去学习</strong>。在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？是想把Redis的持久化原理搞清楚，还是把Redis的主从同步机制弄明白，亦或是想学习整个Redis Cluster的架构体系。如果我们能够带着问题与目标，再进行相关的资料搜集与学习，就会事半功倍。这种学习模式的效果会比碎片化阅读好很多。</p>\n<h1 id=\"原则四：闭环思维\"><a href=\"#原则四：闭环思维\" class=\"headerlink\" title=\"原则四：闭环思维\"></a>原则四：闭环思维</h1><p>你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。 之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。<strong>它强调的是一种即时反馈闭环，</strong>如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的To Do进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入“沟通-发现问题-再沟通-再发现问题”的恶性循环中。<strong>真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收。</strong> <strong>“闭环思维”还要求能够定期主动进行阶段性的反馈。</strong>刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。</p>\n<h1 id=\"原则五：保持敬畏\"><a href=\"#原则五：保持敬畏\" class=\"headerlink\" title=\"原则五：保持敬畏\"></a>原则五：保持敬畏</h1><p>“君子之心，常怀敬畏”，保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。 <strong>当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致。</strong>以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。类似的问题，还包括对上线流程不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。 保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，<strong>让规范与约定与时俱进，也是另一种形式的敬畏。</strong> <img src=\"https://tech.meituan.com/img/10_principles_for_engineers/10-2.jpg\"></p>\n<h1 id=\"原则六：事不过二\"><a href=\"#原则六：事不过二\" class=\"headerlink\" title=\"原则六：事不过二\"></a>原则六：事不过二</h1><p>“事不过二”，是我们团队一贯坚持的原则，它可以解读为两层含义。 一层含义是<strong>“所有的评审与问题讨论，不要超过两次”</strong>。之所以有这样的要求，是因为我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此，我们团队规定：<strong>所有的评审最多两次。</strong>通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。 “事不过二”原则的另一层含义，是<strong>“同样的错误不能犯第二次”</strong>。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。</p>\n<h1 id=\"原则七：设计优先\"><a href=\"#原则七：设计优先\" class=\"headerlink\" title=\"原则七：设计优先\"></a>原则七：设计优先</h1><p>“设计优先”这条原则，相对来说更加具体一些。之所以单列一项，是因为架构设计太重要了。Uncle Bob曾说过：“软件架构的目标，是为了让构建与维护系统的所需人力资源最小化。” <strong>架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题。</strong>很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计得足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。<strong>无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构。</strong>因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。 <strong>“设计优先”这一原则，要求写别人看得懂的设计</strong>。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。 <img src=\"https://tech.meituan.com/img/10_principles_for_engineers/10-3.jpg\"></p>\n<h1 id=\"原则八：P-x2F-PC平衡\"><a href=\"#原则八：P-x2F-PC平衡\" class=\"headerlink\" title=\"原则八：P&#x2F;PC平衡\"></a>原则八：P&#x2F;PC平衡</h1><p>“P&#x2F;PC平衡”原则，即产出与产能平衡原则。伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。<strong>产出与产能必须平衡，才能达到真正的高效能</strong>。为了让大家更清晰的了解这一原则，本文举两个例子。 从系统的角度看，每一个系统都是通过持续不断地叠加功能来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消亡。 再从RD的角度来看这个问题，RD通过做需求来给公司创造价值，实现自己的产出。而RD的产能是指技术能力、软素质、身体健康状况，有这些资本后，我们才能进行持续的产出。在日常工作中，我发现很多RD往往只重视产出。他们也在很努力地做项目，但是每一个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做得一般，还会抱怨自己得不到任何成长。这就是P&#x2F;PC不平衡的体现。<strong>如果能在做项目的过程中，通过学习总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果。</strong> “P&#x2F;PC平衡”原则还适用于很多其他的领域，例如团队、家庭等，我本人也非常推崇这一原则。希望大家也能将其作为自身的一项基本原则，努力寻找到产出与产能的平衡点。</p>\n<h1 id=\"原则九：善于提问\"><a href=\"#原则九：善于提问\" class=\"headerlink\" title=\"原则九：善于提问\"></a>原则九：善于提问</h1><p><strong>“善于提问”，首先要勤于提问</strong>。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，<strong>只有在争辩中，才可能诞生最好的主意和最好的决定</strong>。 在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。 <strong>“善于提问”，还要懂得如何提问</strong>。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：批判性思维。 批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。同样，在阅读一篇技术博客的时候，也要使用批判性的思维，多问几个为什么，作者得出的结论是否合理？论据是否充分？只有这样，才能不断地获取真正的知识。</p>\n<h1 id=\"原则十：空杯心态\"><a href=\"#原则十：空杯心态\" class=\"headerlink\" title=\"原则十：空杯心态\"></a>原则十：空杯心态</h1><p>“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。 <strong>保持“空杯心态”这一原则要求我们时刻进行自我检视与反省</strong>。在工作中，多去跟不同级别的同学聊一聊，或者做一个360度评估，这有助于我们更加客观地评价自己。在横向对比中，多向那些优秀的同学看齐，学习他人的优点。很多同学在设计评审或者代码review过程中，针对别人提出的问题与建议，往往都采用一种对立的态度。错误地认为别人是在挑刺，是在针对自己。诚然，在某些方面，我们可能确实比其他人想得深入，但是这不代表在所有方面都能考虑周全。对于别人的建议，建议使用“善于提问”原则里提到的批判性思维仔细分析一下，虚心地吸取那些好的建议。 工作学习就像“练级打怪”，技能储备的越多，就越容易走到最后。保持空杯心态，可以让我们发现很多以前注意不到的新能力，我们要做的就是努力学习它，将它们转化为自己能力库的一部分。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以上，是我总结的工作与学习的十条基本原则。其中有的侧重于个人做事情的方法，如“Owner意识”、“时间观念”、“以终为始”、”闭环思维”；有的侧重于团队工作标准规范，如“保持敬畏”、“事不过二”、“设计优先”；有的侧重于团队或个人效能提升，如“P&#x2F;PC平衡”、“善于提问”、“空杯心态”。这些原则是我多年在工作与学习中，不断总结得来的经验。希望在大家面临选择时，这些原则能够起到一定的帮助和指导作用。 以原则为中心地工作与生活，让自己与团队变得更加强大。</p>\n<h1 id=\"作者介绍\"><a href=\"#作者介绍\" class=\"headerlink\" title=\"作者介绍\"></a>作者介绍</h1><p>云鹏，2014年加入美团，先后参与了美团酒店供应链体系、分布式调度系统的建设，现在负责美团旅行客户关系管理系统、基础信息服务的建设工作。</p>\n<h4 id=\"原文地址https-tech-meituan-com-10-principles-for-engineers-html\"><a href=\"#原文地址https-tech-meituan-com-10-principles-for-engineers-html\" class=\"headerlink\" title=\"原文地址https://tech.meituan.com/10\\_principles\\_for\\_engineers.html\"></a>原文地址<a href=\"https://tech.meituan.com/10/_principles/_for/_engineers.html\">https://tech.meituan.com/10\\_principles\\_for\\_engineers.html</a></h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”……那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。 8年过去了，自己从一个职场小白逐步成长为一名技术Leader。我发现团队中的很多同学在不停地重复犯着自己当年类似的错误。他们并不是不努力，到底是哪里出了问题？经过一段时间的观察与思考后，我想我找到了答案。那就是：我们大多数同学在工作中缺乏原则的指导。原则，犹如指引行动的“灯塔”，它连接着我们的价值观与行动。不久前，桥水基金创始人雷·达里奥在《原则》一书中所传达的理念，引爆了朋友圈。<strong>每个人都应该有自己的原则，当我们需要作出选择时，一定要坚持以原则为中心。</strong>但是在现实生活中，我们往往缺少对原则的总结，对于很多人来说这是一门“只可意会不可言传”的玄学，是属于老司机的秘密，其实不然。 “追求卓越”是美团的价值观。作为一名技术人员，我们应该如何践行呢？本文总结了十条精进原则，希望能够给大家带来一些启发，更好地指导我们的行动。 <img src=\"https://tech.meituan.com/img/10_principles_for_engineers/10-1.jpg\"></p>\n<h1 id=\"原则一：Owner意识\"><a href=\"#原则一：Owner意识\" class=\"headerlink\" title=\"原则一：Owner意识\"></a>原则一：Owner意识</h1><p>“Owner意识”主要体现在两个层面：一是认真负责的态度，二是积极主动的精神。 <strong>认真负责是工作的底线。</strong>首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD的工程交付质量，还会对协同工作的RD、QA、PM等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。 <strong>积极主动是“Owner意识”更高一级的要求。</strong>RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。</p>\n<h1 id=\"原则二：时间观念\"><a href=\"#原则二：时间观念\" class=\"headerlink\" title=\"原则二：时间观念\"></a>原则二：时间观念</h1><p>相信大家都有时间观念，但是真正能执行到位的可能并没有那么多。互联网是一个快速发展的行业，RD的研发效率是一个公司硬实力的重要体现。项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱程度的评价。大家可能会问：难度几乎相同的项目，为什么有的同学经常Delay，而有的同学每次都能按时上线？一个很重要的原因，就是这些按时交付的同学往往具备如下两个特质：<strong>做事有计划，工作分主次。</strong> <strong>工作安排要有计划性。</strong>通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。 <strong>工作安排要分清楚主次。</strong>我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。</p>\n<h1 id=\"原则三：以终为始\"><a href=\"#原则三：以终为始\" class=\"headerlink\" title=\"原则三：以终为始\"></a>原则三：以终为始</h1><p>“以终为始”（Begin With The End In Mind），是史蒂芬·柯维在《高效能人士的七个习惯》中提到的一个习惯。它是以所有事物都经过两次创造的原则（第一次为心智上的创造，第二次为实际的创造）为基础的。直观的表达就是：<strong>先想清楚目标，然后努力实现。</strong> 在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现得尤为明显。例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，<strong>所以要根据问题设定目标，再进行优化</strong>。 “以终为始”，这一原则还可以作用于我们的学习中。很多同学看过很多技术文章，但是总是感觉自己仍然一无所知。很重要的一个原因，就是没有<strong>带着目标去学习</strong>。在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？是想把Redis的持久化原理搞清楚，还是把Redis的主从同步机制弄明白，亦或是想学习整个Redis Cluster的架构体系。如果我们能够带着问题与目标，再进行相关的资料搜集与学习，就会事半功倍。这种学习模式的效果会比碎片化阅读好很多。</p>\n<h1 id=\"原则四：闭环思维\"><a href=\"#原则四：闭环思维\" class=\"headerlink\" title=\"原则四：闭环思维\"></a>原则四：闭环思维</h1><p>你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。 之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。<strong>它强调的是一种即时反馈闭环，</strong>如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的To Do进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入“沟通-发现问题-再沟通-再发现问题”的恶性循环中。<strong>真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收。</strong> <strong>“闭环思维”还要求能够定期主动进行阶段性的反馈。</strong>刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。</p>\n<h1 id=\"原则五：保持敬畏\"><a href=\"#原则五：保持敬畏\" class=\"headerlink\" title=\"原则五：保持敬畏\"></a>原则五：保持敬畏</h1><p>“君子之心，常怀敬畏”，保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。 <strong>当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致。</strong>以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。类似的问题，还包括对上线流程不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。 保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，<strong>让规范与约定与时俱进，也是另一种形式的敬畏。</strong> <img src=\"https://tech.meituan.com/img/10_principles_for_engineers/10-2.jpg\"></p>\n<h1 id=\"原则六：事不过二\"><a href=\"#原则六：事不过二\" class=\"headerlink\" title=\"原则六：事不过二\"></a>原则六：事不过二</h1><p>“事不过二”，是我们团队一贯坚持的原则，它可以解读为两层含义。 一层含义是<strong>“所有的评审与问题讨论，不要超过两次”</strong>。之所以有这样的要求，是因为我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此，我们团队规定：<strong>所有的评审最多两次。</strong>通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。 “事不过二”原则的另一层含义，是<strong>“同样的错误不能犯第二次”</strong>。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。</p>\n<h1 id=\"原则七：设计优先\"><a href=\"#原则七：设计优先\" class=\"headerlink\" title=\"原则七：设计优先\"></a>原则七：设计优先</h1><p>“设计优先”这条原则，相对来说更加具体一些。之所以单列一项，是因为架构设计太重要了。Uncle Bob曾说过：“软件架构的目标，是为了让构建与维护系统的所需人力资源最小化。” <strong>架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题。</strong>很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计得足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。<strong>无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构。</strong>因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。 <strong>“设计优先”这一原则，要求写别人看得懂的设计</strong>。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。 <img src=\"https://tech.meituan.com/img/10_principles_for_engineers/10-3.jpg\"></p>\n<h1 id=\"原则八：P-x2F-PC平衡\"><a href=\"#原则八：P-x2F-PC平衡\" class=\"headerlink\" title=\"原则八：P&#x2F;PC平衡\"></a>原则八：P&#x2F;PC平衡</h1><p>“P&#x2F;PC平衡”原则，即产出与产能平衡原则。伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。<strong>产出与产能必须平衡，才能达到真正的高效能</strong>。为了让大家更清晰的了解这一原则，本文举两个例子。 从系统的角度看，每一个系统都是通过持续不断地叠加功能来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消亡。 再从RD的角度来看这个问题，RD通过做需求来给公司创造价值，实现自己的产出。而RD的产能是指技术能力、软素质、身体健康状况，有这些资本后，我们才能进行持续的产出。在日常工作中，我发现很多RD往往只重视产出。他们也在很努力地做项目，但是每一个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做得一般，还会抱怨自己得不到任何成长。这就是P&#x2F;PC不平衡的体现。<strong>如果能在做项目的过程中，通过学习总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果。</strong> “P&#x2F;PC平衡”原则还适用于很多其他的领域，例如团队、家庭等，我本人也非常推崇这一原则。希望大家也能将其作为自身的一项基本原则，努力寻找到产出与产能的平衡点。</p>\n<h1 id=\"原则九：善于提问\"><a href=\"#原则九：善于提问\" class=\"headerlink\" title=\"原则九：善于提问\"></a>原则九：善于提问</h1><p><strong>“善于提问”，首先要勤于提问</strong>。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，<strong>只有在争辩中，才可能诞生最好的主意和最好的决定</strong>。 在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。 <strong>“善于提问”，还要懂得如何提问</strong>。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：批判性思维。 批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。同样，在阅读一篇技术博客的时候，也要使用批判性的思维，多问几个为什么，作者得出的结论是否合理？论据是否充分？只有这样，才能不断地获取真正的知识。</p>\n<h1 id=\"原则十：空杯心态\"><a href=\"#原则十：空杯心态\" class=\"headerlink\" title=\"原则十：空杯心态\"></a>原则十：空杯心态</h1><p>“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。 <strong>保持“空杯心态”这一原则要求我们时刻进行自我检视与反省</strong>。在工作中，多去跟不同级别的同学聊一聊，或者做一个360度评估，这有助于我们更加客观地评价自己。在横向对比中，多向那些优秀的同学看齐，学习他人的优点。很多同学在设计评审或者代码review过程中，针对别人提出的问题与建议，往往都采用一种对立的态度。错误地认为别人是在挑刺，是在针对自己。诚然，在某些方面，我们可能确实比其他人想得深入，但是这不代表在所有方面都能考虑周全。对于别人的建议，建议使用“善于提问”原则里提到的批判性思维仔细分析一下，虚心地吸取那些好的建议。 工作学习就像“练级打怪”，技能储备的越多，就越容易走到最后。保持空杯心态，可以让我们发现很多以前注意不到的新能力，我们要做的就是努力学习它，将它们转化为自己能力库的一部分。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以上，是我总结的工作与学习的十条基本原则。其中有的侧重于个人做事情的方法，如“Owner意识”、“时间观念”、“以终为始”、”闭环思维”；有的侧重于团队工作标准规范，如“保持敬畏”、“事不过二”、“设计优先”；有的侧重于团队或个人效能提升，如“P&#x2F;PC平衡”、“善于提问”、“空杯心态”。这些原则是我多年在工作与学习中，不断总结得来的经验。希望在大家面临选择时，这些原则能够起到一定的帮助和指导作用。 以原则为中心地工作与生活，让自己与团队变得更加强大。</p>\n<h1 id=\"作者介绍\"><a href=\"#作者介绍\" class=\"headerlink\" title=\"作者介绍\"></a>作者介绍</h1><p>云鹏，2014年加入美团，先后参与了美团酒店供应链体系、分布式调度系统的建设，现在负责美团旅行客户关系管理系统、基础信息服务的建设工作。</p>\n<h4 id=\"原文地址https-tech-meituan-com-10-principles-for-engineers-html\"><a href=\"#原文地址https-tech-meituan-com-10-principles-for-engineers-html\" class=\"headerlink\" title=\"原文地址https://tech.meituan.com/10\\_principles\\_for\\_engineers.html\"></a>原文地址<a href=\"https://tech.meituan.com/10/_principles/_for/_engineers.html\">https://tech.meituan.com/10\\_principles\\_for\\_engineers.html</a></h4>"},{"title":"普吉岛之行--游玩篇","id":"556","date":"2019-09-15T12:15:41.000Z","_content":"\n来到普吉岛的目的只有一个，那就是耍！所以这篇主要是记述下我们这次普吉岛之行的游玩历程。\n\n### 闲逛\n\n落地之后，先坐大巴去了酒店，酒店地理位置挺不错的，距离海边只要步行十多分钟。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_121b-1024x576.jpg)\n\n放置好行李之后，我们就开始出门觅食，在美团上面找了一家泰国菜，步行距离大概一公里左右。\n\n![](/uploads/2019/09/IMG_5913-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5919-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_5912-1024x768.jpg)\n\n泰国的菜基本上量很小，所以很多菜我们都点了双份。\n\n吃完饭后，第一件事肯定就是先到海边逛逛。\n\n![](/uploads/2019/09/IMG_5922-1024x768.jpg)\n\n晚饭后的海边已经没什么人了，吹着海风，看着潮来潮往，自在急了，真希望时间永远停留在这个时刻，逃离北上广。\n\n### 夜宵\n\n在海边吹完海风，就回到了酒店，距离晚睡的时间还早的很，所以这个时候不吃点夜宵，感觉都对不起这次出行。\n\n来到泰国，肯定是榴莲和山竹，榴莲的价格其实和国内的价格差不多，只是山竹的价格会相对便宜一点，也就几块钱一斤。\n\n### 出海\n\n吃过早餐之后，我们先集体去拜佛，毕竟泰国属于佛教盛行的国家，据说整个泰国99%以上都是信奉佛教的。\n\n拜佛之后，我们就前往了普吉岛海边，hiahia，终于来到了心心念的海边了。\n\n我们坐着快艇，大概花了十多分钟来到了目的地。\n\n![](/uploads/2019/09/IMG_5954-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5953-768x1024.jpg)\n\n海边的水很清澈，普吉岛真的是个适合生活的地方。\n\n岛上也有很多娱乐项目，自己报名了《海底漫步》，价格大概1000泰铢左右，头上顶着笨重的氧气罩，下到海底，观察小鱼在身边穿梭。\n\n### 泼水节\n\n在海边玩完之后，就已经是中午饭的时间了，吃完了中午饭时间，我们就触发了下个目的地——泼水节。\n\n我们坐着大巴，来到泼水节的活动场地。导游给我们讲了一些泼水节的由来，然后就是开场仪式。\n\n我们几个人每个人租了一个水枪，用来一会泼水节的时候用。\n\n![](/uploads/2019/09/IMG_5958-1024x768.jpg)\n\n随着开始的号角的吹响，大家开始疯狂战斗，战况非常惨烈，甚至还没等睁开眼，下一盆水就已经招呼上了。\n\n![](/uploads/2019/09/IMG_5956-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5961-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_5960-768x1024.jpg)\n\n### 骑大象\n\n泼水节之后，换上了干净的衣服，就开始了下个目的地——骑大象。\n\n基本上每个大象坐两个人，每个人会给20泰铢的消费\n\n![](/uploads/2019/09/IMG_8407-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_6566-768x1024.jpg)\n\n### 晚餐\n\n骑完大象，我们统一坐车前往饭店，开始这一趟出行，最丰盛的晚宴。来到泰国，肯定要吃地道的菠萝饭，海鲜自然是不能少的。\n\n![](/uploads/2019/09/IMG_2070-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5506-768x1024.jpg)\n\n这次来泰国也算是吃个够了。\n\n### 普吉的夜\n\n吃完了丰盛的海鲜大咖，我们陆陆续续乘着车，回到了酒店。回到酒店，距离晚上睡觉还有很长的时间，何不出去逛逛，感受一下泰国的夜晚。\n\n普吉岛的夜晚算是比较清净，和之前了解到的泰国不太一样。之前在网上，看到泰国晚上回很乱，街上会有很多的“小姐姐”拉着你“谈心”。\n\n![](/uploads/2019/09/IMG_4010-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_7536-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_8864-1024x768.jpg)\n\n普吉的晚上，总给人一种轻松愉悦的心情，虽然只是在这里待几天，但是我真的不想回去了。在这里，和北京相比，空气中都弥漫着放松...","source":"_posts/playing.md","raw":"---\ntitle: 普吉岛之行--游玩篇\ntags:\n  - 出国游\n  - 团建\n  - 普吉岛\n  - 泰国\nid: '556'\ncategories:\n  - - Life\ndate: 2019-09-15 20:15:41\n---\n\n来到普吉岛的目的只有一个，那就是耍！所以这篇主要是记述下我们这次普吉岛之行的游玩历程。\n\n### 闲逛\n\n落地之后，先坐大巴去了酒店，酒店地理位置挺不错的，距离海边只要步行十多分钟。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_121b-1024x576.jpg)\n\n放置好行李之后，我们就开始出门觅食，在美团上面找了一家泰国菜，步行距离大概一公里左右。\n\n![](/uploads/2019/09/IMG_5913-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5919-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_5912-1024x768.jpg)\n\n泰国的菜基本上量很小，所以很多菜我们都点了双份。\n\n吃完饭后，第一件事肯定就是先到海边逛逛。\n\n![](/uploads/2019/09/IMG_5922-1024x768.jpg)\n\n晚饭后的海边已经没什么人了，吹着海风，看着潮来潮往，自在急了，真希望时间永远停留在这个时刻，逃离北上广。\n\n### 夜宵\n\n在海边吹完海风，就回到了酒店，距离晚睡的时间还早的很，所以这个时候不吃点夜宵，感觉都对不起这次出行。\n\n来到泰国，肯定是榴莲和山竹，榴莲的价格其实和国内的价格差不多，只是山竹的价格会相对便宜一点，也就几块钱一斤。\n\n### 出海\n\n吃过早餐之后，我们先集体去拜佛，毕竟泰国属于佛教盛行的国家，据说整个泰国99%以上都是信奉佛教的。\n\n拜佛之后，我们就前往了普吉岛海边，hiahia，终于来到了心心念的海边了。\n\n我们坐着快艇，大概花了十多分钟来到了目的地。\n\n![](/uploads/2019/09/IMG_5954-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5953-768x1024.jpg)\n\n海边的水很清澈，普吉岛真的是个适合生活的地方。\n\n岛上也有很多娱乐项目，自己报名了《海底漫步》，价格大概1000泰铢左右，头上顶着笨重的氧气罩，下到海底，观察小鱼在身边穿梭。\n\n### 泼水节\n\n在海边玩完之后，就已经是中午饭的时间了，吃完了中午饭时间，我们就触发了下个目的地——泼水节。\n\n我们坐着大巴，来到泼水节的活动场地。导游给我们讲了一些泼水节的由来，然后就是开场仪式。\n\n我们几个人每个人租了一个水枪，用来一会泼水节的时候用。\n\n![](/uploads/2019/09/IMG_5958-1024x768.jpg)\n\n随着开始的号角的吹响，大家开始疯狂战斗，战况非常惨烈，甚至还没等睁开眼，下一盆水就已经招呼上了。\n\n![](/uploads/2019/09/IMG_5956-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5961-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_5960-768x1024.jpg)\n\n### 骑大象\n\n泼水节之后，换上了干净的衣服，就开始了下个目的地——骑大象。\n\n基本上每个大象坐两个人，每个人会给20泰铢的消费\n\n![](/uploads/2019/09/IMG_8407-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_6566-768x1024.jpg)\n\n### 晚餐\n\n骑完大象，我们统一坐车前往饭店，开始这一趟出行，最丰盛的晚宴。来到泰国，肯定要吃地道的菠萝饭，海鲜自然是不能少的。\n\n![](/uploads/2019/09/IMG_2070-768x1024.jpg)\n\n![](/uploads/2019/09/IMG_5506-768x1024.jpg)\n\n这次来泰国也算是吃个够了。\n\n### 普吉的夜\n\n吃完了丰盛的海鲜大咖，我们陆陆续续乘着车，回到了酒店。回到酒店，距离晚上睡觉还有很长的时间，何不出去逛逛，感受一下泰国的夜晚。\n\n普吉岛的夜晚算是比较清净，和之前了解到的泰国不太一样。之前在网上，看到泰国晚上回很乱，街上会有很多的“小姐姐”拉着你“谈心”。\n\n![](/uploads/2019/09/IMG_4010-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_7536-1024x768.jpg)\n\n![](/uploads/2019/09/IMG_8864-1024x768.jpg)\n\n普吉的晚上，总给人一种轻松愉悦的心情，虽然只是在这里待几天，但是我真的不想回去了。在这里，和北京相比，空气中都弥漫着放松...","slug":"playing","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mi60078417t0mtvb5yv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>来到普吉岛的目的只有一个，那就是耍！所以这篇主要是记述下我们这次普吉岛之行的游玩历程。</p>\n<h3 id=\"闲逛\"><a href=\"#闲逛\" class=\"headerlink\" title=\"闲逛\"></a>闲逛</h3><p>落地之后，先坐大巴去了酒店，酒店地理位置挺不错的，距离海边只要步行十多分钟。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_121b-1024x576.jpg\"></p>\n<p>放置好行李之后，我们就开始出门觅食，在美团上面找了一家泰国菜，步行距离大概一公里左右。</p>\n<p><img src=\"/uploads/2019/09/IMG_5913-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5919-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5912-1024x768.jpg\"></p>\n<p>泰国的菜基本上量很小，所以很多菜我们都点了双份。</p>\n<p>吃完饭后，第一件事肯定就是先到海边逛逛。</p>\n<p><img src=\"/uploads/2019/09/IMG_5922-1024x768.jpg\"></p>\n<p>晚饭后的海边已经没什么人了，吹着海风，看着潮来潮往，自在急了，真希望时间永远停留在这个时刻，逃离北上广。</p>\n<h3 id=\"夜宵\"><a href=\"#夜宵\" class=\"headerlink\" title=\"夜宵\"></a>夜宵</h3><p>在海边吹完海风，就回到了酒店，距离晚睡的时间还早的很，所以这个时候不吃点夜宵，感觉都对不起这次出行。</p>\n<p>来到泰国，肯定是榴莲和山竹，榴莲的价格其实和国内的价格差不多，只是山竹的价格会相对便宜一点，也就几块钱一斤。</p>\n<h3 id=\"出海\"><a href=\"#出海\" class=\"headerlink\" title=\"出海\"></a>出海</h3><p>吃过早餐之后，我们先集体去拜佛，毕竟泰国属于佛教盛行的国家，据说整个泰国99%以上都是信奉佛教的。</p>\n<p>拜佛之后，我们就前往了普吉岛海边，hiahia，终于来到了心心念的海边了。</p>\n<p>我们坐着快艇，大概花了十多分钟来到了目的地。</p>\n<p><img src=\"/uploads/2019/09/IMG_5954-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5953-768x1024.jpg\"></p>\n<p>海边的水很清澈，普吉岛真的是个适合生活的地方。</p>\n<p>岛上也有很多娱乐项目，自己报名了《海底漫步》，价格大概1000泰铢左右，头上顶着笨重的氧气罩，下到海底，观察小鱼在身边穿梭。</p>\n<h3 id=\"泼水节\"><a href=\"#泼水节\" class=\"headerlink\" title=\"泼水节\"></a>泼水节</h3><p>在海边玩完之后，就已经是中午饭的时间了，吃完了中午饭时间，我们就触发了下个目的地——泼水节。</p>\n<p>我们坐着大巴，来到泼水节的活动场地。导游给我们讲了一些泼水节的由来，然后就是开场仪式。</p>\n<p>我们几个人每个人租了一个水枪，用来一会泼水节的时候用。</p>\n<p><img src=\"/uploads/2019/09/IMG_5958-1024x768.jpg\"></p>\n<p>随着开始的号角的吹响，大家开始疯狂战斗，战况非常惨烈，甚至还没等睁开眼，下一盆水就已经招呼上了。</p>\n<p><img src=\"/uploads/2019/09/IMG_5956-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5961-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5960-768x1024.jpg\"></p>\n<h3 id=\"骑大象\"><a href=\"#骑大象\" class=\"headerlink\" title=\"骑大象\"></a>骑大象</h3><p>泼水节之后，换上了干净的衣服，就开始了下个目的地——骑大象。</p>\n<p>基本上每个大象坐两个人，每个人会给20泰铢的消费</p>\n<p><img src=\"/uploads/2019/09/IMG_8407-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_6566-768x1024.jpg\"></p>\n<h3 id=\"晚餐\"><a href=\"#晚餐\" class=\"headerlink\" title=\"晚餐\"></a>晚餐</h3><p>骑完大象，我们统一坐车前往饭店，开始这一趟出行，最丰盛的晚宴。来到泰国，肯定要吃地道的菠萝饭，海鲜自然是不能少的。</p>\n<p><img src=\"/uploads/2019/09/IMG_2070-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5506-768x1024.jpg\"></p>\n<p>这次来泰国也算是吃个够了。</p>\n<h3 id=\"普吉的夜\"><a href=\"#普吉的夜\" class=\"headerlink\" title=\"普吉的夜\"></a>普吉的夜</h3><p>吃完了丰盛的海鲜大咖，我们陆陆续续乘着车，回到了酒店。回到酒店，距离晚上睡觉还有很长的时间，何不出去逛逛，感受一下泰国的夜晚。</p>\n<p>普吉岛的夜晚算是比较清净，和之前了解到的泰国不太一样。之前在网上，看到泰国晚上回很乱，街上会有很多的“小姐姐”拉着你“谈心”。</p>\n<p><img src=\"/uploads/2019/09/IMG_4010-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_7536-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_8864-1024x768.jpg\"></p>\n<p>普吉的晚上，总给人一种轻松愉悦的心情，虽然只是在这里待几天，但是我真的不想回去了。在这里，和北京相比，空气中都弥漫着放松…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>来到普吉岛的目的只有一个，那就是耍！所以这篇主要是记述下我们这次普吉岛之行的游玩历程。</p>\n<h3 id=\"闲逛\"><a href=\"#闲逛\" class=\"headerlink\" title=\"闲逛\"></a>闲逛</h3><p>落地之后，先坐大巴去了酒店，酒店地理位置挺不错的，距离海边只要步行十多分钟。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_121b-1024x576.jpg\"></p>\n<p>放置好行李之后，我们就开始出门觅食，在美团上面找了一家泰国菜，步行距离大概一公里左右。</p>\n<p><img src=\"/uploads/2019/09/IMG_5913-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5919-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5912-1024x768.jpg\"></p>\n<p>泰国的菜基本上量很小，所以很多菜我们都点了双份。</p>\n<p>吃完饭后，第一件事肯定就是先到海边逛逛。</p>\n<p><img src=\"/uploads/2019/09/IMG_5922-1024x768.jpg\"></p>\n<p>晚饭后的海边已经没什么人了，吹着海风，看着潮来潮往，自在急了，真希望时间永远停留在这个时刻，逃离北上广。</p>\n<h3 id=\"夜宵\"><a href=\"#夜宵\" class=\"headerlink\" title=\"夜宵\"></a>夜宵</h3><p>在海边吹完海风，就回到了酒店，距离晚睡的时间还早的很，所以这个时候不吃点夜宵，感觉都对不起这次出行。</p>\n<p>来到泰国，肯定是榴莲和山竹，榴莲的价格其实和国内的价格差不多，只是山竹的价格会相对便宜一点，也就几块钱一斤。</p>\n<h3 id=\"出海\"><a href=\"#出海\" class=\"headerlink\" title=\"出海\"></a>出海</h3><p>吃过早餐之后，我们先集体去拜佛，毕竟泰国属于佛教盛行的国家，据说整个泰国99%以上都是信奉佛教的。</p>\n<p>拜佛之后，我们就前往了普吉岛海边，hiahia，终于来到了心心念的海边了。</p>\n<p>我们坐着快艇，大概花了十多分钟来到了目的地。</p>\n<p><img src=\"/uploads/2019/09/IMG_5954-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5953-768x1024.jpg\"></p>\n<p>海边的水很清澈，普吉岛真的是个适合生活的地方。</p>\n<p>岛上也有很多娱乐项目，自己报名了《海底漫步》，价格大概1000泰铢左右，头上顶着笨重的氧气罩，下到海底，观察小鱼在身边穿梭。</p>\n<h3 id=\"泼水节\"><a href=\"#泼水节\" class=\"headerlink\" title=\"泼水节\"></a>泼水节</h3><p>在海边玩完之后，就已经是中午饭的时间了，吃完了中午饭时间，我们就触发了下个目的地——泼水节。</p>\n<p>我们坐着大巴，来到泼水节的活动场地。导游给我们讲了一些泼水节的由来，然后就是开场仪式。</p>\n<p>我们几个人每个人租了一个水枪，用来一会泼水节的时候用。</p>\n<p><img src=\"/uploads/2019/09/IMG_5958-1024x768.jpg\"></p>\n<p>随着开始的号角的吹响，大家开始疯狂战斗，战况非常惨烈，甚至还没等睁开眼，下一盆水就已经招呼上了。</p>\n<p><img src=\"/uploads/2019/09/IMG_5956-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5961-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5960-768x1024.jpg\"></p>\n<h3 id=\"骑大象\"><a href=\"#骑大象\" class=\"headerlink\" title=\"骑大象\"></a>骑大象</h3><p>泼水节之后，换上了干净的衣服，就开始了下个目的地——骑大象。</p>\n<p>基本上每个大象坐两个人，每个人会给20泰铢的消费</p>\n<p><img src=\"/uploads/2019/09/IMG_8407-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_6566-768x1024.jpg\"></p>\n<h3 id=\"晚餐\"><a href=\"#晚餐\" class=\"headerlink\" title=\"晚餐\"></a>晚餐</h3><p>骑完大象，我们统一坐车前往饭店，开始这一趟出行，最丰盛的晚宴。来到泰国，肯定要吃地道的菠萝饭，海鲜自然是不能少的。</p>\n<p><img src=\"/uploads/2019/09/IMG_2070-768x1024.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_5506-768x1024.jpg\"></p>\n<p>这次来泰国也算是吃个够了。</p>\n<h3 id=\"普吉的夜\"><a href=\"#普吉的夜\" class=\"headerlink\" title=\"普吉的夜\"></a>普吉的夜</h3><p>吃完了丰盛的海鲜大咖，我们陆陆续续乘着车，回到了酒店。回到酒店，距离晚上睡觉还有很长的时间，何不出去逛逛，感受一下泰国的夜晚。</p>\n<p>普吉岛的夜晚算是比较清净，和之前了解到的泰国不太一样。之前在网上，看到泰国晚上回很乱，街上会有很多的“小姐姐”拉着你“谈心”。</p>\n<p><img src=\"/uploads/2019/09/IMG_4010-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_7536-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/IMG_8864-1024x768.jpg\"></p>\n<p>普吉的晚上，总给人一种轻松愉悦的心情，虽然只是在这里待几天，但是我真的不想回去了。在这里，和北京相比，空气中都弥漫着放松…</p>\n"},{"title":"读《代码整洁之道》","id":"58","date":"2017-08-24T11:39:49.000Z","_content":"\n#### 每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\n<!-- more -->\n#### 由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\n\n#### 就像说的题目一样，主旨就是一个词：整洁\n\n#### 糟糕的代码\n\n#### 我们应该如何理解糟糕的代码？\n\n#### 无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\n\n#### 假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\n\n#### 整洁的代码\n\n#### 当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\n\n#### _整洁的原则_\n\n#### _变量_\n\n#### 真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现`$name1`，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\n\n```php\n$getActiveAccount\n$getActiveAccounts\n$getActiveAccountInfo\n```\n\n#### 应该很难有人区分这三个函数有什么不同了，moneyAmount 和 money两个变量其实没有任何区别。\n\n#### _函数_\n\n#### 对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\n\n#### 在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\n\n#### 作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\n\n#### _格式_\n\n#### 我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\n\n#### 其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是`Java`但是思想是一致的。","source":"_posts/reading-code-clean.md","raw":"---\ntitle: 读《代码整洁之道》\ntags: []\nid: '58'\ncategories:\n  - - Linux\ndate: 2017-08-24 19:39:49\n---\n\n#### 每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\n<!-- more -->\n#### 由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\n\n#### 就像说的题目一样，主旨就是一个词：整洁\n\n#### 糟糕的代码\n\n#### 我们应该如何理解糟糕的代码？\n\n#### 无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\n\n#### 假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\n\n#### 整洁的代码\n\n#### 当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\n\n#### _整洁的原则_\n\n#### _变量_\n\n#### 真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现`$name1`，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\n\n```php\n$getActiveAccount\n$getActiveAccounts\n$getActiveAccountInfo\n```\n\n#### 应该很难有人区分这三个函数有什么不同了，moneyAmount 和 money两个变量其实没有任何区别。\n\n#### _函数_\n\n#### 对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\n\n#### 在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\n\n#### 作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\n\n#### _格式_\n\n#### 我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\n\n#### 其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是`Java`但是思想是一致的。","slug":"reading-code-clean","published":1,"updated":"2022-03-12T23:52:58.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mi7007c417th9yb3cm2","content":"<h4 id=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"><a href=\"#每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\" class=\"headerlink\" title=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"></a>每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。</h4><span id=\"more\"></span>\n<h4 id=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"><a href=\"#由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\" class=\"headerlink\" title=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"></a>由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。</h4><h4 id=\"就像说的题目一样，主旨就是一个词：整洁\"><a href=\"#就像说的题目一样，主旨就是一个词：整洁\" class=\"headerlink\" title=\"就像说的题目一样，主旨就是一个词：整洁\"></a>就像说的题目一样，主旨就是一个词：整洁</h4><h4 id=\"糟糕的代码\"><a href=\"#糟糕的代码\" class=\"headerlink\" title=\"糟糕的代码\"></a>糟糕的代码</h4><h4 id=\"我们应该如何理解糟糕的代码？\"><a href=\"#我们应该如何理解糟糕的代码？\" class=\"headerlink\" title=\"我们应该如何理解糟糕的代码？\"></a>我们应该如何理解糟糕的代码？</h4><h4 id=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"><a href=\"#无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\" class=\"headerlink\" title=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"></a>无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。</h4><h4 id=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"><a href=\"#假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\" class=\"headerlink\" title=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"></a>假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·</h4><h4 id=\"整洁的代码\"><a href=\"#整洁的代码\" class=\"headerlink\" title=\"整洁的代码\"></a>整洁的代码</h4><h4 id=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"><a href=\"#当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\" class=\"headerlink\" title=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"></a>当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。</h4><h4 id=\"整洁的原则\"><a href=\"#整洁的原则\" class=\"headerlink\" title=\"整洁的原则\"></a><em>整洁的原则</em></h4><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a><em>变量</em></h4><h4 id=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"><a href=\"#真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\" class=\"headerlink\" title=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现$name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"></a>真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现<code>$name1</code>，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$getActiveAccount</span></span><br><span class=\"line\"><span class=\"variable\">$getActiveAccounts</span></span><br><span class=\"line\"><span class=\"variable\">$getActiveAccountInfo</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\"><a href=\"#应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\" class=\"headerlink\" title=\"应该很难有人区分这三个函数有什么不同了，moneyAmount 和 money两个变量其实没有任何区别。\"></a>应该很难有人区分这三个函数有什么不同了，moneyAmount 和 money两个变量其实没有任何区别。</h4><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><em>函数</em></h4><h4 id=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"><a href=\"#对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\" class=\"headerlink\" title=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"></a>对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。</h4><h4 id=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"><a href=\"#在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\" class=\"headerlink\" title=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"></a>在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。</h4><h4 id=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"><a href=\"#作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\" class=\"headerlink\" title=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"></a>作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。</h4><h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><em>格式</em></h4><h4 id=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"><a href=\"#我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\" class=\"headerlink\" title=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"></a>我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？</h4><h4 id=\"其实书的内容远不止此，况且我现在才读1-x2F-3，虽然书中的代码是Java但是思想是一致的。\"><a href=\"#其实书的内容远不止此，况且我现在才读1-x2F-3，虽然书中的代码是Java但是思想是一致的。\" class=\"headerlink\" title=\"其实书的内容远不止此，况且我现在才读1&#x2F;3，虽然书中的代码是Java但是思想是一致的。\"></a>其实书的内容远不止此，况且我现在才读1&#x2F;3，虽然书中的代码是<code>Java</code>但是思想是一致的。</h4>","site":{"data":{}},"excerpt":"<h4 id=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"><a href=\"#每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\" class=\"headerlink\" title=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"></a>每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。</h4>","more":"<h4 id=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"><a href=\"#由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\" class=\"headerlink\" title=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"></a>由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。</h4><h4 id=\"就像说的题目一样，主旨就是一个词：整洁\"><a href=\"#就像说的题目一样，主旨就是一个词：整洁\" class=\"headerlink\" title=\"就像说的题目一样，主旨就是一个词：整洁\"></a>就像说的题目一样，主旨就是一个词：整洁</h4><h4 id=\"糟糕的代码\"><a href=\"#糟糕的代码\" class=\"headerlink\" title=\"糟糕的代码\"></a>糟糕的代码</h4><h4 id=\"我们应该如何理解糟糕的代码？\"><a href=\"#我们应该如何理解糟糕的代码？\" class=\"headerlink\" title=\"我们应该如何理解糟糕的代码？\"></a>我们应该如何理解糟糕的代码？</h4><h4 id=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"><a href=\"#无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\" class=\"headerlink\" title=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"></a>无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。</h4><h4 id=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"><a href=\"#假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\" class=\"headerlink\" title=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"></a>假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·</h4><h4 id=\"整洁的代码\"><a href=\"#整洁的代码\" class=\"headerlink\" title=\"整洁的代码\"></a>整洁的代码</h4><h4 id=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"><a href=\"#当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\" class=\"headerlink\" title=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"></a>当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。</h4><h4 id=\"整洁的原则\"><a href=\"#整洁的原则\" class=\"headerlink\" title=\"整洁的原则\"></a><em>整洁的原则</em></h4><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a><em>变量</em></h4><h4 id=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"><a href=\"#真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\" class=\"headerlink\" title=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现$name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"></a>真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现<code>$name1</code>，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$getActiveAccount</span></span><br><span class=\"line\"><span class=\"variable\">$getActiveAccounts</span></span><br><span class=\"line\"><span class=\"variable\">$getActiveAccountInfo</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\"><a href=\"#应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\" class=\"headerlink\" title=\"应该很难有人区分这三个函数有什么不同了，moneyAmount 和 money两个变量其实没有任何区别。\"></a>应该很难有人区分这三个函数有什么不同了，moneyAmount 和 money两个变量其实没有任何区别。</h4><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><em>函数</em></h4><h4 id=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"><a href=\"#对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\" class=\"headerlink\" title=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"></a>对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。</h4><h4 id=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"><a href=\"#在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\" class=\"headerlink\" title=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"></a>在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。</h4><h4 id=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"><a href=\"#作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\" class=\"headerlink\" title=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"></a>作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。</h4><h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><em>格式</em></h4><h4 id=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"><a href=\"#我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\" class=\"headerlink\" title=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"></a>我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？</h4><h4 id=\"其实书的内容远不止此，况且我现在才读1-x2F-3，虽然书中的代码是Java但是思想是一致的。\"><a href=\"#其实书的内容远不止此，况且我现在才读1-x2F-3，虽然书中的代码是Java但是思想是一致的。\" class=\"headerlink\" title=\"其实书的内容远不止此，况且我现在才读1&#x2F;3，虽然书中的代码是Java但是思想是一致的。\"></a>其实书的内容远不止此，况且我现在才读1&#x2F;3，虽然书中的代码是<code>Java</code>但是思想是一致的。</h4>"},{"title":"读《财富自由之路》","id":"301","comments":0,"date":"2018-08-25T04:14:15.000Z","_content":"\n有人说李笑来是骗子，但是就算是骗子又能怎样，只要他的想法能够帮助我们能够成长，能够变得强大，难道不就足够了吗？\n\n### 初次了解\n\n第一次听说李笑来基本上和其他人是一样的，最开始是通过比特币疯长，然后就是比特币最多的中国人。另一个就是我的一个朋友是李笑来的特粉。后来就直接在网上购买了一本《财富自由之路》。\n\n这本书和他的《把时间当朋友》都卖的不错（当然《TOEFL核心词汇21天突破》卖的也很好，但是偏向于英语专业），所以就在京东买了一本。\n\n买书的初衷基本上和大家的想法一致，准备依靠这本书走向财富自由（天真脸），但是看了一半才知道，这本书其实偏重于方法论。\n\n### 什么叫做财富自由\n\n这个问题既简单又困难，我觉得一般人很难给出具体的概念。“我觉得我不用上班就是实现财富既有”，“我有xxx钱就是实现财富自由”...，但是这些说法似乎都不能让人信服，因为毕竟马云还要继续工作，况且，不工作，一直享受的人生，真的没什么意义。\n\n“财富自由就是某个人不用再因为满足生活必需而出卖自己的时间”。\n\n是的，我们的工作都算是因为生活必需而出卖自己的时候。每个人的工资的高低，也是因为单位时间产生的价值更高。\n\n所以，想要实现财富自由，那就嘴根本的办法，就是让我们单位时间产生的价值更高，换句话来讲，实现财富自由只能靠提升我们自己的价值来实现。\n\n### 元认知\n\n`元认知`这个词应该算是书中出现的最频繁的词汇。`元认知` 按照书中说法就是`对认知的认知，对思考的思考`。这句话听着虽然有些拗口，但是其实和`三思而后行` 是有些类似的。\n\n当我们遇到一些困难的时候，我们会想到一些解决的办法，但是这些解决办法并不都是合理的，所以我们就需要在这些方法里面做一些筛选，这就是所谓的`元认知`。\n\n### 笃信\n\n除了`元认知`以外，还有一个词，我觉得对我也很有意义——笃信。笃信，也就是120%的相信。当真的能够把这个词汇加到自己的脑子里面，然后再加上`元认知`，基本上就不会害怕所谓的新东西和新事物了。\n\n举个例子，公司前段时间新买了一台咖啡机，我算是对新事物感兴趣的人。新买的咖啡机，基本上很少人会用，但是有一本说明书。我拿起来看了起来，然后按照说明书，做一些笨拙的操作。但是我并不会在意别人的看法：使用咖啡机居然还要看说明书。这个时候，我的`元认知`开始启动，它告诉我：“并不是每个人都会使用咖啡机，最开始学习使用的时候，都是从笨拙的操作开始，不用担心自己笨拙，使用的次数多了，也就是越来越熟练了”，然后我`笃信`自己能够学会使用咖啡机，现在，基本上公司里面我算是非常熟练的使用咖啡机的人了。\n\n很多人，很在意别人的看法，然后放弃解除新事物，新东西。但是，任何学习，都是从笨拙的操作开始的，难道最开始学习算是的时候，不是掰着手指计算的吗？\n\n### 其他\n\n书中除了`元认知`和`笃信`，还有其他很多内容，比如，如何投资...，但是那些都不重要了，重要的是，只要学会结合使用`元认知`和`笃信`，那么基本上不用再担心遇到问题了。\n\n### 总结\n\n其实`元认知`我们一直都是存在的，但是很多时候，我们并没有注意到。\n\n不管怎么说，这本书都算是提高自己的好书。\n\n在写这篇博客的时候，我不再害怕自己写不好文字，因为我笃信自己会把自己的写作水平一点点提高，我笃信总有一天，我的写作水平能够到达一个比较好的水平 ：）","source":"_posts/reading.md","raw":"---\ntitle: 读《财富自由之路》\ntags: []\nid: '301'\ncategories:\n  - - Life\ncomments: false\ndate: 2018-08-25 12:14:15\n---\n\n有人说李笑来是骗子，但是就算是骗子又能怎样，只要他的想法能够帮助我们能够成长，能够变得强大，难道不就足够了吗？\n\n### 初次了解\n\n第一次听说李笑来基本上和其他人是一样的，最开始是通过比特币疯长，然后就是比特币最多的中国人。另一个就是我的一个朋友是李笑来的特粉。后来就直接在网上购买了一本《财富自由之路》。\n\n这本书和他的《把时间当朋友》都卖的不错（当然《TOEFL核心词汇21天突破》卖的也很好，但是偏向于英语专业），所以就在京东买了一本。\n\n买书的初衷基本上和大家的想法一致，准备依靠这本书走向财富自由（天真脸），但是看了一半才知道，这本书其实偏重于方法论。\n\n### 什么叫做财富自由\n\n这个问题既简单又困难，我觉得一般人很难给出具体的概念。“我觉得我不用上班就是实现财富既有”，“我有xxx钱就是实现财富自由”...，但是这些说法似乎都不能让人信服，因为毕竟马云还要继续工作，况且，不工作，一直享受的人生，真的没什么意义。\n\n“财富自由就是某个人不用再因为满足生活必需而出卖自己的时间”。\n\n是的，我们的工作都算是因为生活必需而出卖自己的时候。每个人的工资的高低，也是因为单位时间产生的价值更高。\n\n所以，想要实现财富自由，那就嘴根本的办法，就是让我们单位时间产生的价值更高，换句话来讲，实现财富自由只能靠提升我们自己的价值来实现。\n\n### 元认知\n\n`元认知`这个词应该算是书中出现的最频繁的词汇。`元认知` 按照书中说法就是`对认知的认知，对思考的思考`。这句话听着虽然有些拗口，但是其实和`三思而后行` 是有些类似的。\n\n当我们遇到一些困难的时候，我们会想到一些解决的办法，但是这些解决办法并不都是合理的，所以我们就需要在这些方法里面做一些筛选，这就是所谓的`元认知`。\n\n### 笃信\n\n除了`元认知`以外，还有一个词，我觉得对我也很有意义——笃信。笃信，也就是120%的相信。当真的能够把这个词汇加到自己的脑子里面，然后再加上`元认知`，基本上就不会害怕所谓的新东西和新事物了。\n\n举个例子，公司前段时间新买了一台咖啡机，我算是对新事物感兴趣的人。新买的咖啡机，基本上很少人会用，但是有一本说明书。我拿起来看了起来，然后按照说明书，做一些笨拙的操作。但是我并不会在意别人的看法：使用咖啡机居然还要看说明书。这个时候，我的`元认知`开始启动，它告诉我：“并不是每个人都会使用咖啡机，最开始学习使用的时候，都是从笨拙的操作开始，不用担心自己笨拙，使用的次数多了，也就是越来越熟练了”，然后我`笃信`自己能够学会使用咖啡机，现在，基本上公司里面我算是非常熟练的使用咖啡机的人了。\n\n很多人，很在意别人的看法，然后放弃解除新事物，新东西。但是，任何学习，都是从笨拙的操作开始的，难道最开始学习算是的时候，不是掰着手指计算的吗？\n\n### 其他\n\n书中除了`元认知`和`笃信`，还有其他很多内容，比如，如何投资...，但是那些都不重要了，重要的是，只要学会结合使用`元认知`和`笃信`，那么基本上不用再担心遇到问题了。\n\n### 总结\n\n其实`元认知`我们一直都是存在的，但是很多时候，我们并没有注意到。\n\n不管怎么说，这本书都算是提高自己的好书。\n\n在写这篇博客的时候，我不再害怕自己写不好文字，因为我笃信自己会把自己的写作水平一点点提高，我笃信总有一天，我的写作水平能够到达一个比较好的水平 ：）","slug":"reading","published":1,"updated":"2022-03-12T23:52:58.784Z","layout":"post","photos":[],"link":"","_id":"cl0oi8mi8007f417t2869huo1","content":"<p>有人说李笑来是骗子，但是就算是骗子又能怎样，只要他的想法能够帮助我们能够成长，能够变得强大，难道不就足够了吗？</p>\n<h3 id=\"初次了解\"><a href=\"#初次了解\" class=\"headerlink\" title=\"初次了解\"></a>初次了解</h3><p>第一次听说李笑来基本上和其他人是一样的，最开始是通过比特币疯长，然后就是比特币最多的中国人。另一个就是我的一个朋友是李笑来的特粉。后来就直接在网上购买了一本《财富自由之路》。</p>\n<p>这本书和他的《把时间当朋友》都卖的不错（当然《TOEFL核心词汇21天突破》卖的也很好，但是偏向于英语专业），所以就在京东买了一本。</p>\n<p>买书的初衷基本上和大家的想法一致，准备依靠这本书走向财富自由（天真脸），但是看了一半才知道，这本书其实偏重于方法论。</p>\n<h3 id=\"什么叫做财富自由\"><a href=\"#什么叫做财富自由\" class=\"headerlink\" title=\"什么叫做财富自由\"></a>什么叫做财富自由</h3><p>这个问题既简单又困难，我觉得一般人很难给出具体的概念。“我觉得我不用上班就是实现财富既有”，“我有xxx钱就是实现财富自由”…，但是这些说法似乎都不能让人信服，因为毕竟马云还要继续工作，况且，不工作，一直享受的人生，真的没什么意义。</p>\n<p>“财富自由就是某个人不用再因为满足生活必需而出卖自己的时间”。</p>\n<p>是的，我们的工作都算是因为生活必需而出卖自己的时候。每个人的工资的高低，也是因为单位时间产生的价值更高。</p>\n<p>所以，想要实现财富自由，那就嘴根本的办法，就是让我们单位时间产生的价值更高，换句话来讲，实现财富自由只能靠提升我们自己的价值来实现。</p>\n<h3 id=\"元认知\"><a href=\"#元认知\" class=\"headerlink\" title=\"元认知\"></a>元认知</h3><p><code>元认知</code>这个词应该算是书中出现的最频繁的词汇。<code>元认知</code> 按照书中说法就是<code>对认知的认知，对思考的思考</code>。这句话听着虽然有些拗口，但是其实和<code>三思而后行</code> 是有些类似的。</p>\n<p>当我们遇到一些困难的时候，我们会想到一些解决的办法，但是这些解决办法并不都是合理的，所以我们就需要在这些方法里面做一些筛选，这就是所谓的<code>元认知</code>。</p>\n<h3 id=\"笃信\"><a href=\"#笃信\" class=\"headerlink\" title=\"笃信\"></a>笃信</h3><p>除了<code>元认知</code>以外，还有一个词，我觉得对我也很有意义——笃信。笃信，也就是120%的相信。当真的能够把这个词汇加到自己的脑子里面，然后再加上<code>元认知</code>，基本上就不会害怕所谓的新东西和新事物了。</p>\n<p>举个例子，公司前段时间新买了一台咖啡机，我算是对新事物感兴趣的人。新买的咖啡机，基本上很少人会用，但是有一本说明书。我拿起来看了起来，然后按照说明书，做一些笨拙的操作。但是我并不会在意别人的看法：使用咖啡机居然还要看说明书。这个时候，我的<code>元认知</code>开始启动，它告诉我：“并不是每个人都会使用咖啡机，最开始学习使用的时候，都是从笨拙的操作开始，不用担心自己笨拙，使用的次数多了，也就是越来越熟练了”，然后我<code>笃信</code>自己能够学会使用咖啡机，现在，基本上公司里面我算是非常熟练的使用咖啡机的人了。</p>\n<p>很多人，很在意别人的看法，然后放弃解除新事物，新东西。但是，任何学习，都是从笨拙的操作开始的，难道最开始学习算是的时候，不是掰着手指计算的吗？</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>书中除了<code>元认知</code>和<code>笃信</code>，还有其他很多内容，比如，如何投资…，但是那些都不重要了，重要的是，只要学会结合使用<code>元认知</code>和<code>笃信</code>，那么基本上不用再担心遇到问题了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>其实<code>元认知</code>我们一直都是存在的，但是很多时候，我们并没有注意到。</p>\n<p>不管怎么说，这本书都算是提高自己的好书。</p>\n<p>在写这篇博客的时候，我不再害怕自己写不好文字，因为我笃信自己会把自己的写作水平一点点提高，我笃信总有一天，我的写作水平能够到达一个比较好的水平 ：）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有人说李笑来是骗子，但是就算是骗子又能怎样，只要他的想法能够帮助我们能够成长，能够变得强大，难道不就足够了吗？</p>\n<h3 id=\"初次了解\"><a href=\"#初次了解\" class=\"headerlink\" title=\"初次了解\"></a>初次了解</h3><p>第一次听说李笑来基本上和其他人是一样的，最开始是通过比特币疯长，然后就是比特币最多的中国人。另一个就是我的一个朋友是李笑来的特粉。后来就直接在网上购买了一本《财富自由之路》。</p>\n<p>这本书和他的《把时间当朋友》都卖的不错（当然《TOEFL核心词汇21天突破》卖的也很好，但是偏向于英语专业），所以就在京东买了一本。</p>\n<p>买书的初衷基本上和大家的想法一致，准备依靠这本书走向财富自由（天真脸），但是看了一半才知道，这本书其实偏重于方法论。</p>\n<h3 id=\"什么叫做财富自由\"><a href=\"#什么叫做财富自由\" class=\"headerlink\" title=\"什么叫做财富自由\"></a>什么叫做财富自由</h3><p>这个问题既简单又困难，我觉得一般人很难给出具体的概念。“我觉得我不用上班就是实现财富既有”，“我有xxx钱就是实现财富自由”…，但是这些说法似乎都不能让人信服，因为毕竟马云还要继续工作，况且，不工作，一直享受的人生，真的没什么意义。</p>\n<p>“财富自由就是某个人不用再因为满足生活必需而出卖自己的时间”。</p>\n<p>是的，我们的工作都算是因为生活必需而出卖自己的时候。每个人的工资的高低，也是因为单位时间产生的价值更高。</p>\n<p>所以，想要实现财富自由，那就嘴根本的办法，就是让我们单位时间产生的价值更高，换句话来讲，实现财富自由只能靠提升我们自己的价值来实现。</p>\n<h3 id=\"元认知\"><a href=\"#元认知\" class=\"headerlink\" title=\"元认知\"></a>元认知</h3><p><code>元认知</code>这个词应该算是书中出现的最频繁的词汇。<code>元认知</code> 按照书中说法就是<code>对认知的认知，对思考的思考</code>。这句话听着虽然有些拗口，但是其实和<code>三思而后行</code> 是有些类似的。</p>\n<p>当我们遇到一些困难的时候，我们会想到一些解决的办法，但是这些解决办法并不都是合理的，所以我们就需要在这些方法里面做一些筛选，这就是所谓的<code>元认知</code>。</p>\n<h3 id=\"笃信\"><a href=\"#笃信\" class=\"headerlink\" title=\"笃信\"></a>笃信</h3><p>除了<code>元认知</code>以外，还有一个词，我觉得对我也很有意义——笃信。笃信，也就是120%的相信。当真的能够把这个词汇加到自己的脑子里面，然后再加上<code>元认知</code>，基本上就不会害怕所谓的新东西和新事物了。</p>\n<p>举个例子，公司前段时间新买了一台咖啡机，我算是对新事物感兴趣的人。新买的咖啡机，基本上很少人会用，但是有一本说明书。我拿起来看了起来，然后按照说明书，做一些笨拙的操作。但是我并不会在意别人的看法：使用咖啡机居然还要看说明书。这个时候，我的<code>元认知</code>开始启动，它告诉我：“并不是每个人都会使用咖啡机，最开始学习使用的时候，都是从笨拙的操作开始，不用担心自己笨拙，使用的次数多了，也就是越来越熟练了”，然后我<code>笃信</code>自己能够学会使用咖啡机，现在，基本上公司里面我算是非常熟练的使用咖啡机的人了。</p>\n<p>很多人，很在意别人的看法，然后放弃解除新事物，新东西。但是，任何学习，都是从笨拙的操作开始的，难道最开始学习算是的时候，不是掰着手指计算的吗？</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>书中除了<code>元认知</code>和<code>笃信</code>，还有其他很多内容，比如，如何投资…，但是那些都不重要了，重要的是，只要学会结合使用<code>元认知</code>和<code>笃信</code>，那么基本上不用再担心遇到问题了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>其实<code>元认知</code>我们一直都是存在的，但是很多时候，我们并没有注意到。</p>\n<p>不管怎么说，这本书都算是提高自己的好书。</p>\n<p>在写这篇博客的时候，我不再害怕自己写不好文字，因为我笃信自己会把自己的写作水平一点点提高，我笃信总有一天，我的写作水平能够到达一个比较好的水平 ：）</p>\n"},{"title":"Redis数据类型之HyperLogLog","id":"720","date":"2019-11-21T14:59:54.000Z","_content":"\nRedis相对于memcache的优势之一就是支持丰富的数据结构，比如Hash、List、Set、Zset等。除了这些以外，redis还支持HyperLogLog\n\n### HyperLogLog\n\n假如有个需求，需要统计UV情况，我们的思路是什么？\n\n*   Hash: 我们可以使用Hash的结构，使用用户的ip当做元素的key，最后使用`HLEN`统计下个数\n*   Set: Set是无序唯一的，同样可以使用用户的IP作为key，最后使用`SCARD`统计个数\n\n没错，这两种都可以实现需求，但是对内存的占用是惊人的，如果是上千万的UV，那么会占用大量的内存。那么有没有`物美价廉`的方式呢？那就是HyperLogLog。\n\n### HyperLogLog的优势和劣势\n\nHyperLogLog只会占用`12KB`左右的存储空间，这个既是优势，优势劣势，因为如果数量比较小，这个`12KB`左右的空间是非常不划算的。\n\n但是redis也对HyperLogLog进行了优化，在计数比较小的时候，采用稀疏矩阵存储，占用的空间比较小，只有当超过了某个阈值，才会一次性变得稠密，才会占用`12KB`.\n\nHyperLogLog的劣势就是会出现统计的误差，并不能精确的进行个数统计.\n\n### 对比情况\n\n```php\n##伪代码\n<?php\n$redisObj = new Redis();\n\nadd2HyperLogLog();\nadd2Hash();\nadd2Set();\n\nfunction add2HyperLogLog()\n{\n    global $redisObj;\n    $connect = $redisObj::getConn();\n    for ($i = 0; $i < 100000; $i++) {\n        $user[\"user_name_\".$i] = \"user_\" . $i;\n    }\n    $connect->pfAdd(\"user_by_hyper_log_log\", $user);\n}\n\nfunction add2Hash()\n{\n    global $redisObj;\n    $redisObj = new \\Lta\\Redis();\n    $connect = $redisObj::getConn();\n    for ($i = 0; $i < 100000; $i++) {\n        $connect->sAdd(\"user_by_set\", \"user_\" . $i);\n    }\n}\n\nfunction add2Set()\n{\n    global $redisObj;\n    $redisObj = new \\Lta\\Redis();\n    $connect = $redisObj::getConn();\n    for ($i = 0; $i < 100000; $i++) {\n        $connect->hSet(\"user_by_hash\", \"user_name_\".$i,\"user_\" . $i);\n    }\n}\n```\n\n```bash\n10.188.40.78:6379> DEBUG OBJECT user_by_hash\nValue at:0x7fc170333f10 refcount:1 encoding:hashtable serializedlength:2677785 lru:14064726 lru_seconds_idle:147\n10.188.40.78:6379> DEBUG OBJECT user_by_hyper_log_log\nValue at:0x7fc1700a6000 refcount:1 encoding:raw serializedlength:10592 lru:14064728 lru_seconds_idle:150\n10.188.40.78:6379> DEBUG OBJECT user_by_set\nValue at:0x7fc1700a6010 refcount:1 encoding:hashtable serializedlength:1088895 lru:14064734 lru_seconds_idle:150\n\n10.188.40.78:6379> PFCOUNT user_by_hyper_log_log\n(integer) 99839\n10.188.40.78:6379> SCARD user_by_set\n(integer) 100000\n10.188.40.78:6379> HLEN user_by_hash\n(integer) 100000\n```\n\n键名\n\n长度\n\n元素个数\n\nuser\\_by\\_hash\n\n2677785\n\n100000\n\nuser\\_by\\_hyper\\_log\\_log\n\n10592\n\n99839\n\nuser\\_by\\_set\n\n1088895\n\n100000\n\n可以看到，使用user\\_by\\_hyper\\_log\\_log的存储，长度要小很多，但是统计的元素格式是不完整的，误差率是`0.161%`，对于统计UV来说，是可以接受的。\n\n### 使用rdbtools\n\n但是serializedlength并不是真实的占用空间，并且在存储的时候，可能会进行序列化，要想查看真实的空间，需要使用另外的工具\n\n```bash\n$ pip install rdbtools\nSuccessfully built rdbtools\nInstalling collected packages: rdbtools\nSuccessfully installed rdbtools-0.1.14\n\n$ redis-memory-for-key -s 10.188.40.78 user_by_hyper_log_log\nKey             user_by_hyper_log_log\nBytes               14400\nType                string\n$ redis-memory-for-key -s 10.188.40.78 user_by_hash\nKey             user_by_hash\nBytes               7892932.0\nType                hash\nEncoding            hashtable\nNumber of Elements      100000\nLength of Largest Element   15\n$ redis-memory-for-key -s 10.188.40.78 user_by_set\nKey             user_by_set\nBytes               5572932.0\nType                set\nEncoding            hashtable\nNumber of Elements      100000\nLength of Largest Element   10\n```\n\n这个对比结果就很明显了，Hash占用的空间是HyperLogLog的548倍，Set占用的空间是HyperLogLog的387倍！\n\n换算下占用的HyperLogLog的占用空间，大概是`14KB`\n\n### 使用场景\n\n前面有说道，HyperLogLog是存在误差的，一般是一些对可接受小误差的统计，比如：\n\n*   统计注册 IP 数\n*   统计每日访问 IP 数\n*   统计页面实时 UV 数\n*   统计在线用户数\n*   统计用户每天搜索不同词条的个数\n\n### 参考文献：\n\n*   《Redis深度历险》--钱文品\n*   [Redis：HyperLogLog使用与应用场景](https://blog.csdn.net/maoyuanming0806/article/details/81814610)\n\n本文链接： [https://feilong.tech/2019/11/21/redis-hyperloglog](https://feilong.tech/2019/11/21/redis-hyperloglog)","source":"_posts/redis-hyperloglog.md","raw":"---\ntitle: Redis数据类型之HyperLogLog\ntags:\n  - HyperLogLog\n  - Redis\n  - 统计\nid: '720'\ncategories:\n  - - Docker\ndate: 2019-11-21 22:59:54\n---\n\nRedis相对于memcache的优势之一就是支持丰富的数据结构，比如Hash、List、Set、Zset等。除了这些以外，redis还支持HyperLogLog\n\n### HyperLogLog\n\n假如有个需求，需要统计UV情况，我们的思路是什么？\n\n*   Hash: 我们可以使用Hash的结构，使用用户的ip当做元素的key，最后使用`HLEN`统计下个数\n*   Set: Set是无序唯一的，同样可以使用用户的IP作为key，最后使用`SCARD`统计个数\n\n没错，这两种都可以实现需求，但是对内存的占用是惊人的，如果是上千万的UV，那么会占用大量的内存。那么有没有`物美价廉`的方式呢？那就是HyperLogLog。\n\n### HyperLogLog的优势和劣势\n\nHyperLogLog只会占用`12KB`左右的存储空间，这个既是优势，优势劣势，因为如果数量比较小，这个`12KB`左右的空间是非常不划算的。\n\n但是redis也对HyperLogLog进行了优化，在计数比较小的时候，采用稀疏矩阵存储，占用的空间比较小，只有当超过了某个阈值，才会一次性变得稠密，才会占用`12KB`.\n\nHyperLogLog的劣势就是会出现统计的误差，并不能精确的进行个数统计.\n\n### 对比情况\n\n```php\n##伪代码\n<?php\n$redisObj = new Redis();\n\nadd2HyperLogLog();\nadd2Hash();\nadd2Set();\n\nfunction add2HyperLogLog()\n{\n    global $redisObj;\n    $connect = $redisObj::getConn();\n    for ($i = 0; $i < 100000; $i++) {\n        $user[\"user_name_\".$i] = \"user_\" . $i;\n    }\n    $connect->pfAdd(\"user_by_hyper_log_log\", $user);\n}\n\nfunction add2Hash()\n{\n    global $redisObj;\n    $redisObj = new \\Lta\\Redis();\n    $connect = $redisObj::getConn();\n    for ($i = 0; $i < 100000; $i++) {\n        $connect->sAdd(\"user_by_set\", \"user_\" . $i);\n    }\n}\n\nfunction add2Set()\n{\n    global $redisObj;\n    $redisObj = new \\Lta\\Redis();\n    $connect = $redisObj::getConn();\n    for ($i = 0; $i < 100000; $i++) {\n        $connect->hSet(\"user_by_hash\", \"user_name_\".$i,\"user_\" . $i);\n    }\n}\n```\n\n```bash\n10.188.40.78:6379> DEBUG OBJECT user_by_hash\nValue at:0x7fc170333f10 refcount:1 encoding:hashtable serializedlength:2677785 lru:14064726 lru_seconds_idle:147\n10.188.40.78:6379> DEBUG OBJECT user_by_hyper_log_log\nValue at:0x7fc1700a6000 refcount:1 encoding:raw serializedlength:10592 lru:14064728 lru_seconds_idle:150\n10.188.40.78:6379> DEBUG OBJECT user_by_set\nValue at:0x7fc1700a6010 refcount:1 encoding:hashtable serializedlength:1088895 lru:14064734 lru_seconds_idle:150\n\n10.188.40.78:6379> PFCOUNT user_by_hyper_log_log\n(integer) 99839\n10.188.40.78:6379> SCARD user_by_set\n(integer) 100000\n10.188.40.78:6379> HLEN user_by_hash\n(integer) 100000\n```\n\n键名\n\n长度\n\n元素个数\n\nuser\\_by\\_hash\n\n2677785\n\n100000\n\nuser\\_by\\_hyper\\_log\\_log\n\n10592\n\n99839\n\nuser\\_by\\_set\n\n1088895\n\n100000\n\n可以看到，使用user\\_by\\_hyper\\_log\\_log的存储，长度要小很多，但是统计的元素格式是不完整的，误差率是`0.161%`，对于统计UV来说，是可以接受的。\n\n### 使用rdbtools\n\n但是serializedlength并不是真实的占用空间，并且在存储的时候，可能会进行序列化，要想查看真实的空间，需要使用另外的工具\n\n```bash\n$ pip install rdbtools\nSuccessfully built rdbtools\nInstalling collected packages: rdbtools\nSuccessfully installed rdbtools-0.1.14\n\n$ redis-memory-for-key -s 10.188.40.78 user_by_hyper_log_log\nKey             user_by_hyper_log_log\nBytes               14400\nType                string\n$ redis-memory-for-key -s 10.188.40.78 user_by_hash\nKey             user_by_hash\nBytes               7892932.0\nType                hash\nEncoding            hashtable\nNumber of Elements      100000\nLength of Largest Element   15\n$ redis-memory-for-key -s 10.188.40.78 user_by_set\nKey             user_by_set\nBytes               5572932.0\nType                set\nEncoding            hashtable\nNumber of Elements      100000\nLength of Largest Element   10\n```\n\n这个对比结果就很明显了，Hash占用的空间是HyperLogLog的548倍，Set占用的空间是HyperLogLog的387倍！\n\n换算下占用的HyperLogLog的占用空间，大概是`14KB`\n\n### 使用场景\n\n前面有说道，HyperLogLog是存在误差的，一般是一些对可接受小误差的统计，比如：\n\n*   统计注册 IP 数\n*   统计每日访问 IP 数\n*   统计页面实时 UV 数\n*   统计在线用户数\n*   统计用户每天搜索不同词条的个数\n\n### 参考文献：\n\n*   《Redis深度历险》--钱文品\n*   [Redis：HyperLogLog使用与应用场景](https://blog.csdn.net/maoyuanming0806/article/details/81814610)\n\n本文链接： [https://feilong.tech/2019/11/21/redis-hyperloglog](https://feilong.tech/2019/11/21/redis-hyperloglog)","slug":"redis-hyperloglog","published":1,"updated":"2022-03-12T23:52:58.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mia007j417tg3o86238","content":"<p>Redis相对于memcache的优势之一就是支持丰富的数据结构，比如Hash、List、Set、Zset等。除了这些以外，redis还支持HyperLogLog</p>\n<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>假如有个需求，需要统计UV情况，我们的思路是什么？</p>\n<ul>\n<li>Hash: 我们可以使用Hash的结构，使用用户的ip当做元素的key，最后使用<code>HLEN</code>统计下个数</li>\n<li>Set: Set是无序唯一的，同样可以使用用户的IP作为key，最后使用<code>SCARD</code>统计个数</li>\n</ul>\n<p>没错，这两种都可以实现需求，但是对内存的占用是惊人的，如果是上千万的UV，那么会占用大量的内存。那么有没有<code>物美价廉</code>的方式呢？那就是HyperLogLog。</p>\n<h3 id=\"HyperLogLog的优势和劣势\"><a href=\"#HyperLogLog的优势和劣势\" class=\"headerlink\" title=\"HyperLogLog的优势和劣势\"></a>HyperLogLog的优势和劣势</h3><p>HyperLogLog只会占用<code>12KB</code>左右的存储空间，这个既是优势，优势劣势，因为如果数量比较小，这个<code>12KB</code>左右的空间是非常不划算的。</p>\n<p>但是redis也对HyperLogLog进行了优化，在计数比较小的时候，采用稀疏矩阵存储，占用的空间比较小，只有当超过了某个阈值，才会一次性变得稠密，才会占用<code>12KB</code>.</p>\n<p>HyperLogLog的劣势就是会出现统计的误差，并不能精确的进行个数统计.</p>\n<h3 id=\"对比情况\"><a href=\"#对比情况\" class=\"headerlink\" title=\"对比情况\"></a>对比情况</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##伪代码</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$redisObj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Redis</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add2HyperLogLog</span>();</span><br><span class=\"line\"><span class=\"title function_ invoke__\">add2Hash</span>();</span><br><span class=\"line\"><span class=\"title function_ invoke__\">add2Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add2HyperLogLog</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$redisObj</span>;</span><br><span class=\"line\">    <span class=\"variable\">$connect</span> = <span class=\"variable\">$redisObj</span>::<span class=\"title function_ invoke__\">getConn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$user</span>[<span class=\"string\">&quot;user_name_&quot;</span>.<span class=\"variable\">$i</span>] = <span class=\"string\">&quot;user_&quot;</span> . <span class=\"variable\">$i</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$connect</span>-&gt;<span class=\"title function_ invoke__\">pfAdd</span>(<span class=\"string\">&quot;user_by_hyper_log_log&quot;</span>, <span class=\"variable\">$user</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add2Hash</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$redisObj</span>;</span><br><span class=\"line\">    <span class=\"variable\">$redisObj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Lta\\Redis</span>();</span><br><span class=\"line\">    <span class=\"variable\">$connect</span> = <span class=\"variable\">$redisObj</span>::<span class=\"title function_ invoke__\">getConn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$connect</span>-&gt;<span class=\"title function_ invoke__\">sAdd</span>(<span class=\"string\">&quot;user_by_set&quot;</span>, <span class=\"string\">&quot;user_&quot;</span> . <span class=\"variable\">$i</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add2Set</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$redisObj</span>;</span><br><span class=\"line\">    <span class=\"variable\">$redisObj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Lta\\Redis</span>();</span><br><span class=\"line\">    <span class=\"variable\">$connect</span> = <span class=\"variable\">$redisObj</span>::<span class=\"title function_ invoke__\">getConn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$connect</span>-&gt;<span class=\"title function_ invoke__\">hSet</span>(<span class=\"string\">&quot;user_by_hash&quot;</span>, <span class=\"string\">&quot;user_name_&quot;</span>.<span class=\"variable\">$i</span>,<span class=\"string\">&quot;user_&quot;</span> . <span class=\"variable\">$i</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.188.40.78:6379&gt; DEBUG OBJECT user_by_hash</span><br><span class=\"line\">Value at:0x7fc170333f10 refcount:1 encoding:hashtable serializedlength:2677785 lru:14064726 lru_seconds_idle:147</span><br><span class=\"line\">10.188.40.78:6379&gt; DEBUG OBJECT user_by_hyper_log_log</span><br><span class=\"line\">Value at:0x7fc1700a6000 refcount:1 encoding:raw serializedlength:10592 lru:14064728 lru_seconds_idle:150</span><br><span class=\"line\">10.188.40.78:6379&gt; DEBUG OBJECT user_by_set</span><br><span class=\"line\">Value at:0x7fc1700a6010 refcount:1 encoding:hashtable serializedlength:1088895 lru:14064734 lru_seconds_idle:150</span><br><span class=\"line\"></span><br><span class=\"line\">10.188.40.78:6379&gt; PFCOUNT user_by_hyper_log_log</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 99839</span><br><span class=\"line\">10.188.40.78:6379&gt; SCARD user_by_set</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 100000</span><br><span class=\"line\">10.188.40.78:6379&gt; HLEN user_by_hash</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 100000</span><br></pre></td></tr></table></figure>\n\n<p>键名</p>\n<p>长度</p>\n<p>元素个数</p>\n<p>user_by_hash</p>\n<p>2677785</p>\n<p>100000</p>\n<p>user_by_hyper_log_log</p>\n<p>10592</p>\n<p>99839</p>\n<p>user_by_set</p>\n<p>1088895</p>\n<p>100000</p>\n<p>可以看到，使用user_by_hyper_log_log的存储，长度要小很多，但是统计的元素格式是不完整的，误差率是<code>0.161%</code>，对于统计UV来说，是可以接受的。</p>\n<h3 id=\"使用rdbtools\"><a href=\"#使用rdbtools\" class=\"headerlink\" title=\"使用rdbtools\"></a>使用rdbtools</h3><p>但是serializedlength并不是真实的占用空间，并且在存储的时候，可能会进行序列化，要想查看真实的空间，需要使用另外的工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install rdbtools</span><br><span class=\"line\">Successfully built rdbtools</span><br><span class=\"line\">Installing collected packages: rdbtools</span><br><span class=\"line\">Successfully installed rdbtools-0.1.14</span><br><span class=\"line\"></span><br><span class=\"line\">$ redis-memory-for-key -s 10.188.40.78 user_by_hyper_log_log</span><br><span class=\"line\">Key             user_by_hyper_log_log</span><br><span class=\"line\">Bytes               14400</span><br><span class=\"line\">Type                string</span><br><span class=\"line\">$ redis-memory-for-key -s 10.188.40.78 user_by_hash</span><br><span class=\"line\">Key             user_by_hash</span><br><span class=\"line\">Bytes               7892932.0</span><br><span class=\"line\">Type                <span class=\"built_in\">hash</span></span><br><span class=\"line\">Encoding            hashtable</span><br><span class=\"line\">Number of Elements      100000</span><br><span class=\"line\">Length of Largest Element   15</span><br><span class=\"line\">$ redis-memory-for-key -s 10.188.40.78 user_by_set</span><br><span class=\"line\">Key             user_by_set</span><br><span class=\"line\">Bytes               5572932.0</span><br><span class=\"line\">Type                <span class=\"built_in\">set</span></span><br><span class=\"line\">Encoding            hashtable</span><br><span class=\"line\">Number of Elements      100000</span><br><span class=\"line\">Length of Largest Element   10</span><br></pre></td></tr></table></figure>\n\n<p>这个对比结果就很明显了，Hash占用的空间是HyperLogLog的548倍，Set占用的空间是HyperLogLog的387倍！</p>\n<p>换算下占用的HyperLogLog的占用空间，大概是<code>14KB</code></p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>前面有说道，HyperLogLog是存在误差的，一般是一些对可接受小误差的统计，比如：</p>\n<ul>\n<li>统计注册 IP 数</li>\n<li>统计每日访问 IP 数</li>\n<li>统计页面实时 UV 数</li>\n<li>统计在线用户数</li>\n<li>统计用户每天搜索不同词条的个数</li>\n</ul>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ul>\n<li>《Redis深度历险》–钱文品</li>\n<li><a href=\"https://blog.csdn.net/maoyuanming0806/article/details/81814610\">Redis：HyperLogLog使用与应用场景</a></li>\n</ul>\n<p>本文链接： <a href=\"https://feilong.tech/2019/11/21/redis-hyperloglog\">https://feilong.tech/2019/11/21/redis-hyperloglog</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Redis相对于memcache的优势之一就是支持丰富的数据结构，比如Hash、List、Set、Zset等。除了这些以外，redis还支持HyperLogLog</p>\n<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>假如有个需求，需要统计UV情况，我们的思路是什么？</p>\n<ul>\n<li>Hash: 我们可以使用Hash的结构，使用用户的ip当做元素的key，最后使用<code>HLEN</code>统计下个数</li>\n<li>Set: Set是无序唯一的，同样可以使用用户的IP作为key，最后使用<code>SCARD</code>统计个数</li>\n</ul>\n<p>没错，这两种都可以实现需求，但是对内存的占用是惊人的，如果是上千万的UV，那么会占用大量的内存。那么有没有<code>物美价廉</code>的方式呢？那就是HyperLogLog。</p>\n<h3 id=\"HyperLogLog的优势和劣势\"><a href=\"#HyperLogLog的优势和劣势\" class=\"headerlink\" title=\"HyperLogLog的优势和劣势\"></a>HyperLogLog的优势和劣势</h3><p>HyperLogLog只会占用<code>12KB</code>左右的存储空间，这个既是优势，优势劣势，因为如果数量比较小，这个<code>12KB</code>左右的空间是非常不划算的。</p>\n<p>但是redis也对HyperLogLog进行了优化，在计数比较小的时候，采用稀疏矩阵存储，占用的空间比较小，只有当超过了某个阈值，才会一次性变得稠密，才会占用<code>12KB</code>.</p>\n<p>HyperLogLog的劣势就是会出现统计的误差，并不能精确的进行个数统计.</p>\n<h3 id=\"对比情况\"><a href=\"#对比情况\" class=\"headerlink\" title=\"对比情况\"></a>对比情况</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##伪代码</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$redisObj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Redis</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add2HyperLogLog</span>();</span><br><span class=\"line\"><span class=\"title function_ invoke__\">add2Hash</span>();</span><br><span class=\"line\"><span class=\"title function_ invoke__\">add2Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add2HyperLogLog</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$redisObj</span>;</span><br><span class=\"line\">    <span class=\"variable\">$connect</span> = <span class=\"variable\">$redisObj</span>::<span class=\"title function_ invoke__\">getConn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$user</span>[<span class=\"string\">&quot;user_name_&quot;</span>.<span class=\"variable\">$i</span>] = <span class=\"string\">&quot;user_&quot;</span> . <span class=\"variable\">$i</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$connect</span>-&gt;<span class=\"title function_ invoke__\">pfAdd</span>(<span class=\"string\">&quot;user_by_hyper_log_log&quot;</span>, <span class=\"variable\">$user</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add2Hash</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$redisObj</span>;</span><br><span class=\"line\">    <span class=\"variable\">$redisObj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Lta\\Redis</span>();</span><br><span class=\"line\">    <span class=\"variable\">$connect</span> = <span class=\"variable\">$redisObj</span>::<span class=\"title function_ invoke__\">getConn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$connect</span>-&gt;<span class=\"title function_ invoke__\">sAdd</span>(<span class=\"string\">&quot;user_by_set&quot;</span>, <span class=\"string\">&quot;user_&quot;</span> . <span class=\"variable\">$i</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add2Set</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$redisObj</span>;</span><br><span class=\"line\">    <span class=\"variable\">$redisObj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Lta\\Redis</span>();</span><br><span class=\"line\">    <span class=\"variable\">$connect</span> = <span class=\"variable\">$redisObj</span>::<span class=\"title function_ invoke__\">getConn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$connect</span>-&gt;<span class=\"title function_ invoke__\">hSet</span>(<span class=\"string\">&quot;user_by_hash&quot;</span>, <span class=\"string\">&quot;user_name_&quot;</span>.<span class=\"variable\">$i</span>,<span class=\"string\">&quot;user_&quot;</span> . <span class=\"variable\">$i</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.188.40.78:6379&gt; DEBUG OBJECT user_by_hash</span><br><span class=\"line\">Value at:0x7fc170333f10 refcount:1 encoding:hashtable serializedlength:2677785 lru:14064726 lru_seconds_idle:147</span><br><span class=\"line\">10.188.40.78:6379&gt; DEBUG OBJECT user_by_hyper_log_log</span><br><span class=\"line\">Value at:0x7fc1700a6000 refcount:1 encoding:raw serializedlength:10592 lru:14064728 lru_seconds_idle:150</span><br><span class=\"line\">10.188.40.78:6379&gt; DEBUG OBJECT user_by_set</span><br><span class=\"line\">Value at:0x7fc1700a6010 refcount:1 encoding:hashtable serializedlength:1088895 lru:14064734 lru_seconds_idle:150</span><br><span class=\"line\"></span><br><span class=\"line\">10.188.40.78:6379&gt; PFCOUNT user_by_hyper_log_log</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 99839</span><br><span class=\"line\">10.188.40.78:6379&gt; SCARD user_by_set</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 100000</span><br><span class=\"line\">10.188.40.78:6379&gt; HLEN user_by_hash</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 100000</span><br></pre></td></tr></table></figure>\n\n<p>键名</p>\n<p>长度</p>\n<p>元素个数</p>\n<p>user_by_hash</p>\n<p>2677785</p>\n<p>100000</p>\n<p>user_by_hyper_log_log</p>\n<p>10592</p>\n<p>99839</p>\n<p>user_by_set</p>\n<p>1088895</p>\n<p>100000</p>\n<p>可以看到，使用user_by_hyper_log_log的存储，长度要小很多，但是统计的元素格式是不完整的，误差率是<code>0.161%</code>，对于统计UV来说，是可以接受的。</p>\n<h3 id=\"使用rdbtools\"><a href=\"#使用rdbtools\" class=\"headerlink\" title=\"使用rdbtools\"></a>使用rdbtools</h3><p>但是serializedlength并不是真实的占用空间，并且在存储的时候，可能会进行序列化，要想查看真实的空间，需要使用另外的工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install rdbtools</span><br><span class=\"line\">Successfully built rdbtools</span><br><span class=\"line\">Installing collected packages: rdbtools</span><br><span class=\"line\">Successfully installed rdbtools-0.1.14</span><br><span class=\"line\"></span><br><span class=\"line\">$ redis-memory-for-key -s 10.188.40.78 user_by_hyper_log_log</span><br><span class=\"line\">Key             user_by_hyper_log_log</span><br><span class=\"line\">Bytes               14400</span><br><span class=\"line\">Type                string</span><br><span class=\"line\">$ redis-memory-for-key -s 10.188.40.78 user_by_hash</span><br><span class=\"line\">Key             user_by_hash</span><br><span class=\"line\">Bytes               7892932.0</span><br><span class=\"line\">Type                <span class=\"built_in\">hash</span></span><br><span class=\"line\">Encoding            hashtable</span><br><span class=\"line\">Number of Elements      100000</span><br><span class=\"line\">Length of Largest Element   15</span><br><span class=\"line\">$ redis-memory-for-key -s 10.188.40.78 user_by_set</span><br><span class=\"line\">Key             user_by_set</span><br><span class=\"line\">Bytes               5572932.0</span><br><span class=\"line\">Type                <span class=\"built_in\">set</span></span><br><span class=\"line\">Encoding            hashtable</span><br><span class=\"line\">Number of Elements      100000</span><br><span class=\"line\">Length of Largest Element   10</span><br></pre></td></tr></table></figure>\n\n<p>这个对比结果就很明显了，Hash占用的空间是HyperLogLog的548倍，Set占用的空间是HyperLogLog的387倍！</p>\n<p>换算下占用的HyperLogLog的占用空间，大概是<code>14KB</code></p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>前面有说道，HyperLogLog是存在误差的，一般是一些对可接受小误差的统计，比如：</p>\n<ul>\n<li>统计注册 IP 数</li>\n<li>统计每日访问 IP 数</li>\n<li>统计页面实时 UV 数</li>\n<li>统计在线用户数</li>\n<li>统计用户每天搜索不同词条的个数</li>\n</ul>\n<h3 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h3><ul>\n<li>《Redis深度历险》–钱文品</li>\n<li><a href=\"https://blog.csdn.net/maoyuanming0806/article/details/81814610\">Redis：HyperLogLog使用与应用场景</a></li>\n</ul>\n<p>本文链接： <a href=\"https://feilong.tech/2019/11/21/redis-hyperloglog\">https://feilong.tech/2019/11/21/redis-hyperloglog</a></p>\n"},{"title":"15个PHP开发者常用的正则表达式及实例","id":"55","date":"2017-08-24T11:32:47.000Z","_content":"\n> 从字符串中删除特定字符 本段代码实现删除字符串中除所有大小写字母及数字以外的字符\n\n```php\n<?php\n$value = \"wWw.UncleToo.Com - 【UncleToo中文网】 - 12345\";\n$value = preg_replace(\"/[^A-Za-z0-9]/\",\"\",$value);\necho $value;\n//输出：wWwUncleTooComUncleToo12345\n?>\n```\n<!-- more -->\n> 验证用户名 以下代码验证用户名是否由字母、数字及下划线组成。\n\n```php\n<?php\n$username = \"uncletoo_COM123\";\nif (preg_match('/^[a-z\\d_]{5,20}$/i', $username)) {\n    echo \"用户名可用\";\n} else {\n    echo \"用户名存在特殊字符\";\n}\n?>\n```\n\n> 添加信息到图片alt属性 使用下面函数，可以实现将文章标题添加到图片的alt属性中。\n\n```php\n<?php\nfunction add_alt_tags($content) {\n    global $post;\n    preg_match_all('/<img (.*?)\\/ >/', $content, $images);\n    if(!is_null($images)) {\n        foreach($images[1] as $index => $value) {\n            if(!preg_match('/alt=/', $value)) {\n                $new_img = str_replace('<img', '<img alt=\"'.get_the_title().'\"', $images[0][$index]);\n                $content = str_replace($images[0][$index], $new_img, $content);\n            }\n        }\n    }\n    return $content;\n}\n?>\n```\n\n> 将EMail文本自动添加Mailto链接\n\n```php\n<?php\n$text = \"demo@abc.com\";\n$string = eregi_replace('([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,3})','<a href=\"mailto:\\\\1\">\\\\1</ a>', $text);\necho $string;\n?>\n```\n\n> 过滤限制级词语\n\n```php\n<?php\nfunction filtrado($texto, $reemplazo = false) {\n    $filtradas = 'admin,uncletoo,中文网'; //这里定义需要过滤的词语\n    $f = explode(',', $filtradas);\n    $f = array_map('trim', $f);\n    $filtro = implode('', $f);\n    return ($reemplazo) ? preg_replace(\"#$filtro#i\", $reemplazo, $texto) : preg_match(\"#$filtro#i\", $texto) ;\n}\n?>\n```\n\n> 验证电话号码 这是一个很常见的功能\n\n```php\n<?php\n$string = \"(010) 555-5555\";\nif (preg_match('/^\\(?[0-9]{3}\\)?[0-9]{3}[-. ]? [0-9]{3}[-. ]?[0-9]{4}$/', $string)) {\n   echo \"successful.\";\n}\n?>\n```\n\n> 替换超链接href属性的内容 在页面上查看源文件，显示为：< a href=\"yes\" >UncleToo中文网< /a>\n\n```php\n<?php\n$html = '<a href=\"http://www.uncletoo.com\">UncleToo中文网</a>';\n$replacement = \"yes\";\n$pattern = '/(?<=href\\=\")[^]]+?(?=\")/';\n$replacedHrefHtml = preg_replace($pattern, $replacement, $html);\necho $replacedHrefHtml ;\n?>\n```\n\n> 验证邮箱正则表达式 此功能在用户注册是经常使用\n\n```php\n<?php\n$regex = \"([a-z0-9_.-]+)\". # name\n\"@\". # at\n\"([a-z0-9.-]+){2,255}\". # domain & possibly subdomains\n\".\". # period\n\"([a-z]+){2,10}\"; # domain extension\n$eregi = eregi_replace($regex, '', $email);\n$valid_email = empty($eregi) ? true : false;\n?>\n```\n\n> IP地址验证\n\n```php\n<?php\n$string = \"255.255.255.255\";\nif (preg_match(\n'/^(?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d)(?:[.](?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d)){3}$/', $string)) {\n    echo \"IP address is good.\";\n}\n?>\n```\n\n> 邮政编码验证\n\n```php\n<?php\n$string = \"12345-1234\";\nif (preg_match('/^[0-9]{5}([- ]?[0-9]{4})?$/', $string)) {\n    echo \"zip code checks out\";\n}\n?>\n```\n\n> 高亮显示文本\n\n```php\n<?php\n$text = \"UncleToo（www.uncletoo.com）中文网\";\n$text = preg_replace(\"/\\b(www)\\b/i\", '<span style=\"background:#5fc9f6\">\\1</ span>',$text);\necho $text;\n?>\n```\n\n> 从特定的URL中提取域名\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/plug/tags/?tag=PHP\";\npreg_match('@^(?:http://)?([^/]+)@i', $url, $matches);\n$host = $matches[1];\necho $host;\n//输出：www.uncletoo.com\n?>\n```\n\n> 验证域名格式是否正确\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/\";\nif (preg_match('/^(httphttpsftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i', $url)) {\n    echo \"域名格式正确.\";\n} else {\n    echo \"域名格式错误.\";\n}\n?>\n```\n\n> 使用文章标题生成URL\n\n```php\n<?php\nfunction create_slug($string){\n   $slug=preg_replace('/[^A-Za-z0-9-]+/', '-', $string);\n   return $slug;\n}\necho create_slug('my name is uncletoo');\n//输出：my-name-is-uncletoo\n?>\n```\n\n> 添加http://到URL地址 当我们需要用户填写网址时，很多用户往往不填写http://直接输入域名，使用下面代码可将http://添加到网址的前面。\n\n```php\n<?php\nif (!preg_match(\"/^(httphttpsftp):/\", $_POST['url'])) {\n   $_POST['url'] = 'http://'.$_POST['url'];\n}\n?>\n```\n\n> 将URL转换为超链接 这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。\n\n```php\n<?php\nfunction makeLinks($text) {\n    $text = eregi_replace('(((fht){1}tp://)[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1', $text);\n    $text = eregi_replace('([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1\\2',$text);\n    $text = eregi_replace('([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]{2,3})','\\1', $text);\n    return $text;\n}\n?>\n```","source":"_posts/regular.md","raw":"---\ntitle: 15个PHP开发者常用的正则表达式及实例\ntags: []\nid: '55'\ncategories:\n  - - PHP\ndate: 2017-08-24 19:32:47\n---\n\n> 从字符串中删除特定字符 本段代码实现删除字符串中除所有大小写字母及数字以外的字符\n\n```php\n<?php\n$value = \"wWw.UncleToo.Com - 【UncleToo中文网】 - 12345\";\n$value = preg_replace(\"/[^A-Za-z0-9]/\",\"\",$value);\necho $value;\n//输出：wWwUncleTooComUncleToo12345\n?>\n```\n<!-- more -->\n> 验证用户名 以下代码验证用户名是否由字母、数字及下划线组成。\n\n```php\n<?php\n$username = \"uncletoo_COM123\";\nif (preg_match('/^[a-z\\d_]{5,20}$/i', $username)) {\n    echo \"用户名可用\";\n} else {\n    echo \"用户名存在特殊字符\";\n}\n?>\n```\n\n> 添加信息到图片alt属性 使用下面函数，可以实现将文章标题添加到图片的alt属性中。\n\n```php\n<?php\nfunction add_alt_tags($content) {\n    global $post;\n    preg_match_all('/<img (.*?)\\/ >/', $content, $images);\n    if(!is_null($images)) {\n        foreach($images[1] as $index => $value) {\n            if(!preg_match('/alt=/', $value)) {\n                $new_img = str_replace('<img', '<img alt=\"'.get_the_title().'\"', $images[0][$index]);\n                $content = str_replace($images[0][$index], $new_img, $content);\n            }\n        }\n    }\n    return $content;\n}\n?>\n```\n\n> 将EMail文本自动添加Mailto链接\n\n```php\n<?php\n$text = \"demo@abc.com\";\n$string = eregi_replace('([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,3})','<a href=\"mailto:\\\\1\">\\\\1</ a>', $text);\necho $string;\n?>\n```\n\n> 过滤限制级词语\n\n```php\n<?php\nfunction filtrado($texto, $reemplazo = false) {\n    $filtradas = 'admin,uncletoo,中文网'; //这里定义需要过滤的词语\n    $f = explode(',', $filtradas);\n    $f = array_map('trim', $f);\n    $filtro = implode('', $f);\n    return ($reemplazo) ? preg_replace(\"#$filtro#i\", $reemplazo, $texto) : preg_match(\"#$filtro#i\", $texto) ;\n}\n?>\n```\n\n> 验证电话号码 这是一个很常见的功能\n\n```php\n<?php\n$string = \"(010) 555-5555\";\nif (preg_match('/^\\(?[0-9]{3}\\)?[0-9]{3}[-. ]? [0-9]{3}[-. ]?[0-9]{4}$/', $string)) {\n   echo \"successful.\";\n}\n?>\n```\n\n> 替换超链接href属性的内容 在页面上查看源文件，显示为：< a href=\"yes\" >UncleToo中文网< /a>\n\n```php\n<?php\n$html = '<a href=\"http://www.uncletoo.com\">UncleToo中文网</a>';\n$replacement = \"yes\";\n$pattern = '/(?<=href\\=\")[^]]+?(?=\")/';\n$replacedHrefHtml = preg_replace($pattern, $replacement, $html);\necho $replacedHrefHtml ;\n?>\n```\n\n> 验证邮箱正则表达式 此功能在用户注册是经常使用\n\n```php\n<?php\n$regex = \"([a-z0-9_.-]+)\". # name\n\"@\". # at\n\"([a-z0-9.-]+){2,255}\". # domain & possibly subdomains\n\".\". # period\n\"([a-z]+){2,10}\"; # domain extension\n$eregi = eregi_replace($regex, '', $email);\n$valid_email = empty($eregi) ? true : false;\n?>\n```\n\n> IP地址验证\n\n```php\n<?php\n$string = \"255.255.255.255\";\nif (preg_match(\n'/^(?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d)(?:[.](?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d)){3}$/', $string)) {\n    echo \"IP address is good.\";\n}\n?>\n```\n\n> 邮政编码验证\n\n```php\n<?php\n$string = \"12345-1234\";\nif (preg_match('/^[0-9]{5}([- ]?[0-9]{4})?$/', $string)) {\n    echo \"zip code checks out\";\n}\n?>\n```\n\n> 高亮显示文本\n\n```php\n<?php\n$text = \"UncleToo（www.uncletoo.com）中文网\";\n$text = preg_replace(\"/\\b(www)\\b/i\", '<span style=\"background:#5fc9f6\">\\1</ span>',$text);\necho $text;\n?>\n```\n\n> 从特定的URL中提取域名\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/plug/tags/?tag=PHP\";\npreg_match('@^(?:http://)?([^/]+)@i', $url, $matches);\n$host = $matches[1];\necho $host;\n//输出：www.uncletoo.com\n?>\n```\n\n> 验证域名格式是否正确\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/\";\nif (preg_match('/^(httphttpsftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i', $url)) {\n    echo \"域名格式正确.\";\n} else {\n    echo \"域名格式错误.\";\n}\n?>\n```\n\n> 使用文章标题生成URL\n\n```php\n<?php\nfunction create_slug($string){\n   $slug=preg_replace('/[^A-Za-z0-9-]+/', '-', $string);\n   return $slug;\n}\necho create_slug('my name is uncletoo');\n//输出：my-name-is-uncletoo\n?>\n```\n\n> 添加http://到URL地址 当我们需要用户填写网址时，很多用户往往不填写http://直接输入域名，使用下面代码可将http://添加到网址的前面。\n\n```php\n<?php\nif (!preg_match(\"/^(httphttpsftp):/\", $_POST['url'])) {\n   $_POST['url'] = 'http://'.$_POST['url'];\n}\n?>\n```\n\n> 将URL转换为超链接 这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。\n\n```php\n<?php\nfunction makeLinks($text) {\n    $text = eregi_replace('(((fht){1}tp://)[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1', $text);\n    $text = eregi_replace('([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1\\2',$text);\n    $text = eregi_replace('([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]{2,3})','\\1', $text);\n    return $text;\n}\n?>\n```","slug":"regular","published":1,"updated":"2022-03-12T23:52:58.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mib007m417talmpgy9r","content":"<blockquote>\n<p>从字符串中删除特定字符 本段代码实现删除字符串中除所有大小写字母及数字以外的字符</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$value</span> = <span class=\"string\">&quot;wWw.UncleToo.Com - 【UncleToo中文网】 - 12345&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$value</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;/[^A-Za-z0-9]/&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"variable\">$value</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$value</span>;</span><br><span class=\"line\"><span class=\"comment\">//输出：wWwUncleTooComUncleToo12345</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<blockquote>\n<p>验证用户名 以下代码验证用户名是否由字母、数字及下划线组成。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"string\">&quot;uncletoo_COM123&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^[a-z\\d_]&#123;5,20&#125;$/i&#x27;</span>, <span class=\"variable\">$username</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;用户名可用&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;用户名存在特殊字符&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加信息到图片alt属性 使用下面函数，可以实现将文章标题添加到图片的alt属性中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add_alt_tags</span>(<span class=\"params\"><span class=\"variable\">$content</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$post</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">preg_match_all</span>(<span class=\"string\">&#x27;/&lt;img (.*?)\\/ &gt;/&#x27;</span>, <span class=\"variable\">$content</span>, <span class=\"variable\">$images</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_null</span>(<span class=\"variable\">$images</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"variable\">$images</span>[<span class=\"number\">1</span>] <span class=\"keyword\">as</span> <span class=\"variable\">$index</span> =&gt; <span class=\"variable\">$value</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/alt=/&#x27;</span>, <span class=\"variable\">$value</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$new_img</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;&lt;img&#x27;</span>, <span class=\"string\">&#x27;&lt;img alt=&quot;&#x27;</span>.<span class=\"title function_ invoke__\">get_the_title</span>().<span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"variable\">$images</span>[<span class=\"number\">0</span>][<span class=\"variable\">$index</span>]);</span><br><span class=\"line\">                <span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"variable\">$images</span>[<span class=\"number\">0</span>][<span class=\"variable\">$index</span>], <span class=\"variable\">$new_img</span>, <span class=\"variable\">$content</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$content</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>将EMail文本自动添加Mailto链接</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$text</span> = <span class=\"string\">&quot;demo@abc.com&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]&#123;2,3&#125;)&#x27;</span>,<span class=\"string\">&#x27;&lt;a href=&quot;mailto:\\\\1&quot;&gt;\\\\1&lt;/ a&gt;&#x27;</span>, <span class=\"variable\">$text</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$string</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>过滤限制级词语</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filtrado</span>(<span class=\"params\"><span class=\"variable\">$texto</span>, <span class=\"variable\">$reemplazo</span> = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$filtradas</span> = <span class=\"string\">&#x27;admin,uncletoo,中文网&#x27;</span>; <span class=\"comment\">//这里定义需要过滤的词语</span></span><br><span class=\"line\">    <span class=\"variable\">$f</span> = <span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"variable\">$filtradas</span>);</span><br><span class=\"line\">    <span class=\"variable\">$f</span> = <span class=\"title function_ invoke__\">array_map</span>(<span class=\"string\">&#x27;trim&#x27;</span>, <span class=\"variable\">$f</span>);</span><br><span class=\"line\">    <span class=\"variable\">$filtro</span> = <span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$f</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable\">$reemplazo</span>) ? <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;#<span class=\"subst\">$filtro</span>#i&quot;</span>, <span class=\"variable\">$reemplazo</span>, <span class=\"variable\">$texto</span>) : <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;#<span class=\"subst\">$filtro</span>#i&quot;</span>, <span class=\"variable\">$texto</span>) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>验证电话号码 这是一个很常见的功能</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"string\">&quot;(010) 555-5555&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^\\(?[0-9]&#123;3&#125;\\)?[0-9]&#123;3&#125;[-. ]? [0-9]&#123;3&#125;[-. ]?[0-9]&#123;4&#125;$/&#x27;</span>, <span class=\"variable\">$string</span>)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">&quot;successful.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换超链接href属性的内容 在页面上查看源文件，显示为：&lt; a href&#x3D;”yes” &gt;UncleToo中文网&lt; &#x2F;a&gt;</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$html</span> = <span class=\"string\">&#x27;&lt;a href=&quot;http://www.uncletoo.com&quot;&gt;UncleToo中文网&lt;/a&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$replacement</span> = <span class=\"string\">&quot;yes&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$pattern</span> = <span class=\"string\">&#x27;/(?&lt;=href\\=&quot;)[^]]+?(?=&quot;)/&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$replacedHrefHtml</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"variable\">$pattern</span>, <span class=\"variable\">$replacement</span>, <span class=\"variable\">$html</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$replacedHrefHtml</span> ;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>验证邮箱正则表达式 此功能在用户注册是经常使用</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$regex</span> = <span class=\"string\">&quot;([a-z0-9_.-]+)&quot;</span>. <span class=\"comment\"># name</span></span><br><span class=\"line\"><span class=\"string\">&quot;@&quot;</span>. <span class=\"comment\"># at</span></span><br><span class=\"line\"><span class=\"string\">&quot;([a-z0-9.-]+)&#123;2,255&#125;&quot;</span>. <span class=\"comment\"># domain &amp; possibly subdomains</span></span><br><span class=\"line\"><span class=\"string\">&quot;.&quot;</span>. <span class=\"comment\"># period</span></span><br><span class=\"line\"><span class=\"string\">&quot;([a-z]+)&#123;2,10&#125;&quot;</span>; <span class=\"comment\"># domain extension</span></span><br><span class=\"line\"><span class=\"variable\">$eregi</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"variable\">$regex</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$email</span>);</span><br><span class=\"line\"><span class=\"variable\">$valid_email</span> = <span class=\"keyword\">empty</span>(<span class=\"variable\">$eregi</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>IP地址验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"string\">&quot;255.255.255.255&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(</span><br><span class=\"line\"><span class=\"string\">&#x27;/^(?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d)(?:[.](?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d))&#123;3&#125;$/&#x27;</span>, <span class=\"variable\">$string</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;IP address is good.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>邮政编码验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"string\">&quot;12345-1234&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^[0-9]&#123;5&#125;([- ]?[0-9]&#123;4&#125;)?$/&#x27;</span>, <span class=\"variable\">$string</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;zip code checks out&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高亮显示文本</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$text</span> = <span class=\"string\">&quot;UncleToo（www.uncletoo.com）中文网&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;/\\b(www)\\b/i&quot;</span>, <span class=\"string\">&#x27;&lt;span style=&quot;background:#5fc9f6&quot;&gt;\\1&lt;/ span&gt;&#x27;</span>,<span class=\"variable\">$text</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$text</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从特定的URL中提取域名</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">&quot;http://www.uncletoo.com/plug/tags/?tag=PHP&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;@^(?:http://)?([^/]+)@i&#x27;</span>, <span class=\"variable\">$url</span>, <span class=\"variable\">$matches</span>);</span><br><span class=\"line\"><span class=\"variable\">$host</span> = <span class=\"variable\">$matches</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>;</span><br><span class=\"line\"><span class=\"comment\">//输出：www.uncletoo.com</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>验证域名格式是否正确</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">&quot;http://www.uncletoo.com/&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^(httphttpsftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i&#x27;</span>, <span class=\"variable\">$url</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;域名格式正确.&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;域名格式错误.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用文章标题生成URL</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_slug</span>(<span class=\"params\"><span class=\"variable\">$string</span></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"variable\">$slug</span>=<span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/[^A-Za-z0-9-]+/&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"variable\">$string</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"variable\">$slug</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">create_slug</span>(<span class=\"string\">&#x27;my name is uncletoo&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出：my-name-is-uncletoo</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加http:&#x2F;&#x2F;到URL地址 当我们需要用户填写网址时，很多用户往往不填写http:&#x2F;&#x2F;直接输入域名，使用下面代码可将http:&#x2F;&#x2F;添加到网址的前面。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/^(httphttpsftp):/&quot;</span>, <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>])) &#123;</span><br><span class=\"line\">   <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>] = <span class=\"string\">&#x27;http://&#x27;</span>.<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>将URL转换为超链接 这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeLinks</span>(<span class=\"params\"><span class=\"variable\">$text</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;(((fht)&#123;1&#125;tp://)[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)&#x27;</span>,<span class=\"string\">&#x27;\\1&#x27;</span>, <span class=\"variable\">$text</span>);</span><br><span class=\"line\">    <span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;([[:space:]()[&#123;&#125;])(www.[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)&#x27;</span>,<span class=\"string\">&#x27;\\1\\2&#x27;</span>,<span class=\"variable\">$text</span>);</span><br><span class=\"line\">    <span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]&#123;2,3&#125;)&#x27;</span>,<span class=\"string\">&#x27;\\1&#x27;</span>, <span class=\"variable\">$text</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$text</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>从字符串中删除特定字符 本段代码实现删除字符串中除所有大小写字母及数字以外的字符</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$value</span> = <span class=\"string\">&quot;wWw.UncleToo.Com - 【UncleToo中文网】 - 12345&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$value</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;/[^A-Za-z0-9]/&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"variable\">$value</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$value</span>;</span><br><span class=\"line\"><span class=\"comment\">//输出：wWwUncleTooComUncleToo12345</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>验证用户名 以下代码验证用户名是否由字母、数字及下划线组成。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"string\">&quot;uncletoo_COM123&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^[a-z\\d_]&#123;5,20&#125;$/i&#x27;</span>, <span class=\"variable\">$username</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;用户名可用&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;用户名存在特殊字符&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加信息到图片alt属性 使用下面函数，可以实现将文章标题添加到图片的alt属性中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add_alt_tags</span>(<span class=\"params\"><span class=\"variable\">$content</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"variable\">$post</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">preg_match_all</span>(<span class=\"string\">&#x27;/&lt;img (.*?)\\/ &gt;/&#x27;</span>, <span class=\"variable\">$content</span>, <span class=\"variable\">$images</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_null</span>(<span class=\"variable\">$images</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"variable\">$images</span>[<span class=\"number\">1</span>] <span class=\"keyword\">as</span> <span class=\"variable\">$index</span> =&gt; <span class=\"variable\">$value</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/alt=/&#x27;</span>, <span class=\"variable\">$value</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$new_img</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;&lt;img&#x27;</span>, <span class=\"string\">&#x27;&lt;img alt=&quot;&#x27;</span>.<span class=\"title function_ invoke__\">get_the_title</span>().<span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"variable\">$images</span>[<span class=\"number\">0</span>][<span class=\"variable\">$index</span>]);</span><br><span class=\"line\">                <span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"variable\">$images</span>[<span class=\"number\">0</span>][<span class=\"variable\">$index</span>], <span class=\"variable\">$new_img</span>, <span class=\"variable\">$content</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$content</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>将EMail文本自动添加Mailto链接</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$text</span> = <span class=\"string\">&quot;demo@abc.com&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]&#123;2,3&#125;)&#x27;</span>,<span class=\"string\">&#x27;&lt;a href=&quot;mailto:\\\\1&quot;&gt;\\\\1&lt;/ a&gt;&#x27;</span>, <span class=\"variable\">$text</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$string</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>过滤限制级词语</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filtrado</span>(<span class=\"params\"><span class=\"variable\">$texto</span>, <span class=\"variable\">$reemplazo</span> = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$filtradas</span> = <span class=\"string\">&#x27;admin,uncletoo,中文网&#x27;</span>; <span class=\"comment\">//这里定义需要过滤的词语</span></span><br><span class=\"line\">    <span class=\"variable\">$f</span> = <span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"variable\">$filtradas</span>);</span><br><span class=\"line\">    <span class=\"variable\">$f</span> = <span class=\"title function_ invoke__\">array_map</span>(<span class=\"string\">&#x27;trim&#x27;</span>, <span class=\"variable\">$f</span>);</span><br><span class=\"line\">    <span class=\"variable\">$filtro</span> = <span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$f</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable\">$reemplazo</span>) ? <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;#<span class=\"subst\">$filtro</span>#i&quot;</span>, <span class=\"variable\">$reemplazo</span>, <span class=\"variable\">$texto</span>) : <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;#<span class=\"subst\">$filtro</span>#i&quot;</span>, <span class=\"variable\">$texto</span>) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>验证电话号码 这是一个很常见的功能</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"string\">&quot;(010) 555-5555&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^\\(?[0-9]&#123;3&#125;\\)?[0-9]&#123;3&#125;[-. ]? [0-9]&#123;3&#125;[-. ]?[0-9]&#123;4&#125;$/&#x27;</span>, <span class=\"variable\">$string</span>)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">&quot;successful.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>替换超链接href属性的内容 在页面上查看源文件，显示为：&lt; a href&#x3D;”yes” &gt;UncleToo中文网&lt; &#x2F;a&gt;</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$html</span> = <span class=\"string\">&#x27;&lt;a href=&quot;http://www.uncletoo.com&quot;&gt;UncleToo中文网&lt;/a&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$replacement</span> = <span class=\"string\">&quot;yes&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$pattern</span> = <span class=\"string\">&#x27;/(?&lt;=href\\=&quot;)[^]]+?(?=&quot;)/&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$replacedHrefHtml</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"variable\">$pattern</span>, <span class=\"variable\">$replacement</span>, <span class=\"variable\">$html</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$replacedHrefHtml</span> ;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>验证邮箱正则表达式 此功能在用户注册是经常使用</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$regex</span> = <span class=\"string\">&quot;([a-z0-9_.-]+)&quot;</span>. <span class=\"comment\"># name</span></span><br><span class=\"line\"><span class=\"string\">&quot;@&quot;</span>. <span class=\"comment\"># at</span></span><br><span class=\"line\"><span class=\"string\">&quot;([a-z0-9.-]+)&#123;2,255&#125;&quot;</span>. <span class=\"comment\"># domain &amp; possibly subdomains</span></span><br><span class=\"line\"><span class=\"string\">&quot;.&quot;</span>. <span class=\"comment\"># period</span></span><br><span class=\"line\"><span class=\"string\">&quot;([a-z]+)&#123;2,10&#125;&quot;</span>; <span class=\"comment\"># domain extension</span></span><br><span class=\"line\"><span class=\"variable\">$eregi</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"variable\">$regex</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$email</span>);</span><br><span class=\"line\"><span class=\"variable\">$valid_email</span> = <span class=\"keyword\">empty</span>(<span class=\"variable\">$eregi</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>IP地址验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"string\">&quot;255.255.255.255&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(</span><br><span class=\"line\"><span class=\"string\">&#x27;/^(?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d)(?:[.](?:25[0-5]2[0-4]\\d1\\d\\d[1-9]\\d\\d))&#123;3&#125;$/&#x27;</span>, <span class=\"variable\">$string</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;IP address is good.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>邮政编码验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"string\">&quot;12345-1234&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^[0-9]&#123;5&#125;([- ]?[0-9]&#123;4&#125;)?$/&#x27;</span>, <span class=\"variable\">$string</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;zip code checks out&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高亮显示文本</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$text</span> = <span class=\"string\">&quot;UncleToo（www.uncletoo.com）中文网&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;/\\b(www)\\b/i&quot;</span>, <span class=\"string\">&#x27;&lt;span style=&quot;background:#5fc9f6&quot;&gt;\\1&lt;/ span&gt;&#x27;</span>,<span class=\"variable\">$text</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$text</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从特定的URL中提取域名</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">&quot;http://www.uncletoo.com/plug/tags/?tag=PHP&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;@^(?:http://)?([^/]+)@i&#x27;</span>, <span class=\"variable\">$url</span>, <span class=\"variable\">$matches</span>);</span><br><span class=\"line\"><span class=\"variable\">$host</span> = <span class=\"variable\">$matches</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$host</span>;</span><br><span class=\"line\"><span class=\"comment\">//输出：www.uncletoo.com</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>验证域名格式是否正确</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">&quot;http://www.uncletoo.com/&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^(httphttpsftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i&#x27;</span>, <span class=\"variable\">$url</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;域名格式正确.&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;域名格式错误.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用文章标题生成URL</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_slug</span>(<span class=\"params\"><span class=\"variable\">$string</span></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"variable\">$slug</span>=<span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/[^A-Za-z0-9-]+/&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"variable\">$string</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"variable\">$slug</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">create_slug</span>(<span class=\"string\">&#x27;my name is uncletoo&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出：my-name-is-uncletoo</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加http:&#x2F;&#x2F;到URL地址 当我们需要用户填写网址时，很多用户往往不填写http:&#x2F;&#x2F;直接输入域名，使用下面代码可将http:&#x2F;&#x2F;添加到网址的前面。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/^(httphttpsftp):/&quot;</span>, <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>])) &#123;</span><br><span class=\"line\">   <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>] = <span class=\"string\">&#x27;http://&#x27;</span>.<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>将URL转换为超链接 这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeLinks</span>(<span class=\"params\"><span class=\"variable\">$text</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;(((fht)&#123;1&#125;tp://)[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)&#x27;</span>,<span class=\"string\">&#x27;\\1&#x27;</span>, <span class=\"variable\">$text</span>);</span><br><span class=\"line\">    <span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;([[:space:]()[&#123;&#125;])(www.[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)&#x27;</span>,<span class=\"string\">&#x27;\\1\\2&#x27;</span>,<span class=\"variable\">$text</span>);</span><br><span class=\"line\">    <span class=\"variable\">$text</span> = <span class=\"title function_ invoke__\">eregi_replace</span>(<span class=\"string\">&#x27;([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]&#123;2,3&#125;)&#x27;</span>,<span class=\"string\">&#x27;\\1&#x27;</span>, <span class=\"variable\">$text</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$text</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"【以太坊】实现ERC20代币智能合约","id":"787","date":"2021-05-30T14:01:11.000Z","_content":"\n以太坊发布的大多数代币的智能合约，都是参照了“ERC20”的标准协议，本节也主要是根据“ERC20”开发一份代币的智能合约，根据上一节的步骤，提前创建一个FeilongToken.sol的文件\n\n#### 创建智能合约\n\nsolidity 其实和普通的编程语言有异曲同工之妙，一下的我定义的一些成员变量，我们定义了一些基本的信息，比如代币的名称、代币单位精确的小数点、代币的符号以及发行量。\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic = 100;//代币发行量\n}\n```\n\n#### 构造函数\n\nsolidity也支持构造函数的使用\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic;//代币发行量\n\n    constructor() public {\n        totalPublic = 100;\n    }\n}\n```\n\n#### solidity 关键字\n\n下面给大家介绍一些常用的关键字\n\n> ###### public 可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\n> \n> ###### private 可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\n> \n> ###### external 只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\n> \n> ###### internal 可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\n> \n> ###### view 只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\n> \n> ###### pure 只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\n\n这几个关键字，不光是约束了外部对自己的调用，view和pure也约束了自己对外部变量的操作限制。\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic;//代币发行量\n\n    constructor() public{\n        totalPublic = 100;\n    }\n\n    function getHalfPublic() external view returns (uint half) {\n        return totalPublic/2;\n    }\n    function internalFunc() internal view returns (uint half) {\n        return totalPublic/2;\n    }\n}\n\ncontract Parent {\n    uint64 age = 30;\n    address public addr = 0x753B5C00b357b1536aE206C3319582A5A00b9c02;\n\n    function func() public view {\n        FeilongToken m = FeilongToken(addr);\n        m.getHalfPublic(); // 可以访问\n        m.internalFunc(); // 报错，因为internal类型，外部不能进行访问\n    }\n\n        function publicFunc() public {\n        age += 16;\n    }\n\n    function privateFunc() private returns (uint64 ret) {\n        uint64 t = internalFunc();\n        age = t / 2;\n        return age;\n    }\n\n    function internalFunc() internal returns (uint64 ret) {\n        age *= 2;\n        return ret;\n    }\n\n    function viewFunc(uint64 arg1) public view returns (uint64 ret) {\n        arg1 = arg1 + age + 9; // 这里不会报错，因为view是允许访问函数外部变量的\n        age += 7; // 这里会报错，因为是view类型，不能修改外部的变量\n        uint64 d = age + arg1;  // 这里不会报错，因为view是允许访问函数外部变量的\n        uint64 c = d/2;\n        return c;\n    }\n\n    function pureFunc(uint64 arg1) public pure returns (uint64 ret) {\n        arg1 += 9;\n        uint64 d = age + arg1; // 这里会报错，因为pure不允许读取函数外部的变量\n        return arg1;\n    }\n}\n\ncontract child is Parent {\n    function usePrivateFunc() public returns (uint64 ret) {\n        uint64 v = privateFunc(); // 这里进行报错，因为private的函数不能被继承\n    }\n\n    function useInternalFunc() public returns (uint64 ret) {\n        uint64 v = internalFunc();// 这里不会报错，因为internal的函数可以被继承\n        return v;\n    }\n}\n```\n\n#### 总结\n\nsolidity的语法其实和其他编程语言类似，但是有所不同。我们一般的语言，大多数都是限制了外部对自己的调用权限控制，solidity也限定了函数本身对外部的操作。比如view和pure，限制了自己对外部变量的读取和修改的权限控制。这个是其中一个不同点。\n\n本文链接： [https://feilong.tech/solidity-keyword](https://feilong.tech/solidity-keyword)","source":"_posts/solidity-keyword.md","raw":"---\ntitle: 【以太坊】实现ERC20代币智能合约\ntags:\n  - 以太坊\n  - 区块链\n  - 智能合约\nid: '787'\ncategories:\n  - - Go\n  - - 以太坊\ndate: 2021-05-30 22:01:11\n---\n\n以太坊发布的大多数代币的智能合约，都是参照了“ERC20”的标准协议，本节也主要是根据“ERC20”开发一份代币的智能合约，根据上一节的步骤，提前创建一个FeilongToken.sol的文件\n\n#### 创建智能合约\n\nsolidity 其实和普通的编程语言有异曲同工之妙，一下的我定义的一些成员变量，我们定义了一些基本的信息，比如代币的名称、代币单位精确的小数点、代币的符号以及发行量。\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic = 100;//代币发行量\n}\n```\n\n#### 构造函数\n\nsolidity也支持构造函数的使用\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic;//代币发行量\n\n    constructor() public {\n        totalPublic = 100;\n    }\n}\n```\n\n#### solidity 关键字\n\n下面给大家介绍一些常用的关键字\n\n> ###### public 可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\n> \n> ###### private 可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\n> \n> ###### external 只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\n> \n> ###### internal 可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\n> \n> ###### view 只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\n> \n> ###### pure 只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\n\n这几个关键字，不光是约束了外部对自己的调用，view和pure也约束了自己对外部变量的操作限制。\n\n```bash\ncontract FeilongToken {\n    string public name=\"Feilong token coin\"; // 代币的名称\n    uint8 public decimals = 18;// 精确小数点位数\n    string public symbol = \"FLTC\";//代币符号\n    uint public totalPublic;//代币发行量\n\n    constructor() public{\n        totalPublic = 100;\n    }\n\n    function getHalfPublic() external view returns (uint half) {\n        return totalPublic/2;\n    }\n    function internalFunc() internal view returns (uint half) {\n        return totalPublic/2;\n    }\n}\n\ncontract Parent {\n    uint64 age = 30;\n    address public addr = 0x753B5C00b357b1536aE206C3319582A5A00b9c02;\n\n    function func() public view {\n        FeilongToken m = FeilongToken(addr);\n        m.getHalfPublic(); // 可以访问\n        m.internalFunc(); // 报错，因为internal类型，外部不能进行访问\n    }\n\n        function publicFunc() public {\n        age += 16;\n    }\n\n    function privateFunc() private returns (uint64 ret) {\n        uint64 t = internalFunc();\n        age = t / 2;\n        return age;\n    }\n\n    function internalFunc() internal returns (uint64 ret) {\n        age *= 2;\n        return ret;\n    }\n\n    function viewFunc(uint64 arg1) public view returns (uint64 ret) {\n        arg1 = arg1 + age + 9; // 这里不会报错，因为view是允许访问函数外部变量的\n        age += 7; // 这里会报错，因为是view类型，不能修改外部的变量\n        uint64 d = age + arg1;  // 这里不会报错，因为view是允许访问函数外部变量的\n        uint64 c = d/2;\n        return c;\n    }\n\n    function pureFunc(uint64 arg1) public pure returns (uint64 ret) {\n        arg1 += 9;\n        uint64 d = age + arg1; // 这里会报错，因为pure不允许读取函数外部的变量\n        return arg1;\n    }\n}\n\ncontract child is Parent {\n    function usePrivateFunc() public returns (uint64 ret) {\n        uint64 v = privateFunc(); // 这里进行报错，因为private的函数不能被继承\n    }\n\n    function useInternalFunc() public returns (uint64 ret) {\n        uint64 v = internalFunc();// 这里不会报错，因为internal的函数可以被继承\n        return v;\n    }\n}\n```\n\n#### 总结\n\nsolidity的语法其实和其他编程语言类似，但是有所不同。我们一般的语言，大多数都是限制了外部对自己的调用权限控制，solidity也限定了函数本身对外部的操作。比如view和pure，限制了自己对外部变量的读取和修改的权限控制。这个是其中一个不同点。\n\n本文链接： [https://feilong.tech/solidity-keyword](https://feilong.tech/solidity-keyword)","slug":"solidity-keyword","published":1,"updated":"2022-03-12T23:52:58.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mid007p417t1f33dgpk","content":"<p>以太坊发布的大多数代币的智能合约，都是参照了“ERC20”的标准协议，本节也主要是根据“ERC20”开发一份代币的智能合约，根据上一节的步骤，提前创建一个FeilongToken.sol的文件</p>\n<h4 id=\"创建智能合约\"><a href=\"#创建智能合约\" class=\"headerlink\" title=\"创建智能合约\"></a>创建智能合约</h4><p>solidity 其实和普通的编程语言有异曲同工之妙，一下的我定义的一些成员变量，我们定义了一些基本的信息，比如代币的名称、代币单位精确的小数点、代币的符号以及发行量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic = 100;//代币发行量</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>solidity也支持构造函数的使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic;//代币发行量</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() public &#123;</span><br><span class=\"line\">        totalPublic = 100;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"solidity-关键字\"><a href=\"#solidity-关键字\" class=\"headerlink\" title=\"solidity 关键字\"></a>solidity 关键字</h4><p>下面给大家介绍一些常用的关键字</p>\n<blockquote>\n<h6 id=\"public-可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\"><a href=\"#public-可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\" class=\"headerlink\" title=\"public 可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\"></a>public 可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型</h6><h6 id=\"private-可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\"><a href=\"#private-可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\" class=\"headerlink\" title=\"private 可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\"></a>private 可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。</h6><h6 id=\"external-只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\"><a href=\"#external-只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\" class=\"headerlink\" title=\"external 只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\"></a>external 只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。</h6><h6 id=\"internal-可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\"><a href=\"#internal-可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\" class=\"headerlink\" title=\"internal 可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\"></a>internal 可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问</h6><h6 id=\"view-只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\"><a href=\"#view-只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\" class=\"headerlink\" title=\"view 只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\"></a>view 只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改</h6><h6 id=\"pure-只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\"><a href=\"#pure-只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\" class=\"headerlink\" title=\"pure 只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\"></a>pure 只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作</h6></blockquote>\n<p>这几个关键字，不光是约束了外部对自己的调用，view和pure也约束了自己对外部变量的操作限制。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic;//代币发行量</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() public&#123;</span><br><span class=\"line\">        totalPublic = 100;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> getHalfPublic() external view returns (uint half) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> totalPublic/2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> internalFunc() internal view returns (uint half) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> totalPublic/2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Parent &#123;</span><br><span class=\"line\">    uint64 age = 30;</span><br><span class=\"line\">    address public addr = 0x753B5C00b357b1536aE206C3319582A5A00b9c02;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> func() public view &#123;</span><br><span class=\"line\">        FeilongToken m = FeilongToken(addr);</span><br><span class=\"line\">        m.getHalfPublic(); // 可以访问</span><br><span class=\"line\">        m.internalFunc(); // 报错，因为internal类型，外部不能进行访问</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> publicFunc() public &#123;</span><br><span class=\"line\">        age += 16;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> privateFunc() private returns (uint64 ret) &#123;</span><br><span class=\"line\">        uint64 t = internalFunc();</span><br><span class=\"line\">        age = t / 2;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> internalFunc() internal returns (uint64 ret) &#123;</span><br><span class=\"line\">        age *= 2;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> viewFunc(uint64 arg1) public view returns (uint64 ret) &#123;</span><br><span class=\"line\">        arg1 = arg1 + age + 9; // 这里不会报错，因为view是允许访问函数外部变量的</span><br><span class=\"line\">        age += 7; // 这里会报错，因为是view类型，不能修改外部的变量</span><br><span class=\"line\">        uint64 d = age + arg1;  // 这里不会报错，因为view是允许访问函数外部变量的</span><br><span class=\"line\">        uint64 c = d/2;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> pureFunc(uint64 arg1) public pure returns (uint64 ret) &#123;</span><br><span class=\"line\">        arg1 += 9;</span><br><span class=\"line\">        uint64 d = age + arg1; // 这里会报错，因为pure不允许读取函数外部的变量</span><br><span class=\"line\">        <span class=\"built_in\">return</span> arg1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract child is Parent &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> usePrivateFunc() public returns (uint64 ret) &#123;</span><br><span class=\"line\">        uint64 v = privateFunc(); // 这里进行报错，因为private的函数不能被继承</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> useInternalFunc() public returns (uint64 ret) &#123;</span><br><span class=\"line\">        uint64 v = internalFunc();// 这里不会报错，因为internal的函数可以被继承</span><br><span class=\"line\">        <span class=\"built_in\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>solidity的语法其实和其他编程语言类似，但是有所不同。我们一般的语言，大多数都是限制了外部对自己的调用权限控制，solidity也限定了函数本身对外部的操作。比如view和pure，限制了自己对外部变量的读取和修改的权限控制。这个是其中一个不同点。</p>\n<p>本文链接： <a href=\"https://feilong.tech/solidity-keyword\">https://feilong.tech/solidity-keyword</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>以太坊发布的大多数代币的智能合约，都是参照了“ERC20”的标准协议，本节也主要是根据“ERC20”开发一份代币的智能合约，根据上一节的步骤，提前创建一个FeilongToken.sol的文件</p>\n<h4 id=\"创建智能合约\"><a href=\"#创建智能合约\" class=\"headerlink\" title=\"创建智能合约\"></a>创建智能合约</h4><p>solidity 其实和普通的编程语言有异曲同工之妙，一下的我定义的一些成员变量，我们定义了一些基本的信息，比如代币的名称、代币单位精确的小数点、代币的符号以及发行量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic = 100;//代币发行量</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>solidity也支持构造函数的使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic;//代币发行量</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() public &#123;</span><br><span class=\"line\">        totalPublic = 100;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"solidity-关键字\"><a href=\"#solidity-关键字\" class=\"headerlink\" title=\"solidity 关键字\"></a>solidity 关键字</h4><p>下面给大家介绍一些常用的关键字</p>\n<blockquote>\n<h6 id=\"public-可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\"><a href=\"#public-可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\" class=\"headerlink\" title=\"public 可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型\"></a>public 可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型</h6><h6 id=\"private-可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\"><a href=\"#private-可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\" class=\"headerlink\" title=\"private 可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。\"></a>private 可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。</h6><h6 id=\"external-只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\"><a href=\"#external-只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\" class=\"headerlink\" title=\"external 只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。\"></a>external 只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。</h6><h6 id=\"internal-可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\"><a href=\"#internal-可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\" class=\"headerlink\" title=\"internal 可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问\"></a>internal 可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问</h6><h6 id=\"view-只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\"><a href=\"#view-只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\" class=\"headerlink\" title=\"view 只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改\"></a>view 只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改</h6><h6 id=\"pure-只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\"><a href=\"#pure-只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\" class=\"headerlink\" title=\"pure 只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作\"></a>pure 只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作</h6></blockquote>\n<p>这几个关键字，不光是约束了外部对自己的调用，view和pure也约束了自己对外部变量的操作限制。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract FeilongToken &#123;</span><br><span class=\"line\">    string public name=<span class=\"string\">&quot;Feilong token coin&quot;</span>; // 代币的名称</span><br><span class=\"line\">    uint8 public decimals = 18;// 精确小数点位数</span><br><span class=\"line\">    string public symbol = <span class=\"string\">&quot;FLTC&quot;</span>;//代币符号</span><br><span class=\"line\">    uint public totalPublic;//代币发行量</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() public&#123;</span><br><span class=\"line\">        totalPublic = 100;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> getHalfPublic() external view returns (uint half) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> totalPublic/2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> internalFunc() internal view returns (uint half) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> totalPublic/2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Parent &#123;</span><br><span class=\"line\">    uint64 age = 30;</span><br><span class=\"line\">    address public addr = 0x753B5C00b357b1536aE206C3319582A5A00b9c02;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> func() public view &#123;</span><br><span class=\"line\">        FeilongToken m = FeilongToken(addr);</span><br><span class=\"line\">        m.getHalfPublic(); // 可以访问</span><br><span class=\"line\">        m.internalFunc(); // 报错，因为internal类型，外部不能进行访问</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> publicFunc() public &#123;</span><br><span class=\"line\">        age += 16;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> privateFunc() private returns (uint64 ret) &#123;</span><br><span class=\"line\">        uint64 t = internalFunc();</span><br><span class=\"line\">        age = t / 2;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> internalFunc() internal returns (uint64 ret) &#123;</span><br><span class=\"line\">        age *= 2;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> viewFunc(uint64 arg1) public view returns (uint64 ret) &#123;</span><br><span class=\"line\">        arg1 = arg1 + age + 9; // 这里不会报错，因为view是允许访问函数外部变量的</span><br><span class=\"line\">        age += 7; // 这里会报错，因为是view类型，不能修改外部的变量</span><br><span class=\"line\">        uint64 d = age + arg1;  // 这里不会报错，因为view是允许访问函数外部变量的</span><br><span class=\"line\">        uint64 c = d/2;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> pureFunc(uint64 arg1) public pure returns (uint64 ret) &#123;</span><br><span class=\"line\">        arg1 += 9;</span><br><span class=\"line\">        uint64 d = age + arg1; // 这里会报错，因为pure不允许读取函数外部的变量</span><br><span class=\"line\">        <span class=\"built_in\">return</span> arg1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract child is Parent &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> usePrivateFunc() public returns (uint64 ret) &#123;</span><br><span class=\"line\">        uint64 v = privateFunc(); // 这里进行报错，因为private的函数不能被继承</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> useInternalFunc() public returns (uint64 ret) &#123;</span><br><span class=\"line\">        uint64 v = internalFunc();// 这里不会报错，因为internal的函数可以被继承</span><br><span class=\"line\">        <span class=\"built_in\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>solidity的语法其实和其他编程语言类似，但是有所不同。我们一般的语言，大多数都是限制了外部对自己的调用权限控制，solidity也限定了函数本身对外部的操作。比如view和pure，限制了自己对外部变量的读取和修改的权限控制。这个是其中一个不同点。</p>\n<p>本文链接： <a href=\"https://feilong.tech/solidity-keyword\">https://feilong.tech/solidity-keyword</a></p>\n"},{"title":"普吉岛之行--返程篇","id":"576","date":"2019-09-20T08:51:39.000Z","_content":"\n天下没有不散的宴席，同样也没有无终止的假期。\n\n几天的时间飞速而过，我们赶着早上7点的日出，出发去机场，开始返京。\n\n### 普吉机场\n\n和出发一样，我们依旧是需要在吉隆坡转机。我们匆匆来到普吉到的机场，排了很长时间的队伍，办理了行李的托运，然后就进入机场，进行候机。\n\n由于忍受不了饿肚子，就在机场买了一份汉堡王的套餐。妈耶，估计是我这辈子吃过最贵的汉堡王套餐了。一顿花了我150人民币。我在国内吃7层皇堡才80块钱。😕😕😕\n\n我们在机场，拿到之前在泰国免税店买的东西。\n\n在普吉岛的机场，还发生了一个小插曲。\n\n我帮朋友买了几支唇釉，可是由于买了汉堡，所以在吃汉堡的时候，弄丢了一只唇釉。在快要登机的时候，我决定去柜台问问工作人员，结果一个工作人员问了我的名字，把捡到的唇釉还给我了。要不然200块钱就飞了。😂😂😂\n\n![](/uploads/2019/09/IMG_6229.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1260-1024x768.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1255-1024x768.jpg)\n\n伴随着前往吉隆坡的飞机的起飞，也标志着这次出行开始结束。\n\n### 吉隆坡机场\n\n到了吉隆坡的机场，依旧是和之前一样，大家说说笑笑，一起逛街，但是内心对这次旅行有点意犹未尽。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1262-1024x768.jpg)\n\n### 回京\n\n从吉隆坡到北京的飞行时间最长，从下午的五点半，到晚上的一点多，大家到了飞机上，匆匆吃过了飞机餐，就拖着疲惫的身体，进入睡眠。\n\n飞机上，有不少的大爷大妈。不过大爷大妈的嗓门，一点都不显老。😂嗷嗷叫唤的没完。搞得我的两个同事，不得不更换了飞机的座位。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1266-768x1024.jpg)\n\n大概夜里12点多，我们开始在北京国际机场T3航班楼降落，下飞机之后，我们来到行李的传送带，等我们取完行李，已经是晚上一点多了。\n\n我们出了机场，各自也都打车回家了。\n\n### 总结\n\n如果一定要说一个比较遗憾的事情，那就是没有去看 泰国秀吧。我这人有时候比较纠结，但是也就是纠结，容易错失一些机会。回来的路上，同事一直绘声绘色的描述秀场的场景，内心多少还是有些期待。但是最终也没有看成。\n\n不过这次旅行还是很愉快的，泰国的海很蓝，泰国的东西很好吃，泰国的阳光也很棒。如果有机会，期待再一次去泰国！","source":"_posts/return.md","raw":"---\ntitle: 普吉岛之行--返程篇\ntags:\n  - 出国游\n  - 团建\n  - 普吉岛\n  - 泰国\nid: '576'\ncategories:\n  - - Life\ndate: 2019-09-20 16:51:39\n---\n\n天下没有不散的宴席，同样也没有无终止的假期。\n\n几天的时间飞速而过，我们赶着早上7点的日出，出发去机场，开始返京。\n\n### 普吉机场\n\n和出发一样，我们依旧是需要在吉隆坡转机。我们匆匆来到普吉到的机场，排了很长时间的队伍，办理了行李的托运，然后就进入机场，进行候机。\n\n由于忍受不了饿肚子，就在机场买了一份汉堡王的套餐。妈耶，估计是我这辈子吃过最贵的汉堡王套餐了。一顿花了我150人民币。我在国内吃7层皇堡才80块钱。😕😕😕\n\n我们在机场，拿到之前在泰国免税店买的东西。\n\n在普吉岛的机场，还发生了一个小插曲。\n\n我帮朋友买了几支唇釉，可是由于买了汉堡，所以在吃汉堡的时候，弄丢了一只唇釉。在快要登机的时候，我决定去柜台问问工作人员，结果一个工作人员问了我的名字，把捡到的唇釉还给我了。要不然200块钱就飞了。😂😂😂\n\n![](/uploads/2019/09/IMG_6229.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1260-1024x768.jpg)\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1255-1024x768.jpg)\n\n伴随着前往吉隆坡的飞机的起飞，也标志着这次出行开始结束。\n\n### 吉隆坡机场\n\n到了吉隆坡的机场，依旧是和之前一样，大家说说笑笑，一起逛街，但是内心对这次旅行有点意犹未尽。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1262-1024x768.jpg)\n\n### 回京\n\n从吉隆坡到北京的飞行时间最长，从下午的五点半，到晚上的一点多，大家到了飞机上，匆匆吃过了飞机餐，就拖着疲惫的身体，进入睡眠。\n\n飞机上，有不少的大爷大妈。不过大爷大妈的嗓门，一点都不显老。😂嗷嗷叫唤的没完。搞得我的两个同事，不得不更换了飞机的座位。\n\n![](/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1266-768x1024.jpg)\n\n大概夜里12点多，我们开始在北京国际机场T3航班楼降落，下飞机之后，我们来到行李的传送带，等我们取完行李，已经是晚上一点多了。\n\n我们出了机场，各自也都打车回家了。\n\n### 总结\n\n如果一定要说一个比较遗憾的事情，那就是没有去看 泰国秀吧。我这人有时候比较纠结，但是也就是纠结，容易错失一些机会。回来的路上，同事一直绘声绘色的描述秀场的场景，内心多少还是有些期待。但是最终也没有看成。\n\n不过这次旅行还是很愉快的，泰国的海很蓝，泰国的东西很好吃，泰国的阳光也很棒。如果有机会，期待再一次去泰国！","slug":"return","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mie007r417th3c239r9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>天下没有不散的宴席，同样也没有无终止的假期。</p>\n<p>几天的时间飞速而过，我们赶着早上7点的日出，出发去机场，开始返京。</p>\n<h3 id=\"普吉机场\"><a href=\"#普吉机场\" class=\"headerlink\" title=\"普吉机场\"></a>普吉机场</h3><p>和出发一样，我们依旧是需要在吉隆坡转机。我们匆匆来到普吉到的机场，排了很长时间的队伍，办理了行李的托运，然后就进入机场，进行候机。</p>\n<p>由于忍受不了饿肚子，就在机场买了一份汉堡王的套餐。妈耶，估计是我这辈子吃过最贵的汉堡王套餐了。一顿花了我150人民币。我在国内吃7层皇堡才80块钱。😕😕😕</p>\n<p>我们在机场，拿到之前在泰国免税店买的东西。</p>\n<p>在普吉岛的机场，还发生了一个小插曲。</p>\n<p>我帮朋友买了几支唇釉，可是由于买了汉堡，所以在吃汉堡的时候，弄丢了一只唇釉。在快要登机的时候，我决定去柜台问问工作人员，结果一个工作人员问了我的名字，把捡到的唇釉还给我了。要不然200块钱就飞了。😂😂😂</p>\n<p><img src=\"/uploads/2019/09/IMG_6229.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1260-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1255-1024x768.jpg\"></p>\n<p>伴随着前往吉隆坡的飞机的起飞，也标志着这次出行开始结束。</p>\n<h3 id=\"吉隆坡机场\"><a href=\"#吉隆坡机场\" class=\"headerlink\" title=\"吉隆坡机场\"></a>吉隆坡机场</h3><p>到了吉隆坡的机场，依旧是和之前一样，大家说说笑笑，一起逛街，但是内心对这次旅行有点意犹未尽。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1262-1024x768.jpg\"></p>\n<h3 id=\"回京\"><a href=\"#回京\" class=\"headerlink\" title=\"回京\"></a>回京</h3><p>从吉隆坡到北京的飞行时间最长，从下午的五点半，到晚上的一点多，大家到了飞机上，匆匆吃过了飞机餐，就拖着疲惫的身体，进入睡眠。</p>\n<p>飞机上，有不少的大爷大妈。不过大爷大妈的嗓门，一点都不显老。😂嗷嗷叫唤的没完。搞得我的两个同事，不得不更换了飞机的座位。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1266-768x1024.jpg\"></p>\n<p>大概夜里12点多，我们开始在北京国际机场T3航班楼降落，下飞机之后，我们来到行李的传送带，等我们取完行李，已经是晚上一点多了。</p>\n<p>我们出了机场，各自也都打车回家了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果一定要说一个比较遗憾的事情，那就是没有去看 泰国秀吧。我这人有时候比较纠结，但是也就是纠结，容易错失一些机会。回来的路上，同事一直绘声绘色的描述秀场的场景，内心多少还是有些期待。但是最终也没有看成。</p>\n<p>不过这次旅行还是很愉快的，泰国的海很蓝，泰国的东西很好吃，泰国的阳光也很棒。如果有机会，期待再一次去泰国！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>天下没有不散的宴席，同样也没有无终止的假期。</p>\n<p>几天的时间飞速而过，我们赶着早上7点的日出，出发去机场，开始返京。</p>\n<h3 id=\"普吉机场\"><a href=\"#普吉机场\" class=\"headerlink\" title=\"普吉机场\"></a>普吉机场</h3><p>和出发一样，我们依旧是需要在吉隆坡转机。我们匆匆来到普吉到的机场，排了很长时间的队伍，办理了行李的托运，然后就进入机场，进行候机。</p>\n<p>由于忍受不了饿肚子，就在机场买了一份汉堡王的套餐。妈耶，估计是我这辈子吃过最贵的汉堡王套餐了。一顿花了我150人民币。我在国内吃7层皇堡才80块钱。😕😕😕</p>\n<p>我们在机场，拿到之前在泰国免税店买的东西。</p>\n<p>在普吉岛的机场，还发生了一个小插曲。</p>\n<p>我帮朋友买了几支唇釉，可是由于买了汉堡，所以在吃汉堡的时候，弄丢了一只唇釉。在快要登机的时候，我决定去柜台问问工作人员，结果一个工作人员问了我的名字，把捡到的唇釉还给我了。要不然200块钱就飞了。😂😂😂</p>\n<p><img src=\"/uploads/2019/09/IMG_6229.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1260-1024x768.jpg\"></p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1255-1024x768.jpg\"></p>\n<p>伴随着前往吉隆坡的飞机的起飞，也标志着这次出行开始结束。</p>\n<h3 id=\"吉隆坡机场\"><a href=\"#吉隆坡机场\" class=\"headerlink\" title=\"吉隆坡机场\"></a>吉隆坡机场</h3><p>到了吉隆坡的机场，依旧是和之前一样，大家说说笑笑，一起逛街，但是内心对这次旅行有点意犹未尽。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1262-1024x768.jpg\"></p>\n<h3 id=\"回京\"><a href=\"#回京\" class=\"headerlink\" title=\"回京\"></a>回京</h3><p>从吉隆坡到北京的飞行时间最长，从下午的五点半，到晚上的一点多，大家到了飞机上，匆匆吃过了飞机餐，就拖着疲惫的身体，进入睡眠。</p>\n<p>飞机上，有不少的大爷大妈。不过大爷大妈的嗓门，一点都不显老。😂嗷嗷叫唤的没完。搞得我的两个同事，不得不更换了飞机的座位。</p>\n<p><img src=\"/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1266-768x1024.jpg\"></p>\n<p>大概夜里12点多，我们开始在北京国际机场T3航班楼降落，下飞机之后，我们来到行李的传送带，等我们取完行李，已经是晚上一点多了。</p>\n<p>我们出了机场，各自也都打车回家了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果一定要说一个比较遗憾的事情，那就是没有去看 泰国秀吧。我这人有时候比较纠结，但是也就是纠结，容易错失一些机会。回来的路上，同事一直绘声绘色的描述秀场的场景，内心多少还是有些期待。但是最终也没有看成。</p>\n<p>不过这次旅行还是很愉快的，泰国的海很蓝，泰国的东西很好吃，泰国的阳光也很棒。如果有机会，期待再一次去泰国！</p>\n"},{"title":"sphinx 生成索引时出现WARNING: attribute ''id'' not found - IGNORING","id":"140","date":"2017-08-24T12:18:45.000Z","_content":"\n#### 公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING: attribute 'id' not found - IGNORING\n<!-- more -->\n我的表结构\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) NOT NULL,\n  `name` varchar(20) DEFAULT NULL,\n  `sex` tinyint(4) DEFAULT NULL,\n  `create_time` int(10) DEFAULT NULL,\n  `update_time` int(10) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=gbk;\n```\n\n部分sphinx配置\n\n```roboconf\nsql_query               = \\\n                SELECT id, name, sex, create_time, update_time FROM user\nsql_attr_uint           = id\nsql_attr_timestamp      = create_time\nsql_attr_timestamp      = update_time\n```\n\n#### 查了一下资料，才知道sphinx会内置一个id 的字段，所以选择索引的时候，就不能设置`sql_attr_uint = id`，要不然就是重复了。但是sql第一列还必须是id字段才行 （听着有点矛盾）\n\n#### 可以有两个思路：\n\n##### 第一种\n\n*   更改表结构，把id->uid\n*   更改配置\n    \n    ```roboconf\n    sql_query               = \\\n                SELECT uid as id, uid, name, sex, create_time, update_time FROM user\n    sql_attr_uint           = uid\n    sql_attr_timestamp      = create_time\n    sql_attr_timestamp      = update_time\n    ```\n    \n\n##### 第二种\n\n*   不改表结构，只更改配置\n    \n    ```roboconf\n    sql_query               = \\\n                SELECT  id, id as uid, name, sex, create_time, update_time FROM user\n    sql_attr_uint           = uid\n    sql_attr_timestamp      = create_time\n    sql_attr_timestamp      = update_time\n    ```\n    \n\n#### 然后再生成索引应该就好了\n\n#### 附上sphinx配置说明\n\n![](/uploads/2017/08/1491118645070.png) ![](/uploads/2017/08/1491118649031.png)","source":"_posts/sphinx-warning.md","raw":"---\ntitle: 'sphinx 生成索引时出现WARNING: attribute ''''id'''' not found - IGNORING'\ntags: []\nid: '140'\ncategories:\n  - - Linux\ndate: 2017-08-24 20:18:45\n---\n\n#### 公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING: attribute 'id' not found - IGNORING\n<!-- more -->\n我的表结构\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) NOT NULL,\n  `name` varchar(20) DEFAULT NULL,\n  `sex` tinyint(4) DEFAULT NULL,\n  `create_time` int(10) DEFAULT NULL,\n  `update_time` int(10) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=gbk;\n```\n\n部分sphinx配置\n\n```roboconf\nsql_query               = \\\n                SELECT id, name, sex, create_time, update_time FROM user\nsql_attr_uint           = id\nsql_attr_timestamp      = create_time\nsql_attr_timestamp      = update_time\n```\n\n#### 查了一下资料，才知道sphinx会内置一个id 的字段，所以选择索引的时候，就不能设置`sql_attr_uint = id`，要不然就是重复了。但是sql第一列还必须是id字段才行 （听着有点矛盾）\n\n#### 可以有两个思路：\n\n##### 第一种\n\n*   更改表结构，把id->uid\n*   更改配置\n    \n    ```roboconf\n    sql_query               = \\\n                SELECT uid as id, uid, name, sex, create_time, update_time FROM user\n    sql_attr_uint           = uid\n    sql_attr_timestamp      = create_time\n    sql_attr_timestamp      = update_time\n    ```\n    \n\n##### 第二种\n\n*   不改表结构，只更改配置\n    \n    ```roboconf\n    sql_query               = \\\n                SELECT  id, id as uid, name, sex, create_time, update_time FROM user\n    sql_attr_uint           = uid\n    sql_attr_timestamp      = create_time\n    sql_attr_timestamp      = update_time\n    ```\n    \n\n#### 然后再生成索引应该就好了\n\n#### 附上sphinx配置说明\n\n![](/uploads/2017/08/1491118645070.png) ![](/uploads/2017/08/1491118649031.png)","slug":"sphinx-warning","published":1,"updated":"2022-03-13T01:13:28.630Z","_id":"cl0oi8mig007v417t2i97ddwe","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING-attribute-‘id’-not-found-IGNORING\"><a href=\"#公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING-attribute-‘id’-not-found-IGNORING\" class=\"headerlink\" title=\"公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING: attribute ‘id’ not found - IGNORING\"></a>公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING: attribute ‘id’ not found - IGNORING</h4><span id=\"more\"></span>\n<p>我的表结构</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `<span class=\"keyword\">user</span>` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `sex` tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `create_time` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_time` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>MyISAM <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>gbk;</span><br></pre></td></tr></table></figure>\n\n<p>部分sphinx配置</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql_query               = \\</span><br><span class=\"line\">                SELECT id, name, sex, create_time, update_time FROM user</span><br><span class=\"line\">sql_attr_uint           = id</span><br><span class=\"line\">sql_attr_timestamp      = create_time</span><br><span class=\"line\">sql_attr_timestamp      = update_time</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查了一下资料，才知道sphinx会内置一个id-的字段，所以选择索引的时候，就不能设置sql-attr-uint-id，要不然就是重复了。但是sql第一列还必须是id字段才行-（听着有点矛盾）\"><a href=\"#查了一下资料，才知道sphinx会内置一个id-的字段，所以选择索引的时候，就不能设置sql-attr-uint-id，要不然就是重复了。但是sql第一列还必须是id字段才行-（听着有点矛盾）\" class=\"headerlink\" title=\"查了一下资料，才知道sphinx会内置一个id 的字段，所以选择索引的时候，就不能设置sql_attr_uint = id，要不然就是重复了。但是sql第一列还必须是id字段才行 （听着有点矛盾）\"></a>查了一下资料，才知道sphinx会内置一个id 的字段，所以选择索引的时候，就不能设置<code>sql_attr_uint = id</code>，要不然就是重复了。但是sql第一列还必须是id字段才行 （听着有点矛盾）</h4><h4 id=\"可以有两个思路：\"><a href=\"#可以有两个思路：\" class=\"headerlink\" title=\"可以有两个思路：\"></a>可以有两个思路：</h4><h5 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h5><ul>\n<li><p>更改表结构，把id-&gt;uid</p>\n</li>\n<li><p>更改配置</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql_query               = \\</span><br><span class=\"line\">            SELECT uid as id, uid, name, sex, create_time, update_time FROM user</span><br><span class=\"line\">sql_attr_uint           = uid</span><br><span class=\"line\">sql_attr_timestamp      = create_time</span><br><span class=\"line\">sql_attr_timestamp      = update_time</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h5><ul>\n<li><p>不改表结构，只更改配置</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql_query               = \\</span><br><span class=\"line\">            SELECT  id, id as uid, name, sex, create_time, update_time FROM user</span><br><span class=\"line\">sql_attr_uint           = uid</span><br><span class=\"line\">sql_attr_timestamp      = create_time</span><br><span class=\"line\">sql_attr_timestamp      = update_time</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"然后再生成索引应该就好了\"><a href=\"#然后再生成索引应该就好了\" class=\"headerlink\" title=\"然后再生成索引应该就好了\"></a>然后再生成索引应该就好了</h4><h4 id=\"附上sphinx配置说明\"><a href=\"#附上sphinx配置说明\" class=\"headerlink\" title=\"附上sphinx配置说明\"></a>附上sphinx配置说明</h4><p><img src=\"/uploads/2017/08/1491118645070.png\"> <img src=\"/uploads/2017/08/1491118649031.png\"></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING-attribute-‘id’-not-found-IGNORING\"><a href=\"#公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING-attribute-‘id’-not-found-IGNORING\" class=\"headerlink\" title=\"公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING: attribute ‘id’ not found - IGNORING\"></a>公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING: attribute ‘id’ not found - IGNORING</h4>","more":"<p>我的表结构</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `<span class=\"keyword\">user</span>` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `sex` tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `create_time` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_time` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>MyISAM <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>gbk;</span><br></pre></td></tr></table></figure>\n\n<p>部分sphinx配置</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql_query               = \\</span><br><span class=\"line\">                SELECT id, name, sex, create_time, update_time FROM user</span><br><span class=\"line\">sql_attr_uint           = id</span><br><span class=\"line\">sql_attr_timestamp      = create_time</span><br><span class=\"line\">sql_attr_timestamp      = update_time</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查了一下资料，才知道sphinx会内置一个id-的字段，所以选择索引的时候，就不能设置sql-attr-uint-id，要不然就是重复了。但是sql第一列还必须是id字段才行-（听着有点矛盾）\"><a href=\"#查了一下资料，才知道sphinx会内置一个id-的字段，所以选择索引的时候，就不能设置sql-attr-uint-id，要不然就是重复了。但是sql第一列还必须是id字段才行-（听着有点矛盾）\" class=\"headerlink\" title=\"查了一下资料，才知道sphinx会内置一个id 的字段，所以选择索引的时候，就不能设置sql_attr_uint = id，要不然就是重复了。但是sql第一列还必须是id字段才行 （听着有点矛盾）\"></a>查了一下资料，才知道sphinx会内置一个id 的字段，所以选择索引的时候，就不能设置<code>sql_attr_uint = id</code>，要不然就是重复了。但是sql第一列还必须是id字段才行 （听着有点矛盾）</h4><h4 id=\"可以有两个思路：\"><a href=\"#可以有两个思路：\" class=\"headerlink\" title=\"可以有两个思路：\"></a>可以有两个思路：</h4><h5 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h5><ul>\n<li><p>更改表结构，把id-&gt;uid</p>\n</li>\n<li><p>更改配置</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql_query               = \\</span><br><span class=\"line\">            SELECT uid as id, uid, name, sex, create_time, update_time FROM user</span><br><span class=\"line\">sql_attr_uint           = uid</span><br><span class=\"line\">sql_attr_timestamp      = create_time</span><br><span class=\"line\">sql_attr_timestamp      = update_time</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h5><ul>\n<li><p>不改表结构，只更改配置</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql_query               = \\</span><br><span class=\"line\">            SELECT  id, id as uid, name, sex, create_time, update_time FROM user</span><br><span class=\"line\">sql_attr_uint           = uid</span><br><span class=\"line\">sql_attr_timestamp      = create_time</span><br><span class=\"line\">sql_attr_timestamp      = update_time</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"然后再生成索引应该就好了\"><a href=\"#然后再生成索引应该就好了\" class=\"headerlink\" title=\"然后再生成索引应该就好了\"></a>然后再生成索引应该就好了</h4><h4 id=\"附上sphinx配置说明\"><a href=\"#附上sphinx配置说明\" class=\"headerlink\" title=\"附上sphinx配置说明\"></a>附上sphinx配置说明</h4><p><img src=\"/uploads/2017/08/1491118645070.png\"> <img src=\"/uploads/2017/08/1491118649031.png\"></p>"},{"title":"阿里大牛：你必须具备的“结构化思维”","id":"595","date":"2019-09-26T13:53:49.000Z","_content":"\n> 在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。\n\n这种思维混乱是典型的缺少结构化思维的表现。结构化思维非常重要，不仅仅体现在表达上，也体现在在我们分析问题的过程中。具备结构化思维，才能将问题分析地更全面、更深刻。\n\n### 什么是结构化思维？\n\n那么到底是什么是结构化思维呢？简单来说，结构化思维的定义就是：逻辑+套路。\n\n#### 表达要有逻辑\n\n所谓逻辑是指我们的结构之间必须是有逻辑关系的。例如，你说话的时候用“第一、第二、第三”这个逻辑顺序是合理的，但是，用“第一，第二，第四”就会显得很奇怪。\n\n当然，即使你用了”一、二、三”，也不一定就意味着你的内容有逻辑关系。\n\n想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系：\n\n*   **演绎（因果）顺序：** “大前提、小前提、结论”的演绎推理方式就是演绎顺序。比如，经典三段论：所有人都要死，苏格拉底是人，苏格拉底要死。\n*   **时间（步骤）顺序：** “第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。\n*   **空间（结构）顺序：** “前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零（将整体分解为部分）等都是空间顺序。\n*   **程度（重要性）顺序：** 比如“最重要、次重要、不重要”等。\n\n实际上，所有的逻辑关系都在这四种顺序之内。只要我们的思想和表达在这四种逻辑顺序之内，就是有逻辑的，否则就会显得没有逻辑性。\n\n### 做事要有套路\n\n套路是指我们解决问题的方法论，这个也非常重要。比如，5W2H 分析法就是一个非常好的，可以帮助我们分析问题的一个”套路”。\n\n试想一下，面对任何一个问题，你都能从 **Why、Who、When、Where、What、How** 和 **How much**（如下图所示），七个方面去思考。\n\n是不是比不知道这个方法论的人，用点状的思考，5W2H 分析法就全面得多。\n\n![](/uploads/2019/09/06691048e53ebb9c969c2a49e73dde5d.jpg)\n\n例如，我们在对问题域进行分析和领域知识提炼的时候，就可以用上 5W2H。\n\n5W2H 模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。\n\n这就好比两位侃侃而谈的交谈者，因为有了确定的主题与话题边界，一场本来是漫无目的野鹤闲云似的闲聊就变成了一次深度交流的专题高端对话。\n\n![](/uploads/2019/09/2ea1c795428ce9ffefb757679d3643ca-1024x839.jpg)\n\n逻辑是一种能力，而套路是方法论，是经验。逻辑是道的东西，而方法论是术的东西。二者都很重要，只有熟练的掌握二者我们才能更好的进行结构化思考。\n\n### 如何进行结构化思考？\n\n逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考呢？这也是有方法论的，总的来说是有两个步骤，首先是“建立中心”，然后再进行“分解”。\n\n#### 建立中心\n\n**建立中心也就是要定义清楚要解决的问题，要明确目标。**这是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚 Why，然后再进行 How。\n\n建立中心有两种方式\n\n*   **自上而下：** _适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可_。\n*   **自下而上：** _对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。_\n\n建立中心通常不会是一次成型的，随着对问题理解的变化，对中心的抽象也会进行相应的调整。\n\n不同的抽象层次其面对的问题宽度是不一样的。具体要用哪个层次的抽象作为“中心”，要视具体情况而定。\n\n比如面对“系统 Bug 多”的问题，向上抽象是“提升代码质量”，向下抽象是“加强测试”，都可以作为中心，选择哪个为中心取决于你当前要解决的问题是什么。\n\n![](/uploads/2019/09/6775a06332398a970ead38fbf686ed1c.jpg)\n\n#### 结构化分解\n\n确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。\n\n分解的策略就是我们上文提到的四种逻辑顺序，即演绎顺序、时间顺序、空间顺序和程度顺序。\n\n在做空间分解的时候，要注意满足 MECE（Mutually Exclusive Collectively Exhaustive，相互独立，完全穷尽）原则。\n\n比如我们要对衣服进行分类，如果按照季节和风格进行分类，就会出现互相重叠，并且不能穷尽的情况，也就不满足 MECE。这种分类是逻辑混乱的。\n\n![](/uploads/2019/09/56d42db36fa7bfef3170fa9a35c94942.jpg)\n\n我们可以按季节分：春秋装，冬装，夏装。除了这三类之外，没有其他季节了，这个就是「不遗漏」。\n\n![](/uploads/2019/09/c3404ee1406c86e1a62ec34ca02c6c21.jpg)\n\n### 结构化思维应用\n\n#### 如何落地新团队\n\n想象这样一个场景，你刚刚入职一家新公司，或者转岗到一个新团队，作为一个技术人，你将如何落地开展你的工作呢？\n\n这里，我们就能用上结构化思维来帮我们理清思路，从而有条不紊的开展工作了。\n\n我们要知道对一个企业来说，核心要素无外乎就是业务、技术和人，也就是说这三个要素是我们要建立的中心。\n\n基于这个中心，我们可以进行进一步拆解，形成子结构。然后对子结构再进行分析找到应对策略。\n\n这样一步步递进，我们就已经在用结构化思维解决如何落地新团队的问题了。\n\n![](/uploads/2019/09/70f76f02c0b1db1184a24587759ebd55-1024x486.jpg)\n\n①熟悉业务\n\n了解产品：任何一个团队都有自己要负责的产品，申请一个测试账号去用一下产品，是熟悉产品比较好的方式。\n\n了解流程：任何业务都有自己的业务流程，而业务流里面最核心的是信息流。我们可以通过人员采访，了解关键节点的信息输入和信息输出；可以画一些泳道活动图，理清楚系统的主要角色，以及他们之间的交互关系。\n\n客户走访：通过走访客户，我们可以更加获得业务的第一手资料，更加贴近业务和客户诉求。\n\n②熟悉技术\n\n了解系统架构：可以让团队的技术人员介绍下他们当初系统设计和架构的思路。\n\n了解领域模型：查看关键的核心表结构和系统 API，这样可以快速了解系统的领域模型。\n\n了解代码结构：下载系统工程，熟悉整个工程结构和模块职责。以一个重要的流程为入手点，阅读代码，看清楚核心的执行逻辑。做一个小需求，掌握相关的流程和权限。\n\n③熟悉人\n\n了解组织结构：查看公司的组织树，知道公司大概是如何运作的，以及哪些是KP（Key Person，关键人）。\n\n比如，一个典型的电商公司会包括产品部、运营部、销售部、技术部、人力资源部、财务部、法务部等。\n\n了解人员角色：了解公司都有哪些岗位，以及各岗位的职责范围。\n\n拜山头：找到和自己工作息息相关的岗位人员，比如产品和运营。积极和他们沟通，向他们请教业务问题，多多交流。\n\n这样一方面可以建立更好的人际关系，另一方面也可以更快地熟悉业务。\n\n#### 打造极客文化\n\n我最近刚刚转岗到新部门，新部门的老板抛给我一个命题：如何帮助技术团队打造极客文化？\n\n这个问题的中心很明确，接下来，看看我是如何使用结构化思维来解这个问题的。\n\n首先我们从空间顺序进行分解，也就是打造极客文化，我们可以去做哪些事情。\n\n![](/uploads/2019/09/9620f5c9626eb14d0f74bfe4f8cd3dfa-1024x223.jpg)\n\n确定完要做的事情，我们还可以按照时间顺序对如何落地这些事情进行分解。\n\n![](/uploads/2019/09/b57a58a76b9064183907a60d8e5cc4c2-1024x113.jpg)\n\n这样把按照这两个维度进行结构化拆解的方案给到老板，老板就会很清晰地知道你的规划和落地策略了。\n\n#### 如何做晋升述职\n\n在阿里巴巴已经做了好几年的晋升评委，发现很多同学都缺乏结构化思维，冗长的 PPT 里，却不能把价值说清楚，不能把推导过程说清楚。实际上，我们需要有一些方法论来指导我们进行关键述职。\n\n接下来，我主要说一下述职中存在的两个典型问题：“罗列事情”和“价值的背后”。\n\n①罗列事情\n\n对自己做过的事情进行简单罗列，也许你的确做了不少事情。但是不能体现你对问题思考的深度和做这个事情带来的价值。\n\n这样的述职很难打动评委，更结构化的表达应该是：“提出问题，定义问题，分析问题，解决问题，最后是展望未来”。\n\n这是一个经典的表述问题的结构，也是麦肯锡推荐的问题解决的框架。\n\n![](/uploads/2019/09/c5c697abb46b77ada71f04d57b73e550.jpg)\n\n类似的框架还有 Zoom in/Zoom out。 我们说事情时，应该像电影镜头一样，先从远拉近，再由近拉远。\n\nZoom in 是先从宏观背景开始，首先让大家知道你的事情发生的背景，为什么这事重要？然后讲到具体细节，怎么做成的？解决了什么问题？背后的思考是什么？\n\n最后 Zoom out，再从细节调回到整体，结果是什么，带来的客户价值是什么，你对未来的思考是什么。\n\n②价值的背后\n\n把价值说清楚的确很重要，正所谓：路走对了，就不怕远。如果你连价值都不明确，后面做的再多也是白搭。但是，仅仅阐述价值也是不够的，会让人觉得你有邀功之嫌。\n\n比如你说：“我主导研发的风控系统把公司的坏账率从 5% 降低到 2%”。这样的表述是不够的，你还需要把价值背后的过程和思考说清楚。\n\n对于这个结果，评委可能会问： 之前为什么那么高？ 为什么你的方法可以降低？是如何归因的？ 具体解决了什么问题？ 是否可以总结出一套办法，以后别人也能用这个办法解决这些问题？\n\n如果你在评委提问之前，就能对这些问题进行深入思考和适当呈现。那么你就是既有结果又有过程了。\n\n通过这些案例，我们可以看到具备结构化思维，可以帮助我们快速的理清处理问题的思路，提升工作效率。\n\n经常锻炼结构化思维，可以极大的提升我们职场竞争力，让工作有条不紊，事半功倍。\n\n### 出处\n\n转载自微信公众号：从码农到工匠（ID：craftsman\\_frank）\n\n本文连接：[http://feilong.tech/2019/09/26/structured-thinking/](http://feilong.tech/2019/09/26/structured-thinking/)","source":"_posts/structured-thinking.md","raw":"---\ntitle: 阿里大牛：你必须具备的“结构化思维”\ntags:\n  - 程序员\n  - 自我表达\nid: '595'\ncategories:\n  - - 自我反思\ndate: 2019-09-26 21:53:49\n---\n\n> 在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。\n\n这种思维混乱是典型的缺少结构化思维的表现。结构化思维非常重要，不仅仅体现在表达上，也体现在在我们分析问题的过程中。具备结构化思维，才能将问题分析地更全面、更深刻。\n\n### 什么是结构化思维？\n\n那么到底是什么是结构化思维呢？简单来说，结构化思维的定义就是：逻辑+套路。\n\n#### 表达要有逻辑\n\n所谓逻辑是指我们的结构之间必须是有逻辑关系的。例如，你说话的时候用“第一、第二、第三”这个逻辑顺序是合理的，但是，用“第一，第二，第四”就会显得很奇怪。\n\n当然，即使你用了”一、二、三”，也不一定就意味着你的内容有逻辑关系。\n\n想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系：\n\n*   **演绎（因果）顺序：** “大前提、小前提、结论”的演绎推理方式就是演绎顺序。比如，经典三段论：所有人都要死，苏格拉底是人，苏格拉底要死。\n*   **时间（步骤）顺序：** “第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。\n*   **空间（结构）顺序：** “前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零（将整体分解为部分）等都是空间顺序。\n*   **程度（重要性）顺序：** 比如“最重要、次重要、不重要”等。\n\n实际上，所有的逻辑关系都在这四种顺序之内。只要我们的思想和表达在这四种逻辑顺序之内，就是有逻辑的，否则就会显得没有逻辑性。\n\n### 做事要有套路\n\n套路是指我们解决问题的方法论，这个也非常重要。比如，5W2H 分析法就是一个非常好的，可以帮助我们分析问题的一个”套路”。\n\n试想一下，面对任何一个问题，你都能从 **Why、Who、When、Where、What、How** 和 **How much**（如下图所示），七个方面去思考。\n\n是不是比不知道这个方法论的人，用点状的思考，5W2H 分析法就全面得多。\n\n![](/uploads/2019/09/06691048e53ebb9c969c2a49e73dde5d.jpg)\n\n例如，我们在对问题域进行分析和领域知识提炼的时候，就可以用上 5W2H。\n\n5W2H 模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。\n\n这就好比两位侃侃而谈的交谈者，因为有了确定的主题与话题边界，一场本来是漫无目的野鹤闲云似的闲聊就变成了一次深度交流的专题高端对话。\n\n![](/uploads/2019/09/2ea1c795428ce9ffefb757679d3643ca-1024x839.jpg)\n\n逻辑是一种能力，而套路是方法论，是经验。逻辑是道的东西，而方法论是术的东西。二者都很重要，只有熟练的掌握二者我们才能更好的进行结构化思考。\n\n### 如何进行结构化思考？\n\n逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考呢？这也是有方法论的，总的来说是有两个步骤，首先是“建立中心”，然后再进行“分解”。\n\n#### 建立中心\n\n**建立中心也就是要定义清楚要解决的问题，要明确目标。**这是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚 Why，然后再进行 How。\n\n建立中心有两种方式\n\n*   **自上而下：** _适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可_。\n*   **自下而上：** _对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。_\n\n建立中心通常不会是一次成型的，随着对问题理解的变化，对中心的抽象也会进行相应的调整。\n\n不同的抽象层次其面对的问题宽度是不一样的。具体要用哪个层次的抽象作为“中心”，要视具体情况而定。\n\n比如面对“系统 Bug 多”的问题，向上抽象是“提升代码质量”，向下抽象是“加强测试”，都可以作为中心，选择哪个为中心取决于你当前要解决的问题是什么。\n\n![](/uploads/2019/09/6775a06332398a970ead38fbf686ed1c.jpg)\n\n#### 结构化分解\n\n确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。\n\n分解的策略就是我们上文提到的四种逻辑顺序，即演绎顺序、时间顺序、空间顺序和程度顺序。\n\n在做空间分解的时候，要注意满足 MECE（Mutually Exclusive Collectively Exhaustive，相互独立，完全穷尽）原则。\n\n比如我们要对衣服进行分类，如果按照季节和风格进行分类，就会出现互相重叠，并且不能穷尽的情况，也就不满足 MECE。这种分类是逻辑混乱的。\n\n![](/uploads/2019/09/56d42db36fa7bfef3170fa9a35c94942.jpg)\n\n我们可以按季节分：春秋装，冬装，夏装。除了这三类之外，没有其他季节了，这个就是「不遗漏」。\n\n![](/uploads/2019/09/c3404ee1406c86e1a62ec34ca02c6c21.jpg)\n\n### 结构化思维应用\n\n#### 如何落地新团队\n\n想象这样一个场景，你刚刚入职一家新公司，或者转岗到一个新团队，作为一个技术人，你将如何落地开展你的工作呢？\n\n这里，我们就能用上结构化思维来帮我们理清思路，从而有条不紊的开展工作了。\n\n我们要知道对一个企业来说，核心要素无外乎就是业务、技术和人，也就是说这三个要素是我们要建立的中心。\n\n基于这个中心，我们可以进行进一步拆解，形成子结构。然后对子结构再进行分析找到应对策略。\n\n这样一步步递进，我们就已经在用结构化思维解决如何落地新团队的问题了。\n\n![](/uploads/2019/09/70f76f02c0b1db1184a24587759ebd55-1024x486.jpg)\n\n①熟悉业务\n\n了解产品：任何一个团队都有自己要负责的产品，申请一个测试账号去用一下产品，是熟悉产品比较好的方式。\n\n了解流程：任何业务都有自己的业务流程，而业务流里面最核心的是信息流。我们可以通过人员采访，了解关键节点的信息输入和信息输出；可以画一些泳道活动图，理清楚系统的主要角色，以及他们之间的交互关系。\n\n客户走访：通过走访客户，我们可以更加获得业务的第一手资料，更加贴近业务和客户诉求。\n\n②熟悉技术\n\n了解系统架构：可以让团队的技术人员介绍下他们当初系统设计和架构的思路。\n\n了解领域模型：查看关键的核心表结构和系统 API，这样可以快速了解系统的领域模型。\n\n了解代码结构：下载系统工程，熟悉整个工程结构和模块职责。以一个重要的流程为入手点，阅读代码，看清楚核心的执行逻辑。做一个小需求，掌握相关的流程和权限。\n\n③熟悉人\n\n了解组织结构：查看公司的组织树，知道公司大概是如何运作的，以及哪些是KP（Key Person，关键人）。\n\n比如，一个典型的电商公司会包括产品部、运营部、销售部、技术部、人力资源部、财务部、法务部等。\n\n了解人员角色：了解公司都有哪些岗位，以及各岗位的职责范围。\n\n拜山头：找到和自己工作息息相关的岗位人员，比如产品和运营。积极和他们沟通，向他们请教业务问题，多多交流。\n\n这样一方面可以建立更好的人际关系，另一方面也可以更快地熟悉业务。\n\n#### 打造极客文化\n\n我最近刚刚转岗到新部门，新部门的老板抛给我一个命题：如何帮助技术团队打造极客文化？\n\n这个问题的中心很明确，接下来，看看我是如何使用结构化思维来解这个问题的。\n\n首先我们从空间顺序进行分解，也就是打造极客文化，我们可以去做哪些事情。\n\n![](/uploads/2019/09/9620f5c9626eb14d0f74bfe4f8cd3dfa-1024x223.jpg)\n\n确定完要做的事情，我们还可以按照时间顺序对如何落地这些事情进行分解。\n\n![](/uploads/2019/09/b57a58a76b9064183907a60d8e5cc4c2-1024x113.jpg)\n\n这样把按照这两个维度进行结构化拆解的方案给到老板，老板就会很清晰地知道你的规划和落地策略了。\n\n#### 如何做晋升述职\n\n在阿里巴巴已经做了好几年的晋升评委，发现很多同学都缺乏结构化思维，冗长的 PPT 里，却不能把价值说清楚，不能把推导过程说清楚。实际上，我们需要有一些方法论来指导我们进行关键述职。\n\n接下来，我主要说一下述职中存在的两个典型问题：“罗列事情”和“价值的背后”。\n\n①罗列事情\n\n对自己做过的事情进行简单罗列，也许你的确做了不少事情。但是不能体现你对问题思考的深度和做这个事情带来的价值。\n\n这样的述职很难打动评委，更结构化的表达应该是：“提出问题，定义问题，分析问题，解决问题，最后是展望未来”。\n\n这是一个经典的表述问题的结构，也是麦肯锡推荐的问题解决的框架。\n\n![](/uploads/2019/09/c5c697abb46b77ada71f04d57b73e550.jpg)\n\n类似的框架还有 Zoom in/Zoom out。 我们说事情时，应该像电影镜头一样，先从远拉近，再由近拉远。\n\nZoom in 是先从宏观背景开始，首先让大家知道你的事情发生的背景，为什么这事重要？然后讲到具体细节，怎么做成的？解决了什么问题？背后的思考是什么？\n\n最后 Zoom out，再从细节调回到整体，结果是什么，带来的客户价值是什么，你对未来的思考是什么。\n\n②价值的背后\n\n把价值说清楚的确很重要，正所谓：路走对了，就不怕远。如果你连价值都不明确，后面做的再多也是白搭。但是，仅仅阐述价值也是不够的，会让人觉得你有邀功之嫌。\n\n比如你说：“我主导研发的风控系统把公司的坏账率从 5% 降低到 2%”。这样的表述是不够的，你还需要把价值背后的过程和思考说清楚。\n\n对于这个结果，评委可能会问： 之前为什么那么高？ 为什么你的方法可以降低？是如何归因的？ 具体解决了什么问题？ 是否可以总结出一套办法，以后别人也能用这个办法解决这些问题？\n\n如果你在评委提问之前，就能对这些问题进行深入思考和适当呈现。那么你就是既有结果又有过程了。\n\n通过这些案例，我们可以看到具备结构化思维，可以帮助我们快速的理清处理问题的思路，提升工作效率。\n\n经常锻炼结构化思维，可以极大的提升我们职场竞争力，让工作有条不紊，事半功倍。\n\n### 出处\n\n转载自微信公众号：从码农到工匠（ID：craftsman\\_frank）\n\n本文连接：[http://feilong.tech/2019/09/26/structured-thinking/](http://feilong.tech/2019/09/26/structured-thinking/)","slug":"structured-thinking","published":1,"updated":"2022-03-13T01:17:12.611Z","_id":"cl0oi8mih007y417t1ecxetx0","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。</p>\n</blockquote>\n<p>这种思维混乱是典型的缺少结构化思维的表现。结构化思维非常重要，不仅仅体现在表达上，也体现在在我们分析问题的过程中。具备结构化思维，才能将问题分析地更全面、更深刻。</p>\n<h3 id=\"什么是结构化思维？\"><a href=\"#什么是结构化思维？\" class=\"headerlink\" title=\"什么是结构化思维？\"></a>什么是结构化思维？</h3><p>那么到底是什么是结构化思维呢？简单来说，结构化思维的定义就是：逻辑+套路。</p>\n<h4 id=\"表达要有逻辑\"><a href=\"#表达要有逻辑\" class=\"headerlink\" title=\"表达要有逻辑\"></a>表达要有逻辑</h4><p>所谓逻辑是指我们的结构之间必须是有逻辑关系的。例如，你说话的时候用“第一、第二、第三”这个逻辑顺序是合理的，但是，用“第一，第二，第四”就会显得很奇怪。</p>\n<p>当然，即使你用了”一、二、三”，也不一定就意味着你的内容有逻辑关系。</p>\n<p>想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系：</p>\n<ul>\n<li><strong>演绎（因果）顺序：</strong> “大前提、小前提、结论”的演绎推理方式就是演绎顺序。比如，经典三段论：所有人都要死，苏格拉底是人，苏格拉底要死。</li>\n<li><strong>时间（步骤）顺序：</strong> “第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。</li>\n<li><strong>空间（结构）顺序：</strong> “前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零（将整体分解为部分）等都是空间顺序。</li>\n<li><strong>程度（重要性）顺序：</strong> 比如“最重要、次重要、不重要”等。</li>\n</ul>\n<p>实际上，所有的逻辑关系都在这四种顺序之内。只要我们的思想和表达在这四种逻辑顺序之内，就是有逻辑的，否则就会显得没有逻辑性。</p>\n<h3 id=\"做事要有套路\"><a href=\"#做事要有套路\" class=\"headerlink\" title=\"做事要有套路\"></a>做事要有套路</h3><p>套路是指我们解决问题的方法论，这个也非常重要。比如，5W2H 分析法就是一个非常好的，可以帮助我们分析问题的一个”套路”。</p>\n<p>试想一下，面对任何一个问题，你都能从 <strong>Why、Who、When、Where、What、How</strong> 和 <strong>How much</strong>（如下图所示），七个方面去思考。</p>\n<p>是不是比不知道这个方法论的人，用点状的思考，5W2H 分析法就全面得多。</p>\n<p><img src=\"/uploads/2019/09/06691048e53ebb9c969c2a49e73dde5d.jpg\"></p>\n<p>例如，我们在对问题域进行分析和领域知识提炼的时候，就可以用上 5W2H。</p>\n<p>5W2H 模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。</p>\n<p>这就好比两位侃侃而谈的交谈者，因为有了确定的主题与话题边界，一场本来是漫无目的野鹤闲云似的闲聊就变成了一次深度交流的专题高端对话。</p>\n<p><img src=\"/uploads/2019/09/2ea1c795428ce9ffefb757679d3643ca-1024x839.jpg\"></p>\n<p>逻辑是一种能力，而套路是方法论，是经验。逻辑是道的东西，而方法论是术的东西。二者都很重要，只有熟练的掌握二者我们才能更好的进行结构化思考。</p>\n<h3 id=\"如何进行结构化思考？\"><a href=\"#如何进行结构化思考？\" class=\"headerlink\" title=\"如何进行结构化思考？\"></a>如何进行结构化思考？</h3><p>逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考呢？这也是有方法论的，总的来说是有两个步骤，首先是“建立中心”，然后再进行“分解”。</p>\n<h4 id=\"建立中心\"><a href=\"#建立中心\" class=\"headerlink\" title=\"建立中心\"></a>建立中心</h4><p><strong>建立中心也就是要定义清楚要解决的问题，要明确目标。</strong>这是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚 Why，然后再进行 How。</p>\n<p>建立中心有两种方式</p>\n<ul>\n<li><strong>自上而下：</strong> _适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可_。</li>\n<li><strong>自下而上：</strong> <em>对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。</em></li>\n</ul>\n<p>建立中心通常不会是一次成型的，随着对问题理解的变化，对中心的抽象也会进行相应的调整。</p>\n<p>不同的抽象层次其面对的问题宽度是不一样的。具体要用哪个层次的抽象作为“中心”，要视具体情况而定。</p>\n<p>比如面对“系统 Bug 多”的问题，向上抽象是“提升代码质量”，向下抽象是“加强测试”，都可以作为中心，选择哪个为中心取决于你当前要解决的问题是什么。</p>\n<p><img src=\"/uploads/2019/09/6775a06332398a970ead38fbf686ed1c.jpg\"></p>\n<h4 id=\"结构化分解\"><a href=\"#结构化分解\" class=\"headerlink\" title=\"结构化分解\"></a>结构化分解</h4><p>确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。</p>\n<p>分解的策略就是我们上文提到的四种逻辑顺序，即演绎顺序、时间顺序、空间顺序和程度顺序。</p>\n<p>在做空间分解的时候，要注意满足 MECE（Mutually Exclusive Collectively Exhaustive，相互独立，完全穷尽）原则。</p>\n<p>比如我们要对衣服进行分类，如果按照季节和风格进行分类，就会出现互相重叠，并且不能穷尽的情况，也就不满足 MECE。这种分类是逻辑混乱的。</p>\n<p><img src=\"/uploads/2019/09/56d42db36fa7bfef3170fa9a35c94942.jpg\"></p>\n<p>我们可以按季节分：春秋装，冬装，夏装。除了这三类之外，没有其他季节了，这个就是「不遗漏」。</p>\n<p><img src=\"/uploads/2019/09/c3404ee1406c86e1a62ec34ca02c6c21.jpg\"></p>\n<h3 id=\"结构化思维应用\"><a href=\"#结构化思维应用\" class=\"headerlink\" title=\"结构化思维应用\"></a>结构化思维应用</h3><h4 id=\"如何落地新团队\"><a href=\"#如何落地新团队\" class=\"headerlink\" title=\"如何落地新团队\"></a>如何落地新团队</h4><p>想象这样一个场景，你刚刚入职一家新公司，或者转岗到一个新团队，作为一个技术人，你将如何落地开展你的工作呢？</p>\n<p>这里，我们就能用上结构化思维来帮我们理清思路，从而有条不紊的开展工作了。</p>\n<p>我们要知道对一个企业来说，核心要素无外乎就是业务、技术和人，也就是说这三个要素是我们要建立的中心。</p>\n<p>基于这个中心，我们可以进行进一步拆解，形成子结构。然后对子结构再进行分析找到应对策略。</p>\n<p>这样一步步递进，我们就已经在用结构化思维解决如何落地新团队的问题了。</p>\n<p><img src=\"/uploads/2019/09/70f76f02c0b1db1184a24587759ebd55-1024x486.jpg\"></p>\n<p>①熟悉业务</p>\n<p>了解产品：任何一个团队都有自己要负责的产品，申请一个测试账号去用一下产品，是熟悉产品比较好的方式。</p>\n<p>了解流程：任何业务都有自己的业务流程，而业务流里面最核心的是信息流。我们可以通过人员采访，了解关键节点的信息输入和信息输出；可以画一些泳道活动图，理清楚系统的主要角色，以及他们之间的交互关系。</p>\n<p>客户走访：通过走访客户，我们可以更加获得业务的第一手资料，更加贴近业务和客户诉求。</p>\n<p>②熟悉技术</p>\n<p>了解系统架构：可以让团队的技术人员介绍下他们当初系统设计和架构的思路。</p>\n<p>了解领域模型：查看关键的核心表结构和系统 API，这样可以快速了解系统的领域模型。</p>\n<p>了解代码结构：下载系统工程，熟悉整个工程结构和模块职责。以一个重要的流程为入手点，阅读代码，看清楚核心的执行逻辑。做一个小需求，掌握相关的流程和权限。</p>\n<p>③熟悉人</p>\n<p>了解组织结构：查看公司的组织树，知道公司大概是如何运作的，以及哪些是KP（Key Person，关键人）。</p>\n<p>比如，一个典型的电商公司会包括产品部、运营部、销售部、技术部、人力资源部、财务部、法务部等。</p>\n<p>了解人员角色：了解公司都有哪些岗位，以及各岗位的职责范围。</p>\n<p>拜山头：找到和自己工作息息相关的岗位人员，比如产品和运营。积极和他们沟通，向他们请教业务问题，多多交流。</p>\n<p>这样一方面可以建立更好的人际关系，另一方面也可以更快地熟悉业务。</p>\n<h4 id=\"打造极客文化\"><a href=\"#打造极客文化\" class=\"headerlink\" title=\"打造极客文化\"></a>打造极客文化</h4><p>我最近刚刚转岗到新部门，新部门的老板抛给我一个命题：如何帮助技术团队打造极客文化？</p>\n<p>这个问题的中心很明确，接下来，看看我是如何使用结构化思维来解这个问题的。</p>\n<p>首先我们从空间顺序进行分解，也就是打造极客文化，我们可以去做哪些事情。</p>\n<p><img src=\"/uploads/2019/09/9620f5c9626eb14d0f74bfe4f8cd3dfa-1024x223.jpg\"></p>\n<p>确定完要做的事情，我们还可以按照时间顺序对如何落地这些事情进行分解。</p>\n<p><img src=\"/uploads/2019/09/b57a58a76b9064183907a60d8e5cc4c2-1024x113.jpg\"></p>\n<p>这样把按照这两个维度进行结构化拆解的方案给到老板，老板就会很清晰地知道你的规划和落地策略了。</p>\n<h4 id=\"如何做晋升述职\"><a href=\"#如何做晋升述职\" class=\"headerlink\" title=\"如何做晋升述职\"></a>如何做晋升述职</h4><p>在阿里巴巴已经做了好几年的晋升评委，发现很多同学都缺乏结构化思维，冗长的 PPT 里，却不能把价值说清楚，不能把推导过程说清楚。实际上，我们需要有一些方法论来指导我们进行关键述职。</p>\n<p>接下来，我主要说一下述职中存在的两个典型问题：“罗列事情”和“价值的背后”。</p>\n<p>①罗列事情</p>\n<p>对自己做过的事情进行简单罗列，也许你的确做了不少事情。但是不能体现你对问题思考的深度和做这个事情带来的价值。</p>\n<p>这样的述职很难打动评委，更结构化的表达应该是：“提出问题，定义问题，分析问题，解决问题，最后是展望未来”。</p>\n<p>这是一个经典的表述问题的结构，也是麦肯锡推荐的问题解决的框架。</p>\n<p><img src=\"/uploads/2019/09/c5c697abb46b77ada71f04d57b73e550.jpg\"></p>\n<p>类似的框架还有 Zoom in&#x2F;Zoom out。 我们说事情时，应该像电影镜头一样，先从远拉近，再由近拉远。</p>\n<p>Zoom in 是先从宏观背景开始，首先让大家知道你的事情发生的背景，为什么这事重要？然后讲到具体细节，怎么做成的？解决了什么问题？背后的思考是什么？</p>\n<p>最后 Zoom out，再从细节调回到整体，结果是什么，带来的客户价值是什么，你对未来的思考是什么。</p>\n<p>②价值的背后</p>\n<p>把价值说清楚的确很重要，正所谓：路走对了，就不怕远。如果你连价值都不明确，后面做的再多也是白搭。但是，仅仅阐述价值也是不够的，会让人觉得你有邀功之嫌。</p>\n<p>比如你说：“我主导研发的风控系统把公司的坏账率从 5% 降低到 2%”。这样的表述是不够的，你还需要把价值背后的过程和思考说清楚。</p>\n<p>对于这个结果，评委可能会问： 之前为什么那么高？ 为什么你的方法可以降低？是如何归因的？ 具体解决了什么问题？ 是否可以总结出一套办法，以后别人也能用这个办法解决这些问题？</p>\n<p>如果你在评委提问之前，就能对这些问题进行深入思考和适当呈现。那么你就是既有结果又有过程了。</p>\n<p>通过这些案例，我们可以看到具备结构化思维，可以帮助我们快速的理清处理问题的思路，提升工作效率。</p>\n<p>经常锻炼结构化思维，可以极大的提升我们职场竞争力，让工作有条不紊，事半功倍。</p>\n<h3 id=\"出处\"><a href=\"#出处\" class=\"headerlink\" title=\"出处\"></a>出处</h3><p>转载自微信公众号：从码农到工匠（ID：craftsman_frank）</p>\n<p>本文连接：<a href=\"http://feilong.tech/2019/09/26/structured-thinking/\">http://feilong.tech/2019/09/26/structured-thinking/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。</p>\n</blockquote>\n<p>这种思维混乱是典型的缺少结构化思维的表现。结构化思维非常重要，不仅仅体现在表达上，也体现在在我们分析问题的过程中。具备结构化思维，才能将问题分析地更全面、更深刻。</p>\n<h3 id=\"什么是结构化思维？\"><a href=\"#什么是结构化思维？\" class=\"headerlink\" title=\"什么是结构化思维？\"></a>什么是结构化思维？</h3><p>那么到底是什么是结构化思维呢？简单来说，结构化思维的定义就是：逻辑+套路。</p>\n<h4 id=\"表达要有逻辑\"><a href=\"#表达要有逻辑\" class=\"headerlink\" title=\"表达要有逻辑\"></a>表达要有逻辑</h4><p>所谓逻辑是指我们的结构之间必须是有逻辑关系的。例如，你说话的时候用“第一、第二、第三”这个逻辑顺序是合理的，但是，用“第一，第二，第四”就会显得很奇怪。</p>\n<p>当然，即使你用了”一、二、三”，也不一定就意味着你的内容有逻辑关系。</p>\n<p>想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系：</p>\n<ul>\n<li><strong>演绎（因果）顺序：</strong> “大前提、小前提、结论”的演绎推理方式就是演绎顺序。比如，经典三段论：所有人都要死，苏格拉底是人，苏格拉底要死。</li>\n<li><strong>时间（步骤）顺序：</strong> “第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。</li>\n<li><strong>空间（结构）顺序：</strong> “前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零（将整体分解为部分）等都是空间顺序。</li>\n<li><strong>程度（重要性）顺序：</strong> 比如“最重要、次重要、不重要”等。</li>\n</ul>\n<p>实际上，所有的逻辑关系都在这四种顺序之内。只要我们的思想和表达在这四种逻辑顺序之内，就是有逻辑的，否则就会显得没有逻辑性。</p>\n<h3 id=\"做事要有套路\"><a href=\"#做事要有套路\" class=\"headerlink\" title=\"做事要有套路\"></a>做事要有套路</h3><p>套路是指我们解决问题的方法论，这个也非常重要。比如，5W2H 分析法就是一个非常好的，可以帮助我们分析问题的一个”套路”。</p>\n<p>试想一下，面对任何一个问题，你都能从 <strong>Why、Who、When、Where、What、How</strong> 和 <strong>How much</strong>（如下图所示），七个方面去思考。</p>\n<p>是不是比不知道这个方法论的人，用点状的思考，5W2H 分析法就全面得多。</p>\n<p><img src=\"/uploads/2019/09/06691048e53ebb9c969c2a49e73dde5d.jpg\"></p>\n<p>例如，我们在对问题域进行分析和领域知识提炼的时候，就可以用上 5W2H。</p>\n<p>5W2H 模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。</p>\n<p>这就好比两位侃侃而谈的交谈者，因为有了确定的主题与话题边界，一场本来是漫无目的野鹤闲云似的闲聊就变成了一次深度交流的专题高端对话。</p>\n<p><img src=\"/uploads/2019/09/2ea1c795428ce9ffefb757679d3643ca-1024x839.jpg\"></p>\n<p>逻辑是一种能力，而套路是方法论，是经验。逻辑是道的东西，而方法论是术的东西。二者都很重要，只有熟练的掌握二者我们才能更好的进行结构化思考。</p>\n<h3 id=\"如何进行结构化思考？\"><a href=\"#如何进行结构化思考？\" class=\"headerlink\" title=\"如何进行结构化思考？\"></a>如何进行结构化思考？</h3><p>逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考呢？这也是有方法论的，总的来说是有两个步骤，首先是“建立中心”，然后再进行“分解”。</p>\n<h4 id=\"建立中心\"><a href=\"#建立中心\" class=\"headerlink\" title=\"建立中心\"></a>建立中心</h4><p><strong>建立中心也就是要定义清楚要解决的问题，要明确目标。</strong>这是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚 Why，然后再进行 How。</p>\n<p>建立中心有两种方式</p>\n<ul>\n<li><strong>自上而下：</strong> _适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可_。</li>\n<li><strong>自下而上：</strong> <em>对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。</em></li>\n</ul>\n<p>建立中心通常不会是一次成型的，随着对问题理解的变化，对中心的抽象也会进行相应的调整。</p>\n<p>不同的抽象层次其面对的问题宽度是不一样的。具体要用哪个层次的抽象作为“中心”，要视具体情况而定。</p>\n<p>比如面对“系统 Bug 多”的问题，向上抽象是“提升代码质量”，向下抽象是“加强测试”，都可以作为中心，选择哪个为中心取决于你当前要解决的问题是什么。</p>\n<p><img src=\"/uploads/2019/09/6775a06332398a970ead38fbf686ed1c.jpg\"></p>\n<h4 id=\"结构化分解\"><a href=\"#结构化分解\" class=\"headerlink\" title=\"结构化分解\"></a>结构化分解</h4><p>确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。</p>\n<p>分解的策略就是我们上文提到的四种逻辑顺序，即演绎顺序、时间顺序、空间顺序和程度顺序。</p>\n<p>在做空间分解的时候，要注意满足 MECE（Mutually Exclusive Collectively Exhaustive，相互独立，完全穷尽）原则。</p>\n<p>比如我们要对衣服进行分类，如果按照季节和风格进行分类，就会出现互相重叠，并且不能穷尽的情况，也就不满足 MECE。这种分类是逻辑混乱的。</p>\n<p><img src=\"/uploads/2019/09/56d42db36fa7bfef3170fa9a35c94942.jpg\"></p>\n<p>我们可以按季节分：春秋装，冬装，夏装。除了这三类之外，没有其他季节了，这个就是「不遗漏」。</p>\n<p><img src=\"/uploads/2019/09/c3404ee1406c86e1a62ec34ca02c6c21.jpg\"></p>\n<h3 id=\"结构化思维应用\"><a href=\"#结构化思维应用\" class=\"headerlink\" title=\"结构化思维应用\"></a>结构化思维应用</h3><h4 id=\"如何落地新团队\"><a href=\"#如何落地新团队\" class=\"headerlink\" title=\"如何落地新团队\"></a>如何落地新团队</h4><p>想象这样一个场景，你刚刚入职一家新公司，或者转岗到一个新团队，作为一个技术人，你将如何落地开展你的工作呢？</p>\n<p>这里，我们就能用上结构化思维来帮我们理清思路，从而有条不紊的开展工作了。</p>\n<p>我们要知道对一个企业来说，核心要素无外乎就是业务、技术和人，也就是说这三个要素是我们要建立的中心。</p>\n<p>基于这个中心，我们可以进行进一步拆解，形成子结构。然后对子结构再进行分析找到应对策略。</p>\n<p>这样一步步递进，我们就已经在用结构化思维解决如何落地新团队的问题了。</p>\n<p><img src=\"/uploads/2019/09/70f76f02c0b1db1184a24587759ebd55-1024x486.jpg\"></p>\n<p>①熟悉业务</p>\n<p>了解产品：任何一个团队都有自己要负责的产品，申请一个测试账号去用一下产品，是熟悉产品比较好的方式。</p>\n<p>了解流程：任何业务都有自己的业务流程，而业务流里面最核心的是信息流。我们可以通过人员采访，了解关键节点的信息输入和信息输出；可以画一些泳道活动图，理清楚系统的主要角色，以及他们之间的交互关系。</p>\n<p>客户走访：通过走访客户，我们可以更加获得业务的第一手资料，更加贴近业务和客户诉求。</p>\n<p>②熟悉技术</p>\n<p>了解系统架构：可以让团队的技术人员介绍下他们当初系统设计和架构的思路。</p>\n<p>了解领域模型：查看关键的核心表结构和系统 API，这样可以快速了解系统的领域模型。</p>\n<p>了解代码结构：下载系统工程，熟悉整个工程结构和模块职责。以一个重要的流程为入手点，阅读代码，看清楚核心的执行逻辑。做一个小需求，掌握相关的流程和权限。</p>\n<p>③熟悉人</p>\n<p>了解组织结构：查看公司的组织树，知道公司大概是如何运作的，以及哪些是KP（Key Person，关键人）。</p>\n<p>比如，一个典型的电商公司会包括产品部、运营部、销售部、技术部、人力资源部、财务部、法务部等。</p>\n<p>了解人员角色：了解公司都有哪些岗位，以及各岗位的职责范围。</p>\n<p>拜山头：找到和自己工作息息相关的岗位人员，比如产品和运营。积极和他们沟通，向他们请教业务问题，多多交流。</p>\n<p>这样一方面可以建立更好的人际关系，另一方面也可以更快地熟悉业务。</p>\n<h4 id=\"打造极客文化\"><a href=\"#打造极客文化\" class=\"headerlink\" title=\"打造极客文化\"></a>打造极客文化</h4><p>我最近刚刚转岗到新部门，新部门的老板抛给我一个命题：如何帮助技术团队打造极客文化？</p>\n<p>这个问题的中心很明确，接下来，看看我是如何使用结构化思维来解这个问题的。</p>\n<p>首先我们从空间顺序进行分解，也就是打造极客文化，我们可以去做哪些事情。</p>\n<p><img src=\"/uploads/2019/09/9620f5c9626eb14d0f74bfe4f8cd3dfa-1024x223.jpg\"></p>\n<p>确定完要做的事情，我们还可以按照时间顺序对如何落地这些事情进行分解。</p>\n<p><img src=\"/uploads/2019/09/b57a58a76b9064183907a60d8e5cc4c2-1024x113.jpg\"></p>\n<p>这样把按照这两个维度进行结构化拆解的方案给到老板，老板就会很清晰地知道你的规划和落地策略了。</p>\n<h4 id=\"如何做晋升述职\"><a href=\"#如何做晋升述职\" class=\"headerlink\" title=\"如何做晋升述职\"></a>如何做晋升述职</h4><p>在阿里巴巴已经做了好几年的晋升评委，发现很多同学都缺乏结构化思维，冗长的 PPT 里，却不能把价值说清楚，不能把推导过程说清楚。实际上，我们需要有一些方法论来指导我们进行关键述职。</p>\n<p>接下来，我主要说一下述职中存在的两个典型问题：“罗列事情”和“价值的背后”。</p>\n<p>①罗列事情</p>\n<p>对自己做过的事情进行简单罗列，也许你的确做了不少事情。但是不能体现你对问题思考的深度和做这个事情带来的价值。</p>\n<p>这样的述职很难打动评委，更结构化的表达应该是：“提出问题，定义问题，分析问题，解决问题，最后是展望未来”。</p>\n<p>这是一个经典的表述问题的结构，也是麦肯锡推荐的问题解决的框架。</p>\n<p><img src=\"/uploads/2019/09/c5c697abb46b77ada71f04d57b73e550.jpg\"></p>\n<p>类似的框架还有 Zoom in&#x2F;Zoom out。 我们说事情时，应该像电影镜头一样，先从远拉近，再由近拉远。</p>\n<p>Zoom in 是先从宏观背景开始，首先让大家知道你的事情发生的背景，为什么这事重要？然后讲到具体细节，怎么做成的？解决了什么问题？背后的思考是什么？</p>\n<p>最后 Zoom out，再从细节调回到整体，结果是什么，带来的客户价值是什么，你对未来的思考是什么。</p>\n<p>②价值的背后</p>\n<p>把价值说清楚的确很重要，正所谓：路走对了，就不怕远。如果你连价值都不明确，后面做的再多也是白搭。但是，仅仅阐述价值也是不够的，会让人觉得你有邀功之嫌。</p>\n<p>比如你说：“我主导研发的风控系统把公司的坏账率从 5% 降低到 2%”。这样的表述是不够的，你还需要把价值背后的过程和思考说清楚。</p>\n<p>对于这个结果，评委可能会问： 之前为什么那么高？ 为什么你的方法可以降低？是如何归因的？ 具体解决了什么问题？ 是否可以总结出一套办法，以后别人也能用这个办法解决这些问题？</p>\n<p>如果你在评委提问之前，就能对这些问题进行深入思考和适当呈现。那么你就是既有结果又有过程了。</p>\n<p>通过这些案例，我们可以看到具备结构化思维，可以帮助我们快速的理清处理问题的思路，提升工作效率。</p>\n<p>经常锻炼结构化思维，可以极大的提升我们职场竞争力，让工作有条不紊，事半功倍。</p>\n<h3 id=\"出处\"><a href=\"#出处\" class=\"headerlink\" title=\"出处\"></a>出处</h3><p>转载自微信公众号：从码农到工匠（ID：craftsman_frank）</p>\n<p>本文连接：<a href=\"http://feilong.tech/2019/09/26/structured-thinking/\">http://feilong.tech/2019/09/26/structured-thinking/</a></p>\n"},{"title":"一些杂谈琐事 —— 自我反思（一）","id":"59","date":"2017-08-24T11:40:31.000Z","_content":"\n#### 我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，`“思考不足”`。\n\n#### 怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\n<!-- more -->\n#### _假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情_。\n\n#### 刚来公司的时候，老大给我分配了任务，就是使用`Nodejs`搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\n\n> *   开发语言：之前都是使用`PHP`，但是给的源码是`Nodejs`\n> *   实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作\n\n#### 大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\n\n#### 其实做过微信开发的，基本上都会知道一个名词——_access\\_token_，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access\\_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access\\_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\n\n#### 时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨_英雄无用武之地_，辛苦写的demo迟迟没上线。\n\n#### 时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\n\n#### 这时候摆在我面前的有两条路：\n\n> *   继续查Nodejs资料\n> *   重新设计接口\n\n#### 这次我并没有像之前一样，而是耐心从多个方面进行思考：_`技术可行性`_ 和 _`时间成本`_\n\n> *   对于第一条，技术完全不熟悉，时间更是很难估计\n> *   对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。\n\n#### 于是，我便重新设计接口，设计方法：\n\n> *   access\\_token依然放在Nodejs那台服务器，作为核心的参数\n> *   使用Nodejs写一个接口，给云端使用，用来读取access\\_token\n> *   Nodejs还要写一个rebuilt接口，当access\\_token过期的时候，重新生成\n\n#### 写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\n\n记录下当前的时间：2016/08/03 21 : 54","source":"_posts/thinking-1.md","raw":"---\ntitle: 一些杂谈琐事 —— 自我反思（一）\ntags: []\nid: '59'\ncategories:\n  - - 自我反思\ndate: 2017-08-24 19:40:31\n---\n\n#### 我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，`“思考不足”`。\n\n#### 怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\n<!-- more -->\n#### _假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情_。\n\n#### 刚来公司的时候，老大给我分配了任务，就是使用`Nodejs`搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\n\n> *   开发语言：之前都是使用`PHP`，但是给的源码是`Nodejs`\n> *   实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作\n\n#### 大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\n\n#### 其实做过微信开发的，基本上都会知道一个名词——_access\\_token_，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access\\_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access\\_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\n\n#### 时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨_英雄无用武之地_，辛苦写的demo迟迟没上线。\n\n#### 时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\n\n#### 这时候摆在我面前的有两条路：\n\n> *   继续查Nodejs资料\n> *   重新设计接口\n\n#### 这次我并没有像之前一样，而是耐心从多个方面进行思考：_`技术可行性`_ 和 _`时间成本`_\n\n> *   对于第一条，技术完全不熟悉，时间更是很难估计\n> *   对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。\n\n#### 于是，我便重新设计接口，设计方法：\n\n> *   access\\_token依然放在Nodejs那台服务器，作为核心的参数\n> *   使用Nodejs写一个接口，给云端使用，用来读取access\\_token\n> *   Nodejs还要写一个rebuilt接口，当access\\_token过期的时候，重新生成\n\n#### 写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\n\n记录下当前的时间：2016/08/03 21 : 54","slug":"thinking-1","published":1,"updated":"2022-03-12T23:52:58.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mij0082417t8v2l2cbo","content":"<h4 id=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"><a href=\"#我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\" class=\"headerlink\" title=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"></a>我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，<code>“思考不足”</code>。</h4><h4 id=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"><a href=\"#怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\" class=\"headerlink\" title=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"></a>怎么来理解这四个字呢？用一个简单的小事情举个例子吧。</h4><span id=\"more\"></span>\n<h4 id=\"假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情-。\"><a href=\"#假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情-。\" class=\"headerlink\" title=\"_假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情_。\"></a>_假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情_。</h4><h4 id=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"><a href=\"#刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\" class=\"headerlink\" title=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"></a>刚来公司的时候，老大给我分配了任务，就是使用<code>Nodejs</code>搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：</h4><blockquote>\n<ul>\n<li>开发语言：之前都是使用<code>PHP</code>，但是给的源码是<code>Nodejs</code></li>\n<li>实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作</li>\n</ul>\n</blockquote>\n<h4 id=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"><a href=\"#大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\" class=\"headerlink\" title=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"></a>大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。</h4><h4 id=\"其实做过微信开发的，基本上都会知道一个名词——-access-token-，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"><a href=\"#其实做过微信开发的，基本上都会知道一个名词——-access-token-，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\" class=\"headerlink\" title=\"其实做过微信开发的，基本上都会知道一个名词——_access_token_，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"></a>其实做过微信开发的，基本上都会知道一个名词——_access_token_，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。</h4><h4 id=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨-英雄无用武之地-，辛苦写的demo迟迟没上线。\"><a href=\"#时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨-英雄无用武之地-，辛苦写的demo迟迟没上线。\" class=\"headerlink\" title=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨_英雄无用武之地_，辛苦写的demo迟迟没上线。\"></a>时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨_英雄无用武之地_，辛苦写的demo迟迟没上线。</h4><h4 id=\"时间追溯到昨天（2016-x2F-08-x2F-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"><a href=\"#时间追溯到昨天（2016-x2F-08-x2F-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\" class=\"headerlink\" title=\"时间追溯到昨天（2016&#x2F;08&#x2F;03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"></a>时间追溯到昨天（2016&#x2F;08&#x2F;03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。</h4><h4 id=\"这时候摆在我面前的有两条路：\"><a href=\"#这时候摆在我面前的有两条路：\" class=\"headerlink\" title=\"这时候摆在我面前的有两条路：\"></a>这时候摆在我面前的有两条路：</h4><blockquote>\n<ul>\n<li>继续查Nodejs资料</li>\n<li>重新设计接口</li>\n</ul>\n</blockquote>\n<h4 id=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：-技术可行性-和-时间成本\"><a href=\"#这次我并没有像之前一样，而是耐心从多个方面进行思考：-技术可行性-和-时间成本\" class=\"headerlink\" title=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：_技术可行性_ 和 时间成本\"></a>这次我并没有像之前一样，而是耐心从多个方面进行思考：_<code>技术可行性</code>_ 和 <em><code>时间成本</code></em></h4><blockquote>\n<ul>\n<li>对于第一条，技术完全不熟悉，时间更是很难估计</li>\n<li>对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。</li>\n</ul>\n</blockquote>\n<h4 id=\"于是，我便重新设计接口，设计方法：\"><a href=\"#于是，我便重新设计接口，设计方法：\" class=\"headerlink\" title=\"于是，我便重新设计接口，设计方法：\"></a>于是，我便重新设计接口，设计方法：</h4><blockquote>\n<ul>\n<li>access_token依然放在Nodejs那台服务器，作为核心的参数</li>\n<li>使用Nodejs写一个接口，给云端使用，用来读取access_token</li>\n<li>Nodejs还要写一个rebuilt接口，当access_token过期的时候，重新生成</li>\n</ul>\n</blockquote>\n<h4 id=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"><a href=\"#写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\" class=\"headerlink\" title=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"></a>写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。</h4><p>记录下当前的时间：2016&#x2F;08&#x2F;03 21 : 54</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"><a href=\"#我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\" class=\"headerlink\" title=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"></a>我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，<code>“思考不足”</code>。</h4><h4 id=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"><a href=\"#怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\" class=\"headerlink\" title=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"></a>怎么来理解这四个字呢？用一个简单的小事情举个例子吧。</h4>","more":"<h4 id=\"假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情-。\"><a href=\"#假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情-。\" class=\"headerlink\" title=\"_假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情_。\"></a>_假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情_。</h4><h4 id=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"><a href=\"#刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\" class=\"headerlink\" title=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"></a>刚来公司的时候，老大给我分配了任务，就是使用<code>Nodejs</code>搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：</h4><blockquote>\n<ul>\n<li>开发语言：之前都是使用<code>PHP</code>，但是给的源码是<code>Nodejs</code></li>\n<li>实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作</li>\n</ul>\n</blockquote>\n<h4 id=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"><a href=\"#大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\" class=\"headerlink\" title=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"></a>大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。</h4><h4 id=\"其实做过微信开发的，基本上都会知道一个名词——-access-token-，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"><a href=\"#其实做过微信开发的，基本上都会知道一个名词——-access-token-，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\" class=\"headerlink\" title=\"其实做过微信开发的，基本上都会知道一个名词——_access_token_，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"></a>其实做过微信开发的，基本上都会知道一个名词——_access_token_，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。</h4><h4 id=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨-英雄无用武之地-，辛苦写的demo迟迟没上线。\"><a href=\"#时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨-英雄无用武之地-，辛苦写的demo迟迟没上线。\" class=\"headerlink\" title=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨_英雄无用武之地_，辛苦写的demo迟迟没上线。\"></a>时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨_英雄无用武之地_，辛苦写的demo迟迟没上线。</h4><h4 id=\"时间追溯到昨天（2016-x2F-08-x2F-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"><a href=\"#时间追溯到昨天（2016-x2F-08-x2F-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\" class=\"headerlink\" title=\"时间追溯到昨天（2016&#x2F;08&#x2F;03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"></a>时间追溯到昨天（2016&#x2F;08&#x2F;03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。</h4><h4 id=\"这时候摆在我面前的有两条路：\"><a href=\"#这时候摆在我面前的有两条路：\" class=\"headerlink\" title=\"这时候摆在我面前的有两条路：\"></a>这时候摆在我面前的有两条路：</h4><blockquote>\n<ul>\n<li>继续查Nodejs资料</li>\n<li>重新设计接口</li>\n</ul>\n</blockquote>\n<h4 id=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：-技术可行性-和-时间成本\"><a href=\"#这次我并没有像之前一样，而是耐心从多个方面进行思考：-技术可行性-和-时间成本\" class=\"headerlink\" title=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：_技术可行性_ 和 时间成本\"></a>这次我并没有像之前一样，而是耐心从多个方面进行思考：_<code>技术可行性</code>_ 和 <em><code>时间成本</code></em></h4><blockquote>\n<ul>\n<li>对于第一条，技术完全不熟悉，时间更是很难估计</li>\n<li>对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。</li>\n</ul>\n</blockquote>\n<h4 id=\"于是，我便重新设计接口，设计方法：\"><a href=\"#于是，我便重新设计接口，设计方法：\" class=\"headerlink\" title=\"于是，我便重新设计接口，设计方法：\"></a>于是，我便重新设计接口，设计方法：</h4><blockquote>\n<ul>\n<li>access_token依然放在Nodejs那台服务器，作为核心的参数</li>\n<li>使用Nodejs写一个接口，给云端使用，用来读取access_token</li>\n<li>Nodejs还要写一个rebuilt接口，当access_token过期的时候，重新生成</li>\n</ul>\n</blockquote>\n<h4 id=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"><a href=\"#写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\" class=\"headerlink\" title=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"></a>写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。</h4><p>记录下当前的时间：2016&#x2F;08&#x2F;03 21 : 54</p>"},{"title":"Ubuntu查看版本","id":"142","date":"2017-08-24T12:19:37.000Z","_content":"\n#### 使用命令：cat /proc/version 查看\n\n```bash\n$ cat /proc/version\nLinux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016\n```\n\n<!--more-->\n\n#### 使用命令：uname -a 查看\n\n```bash\n$ uname -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n#### 使用命令：lsb\\_release -a 查看\n\n```bash\n$ lsb_release -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.1 LTS\nRelease:        16.04\nCodename:       xenial\n```","source":"_posts/ubuntu-version.md","raw":"---\ntitle: Ubuntu查看版本\ntags: []\nid: '142'\ncategories:\n  - - Linux\ndate: 2017-08-24 20:19:37\n---\n\n#### 使用命令：cat /proc/version 查看\n\n```bash\n$ cat /proc/version\nLinux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016\n```\n\n<!--more-->\n\n#### 使用命令：uname -a 查看\n\n```bash\n$ uname -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n#### 使用命令：lsb\\_release -a 查看\n\n```bash\n$ lsb_release -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.1 LTS\nRelease:        16.04\nCodename:       xenial\n```","slug":"ubuntu-version","published":1,"updated":"2022-03-12T23:52:58.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mik0085417t05fjhhmk","content":"<h4 id=\"使用命令：cat-x2F-proc-x2F-version-查看\"><a href=\"#使用命令：cat-x2F-proc-x2F-version-查看\" class=\"headerlink\" title=\"使用命令：cat &#x2F;proc&#x2F;version 查看\"></a>使用命令：cat &#x2F;proc&#x2F;version 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> /proc/version</span><br><span class=\"line\">Linux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h4 id=\"使用命令：uname-a-查看\"><a href=\"#使用命令：uname-a-查看\" class=\"headerlink\" title=\"使用命令：uname -a 查看\"></a>使用命令：uname -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">uname</span> -a</span><br><span class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用命令：lsb-release-a-查看\"><a href=\"#使用命令：lsb-release-a-查看\" class=\"headerlink\" title=\"使用命令：lsb_release -a 查看\"></a>使用命令：lsb_release -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsb_release -a</span><br><span class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class=\"line\">ubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release -a</span><br><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID: Ubuntu</span><br><span class=\"line\">Description:    Ubuntu 16.04.1 LTS</span><br><span class=\"line\">Release:        16.04</span><br><span class=\"line\">Codename:       xenial</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"使用命令：cat-x2F-proc-x2F-version-查看\"><a href=\"#使用命令：cat-x2F-proc-x2F-version-查看\" class=\"headerlink\" title=\"使用命令：cat &#x2F;proc&#x2F;version 查看\"></a>使用命令：cat &#x2F;proc&#x2F;version 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> /proc/version</span><br><span class=\"line\">Linux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016</span></span><br></pre></td></tr></table></figure>","more":"<h4 id=\"使用命令：uname-a-查看\"><a href=\"#使用命令：uname-a-查看\" class=\"headerlink\" title=\"使用命令：uname -a 查看\"></a>使用命令：uname -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">uname</span> -a</span><br><span class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用命令：lsb-release-a-查看\"><a href=\"#使用命令：lsb-release-a-查看\" class=\"headerlink\" title=\"使用命令：lsb_release -a 查看\"></a>使用命令：lsb_release -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsb_release -a</span><br><span class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class=\"line\">ubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release -a</span><br><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID: Ubuntu</span><br><span class=\"line\">Description:    Ubuntu 16.04.1 LTS</span><br><span class=\"line\">Release:        16.04</span><br><span class=\"line\">Codename:       xenial</span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu搭建lnmp环境","id":"143","date":"2017-08-24T12:20:18.000Z","_content":"\n**项目基于php CI**\n\n#### 1、安装mysql\n\n```bash\n$ sudo apt-get install mysql-server mysql-client\n```\n<!-- more -->\n**安装过程会提示输入root的密码，连续输入两次**\n\n```bash\nNew password for the MySQL “root” user: <– 输入你的密码\nRepeat password for the MySQL “root” user: <– 再输入一次\n```\n\n#### 2、安装nginx\n\n**安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用**\n\n```bash\n$ sudo service apache2 stop\n$ sudo update-rc.d -f apache2 remove\n$ sudo apt-get remove apache2\n$ sudo apt-get install nginx\n$ sudo service nginx start \n```\n\n**试试安装是否成功，在浏览器输入IP或主机地址。**\n\n#### 3、安装php\n\n```bash\n$ sudo apt-get install php7.0 -y\n```\n\n**启动php-fpm**\n\n```bash\n$ sudo service php7.0-fpm start\n```\n\n**输入`php -i`命令，查看php是否运行, 这个命令和`phpinfo()`函数一样**\n\n```bash\n$ sudo php -i\n```\n\n#### 4、更改nginx配置文件\n\n```bash\n$ cd /etc/nginx/sites-enabled/\n$ ll\ntotal 8\ndrwxr-xr-x 2 root root 4096 Nov 22 08:20 ./\ndrwxr-xr-x 7 root root 4096 Nov 22 08:21 ../\nlrwxrwxrwx 1 root root   34 Nov 22 06:10 default -> /etc/nginx/sites-available/default\n```\n\n**这里会有一个默认的default配置文件，更改配置文件，进行项目配置**\n\n```bash\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_tokens off;\n        root /usr/share/nginx/test;\n        # Add index.php to the list if you are using PHP\n        index  index.php index.html index.htm index.nginx-debian.html;\n        server_name _;\n        if ($request_filename !~ (\\.jpgcssjspngfontsimg)) {\n                rewrite ^/(.*)$ /index.php/$1 break;\n        }\n        location ~ / {\n                root /usr/share/nginx/test;\n                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n                include        fastcgi_params;\n        }\n}\n```\n\n**按需配置CI框架的数据库**\n\n**新建控制器`Info.php`, 在里面增加php方法，运行检验**\n\n```php\n<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\nclass Info extends CI_Controller {\n    public function php() {\n        echo \"hello world!\";\n    }\n}\n```\n\n**发现抛出一个致命的错误**\n\n`Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions->show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 {main} thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192`\n\n**报错的意思大概是说show\\_exception方法的参数是个实例化的，但是传入的参数不是一个实例**\n\n**后来根据github上面的解决办法https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show\\_exception的参数**\n\n**刷新后发现提示mysql的php拓展，使用命令安装php相关拓展**\n\n#### 5、安装php拓展\n\n**查看支持的拓展**\n\n```bash\nsudo apt-cache search php7.0\n\nlibapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)\nphp-all-dev - package depending on all supported PHP development packages\nphp7.0 - server-side, HTML-embedded scripting language (metapackage)\nphp7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)\nphp7.0-cli - command-line interpreter for the PHP scripting language\nphp7.0-common - documentation, examples and common module for PHP\nphp7.0-curl - CURL module for PHP\nphp7.0-dev - Files for PHP7.0 module development\nphp7.0-gd - GD module for PHP\nphp7.0-gmp - GMP module for PHP\nphp7.0-json - JSON module for PHP\nphp7.0-ldap - LDAP module for PHP\nphp7.0-mysql - MySQL module for PHP\nphp7.0-odbc - ODBC module for PHP\nphp7.0-opcache - Zend OpCache module for PHP\nphp7.0-pgsql - PostgreSQL module for PHP\nphp7.0-pspell - pspell module for PHP\n.\n.\n.\n```\n\n**为了保险起见，直接安装所有拓展**\n\n```bash\nsudo apt-get install php-all-dev\n```\n\n**然后刷新发现正常输出`hello world!`**\n\n**然后我把show\\_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show\\_exception也是由于缺少拓展造成的**","source":"_posts/ubuntu搭建lnmp环境.md","raw":"---\ntitle: Ubuntu搭建lnmp环境\ntags: []\nid: '143'\ncategories:\n  - - Linux\ndate: 2017-08-24 20:20:18\n---\n\n**项目基于php CI**\n\n#### 1、安装mysql\n\n```bash\n$ sudo apt-get install mysql-server mysql-client\n```\n<!-- more -->\n**安装过程会提示输入root的密码，连续输入两次**\n\n```bash\nNew password for the MySQL “root” user: <– 输入你的密码\nRepeat password for the MySQL “root” user: <– 再输入一次\n```\n\n#### 2、安装nginx\n\n**安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用**\n\n```bash\n$ sudo service apache2 stop\n$ sudo update-rc.d -f apache2 remove\n$ sudo apt-get remove apache2\n$ sudo apt-get install nginx\n$ sudo service nginx start \n```\n\n**试试安装是否成功，在浏览器输入IP或主机地址。**\n\n#### 3、安装php\n\n```bash\n$ sudo apt-get install php7.0 -y\n```\n\n**启动php-fpm**\n\n```bash\n$ sudo service php7.0-fpm start\n```\n\n**输入`php -i`命令，查看php是否运行, 这个命令和`phpinfo()`函数一样**\n\n```bash\n$ sudo php -i\n```\n\n#### 4、更改nginx配置文件\n\n```bash\n$ cd /etc/nginx/sites-enabled/\n$ ll\ntotal 8\ndrwxr-xr-x 2 root root 4096 Nov 22 08:20 ./\ndrwxr-xr-x 7 root root 4096 Nov 22 08:21 ../\nlrwxrwxrwx 1 root root   34 Nov 22 06:10 default -> /etc/nginx/sites-available/default\n```\n\n**这里会有一个默认的default配置文件，更改配置文件，进行项目配置**\n\n```bash\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_tokens off;\n        root /usr/share/nginx/test;\n        # Add index.php to the list if you are using PHP\n        index  index.php index.html index.htm index.nginx-debian.html;\n        server_name _;\n        if ($request_filename !~ (\\.jpgcssjspngfontsimg)) {\n                rewrite ^/(.*)$ /index.php/$1 break;\n        }\n        location ~ / {\n                root /usr/share/nginx/test;\n                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n                include        fastcgi_params;\n        }\n}\n```\n\n**按需配置CI框架的数据库**\n\n**新建控制器`Info.php`, 在里面增加php方法，运行检验**\n\n```php\n<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\nclass Info extends CI_Controller {\n    public function php() {\n        echo \"hello world!\";\n    }\n}\n```\n\n**发现抛出一个致命的错误**\n\n`Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions->show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 {main} thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192`\n\n**报错的意思大概是说show\\_exception方法的参数是个实例化的，但是传入的参数不是一个实例**\n\n**后来根据github上面的解决办法https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show\\_exception的参数**\n\n**刷新后发现提示mysql的php拓展，使用命令安装php相关拓展**\n\n#### 5、安装php拓展\n\n**查看支持的拓展**\n\n```bash\nsudo apt-cache search php7.0\n\nlibapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)\nphp-all-dev - package depending on all supported PHP development packages\nphp7.0 - server-side, HTML-embedded scripting language (metapackage)\nphp7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)\nphp7.0-cli - command-line interpreter for the PHP scripting language\nphp7.0-common - documentation, examples and common module for PHP\nphp7.0-curl - CURL module for PHP\nphp7.0-dev - Files for PHP7.0 module development\nphp7.0-gd - GD module for PHP\nphp7.0-gmp - GMP module for PHP\nphp7.0-json - JSON module for PHP\nphp7.0-ldap - LDAP module for PHP\nphp7.0-mysql - MySQL module for PHP\nphp7.0-odbc - ODBC module for PHP\nphp7.0-opcache - Zend OpCache module for PHP\nphp7.0-pgsql - PostgreSQL module for PHP\nphp7.0-pspell - pspell module for PHP\n.\n.\n.\n```\n\n**为了保险起见，直接安装所有拓展**\n\n```bash\nsudo apt-get install php-all-dev\n```\n\n**然后刷新发现正常输出`hello world!`**\n\n**然后我把show\\_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show\\_exception也是由于缺少拓展造成的**","slug":"ubuntu搭建lnmp环境","published":1,"updated":"2022-03-12T23:52:58.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0oi8mil0089417t4a8v0ip8","content":"<p><strong>项目基于php CI</strong></p>\n<h4 id=\"1、安装mysql\"><a href=\"#1、安装mysql\" class=\"headerlink\" title=\"1、安装mysql\"></a>1、安装mysql</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>安装过程会提示输入root的密码，连续输入两次</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 输入你的密码</span><br><span class=\"line\">Repeat password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 再输入一次</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、安装nginx\"><a href=\"#2、安装nginx\" class=\"headerlink\" title=\"2、安装nginx\"></a>2、安装nginx</h4><p><strong>安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service apache2 stop</span><br><span class=\"line\">$ sudo update-rc.d -f apache2 remove</span><br><span class=\"line\">$ sudo apt-get remove apache2</span><br><span class=\"line\">$ sudo apt-get install nginx</span><br><span class=\"line\">$ sudo service nginx start </span><br></pre></td></tr></table></figure>\n\n<p><strong>试试安装是否成功，在浏览器输入IP或主机地址。</strong></p>\n<h4 id=\"3、安装php\"><a href=\"#3、安装php\" class=\"headerlink\" title=\"3、安装php\"></a>3、安装php</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install php7.0 -y</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动php-fpm</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service php7.0-fpm start</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入<code>php -i</code>命令，查看php是否运行, 这个命令和<code>phpinfo()</code>函数一样</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo php -i</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、更改nginx配置文件\"><a href=\"#4、更改nginx配置文件\" class=\"headerlink\" title=\"4、更改nginx配置文件\"></a>4、更改nginx配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/sites-enabled/</span><br><span class=\"line\">$ ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Nov 22 08:20 ./</span><br><span class=\"line\">drwxr-xr-x 7 root root 4096 Nov 22 08:21 ../</span><br><span class=\"line\">lrwxrwxrwx 1 root root   34 Nov 22 06:10 default -&gt; /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p><strong>这里会有一个默认的default配置文件，更改配置文件，进行项目配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        listen [::]:80 default_server;</span><br><span class=\"line\">        server_tokens off;</span><br><span class=\"line\">        root /usr/share/nginx/test;</span><br><span class=\"line\">        <span class=\"comment\"># Add index.php to the list if you are using PHP</span></span><br><span class=\"line\">        index  index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">        server_name _;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$request_filename</span> !~ (\\.jpgcssjspngfontsimg)) &#123;</span><br><span class=\"line\">                rewrite ^/(.*)$ /index.php/<span class=\"variable\">$1</span> <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~ / &#123;</span><br><span class=\"line\">                root /usr/share/nginx/test;</span><br><span class=\"line\">                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;</span><br><span class=\"line\">                fastcgi_index  index.php;</span><br><span class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                fastcgi_param  SCRIPT_FILENAME  $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                include        fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>按需配置CI框架的数据库</strong></p>\n<p><strong>新建控制器<code>Info.php</code>, 在里面增加php方法，运行检验</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( ! <span class=\"title function_ invoke__\">defined</span>(<span class=\"string\">&#x27;BASEPATH&#x27;</span>)) <span class=\"keyword\">exit</span>(<span class=\"string\">&#x27;No direct script access allowed&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Info</span> <span class=\"keyword\">extends</span> <span class=\"title\">CI_Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;hello world!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>发现抛出一个致命的错误</strong></p>\n<p><code>Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions-&gt;show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 &#123;main&#125; thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192</code></p>\n<p><strong>报错的意思大概是说show_exception方法的参数是个实例化的，但是传入的参数不是一个实例</strong></p>\n<p><strong>后来根据github上面的解决办法<a href=\"https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa%EF%BC%8C%E6%9B%B4%E6%94%B9show\\_exception%E7%9A%84%E5%8F%82%E6%95%B0\">https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show\\_exception的参数</a></strong></p>\n<p><strong>刷新后发现提示mysql的php拓展，使用命令安装php相关拓展</strong></p>\n<h4 id=\"5、安装php拓展\"><a href=\"#5、安装php拓展\" class=\"headerlink\" title=\"5、安装php拓展\"></a>5、安装php拓展</h4><p><strong>查看支持的拓展</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search php7.0</span><br><span class=\"line\"></span><br><span class=\"line\">libapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)</span><br><span class=\"line\">php-all-dev - package depending on all supported PHP development packages</span><br><span class=\"line\">php7.0 - server-side, HTML-embedded scripting language (metapackage)</span><br><span class=\"line\">php7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)</span><br><span class=\"line\">php7.0-cli - command-line interpreter <span class=\"keyword\">for</span> the PHP scripting language</span><br><span class=\"line\">php7.0-common - documentation, examples and common module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-curl - CURL module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-dev - Files <span class=\"keyword\">for</span> PHP7.0 module development</span><br><span class=\"line\">php7.0-gd - GD module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-gmp - GMP module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-json - JSON module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-ldap - LDAP module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-mysql - MySQL module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-odbc - ODBC module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-opcache - Zend OpCache module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-pgsql - PostgreSQL module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-pspell - pspell module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<p><strong>为了保险起见，直接安装所有拓展</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php-all-dev</span><br></pre></td></tr></table></figure>\n\n<p><strong>然后刷新发现正常输出<code>hello world!</code></strong></p>\n<p><strong>然后我把show_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show_exception也是由于缺少拓展造成的</strong></p>\n","site":{"data":{}},"excerpt":"<p><strong>项目基于php CI</strong></p>\n<h4 id=\"1、安装mysql\"><a href=\"#1、安装mysql\" class=\"headerlink\" title=\"1、安装mysql\"></a>1、安装mysql</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>","more":"<p><strong>安装过程会提示输入root的密码，连续输入两次</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 输入你的密码</span><br><span class=\"line\">Repeat password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 再输入一次</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、安装nginx\"><a href=\"#2、安装nginx\" class=\"headerlink\" title=\"2、安装nginx\"></a>2、安装nginx</h4><p><strong>安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service apache2 stop</span><br><span class=\"line\">$ sudo update-rc.d -f apache2 remove</span><br><span class=\"line\">$ sudo apt-get remove apache2</span><br><span class=\"line\">$ sudo apt-get install nginx</span><br><span class=\"line\">$ sudo service nginx start </span><br></pre></td></tr></table></figure>\n\n<p><strong>试试安装是否成功，在浏览器输入IP或主机地址。</strong></p>\n<h4 id=\"3、安装php\"><a href=\"#3、安装php\" class=\"headerlink\" title=\"3、安装php\"></a>3、安装php</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install php7.0 -y</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动php-fpm</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service php7.0-fpm start</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入<code>php -i</code>命令，查看php是否运行, 这个命令和<code>phpinfo()</code>函数一样</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo php -i</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、更改nginx配置文件\"><a href=\"#4、更改nginx配置文件\" class=\"headerlink\" title=\"4、更改nginx配置文件\"></a>4、更改nginx配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/sites-enabled/</span><br><span class=\"line\">$ ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Nov 22 08:20 ./</span><br><span class=\"line\">drwxr-xr-x 7 root root 4096 Nov 22 08:21 ../</span><br><span class=\"line\">lrwxrwxrwx 1 root root   34 Nov 22 06:10 default -&gt; /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p><strong>这里会有一个默认的default配置文件，更改配置文件，进行项目配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        listen [::]:80 default_server;</span><br><span class=\"line\">        server_tokens off;</span><br><span class=\"line\">        root /usr/share/nginx/test;</span><br><span class=\"line\">        <span class=\"comment\"># Add index.php to the list if you are using PHP</span></span><br><span class=\"line\">        index  index.php index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">        server_name _;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$request_filename</span> !~ (\\.jpgcssjspngfontsimg)) &#123;</span><br><span class=\"line\">                rewrite ^/(.*)$ /index.php/<span class=\"variable\">$1</span> <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~ / &#123;</span><br><span class=\"line\">                root /usr/share/nginx/test;</span><br><span class=\"line\">                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;</span><br><span class=\"line\">                fastcgi_index  index.php;</span><br><span class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                fastcgi_param  SCRIPT_FILENAME  $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                include        fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>按需配置CI框架的数据库</strong></p>\n<p><strong>新建控制器<code>Info.php</code>, 在里面增加php方法，运行检验</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( ! <span class=\"title function_ invoke__\">defined</span>(<span class=\"string\">&#x27;BASEPATH&#x27;</span>)) <span class=\"keyword\">exit</span>(<span class=\"string\">&#x27;No direct script access allowed&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Info</span> <span class=\"keyword\">extends</span> <span class=\"title\">CI_Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;hello world!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>发现抛出一个致命的错误</strong></p>\n<p><code>Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions-&gt;show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 &#123;main&#125; thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192</code></p>\n<p><strong>报错的意思大概是说show_exception方法的参数是个实例化的，但是传入的参数不是一个实例</strong></p>\n<p><strong>后来根据github上面的解决办法<a href=\"https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa%EF%BC%8C%E6%9B%B4%E6%94%B9show\\_exception%E7%9A%84%E5%8F%82%E6%95%B0\">https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show\\_exception的参数</a></strong></p>\n<p><strong>刷新后发现提示mysql的php拓展，使用命令安装php相关拓展</strong></p>\n<h4 id=\"5、安装php拓展\"><a href=\"#5、安装php拓展\" class=\"headerlink\" title=\"5、安装php拓展\"></a>5、安装php拓展</h4><p><strong>查看支持的拓展</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search php7.0</span><br><span class=\"line\"></span><br><span class=\"line\">libapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)</span><br><span class=\"line\">php-all-dev - package depending on all supported PHP development packages</span><br><span class=\"line\">php7.0 - server-side, HTML-embedded scripting language (metapackage)</span><br><span class=\"line\">php7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)</span><br><span class=\"line\">php7.0-cli - command-line interpreter <span class=\"keyword\">for</span> the PHP scripting language</span><br><span class=\"line\">php7.0-common - documentation, examples and common module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-curl - CURL module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-dev - Files <span class=\"keyword\">for</span> PHP7.0 module development</span><br><span class=\"line\">php7.0-gd - GD module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-gmp - GMP module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-json - JSON module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-ldap - LDAP module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-mysql - MySQL module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-odbc - ODBC module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-opcache - Zend OpCache module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-pgsql - PostgreSQL module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">php7.0-pspell - pspell module <span class=\"keyword\">for</span> PHP</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<p><strong>为了保险起见，直接安装所有拓展</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php-all-dev</span><br></pre></td></tr></table></figure>\n\n<p><strong>然后刷新发现正常输出<code>hello world!</code></strong></p>\n<p><strong>然后我把show_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show_exception也是由于缺少拓展造成的</strong></p>"},{"title":"vscode安装psr2格式化工具","id":"288","comments":0,"date":"2018-07-25T16:14:21.000Z","_content":"\n### 关于\n\nPSR应该算得上是PHP比较权威的codestyle的标准了，大多数的PHP届都是沿用psr的风格。当然，其中也会或多或少的有一些自己的风格，比如PHP Ci框架，也有一些自己的代码风格。\n\nvscode是我用了这么多编译器中最好用的了，它虽然不想sublime那样轻便，但是他自带的一些工具非常好用。比如，集成git之后，不用再使用命令行提交变更，解决冲突直接一个按钮操作。用金星姐姐的话来说，“完美”。\n\n### 开始安装\n\nVScode有一款插件，是用来做PHP代码格式化的，叫做 `PHP Formatter`， 如果你们公司使用PSR的命名规范，那么这个简直就是福音啊。 下载链接 [https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter](https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter)\n\n#### 安装php-cs-fixer\n\n```bash\n$ composer require fabpot/php-cs-fixer #使用composer安装依赖\n```\n\n![](/uploads/2018/07/QQ20180725-235749@2x-1024x350.png)\n\n#### 在VScode上面下载插件\n\n![](/uploads/2018/07/QQ20180726-000004-1024x859.png)\n\n#### 配置插件\n\nVScode->Code->首选项->设置 在`用户设置`增加截图的json的配置项 ![](/uploads/2018/07/475A8C81-7869-4446-AD83-3EC62F51A6E7-1024x588.png)\n\n### enjoin","source":"_posts/vscode-install-psr2.md","raw":"---\ntitle: vscode安装psr2格式化工具\ntags: []\nid: '288'\ncategories:\n  - - PHP\ncomments: false\ndate: 2018-07-26 00:14:21\n---\n\n### 关于\n\nPSR应该算得上是PHP比较权威的codestyle的标准了，大多数的PHP届都是沿用psr的风格。当然，其中也会或多或少的有一些自己的风格，比如PHP Ci框架，也有一些自己的代码风格。\n\nvscode是我用了这么多编译器中最好用的了，它虽然不想sublime那样轻便，但是他自带的一些工具非常好用。比如，集成git之后，不用再使用命令行提交变更，解决冲突直接一个按钮操作。用金星姐姐的话来说，“完美”。\n\n### 开始安装\n\nVScode有一款插件，是用来做PHP代码格式化的，叫做 `PHP Formatter`， 如果你们公司使用PSR的命名规范，那么这个简直就是福音啊。 下载链接 [https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter](https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter)\n\n#### 安装php-cs-fixer\n\n```bash\n$ composer require fabpot/php-cs-fixer #使用composer安装依赖\n```\n\n![](/uploads/2018/07/QQ20180725-235749@2x-1024x350.png)\n\n#### 在VScode上面下载插件\n\n![](/uploads/2018/07/QQ20180726-000004-1024x859.png)\n\n#### 配置插件\n\nVScode->Code->首选项->设置 在`用户设置`增加截图的json的配置项 ![](/uploads/2018/07/475A8C81-7869-4446-AD83-3EC62F51A6E7-1024x588.png)\n\n### enjoin","slug":"vscode-install-psr2","published":1,"updated":"2022-03-13T01:17:12.528Z","_id":"cl0oi8mim008c417t18wr67jn","layout":"post","photos":[],"link":"","content":"<h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><p>PSR应该算得上是PHP比较权威的codestyle的标准了，大多数的PHP届都是沿用psr的风格。当然，其中也会或多或少的有一些自己的风格，比如PHP Ci框架，也有一些自己的代码风格。</p>\n<p>vscode是我用了这么多编译器中最好用的了，它虽然不想sublime那样轻便，但是他自带的一些工具非常好用。比如，集成git之后，不用再使用命令行提交变更，解决冲突直接一个按钮操作。用金星姐姐的话来说，“完美”。</p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><p>VScode有一款插件，是用来做PHP代码格式化的，叫做 <code>PHP Formatter</code>， 如果你们公司使用PSR的命名规范，那么这个简直就是福音啊。 下载链接 <a href=\"https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter\">https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter</a></p>\n<h4 id=\"安装php-cs-fixer\"><a href=\"#安装php-cs-fixer\" class=\"headerlink\" title=\"安装php-cs-fixer\"></a>安装php-cs-fixer</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer require fabpot/php-cs-fixer <span class=\"comment\">#使用composer安装依赖</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/07/QQ20180725-235749@2x-1024x350.png\"></p>\n<h4 id=\"在VScode上面下载插件\"><a href=\"#在VScode上面下载插件\" class=\"headerlink\" title=\"在VScode上面下载插件\"></a>在VScode上面下载插件</h4><p><img src=\"/uploads/2018/07/QQ20180726-000004-1024x859.png\"></p>\n<h4 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h4><p>VScode-&gt;Code-&gt;首选项-&gt;设置 在<code>用户设置</code>增加截图的json的配置项 <img src=\"/uploads/2018/07/475A8C81-7869-4446-AD83-3EC62F51A6E7-1024x588.png\"></p>\n<h3 id=\"enjoin\"><a href=\"#enjoin\" class=\"headerlink\" title=\"enjoin\"></a>enjoin</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><p>PSR应该算得上是PHP比较权威的codestyle的标准了，大多数的PHP届都是沿用psr的风格。当然，其中也会或多或少的有一些自己的风格，比如PHP Ci框架，也有一些自己的代码风格。</p>\n<p>vscode是我用了这么多编译器中最好用的了，它虽然不想sublime那样轻便，但是他自带的一些工具非常好用。比如，集成git之后，不用再使用命令行提交变更，解决冲突直接一个按钮操作。用金星姐姐的话来说，“完美”。</p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><p>VScode有一款插件，是用来做PHP代码格式化的，叫做 <code>PHP Formatter</code>， 如果你们公司使用PSR的命名规范，那么这个简直就是福音啊。 下载链接 <a href=\"https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter\">https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter</a></p>\n<h4 id=\"安装php-cs-fixer\"><a href=\"#安装php-cs-fixer\" class=\"headerlink\" title=\"安装php-cs-fixer\"></a>安装php-cs-fixer</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer require fabpot/php-cs-fixer <span class=\"comment\">#使用composer安装依赖</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2018/07/QQ20180725-235749@2x-1024x350.png\"></p>\n<h4 id=\"在VScode上面下载插件\"><a href=\"#在VScode上面下载插件\" class=\"headerlink\" title=\"在VScode上面下载插件\"></a>在VScode上面下载插件</h4><p><img src=\"/uploads/2018/07/QQ20180726-000004-1024x859.png\"></p>\n<h4 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h4><p>VScode-&gt;Code-&gt;首选项-&gt;设置 在<code>用户设置</code>增加截图的json的配置项 <img src=\"/uploads/2018/07/475A8C81-7869-4446-AD83-3EC62F51A6E7-1024x588.png\"></p>\n<h3 id=\"enjoin\"><a href=\"#enjoin\" class=\"headerlink\" title=\"enjoin\"></a>enjoin</h3>"},{"title":"当我们聊技术实力的时候，我们到底在聊什么","id":"459","date":"2019-08-16T09:51:51.000Z","_content":"\n### 技术实力的迷思\n\n* * *\n\n俗话说“文无第一，武无第二”，技术就是一种“文”的能力，很多时候我们很难直观看出一个技术人员的实力，但不管是公司招聘的面试，还是公司内部的晋升面评，都需要在较短时间内快速判断一个技术人员的实力。正因为技术实力评价本身没有绝对客观的标准，很多时候都会听到类似的吐槽：\n\n> “我们组内的 XX 技术实力不如我，竟然他晋升通过了，我却被刷掉了，评委真的是~！@#￥”……\n> \n> “面试官问的都是什么鬼问题，我知道的基本没问，我感觉他根本不会考察我的技术实力”……\n> \n> “听说算法和数据结构最能体现程序员的实力，我要好好啃啃《算法导论》”（然而啃完又忘记了）……\n> \n> ……\n\n有很多类似的问题和吐槽，背后都可以归纳为一个问题：当我们聊技术实力的时候，我们到底在聊什么？\n\n> 有的人认为：技术实力就是指算法和数据结构很厉害……\n> \n> 有的人认为：研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人……\n> \n> 有的人认为：会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法……\n> \n> 有的人认为：技术高手必须对业务很熟悉……\n> \n> 有的人认为：贡献了开源项目代码的才是技术牛人……\n> \n> 有的人认为：只有架构师才是技术大牛……\n\n……不一一列举，相信一千个人眼中有一千个哈姆雷特，一千个程序员心中有一千个技术大牛\n\n![](/uploads/2019/08/WX20190816-173728.png)\n\n### 技术实力的本质\n\n* * *\n\n得益于工作岗位的关系，我在考核技术人员的实力时积累了较丰富的经验（包括踩坑的经验）。首先是招聘，前后面试了几百个人吧，技术范围包括服务器、android、iOS、前端，既包括初出茅庐的应届生，也包括腾讯的 T4 大牛；其次是晋升评委，作为职业等级晋升的评委，面评过几十个晋升的技术同学，各种案例都见过，也与其他评委一起互相交流，有时候甚至是针对某个同学通过还是不通过产生争执。通过这种不断的实践、思考、踩坑、交流的过程，逐步形成了一套完整的方法论，接下来就谈谈我的这套方法论，分享一下我是如何判断技术人员的技术实力的。\n\n简单来说，判断技术实力的一个总的原则就是： **技术实力就是指解决问题的能力！**\n\n我们将这个原则细化一下，可以得到几个细则：\n\n**1\\. 不存在放之四海皆准的技术**\n\n简单来说，问题是和领域相关的，技术是用来解决问题的，因此技术也是领域相关的，不存在放之四海皆准的技术。\n\n有网友说：高斯林来做 iOS 开发，分分钟秒杀现在所有的 iOS 开发人员，因为目前 iOS 经验最丰富的开发人员，经验也不过 10 年。我认为这是不可能的，iOS 开发领域面临的问题，和开发 Java 编程语言面临的问题差异很大，当然，如果高斯林真的做上几年 iOS 开发，确实可能超过很多 iOS 开发人员，但一开始就秒杀哪些做了 7~8 年的 iOS 程序员，这个是不可能的。\n\n**2\\. 技术要能解决具体问题才有价值**\n\n技术只有能够解决某个领域的问题才有价值，否则光知道某个技术没什么用；掌握了某个技术但在当前的领域用不上，这个技术对当前领域来说也没有价值。\n\n当然，确实存在某些技术可能在当前看起来对当前领域没有用，但后面可能会用到，因此技术人员需要自己储备一些当前暂时没有用的技术以拓宽技术视野，例如当前大火的人工智能和区块链技术，但要注意“可能”这个词，这需要技术人员自己进行判断和平衡，不能拿技术储备作为托词一股脑的什么都储备，例如数据库开发工程师至少在这几年是不需要储备 VR 知识的。\n\n**3\\. 问题的复杂度决定技术实力的高度**\n\n问题的复杂度不同，复杂度越高，解决起来越困难，相应的技术实力要求也越高。\n\n我们拿这个原则去分析一下前面提到的各种技术实力的理解：\n\n**“技术实力就是指算法和数据结构很厉害”**\n\n很多面试官喜欢让面试者现场手写冒泡排序、快速排序、链表之类的代码，以此来判断面试者的技术实力，但我们用这个原则去分析一下就可以发现，这样并不能考核技术实力，假如招聘了一个会手写快速排序的面试者，招进来后你会让他用自己写的快速排序解决什么问题？貌似绝大部分场景下都不可能让一个新来的员工自己写个快速排序来解决某个问题吧？\n\n当然，肯定还是有人会说“我考核的是面试者的技术基础和思维能力”，这个说法没错，但如果是这个目的，现场手写快速排序这种面试方法就是错误的，如果是考察技术基础，考核的范围应该是算法的基本逻辑，优缺点、适用场景，因为这些技术点在后续具体应用中选择合适的算法来解决问题的时候很有用；如果是考察思维能力，考核的方式应该是给一个具体的算法应用题，来看看面试者的分析和思考过程，例如我在知乎上给了一道我们业务上曾经用到的“如何快速计算你好友的好友和你的共同好友数”，没想到引起了评论里面的大讨论，有兴趣的朋友也可以尝试一下。\n\n**“研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人”**\n\n国内技术人员（不知道国外是否类似）对于底层技术有一种偏见，认为只有懂底层才是真正的技术高手，否则都只是简单的调用 API 完成功能。我当年也不例外，我曾经说过“程序员的三个大坑：Linux 内核源码、编译原理（龙书）、深入浅出 MFC”，我每个都跳过，而且还花费了大量时间却收效甚微。其实用原则去分析一下就可以发现这个说法也站不住脚，如果我们从事 Linux 内核开发，编程语言开发，MFC 框架开发，这些技术确实能解决问题；但如果做得不是这些领域的开发，这些技术并不能帮我们解决什么问题，我还没见过哪个 Java 编程的问题需要我去用编译原理的技术去解决，也没见过哪个数据库的问题需要我去研究 Linux 内核源码才能解决，当然并不是说这些问题一定不存在，Java 语言本身肯定也有 bug，但这些问题是需要 Java 官方去解决，我们在应用中无需亲自去解决，否则的话，效率会非常低，个人爱好无可厚非，但团队必须考虑效率。\n\n**“会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法”**\n\n这是程序员群体里面永恒的一个话题，哪个语言才是最好的最牛逼的，其中两个著名的梗：PHP 是世界上最好的语言，C++ 是世界上最牛逼的语言。C++ 确实语法复杂，功能强大，真正能完全掌握 C++ 的程序员应该屈指可数，但这是否意味着掌握 C++ 就牛逼了呢？并不尽然，我们拿原则来分析一下，如果用 C++ 做游戏引擎，或者高性能中间件，C++ 确实能解决问题，但如果我们做的是 android 手机资讯 app，C++ 能解决什么问题呢？自己写个加密库可能比系统带的库漏洞还多，自己用 C++ 写个 SQLite 好像没什么意义。\n\n**“架构师才是技术大牛”**\n\n架构师几乎是每个程序员的技术梦想，能够成为架构师（真正的架构师，不是 PPT 架构师），技术实力肯定很强，这点是没有争议的，但问题是当不上架构师就不是技术大牛么？我们用原则来分析一下就会发现并不是这样的，架构师并不是全能的，他解决的主要问题是系统的结构设计，还有一些问题是架构师不能解决的，例如 MySQL 5.6 版本通过优化一个 false sharing 问题，性能提升 50%，\n\n（[http://www.cis.upenn.edu/~delozier/docs/tmi\\_micro\\_2017.pdf](http://www.cis.upenn.edu/~delozier/docs/tmi_micro_2017.pdf)）\n\n这种问题点的发现和处理并不比架构设计简单，能发现和解决这个问题的技术人员实力非常高。\n\n以上分析了几个典型的误区，其它的观点，这里只贴一下简单的答案，大家有兴趣也可以套用这个原则去分析一下具体的原因，基本上八九不离十：\n\n“技术高手必须对业务很熟悉” —— 正确\n\n“贡献了开源项目代码的才是技术牛人”—— 错误\n\n![](/uploads/2019/08/WX20190816-174244.png)\n\n### 技术实力详解\n\n* * *\n\n理解评估技术实力的基本原则后，我们知道了需要解决的问题复杂度越高，技术实力就越高。在这个基础上，我把技术实力分为两大类 6 分类：\n\n**硬实力**：真正解决问题的能力，别人可以看出来的能力，技术实力按照“点、线、面、体”的 4 个分类逐层上升；\n\n**软实力：**比硬实力更厉害但也更虚的能力，简单来说，要想解决问题首先得发现问题，但很多时候问题并不是一目了然的，需要有一定的技术洞察力。软实力主要包括 2 个核心能力：发现问题、技术创新。\n\n#### 硬实力\n\n我把技术硬实力分为四个等级：**点、线、面、体**，技术等级依次提升，解决的问题复杂度也越来越高，下面详细解释一下。\n\n##### 技术点\n\n“点”就是某个具体的技术，用来解决某个具体的问题，例如使用 JDBC 从数据库读取数据，目的是解决数据掉电丢失的问题；使用 Java 多线程，目的是为了解决大量用户并发访问的吞吐量和时延问题。掌握了技术点，就可以开始基本的业务功能开发了。\n\n##### 技术线\n\n“线”就是一系列相关的技术点组成，每个技术点都是为了解决某个问题。例如：\n\n为了完成一个用户请求，开发框架首先要有路由 router 功能，路由到具体 Controller 后，Controller 进行业务逻辑处理，处理过程中可能会使用 JDBC 来读取数据，访问 Redis 读取缓存等，这一连串的技术每个都解决了一个问题点，串起来就完成了一个业务功能的处理过程。\n\n为了定位一个线上 Java 服务器响应慢的问题，需要用到 tcpdump 抓包，使用 Java 工具查看 jvm 的状态，使用 mysql 命令行或者工具查看数据库状态，使用 explain 分析可疑 SQL 语句。\n\n掌握了技术线，就可以完成某个业务功能的全流程设计和开发了。\n\n##### 技术面\n\n“面”就是某一类相关技术线的综合。例如：\n\nJava 开发是一个技术面，包括多线程、JDBC、文件读写、JVM 调优、JVM 工具等多个技术线；\n\n高性能开发是一个技术面，包括：数据库分库分表、缓存、多线程、HTTP 优化等；\n\n数据库维护是一个技术面，包括：数据库调优、数据库问题定位、高性能数据库表设计等；\n\n掌握技术面，已经是某个领域的专家了，简单来说就是这个领域的问题找你都可以搞定。\n\n##### 技术体\n\n“体”就是多个技术面的综合。\n\n最常见的“体”就是架构设计，对于一个大型业务或者系统的架构师来说，需要掌握多个技术面，然后进行设计和取舍。例如，一个后台架构师需要掌握 Java 的技术面、数据库的技术面、网络的技术面等，以及业务领域知识。\n\n架构设计是横向技术面的综合，我称之为广度技术体；还有一种纵向技术面的综合，我称之为深度技术体。例如 Java 的开发工程师，当达到技术面的水平时掌握了“多线程、JDBC、文件读写、JVM 调优、JVM 工具等”，如果需要进一步在 Java 这个领域提升技术，就需要向下了解操作系统、硬件（CPU、内存、磁盘等），从而更好的解决某些复杂的问题，例如 Disruptor 高性能并发框架的设计。掌握了技术体，就可以进行架构设计，或者成为某个领域的资深专家了，解决领域级的复杂问题。\n\n#### 软实力\n\n##### 发现问题\n\n有的问题很明显，例如线上出故障，系统性能不达标，系统性能需要达到 5W QPS；但有的问题并不那么明显，并不能一眼看出是问题在哪里，是技术问题还是管理问题。\n\n例如我们曾遇到团队间协作开发效率很低，每次开发一个业务功能，都需要几个系统的研发人员来讨论接口协议、接口数据格式、接口安全加密、业务逻辑等，大家都不厌其烦，但好像又都必不可少，团队间为了提高效率，项目经理制定了规范、流程、模板等，但作用最终都不大。那后来是怎么解决的呢？通过引入服务中心来完成系统间同步接口调用，通过引入消息队列来完成系统间异步消息通知，系统间协作效率大大提高，以前要开会讨论几个小时的事情，现在只要明确接口传输的数据内容即可，甚至都不用开会，两个研发一讨论就差不多了。\n\n除此以外，问题的根源往往掩盖在很多问题表象之下，如果不解决根源问题，解决一个表象问题，获得一时安宁，一段时间后又发生另外的问题，长此以往反反复复。\n\n例如我们曾有个系统，今天交换机故障导致业务问题，明天系统 bug 导致业务问题，后天机柜断电导致业务问题，还被黑客攻击过，这些问题看起来都很独立，问题的发生也感觉都是偶然的，按照出一个问题解决一个问题的方式也没什么问题，但全年来看，业务就是出了很多问题，怎么解决？我们经过分析，发现根本原因是业务需要异地多活，而架构是双机房单中心的，我们需要做到的不是避免每个问题的发生（事实上也不可能避免），而是应该做到问题发生后能够快速处理，于是通过将架构重构为异地多活，重构完成后还是有各种偶发问题发生，但对业务的影响就很小了。\n\n发现问题的能力主要来源于经验，包括成功的经验、踩坑的经验、参考别人的经验，因此如果要培养自己这方面的能力，多思考、多总结、多学习、多参加行业交流。\n\n##### 技术创新\n\n达到这个级别基本都是业界大神一般的级别，说实话我也没什么经验，只能仰慕这些大神。\n\n例如：\n\n*   当年贝索斯要求亚马逊公司内的系统都服务化，后来是哪位大神想到可以把这个能力开放出来转换为“云计算”？\n    \n*   阿里云王坚博士当年在众人都不看好的情况下为何坚持云计算是未来？\n    \n*   Google 在解决大数据问题时，如何能够提炼出三篇论文，开启了一个大数据时代？\n    \n\n![](/uploads/2019/08/WX20190816-174557.png)\n\n### 技术实力案例点评\n\n* * *\n\n一个面试者面试 Java 技术专家岗位，其中有一项项目经验很牛逼：XX 架构重构，性能提升 10 倍。于是，我针对这个项目经验进行了深入的考察，结果……\n\n下面是我们大概的对话过程：\n\n我：请简单介绍一下这个项目重构。\n\n面：我们某个业务和比赛有关，每次关键比赛前业务访问量是平时的 10 倍以上，原来的系统量一大就卡死了，用户体验很不好，需要重构。\n\n我：具体怎么做的呢？\n\n面：我通过引入 mc 缓存，将原来直接访问数据库的操作改为先访问缓存，性能比原来提升了 10 倍。我：为何你想到了引入 mc？\n\n面：（卡了一下，有点惊讶我的问题）……我上网查了一下资料，很多都说 mc 能够大幅提升性能，并且使用后确实效果很好。\n\n> \\[点评 1\\] 这是典型的“代码靠抄，方案靠搜，效果靠试”，面试者看到了一个问题，但没有分析和思考，然后上网搜方案，看到了好像很多人都说引入 mc 都能解决问题，于是尝试引入了 mc，最终确实好像解决了，这让面试者自我感觉良好。\n> \n> 为何我在面试的时候问“为何引入”，这是不是一种“面试造航母，入职拧螺丝”的装逼面试呢？其实不然，我们的业务中遇到性能瓶颈的问题是非常常见的，而简单的“性能瓶颈”只是一个表象，我们看看可能的原因有哪些：\n> \n> 1.  数据库慢查询，例如不合理的查询、没有索引、表数量太大等；\n> 2.  并发设计不合理，例如多线程锁设计不合理，采用了不合理的 Reactor 模型等；\n> 3.  代码逻辑不合理，例如本来可以异步处理的也采用了同步处理，某个循环里面重复访问数据库，某个接口打印了大量日志等；\n> 4.  外部系统性能低，例如依赖的某个系统性能低，太多无效的外部接口请求等；\n> 5.  数据访问不合理，例如没有用缓存，没有分页等；\n> 6.  非核心业务和核心业务互相影响；\n> \n> 以上仅仅是举例，还有更多可能的原因，如果一个技术专家不具备“面”的技术，只知道 mc 可以提升性能这个“点”的技术，是远远不够的，一次运气好能解决问题，但不可能次次都运气好。 当然，如果面试的是“Java 高级开发工程师”，面试重点和面试问题又不一样了。\n\n* * *\n\n我：mc 能大幅提升性能的原理是什么？\n\n面：缓存访问快，数据库访问慢。\n\n我：那 mc 性能多高，数据库性能多高？\n\n面：……（想了 10 秒）抱歉，没有研究过。\n\n> \\[点评 2\\] 这是典型的知其然不知其所以然，开源方案拿来就用，基本的测试和原理研究都没做过。大部分人对于很多概念的理解都是“性能高”，“可靠性好”，“听说很厉害”，但在具体设计的时候，这个理解是远远不够的，一定要量化，例如：同样是负载均衡，Nginx 的性能量级是万级，LVS 是 10 万级，F5 这类设备是百万级（具体数值和硬件以及数据包大小相关，这里只给量级）。\n> \n> 为何要研究原理呢？以 mc 为例，一致性 hash 和扩容相关，内存分配方式和缓存容量有关，如果这些都不清楚，实际应该部署多少 mc 节点，每个节点应该分配多少内存，这些都没法确定。\n\n* * *\n\n我：没关系，那我们换个问题，重构后你们的系统用到的机器数量是多少？相比重构前减少了多少？\n\n面：机器数量是 100 台，相比重构前没有减少。\n\n我：哦，100 台机器，QPS 每台才 300 多，我看你们的业务也不是很复杂，为何这么低？\n\n面：……（卡住 10 秒）这……300 多 QPS 好像也不低吧？\n\n我：那你有没有分析过每次请求全流程每个阶段的性能耗时？瓶颈在哪里？\n\n面：（卡住 5 秒）没有分析过呢？\n\n我：那为何就认定引入 mc 就有效果？\n\n面：……（卡住 10 秒）我看大家都说引入缓存能大幅提升性能，而且最终效果确实很好。\n\n> \\[点评\\] 这就是知道技术点，不知道技术线和技术面，按道理对于系统性能问题的分析，至少是技术线级别的，需要分析每个请求每个阶段的耗时和原因；也可以是技术面级别的，例如分析数据库的设计、服务器的负载均衡等，还可以是技术体级别的，例如架构是否合理，是否可以将某个子系统拆分，引入消息队列等。\n\n我：好吧，换个问题，如果让你再一次优化系统，你觉得可以怎么做？\n\n面：……（思考 20 秒）我觉得目前的系统性能已经足够，应该不需要优化了。\n\n> \\[点评\\] 考察的是发现问题的能力，但他发现不了问题，其实前面已经都提到了，100 台机器就是问题，QPS 过低也是问题，但由于他没有经验，是看不出这些问题的。\n\n很遗憾，最终这个面试者没有通过面试。\n\n### 写在最后\n\n* * *\n\n对于技术人员实力的判断，并不存在完全客观和可量化的标准，多少都带有评判者的主观判断，这也是最容易产生争议的地方，本文也是我自己的一个思考和总结，一家之言，抛砖引玉，欢迎大家探讨交流。\n\n文章来自 李云华--《当我们聊技术实力的时候，我们到底在聊什么》","source":"_posts/当我们聊技术实力的时候，我们到底在聊什么.md","raw":"---\ntitle: 当我们聊技术实力的时候，我们到底在聊什么\ntags:\n  - 成长进阶\n  - 面试\nid: '459'\ncategories:\n  - - 自我反思\ndate: 2019-08-16 17:51:51\n---\n\n### 技术实力的迷思\n\n* * *\n\n俗话说“文无第一，武无第二”，技术就是一种“文”的能力，很多时候我们很难直观看出一个技术人员的实力，但不管是公司招聘的面试，还是公司内部的晋升面评，都需要在较短时间内快速判断一个技术人员的实力。正因为技术实力评价本身没有绝对客观的标准，很多时候都会听到类似的吐槽：\n\n> “我们组内的 XX 技术实力不如我，竟然他晋升通过了，我却被刷掉了，评委真的是~！@#￥”……\n> \n> “面试官问的都是什么鬼问题，我知道的基本没问，我感觉他根本不会考察我的技术实力”……\n> \n> “听说算法和数据结构最能体现程序员的实力，我要好好啃啃《算法导论》”（然而啃完又忘记了）……\n> \n> ……\n\n有很多类似的问题和吐槽，背后都可以归纳为一个问题：当我们聊技术实力的时候，我们到底在聊什么？\n\n> 有的人认为：技术实力就是指算法和数据结构很厉害……\n> \n> 有的人认为：研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人……\n> \n> 有的人认为：会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法……\n> \n> 有的人认为：技术高手必须对业务很熟悉……\n> \n> 有的人认为：贡献了开源项目代码的才是技术牛人……\n> \n> 有的人认为：只有架构师才是技术大牛……\n\n……不一一列举，相信一千个人眼中有一千个哈姆雷特，一千个程序员心中有一千个技术大牛\n\n![](/uploads/2019/08/WX20190816-173728.png)\n\n### 技术实力的本质\n\n* * *\n\n得益于工作岗位的关系，我在考核技术人员的实力时积累了较丰富的经验（包括踩坑的经验）。首先是招聘，前后面试了几百个人吧，技术范围包括服务器、android、iOS、前端，既包括初出茅庐的应届生，也包括腾讯的 T4 大牛；其次是晋升评委，作为职业等级晋升的评委，面评过几十个晋升的技术同学，各种案例都见过，也与其他评委一起互相交流，有时候甚至是针对某个同学通过还是不通过产生争执。通过这种不断的实践、思考、踩坑、交流的过程，逐步形成了一套完整的方法论，接下来就谈谈我的这套方法论，分享一下我是如何判断技术人员的技术实力的。\n\n简单来说，判断技术实力的一个总的原则就是： **技术实力就是指解决问题的能力！**\n\n我们将这个原则细化一下，可以得到几个细则：\n\n**1\\. 不存在放之四海皆准的技术**\n\n简单来说，问题是和领域相关的，技术是用来解决问题的，因此技术也是领域相关的，不存在放之四海皆准的技术。\n\n有网友说：高斯林来做 iOS 开发，分分钟秒杀现在所有的 iOS 开发人员，因为目前 iOS 经验最丰富的开发人员，经验也不过 10 年。我认为这是不可能的，iOS 开发领域面临的问题，和开发 Java 编程语言面临的问题差异很大，当然，如果高斯林真的做上几年 iOS 开发，确实可能超过很多 iOS 开发人员，但一开始就秒杀哪些做了 7~8 年的 iOS 程序员，这个是不可能的。\n\n**2\\. 技术要能解决具体问题才有价值**\n\n技术只有能够解决某个领域的问题才有价值，否则光知道某个技术没什么用；掌握了某个技术但在当前的领域用不上，这个技术对当前领域来说也没有价值。\n\n当然，确实存在某些技术可能在当前看起来对当前领域没有用，但后面可能会用到，因此技术人员需要自己储备一些当前暂时没有用的技术以拓宽技术视野，例如当前大火的人工智能和区块链技术，但要注意“可能”这个词，这需要技术人员自己进行判断和平衡，不能拿技术储备作为托词一股脑的什么都储备，例如数据库开发工程师至少在这几年是不需要储备 VR 知识的。\n\n**3\\. 问题的复杂度决定技术实力的高度**\n\n问题的复杂度不同，复杂度越高，解决起来越困难，相应的技术实力要求也越高。\n\n我们拿这个原则去分析一下前面提到的各种技术实力的理解：\n\n**“技术实力就是指算法和数据结构很厉害”**\n\n很多面试官喜欢让面试者现场手写冒泡排序、快速排序、链表之类的代码，以此来判断面试者的技术实力，但我们用这个原则去分析一下就可以发现，这样并不能考核技术实力，假如招聘了一个会手写快速排序的面试者，招进来后你会让他用自己写的快速排序解决什么问题？貌似绝大部分场景下都不可能让一个新来的员工自己写个快速排序来解决某个问题吧？\n\n当然，肯定还是有人会说“我考核的是面试者的技术基础和思维能力”，这个说法没错，但如果是这个目的，现场手写快速排序这种面试方法就是错误的，如果是考察技术基础，考核的范围应该是算法的基本逻辑，优缺点、适用场景，因为这些技术点在后续具体应用中选择合适的算法来解决问题的时候很有用；如果是考察思维能力，考核的方式应该是给一个具体的算法应用题，来看看面试者的分析和思考过程，例如我在知乎上给了一道我们业务上曾经用到的“如何快速计算你好友的好友和你的共同好友数”，没想到引起了评论里面的大讨论，有兴趣的朋友也可以尝试一下。\n\n**“研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人”**\n\n国内技术人员（不知道国外是否类似）对于底层技术有一种偏见，认为只有懂底层才是真正的技术高手，否则都只是简单的调用 API 完成功能。我当年也不例外，我曾经说过“程序员的三个大坑：Linux 内核源码、编译原理（龙书）、深入浅出 MFC”，我每个都跳过，而且还花费了大量时间却收效甚微。其实用原则去分析一下就可以发现这个说法也站不住脚，如果我们从事 Linux 内核开发，编程语言开发，MFC 框架开发，这些技术确实能解决问题；但如果做得不是这些领域的开发，这些技术并不能帮我们解决什么问题，我还没见过哪个 Java 编程的问题需要我去用编译原理的技术去解决，也没见过哪个数据库的问题需要我去研究 Linux 内核源码才能解决，当然并不是说这些问题一定不存在，Java 语言本身肯定也有 bug，但这些问题是需要 Java 官方去解决，我们在应用中无需亲自去解决，否则的话，效率会非常低，个人爱好无可厚非，但团队必须考虑效率。\n\n**“会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法”**\n\n这是程序员群体里面永恒的一个话题，哪个语言才是最好的最牛逼的，其中两个著名的梗：PHP 是世界上最好的语言，C++ 是世界上最牛逼的语言。C++ 确实语法复杂，功能强大，真正能完全掌握 C++ 的程序员应该屈指可数，但这是否意味着掌握 C++ 就牛逼了呢？并不尽然，我们拿原则来分析一下，如果用 C++ 做游戏引擎，或者高性能中间件，C++ 确实能解决问题，但如果我们做的是 android 手机资讯 app，C++ 能解决什么问题呢？自己写个加密库可能比系统带的库漏洞还多，自己用 C++ 写个 SQLite 好像没什么意义。\n\n**“架构师才是技术大牛”**\n\n架构师几乎是每个程序员的技术梦想，能够成为架构师（真正的架构师，不是 PPT 架构师），技术实力肯定很强，这点是没有争议的，但问题是当不上架构师就不是技术大牛么？我们用原则来分析一下就会发现并不是这样的，架构师并不是全能的，他解决的主要问题是系统的结构设计，还有一些问题是架构师不能解决的，例如 MySQL 5.6 版本通过优化一个 false sharing 问题，性能提升 50%，\n\n（[http://www.cis.upenn.edu/~delozier/docs/tmi\\_micro\\_2017.pdf](http://www.cis.upenn.edu/~delozier/docs/tmi_micro_2017.pdf)）\n\n这种问题点的发现和处理并不比架构设计简单，能发现和解决这个问题的技术人员实力非常高。\n\n以上分析了几个典型的误区，其它的观点，这里只贴一下简单的答案，大家有兴趣也可以套用这个原则去分析一下具体的原因，基本上八九不离十：\n\n“技术高手必须对业务很熟悉” —— 正确\n\n“贡献了开源项目代码的才是技术牛人”—— 错误\n\n![](/uploads/2019/08/WX20190816-174244.png)\n\n### 技术实力详解\n\n* * *\n\n理解评估技术实力的基本原则后，我们知道了需要解决的问题复杂度越高，技术实力就越高。在这个基础上，我把技术实力分为两大类 6 分类：\n\n**硬实力**：真正解决问题的能力，别人可以看出来的能力，技术实力按照“点、线、面、体”的 4 个分类逐层上升；\n\n**软实力：**比硬实力更厉害但也更虚的能力，简单来说，要想解决问题首先得发现问题，但很多时候问题并不是一目了然的，需要有一定的技术洞察力。软实力主要包括 2 个核心能力：发现问题、技术创新。\n\n#### 硬实力\n\n我把技术硬实力分为四个等级：**点、线、面、体**，技术等级依次提升，解决的问题复杂度也越来越高，下面详细解释一下。\n\n##### 技术点\n\n“点”就是某个具体的技术，用来解决某个具体的问题，例如使用 JDBC 从数据库读取数据，目的是解决数据掉电丢失的问题；使用 Java 多线程，目的是为了解决大量用户并发访问的吞吐量和时延问题。掌握了技术点，就可以开始基本的业务功能开发了。\n\n##### 技术线\n\n“线”就是一系列相关的技术点组成，每个技术点都是为了解决某个问题。例如：\n\n为了完成一个用户请求，开发框架首先要有路由 router 功能，路由到具体 Controller 后，Controller 进行业务逻辑处理，处理过程中可能会使用 JDBC 来读取数据，访问 Redis 读取缓存等，这一连串的技术每个都解决了一个问题点，串起来就完成了一个业务功能的处理过程。\n\n为了定位一个线上 Java 服务器响应慢的问题，需要用到 tcpdump 抓包，使用 Java 工具查看 jvm 的状态，使用 mysql 命令行或者工具查看数据库状态，使用 explain 分析可疑 SQL 语句。\n\n掌握了技术线，就可以完成某个业务功能的全流程设计和开发了。\n\n##### 技术面\n\n“面”就是某一类相关技术线的综合。例如：\n\nJava 开发是一个技术面，包括多线程、JDBC、文件读写、JVM 调优、JVM 工具等多个技术线；\n\n高性能开发是一个技术面，包括：数据库分库分表、缓存、多线程、HTTP 优化等；\n\n数据库维护是一个技术面，包括：数据库调优、数据库问题定位、高性能数据库表设计等；\n\n掌握技术面，已经是某个领域的专家了，简单来说就是这个领域的问题找你都可以搞定。\n\n##### 技术体\n\n“体”就是多个技术面的综合。\n\n最常见的“体”就是架构设计，对于一个大型业务或者系统的架构师来说，需要掌握多个技术面，然后进行设计和取舍。例如，一个后台架构师需要掌握 Java 的技术面、数据库的技术面、网络的技术面等，以及业务领域知识。\n\n架构设计是横向技术面的综合，我称之为广度技术体；还有一种纵向技术面的综合，我称之为深度技术体。例如 Java 的开发工程师，当达到技术面的水平时掌握了“多线程、JDBC、文件读写、JVM 调优、JVM 工具等”，如果需要进一步在 Java 这个领域提升技术，就需要向下了解操作系统、硬件（CPU、内存、磁盘等），从而更好的解决某些复杂的问题，例如 Disruptor 高性能并发框架的设计。掌握了技术体，就可以进行架构设计，或者成为某个领域的资深专家了，解决领域级的复杂问题。\n\n#### 软实力\n\n##### 发现问题\n\n有的问题很明显，例如线上出故障，系统性能不达标，系统性能需要达到 5W QPS；但有的问题并不那么明显，并不能一眼看出是问题在哪里，是技术问题还是管理问题。\n\n例如我们曾遇到团队间协作开发效率很低，每次开发一个业务功能，都需要几个系统的研发人员来讨论接口协议、接口数据格式、接口安全加密、业务逻辑等，大家都不厌其烦，但好像又都必不可少，团队间为了提高效率，项目经理制定了规范、流程、模板等，但作用最终都不大。那后来是怎么解决的呢？通过引入服务中心来完成系统间同步接口调用，通过引入消息队列来完成系统间异步消息通知，系统间协作效率大大提高，以前要开会讨论几个小时的事情，现在只要明确接口传输的数据内容即可，甚至都不用开会，两个研发一讨论就差不多了。\n\n除此以外，问题的根源往往掩盖在很多问题表象之下，如果不解决根源问题，解决一个表象问题，获得一时安宁，一段时间后又发生另外的问题，长此以往反反复复。\n\n例如我们曾有个系统，今天交换机故障导致业务问题，明天系统 bug 导致业务问题，后天机柜断电导致业务问题，还被黑客攻击过，这些问题看起来都很独立，问题的发生也感觉都是偶然的，按照出一个问题解决一个问题的方式也没什么问题，但全年来看，业务就是出了很多问题，怎么解决？我们经过分析，发现根本原因是业务需要异地多活，而架构是双机房单中心的，我们需要做到的不是避免每个问题的发生（事实上也不可能避免），而是应该做到问题发生后能够快速处理，于是通过将架构重构为异地多活，重构完成后还是有各种偶发问题发生，但对业务的影响就很小了。\n\n发现问题的能力主要来源于经验，包括成功的经验、踩坑的经验、参考别人的经验，因此如果要培养自己这方面的能力，多思考、多总结、多学习、多参加行业交流。\n\n##### 技术创新\n\n达到这个级别基本都是业界大神一般的级别，说实话我也没什么经验，只能仰慕这些大神。\n\n例如：\n\n*   当年贝索斯要求亚马逊公司内的系统都服务化，后来是哪位大神想到可以把这个能力开放出来转换为“云计算”？\n    \n*   阿里云王坚博士当年在众人都不看好的情况下为何坚持云计算是未来？\n    \n*   Google 在解决大数据问题时，如何能够提炼出三篇论文，开启了一个大数据时代？\n    \n\n![](/uploads/2019/08/WX20190816-174557.png)\n\n### 技术实力案例点评\n\n* * *\n\n一个面试者面试 Java 技术专家岗位，其中有一项项目经验很牛逼：XX 架构重构，性能提升 10 倍。于是，我针对这个项目经验进行了深入的考察，结果……\n\n下面是我们大概的对话过程：\n\n我：请简单介绍一下这个项目重构。\n\n面：我们某个业务和比赛有关，每次关键比赛前业务访问量是平时的 10 倍以上，原来的系统量一大就卡死了，用户体验很不好，需要重构。\n\n我：具体怎么做的呢？\n\n面：我通过引入 mc 缓存，将原来直接访问数据库的操作改为先访问缓存，性能比原来提升了 10 倍。我：为何你想到了引入 mc？\n\n面：（卡了一下，有点惊讶我的问题）……我上网查了一下资料，很多都说 mc 能够大幅提升性能，并且使用后确实效果很好。\n\n> \\[点评 1\\] 这是典型的“代码靠抄，方案靠搜，效果靠试”，面试者看到了一个问题，但没有分析和思考，然后上网搜方案，看到了好像很多人都说引入 mc 都能解决问题，于是尝试引入了 mc，最终确实好像解决了，这让面试者自我感觉良好。\n> \n> 为何我在面试的时候问“为何引入”，这是不是一种“面试造航母，入职拧螺丝”的装逼面试呢？其实不然，我们的业务中遇到性能瓶颈的问题是非常常见的，而简单的“性能瓶颈”只是一个表象，我们看看可能的原因有哪些：\n> \n> 1.  数据库慢查询，例如不合理的查询、没有索引、表数量太大等；\n> 2.  并发设计不合理，例如多线程锁设计不合理，采用了不合理的 Reactor 模型等；\n> 3.  代码逻辑不合理，例如本来可以异步处理的也采用了同步处理，某个循环里面重复访问数据库，某个接口打印了大量日志等；\n> 4.  外部系统性能低，例如依赖的某个系统性能低，太多无效的外部接口请求等；\n> 5.  数据访问不合理，例如没有用缓存，没有分页等；\n> 6.  非核心业务和核心业务互相影响；\n> \n> 以上仅仅是举例，还有更多可能的原因，如果一个技术专家不具备“面”的技术，只知道 mc 可以提升性能这个“点”的技术，是远远不够的，一次运气好能解决问题，但不可能次次都运气好。 当然，如果面试的是“Java 高级开发工程师”，面试重点和面试问题又不一样了。\n\n* * *\n\n我：mc 能大幅提升性能的原理是什么？\n\n面：缓存访问快，数据库访问慢。\n\n我：那 mc 性能多高，数据库性能多高？\n\n面：……（想了 10 秒）抱歉，没有研究过。\n\n> \\[点评 2\\] 这是典型的知其然不知其所以然，开源方案拿来就用，基本的测试和原理研究都没做过。大部分人对于很多概念的理解都是“性能高”，“可靠性好”，“听说很厉害”，但在具体设计的时候，这个理解是远远不够的，一定要量化，例如：同样是负载均衡，Nginx 的性能量级是万级，LVS 是 10 万级，F5 这类设备是百万级（具体数值和硬件以及数据包大小相关，这里只给量级）。\n> \n> 为何要研究原理呢？以 mc 为例，一致性 hash 和扩容相关，内存分配方式和缓存容量有关，如果这些都不清楚，实际应该部署多少 mc 节点，每个节点应该分配多少内存，这些都没法确定。\n\n* * *\n\n我：没关系，那我们换个问题，重构后你们的系统用到的机器数量是多少？相比重构前减少了多少？\n\n面：机器数量是 100 台，相比重构前没有减少。\n\n我：哦，100 台机器，QPS 每台才 300 多，我看你们的业务也不是很复杂，为何这么低？\n\n面：……（卡住 10 秒）这……300 多 QPS 好像也不低吧？\n\n我：那你有没有分析过每次请求全流程每个阶段的性能耗时？瓶颈在哪里？\n\n面：（卡住 5 秒）没有分析过呢？\n\n我：那为何就认定引入 mc 就有效果？\n\n面：……（卡住 10 秒）我看大家都说引入缓存能大幅提升性能，而且最终效果确实很好。\n\n> \\[点评\\] 这就是知道技术点，不知道技术线和技术面，按道理对于系统性能问题的分析，至少是技术线级别的，需要分析每个请求每个阶段的耗时和原因；也可以是技术面级别的，例如分析数据库的设计、服务器的负载均衡等，还可以是技术体级别的，例如架构是否合理，是否可以将某个子系统拆分，引入消息队列等。\n\n我：好吧，换个问题，如果让你再一次优化系统，你觉得可以怎么做？\n\n面：……（思考 20 秒）我觉得目前的系统性能已经足够，应该不需要优化了。\n\n> \\[点评\\] 考察的是发现问题的能力，但他发现不了问题，其实前面已经都提到了，100 台机器就是问题，QPS 过低也是问题，但由于他没有经验，是看不出这些问题的。\n\n很遗憾，最终这个面试者没有通过面试。\n\n### 写在最后\n\n* * *\n\n对于技术人员实力的判断，并不存在完全客观和可量化的标准，多少都带有评判者的主观判断，这也是最容易产生争议的地方，本文也是我自己的一个思考和总结，一家之言，抛砖引玉，欢迎大家探讨交流。\n\n文章来自 李云华--《当我们聊技术实力的时候，我们到底在聊什么》","slug":"当我们聊技术实力的时候，我们到底在聊什么","published":1,"updated":"2022-03-13T01:17:12.506Z","_id":"cl0oi8min008g417tcc3016rl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"技术实力的迷思\"><a href=\"#技术实力的迷思\" class=\"headerlink\" title=\"技术实力的迷思\"></a>技术实力的迷思</h3><hr>\n<p>俗话说“文无第一，武无第二”，技术就是一种“文”的能力，很多时候我们很难直观看出一个技术人员的实力，但不管是公司招聘的面试，还是公司内部的晋升面评，都需要在较短时间内快速判断一个技术人员的实力。正因为技术实力评价本身没有绝对客观的标准，很多时候都会听到类似的吐槽：</p>\n<blockquote>\n<p>“我们组内的 XX 技术实力不如我，竟然他晋升通过了，我却被刷掉了，评委真的是~！@#￥”……</p>\n<p>“面试官问的都是什么鬼问题，我知道的基本没问，我感觉他根本不会考察我的技术实力”……</p>\n<p>“听说算法和数据结构最能体现程序员的实力，我要好好啃啃《算法导论》”（然而啃完又忘记了）……</p>\n<p>……</p>\n</blockquote>\n<p>有很多类似的问题和吐槽，背后都可以归纳为一个问题：当我们聊技术实力的时候，我们到底在聊什么？</p>\n<blockquote>\n<p>有的人认为：技术实力就是指算法和数据结构很厉害……</p>\n<p>有的人认为：研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人……</p>\n<p>有的人认为：会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法……</p>\n<p>有的人认为：技术高手必须对业务很熟悉……</p>\n<p>有的人认为：贡献了开源项目代码的才是技术牛人……</p>\n<p>有的人认为：只有架构师才是技术大牛……</p>\n</blockquote>\n<p>……不一一列举，相信一千个人眼中有一千个哈姆雷特，一千个程序员心中有一千个技术大牛</p>\n<p><img src=\"/uploads/2019/08/WX20190816-173728.png\"></p>\n<h3 id=\"技术实力的本质\"><a href=\"#技术实力的本质\" class=\"headerlink\" title=\"技术实力的本质\"></a>技术实力的本质</h3><hr>\n<p>得益于工作岗位的关系，我在考核技术人员的实力时积累了较丰富的经验（包括踩坑的经验）。首先是招聘，前后面试了几百个人吧，技术范围包括服务器、android、iOS、前端，既包括初出茅庐的应届生，也包括腾讯的 T4 大牛；其次是晋升评委，作为职业等级晋升的评委，面评过几十个晋升的技术同学，各种案例都见过，也与其他评委一起互相交流，有时候甚至是针对某个同学通过还是不通过产生争执。通过这种不断的实践、思考、踩坑、交流的过程，逐步形成了一套完整的方法论，接下来就谈谈我的这套方法论，分享一下我是如何判断技术人员的技术实力的。</p>\n<p>简单来说，判断技术实力的一个总的原则就是： <strong>技术实力就是指解决问题的能力！</strong></p>\n<p>我们将这个原则细化一下，可以得到几个细则：</p>\n<p><strong>1. 不存在放之四海皆准的技术</strong></p>\n<p>简单来说，问题是和领域相关的，技术是用来解决问题的，因此技术也是领域相关的，不存在放之四海皆准的技术。</p>\n<p>有网友说：高斯林来做 iOS 开发，分分钟秒杀现在所有的 iOS 开发人员，因为目前 iOS 经验最丰富的开发人员，经验也不过 10 年。我认为这是不可能的，iOS 开发领域面临的问题，和开发 Java 编程语言面临的问题差异很大，当然，如果高斯林真的做上几年 iOS 开发，确实可能超过很多 iOS 开发人员，但一开始就秒杀哪些做了 7~8 年的 iOS 程序员，这个是不可能的。</p>\n<p><strong>2. 技术要能解决具体问题才有价值</strong></p>\n<p>技术只有能够解决某个领域的问题才有价值，否则光知道某个技术没什么用；掌握了某个技术但在当前的领域用不上，这个技术对当前领域来说也没有价值。</p>\n<p>当然，确实存在某些技术可能在当前看起来对当前领域没有用，但后面可能会用到，因此技术人员需要自己储备一些当前暂时没有用的技术以拓宽技术视野，例如当前大火的人工智能和区块链技术，但要注意“可能”这个词，这需要技术人员自己进行判断和平衡，不能拿技术储备作为托词一股脑的什么都储备，例如数据库开发工程师至少在这几年是不需要储备 VR 知识的。</p>\n<p><strong>3. 问题的复杂度决定技术实力的高度</strong></p>\n<p>问题的复杂度不同，复杂度越高，解决起来越困难，相应的技术实力要求也越高。</p>\n<p>我们拿这个原则去分析一下前面提到的各种技术实力的理解：</p>\n<p><strong>“技术实力就是指算法和数据结构很厉害”</strong></p>\n<p>很多面试官喜欢让面试者现场手写冒泡排序、快速排序、链表之类的代码，以此来判断面试者的技术实力，但我们用这个原则去分析一下就可以发现，这样并不能考核技术实力，假如招聘了一个会手写快速排序的面试者，招进来后你会让他用自己写的快速排序解决什么问题？貌似绝大部分场景下都不可能让一个新来的员工自己写个快速排序来解决某个问题吧？</p>\n<p>当然，肯定还是有人会说“我考核的是面试者的技术基础和思维能力”，这个说法没错，但如果是这个目的，现场手写快速排序这种面试方法就是错误的，如果是考察技术基础，考核的范围应该是算法的基本逻辑，优缺点、适用场景，因为这些技术点在后续具体应用中选择合适的算法来解决问题的时候很有用；如果是考察思维能力，考核的方式应该是给一个具体的算法应用题，来看看面试者的分析和思考过程，例如我在知乎上给了一道我们业务上曾经用到的“如何快速计算你好友的好友和你的共同好友数”，没想到引起了评论里面的大讨论，有兴趣的朋友也可以尝试一下。</p>\n<p><strong>“研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人”</strong></p>\n<p>国内技术人员（不知道国外是否类似）对于底层技术有一种偏见，认为只有懂底层才是真正的技术高手，否则都只是简单的调用 API 完成功能。我当年也不例外，我曾经说过“程序员的三个大坑：Linux 内核源码、编译原理（龙书）、深入浅出 MFC”，我每个都跳过，而且还花费了大量时间却收效甚微。其实用原则去分析一下就可以发现这个说法也站不住脚，如果我们从事 Linux 内核开发，编程语言开发，MFC 框架开发，这些技术确实能解决问题；但如果做得不是这些领域的开发，这些技术并不能帮我们解决什么问题，我还没见过哪个 Java 编程的问题需要我去用编译原理的技术去解决，也没见过哪个数据库的问题需要我去研究 Linux 内核源码才能解决，当然并不是说这些问题一定不存在，Java 语言本身肯定也有 bug，但这些问题是需要 Java 官方去解决，我们在应用中无需亲自去解决，否则的话，效率会非常低，个人爱好无可厚非，但团队必须考虑效率。</p>\n<p><strong>“会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法”</strong></p>\n<p>这是程序员群体里面永恒的一个话题，哪个语言才是最好的最牛逼的，其中两个著名的梗：PHP 是世界上最好的语言，C++ 是世界上最牛逼的语言。C++ 确实语法复杂，功能强大，真正能完全掌握 C++ 的程序员应该屈指可数，但这是否意味着掌握 C++ 就牛逼了呢？并不尽然，我们拿原则来分析一下，如果用 C++ 做游戏引擎，或者高性能中间件，C++ 确实能解决问题，但如果我们做的是 android 手机资讯 app，C++ 能解决什么问题呢？自己写个加密库可能比系统带的库漏洞还多，自己用 C++ 写个 SQLite 好像没什么意义。</p>\n<p><strong>“架构师才是技术大牛”</strong></p>\n<p>架构师几乎是每个程序员的技术梦想，能够成为架构师（真正的架构师，不是 PPT 架构师），技术实力肯定很强，这点是没有争议的，但问题是当不上架构师就不是技术大牛么？我们用原则来分析一下就会发现并不是这样的，架构师并不是全能的，他解决的主要问题是系统的结构设计，还有一些问题是架构师不能解决的，例如 MySQL 5.6 版本通过优化一个 false sharing 问题，性能提升 50%，</p>\n<p>（<a href=\"http://www.cis.upenn.edu/~delozier/docs/tmi_micro_2017.pdf\">http://www.cis.upenn.edu/~delozier&#x2F;docs&#x2F;tmi_micro_2017.pdf</a>）</p>\n<p>这种问题点的发现和处理并不比架构设计简单，能发现和解决这个问题的技术人员实力非常高。</p>\n<p>以上分析了几个典型的误区，其它的观点，这里只贴一下简单的答案，大家有兴趣也可以套用这个原则去分析一下具体的原因，基本上八九不离十：</p>\n<p>“技术高手必须对业务很熟悉” —— 正确</p>\n<p>“贡献了开源项目代码的才是技术牛人”—— 错误</p>\n<p><img src=\"/uploads/2019/08/WX20190816-174244.png\"></p>\n<h3 id=\"技术实力详解\"><a href=\"#技术实力详解\" class=\"headerlink\" title=\"技术实力详解\"></a>技术实力详解</h3><hr>\n<p>理解评估技术实力的基本原则后，我们知道了需要解决的问题复杂度越高，技术实力就越高。在这个基础上，我把技术实力分为两大类 6 分类：</p>\n<p><strong>硬实力</strong>：真正解决问题的能力，别人可以看出来的能力，技术实力按照“点、线、面、体”的 4 个分类逐层上升；</p>\n<p><strong>软实力：</strong>比硬实力更厉害但也更虚的能力，简单来说，要想解决问题首先得发现问题，但很多时候问题并不是一目了然的，需要有一定的技术洞察力。软实力主要包括 2 个核心能力：发现问题、技术创新。</p>\n<h4 id=\"硬实力\"><a href=\"#硬实力\" class=\"headerlink\" title=\"硬实力\"></a>硬实力</h4><p>我把技术硬实力分为四个等级：<strong>点、线、面、体</strong>，技术等级依次提升，解决的问题复杂度也越来越高，下面详细解释一下。</p>\n<h5 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h5><p>“点”就是某个具体的技术，用来解决某个具体的问题，例如使用 JDBC 从数据库读取数据，目的是解决数据掉电丢失的问题；使用 Java 多线程，目的是为了解决大量用户并发访问的吞吐量和时延问题。掌握了技术点，就可以开始基本的业务功能开发了。</p>\n<h5 id=\"技术线\"><a href=\"#技术线\" class=\"headerlink\" title=\"技术线\"></a>技术线</h5><p>“线”就是一系列相关的技术点组成，每个技术点都是为了解决某个问题。例如：</p>\n<p>为了完成一个用户请求，开发框架首先要有路由 router 功能，路由到具体 Controller 后，Controller 进行业务逻辑处理，处理过程中可能会使用 JDBC 来读取数据，访问 Redis 读取缓存等，这一连串的技术每个都解决了一个问题点，串起来就完成了一个业务功能的处理过程。</p>\n<p>为了定位一个线上 Java 服务器响应慢的问题，需要用到 tcpdump 抓包，使用 Java 工具查看 jvm 的状态，使用 mysql 命令行或者工具查看数据库状态，使用 explain 分析可疑 SQL 语句。</p>\n<p>掌握了技术线，就可以完成某个业务功能的全流程设计和开发了。</p>\n<h5 id=\"技术面\"><a href=\"#技术面\" class=\"headerlink\" title=\"技术面\"></a>技术面</h5><p>“面”就是某一类相关技术线的综合。例如：</p>\n<p>Java 开发是一个技术面，包括多线程、JDBC、文件读写、JVM 调优、JVM 工具等多个技术线；</p>\n<p>高性能开发是一个技术面，包括：数据库分库分表、缓存、多线程、HTTP 优化等；</p>\n<p>数据库维护是一个技术面，包括：数据库调优、数据库问题定位、高性能数据库表设计等；</p>\n<p>掌握技术面，已经是某个领域的专家了，简单来说就是这个领域的问题找你都可以搞定。</p>\n<h5 id=\"技术体\"><a href=\"#技术体\" class=\"headerlink\" title=\"技术体\"></a>技术体</h5><p>“体”就是多个技术面的综合。</p>\n<p>最常见的“体”就是架构设计，对于一个大型业务或者系统的架构师来说，需要掌握多个技术面，然后进行设计和取舍。例如，一个后台架构师需要掌握 Java 的技术面、数据库的技术面、网络的技术面等，以及业务领域知识。</p>\n<p>架构设计是横向技术面的综合，我称之为广度技术体；还有一种纵向技术面的综合，我称之为深度技术体。例如 Java 的开发工程师，当达到技术面的水平时掌握了“多线程、JDBC、文件读写、JVM 调优、JVM 工具等”，如果需要进一步在 Java 这个领域提升技术，就需要向下了解操作系统、硬件（CPU、内存、磁盘等），从而更好的解决某些复杂的问题，例如 Disruptor 高性能并发框架的设计。掌握了技术体，就可以进行架构设计，或者成为某个领域的资深专家了，解决领域级的复杂问题。</p>\n<h4 id=\"软实力\"><a href=\"#软实力\" class=\"headerlink\" title=\"软实力\"></a>软实力</h4><h5 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h5><p>有的问题很明显，例如线上出故障，系统性能不达标，系统性能需要达到 5W QPS；但有的问题并不那么明显，并不能一眼看出是问题在哪里，是技术问题还是管理问题。</p>\n<p>例如我们曾遇到团队间协作开发效率很低，每次开发一个业务功能，都需要几个系统的研发人员来讨论接口协议、接口数据格式、接口安全加密、业务逻辑等，大家都不厌其烦，但好像又都必不可少，团队间为了提高效率，项目经理制定了规范、流程、模板等，但作用最终都不大。那后来是怎么解决的呢？通过引入服务中心来完成系统间同步接口调用，通过引入消息队列来完成系统间异步消息通知，系统间协作效率大大提高，以前要开会讨论几个小时的事情，现在只要明确接口传输的数据内容即可，甚至都不用开会，两个研发一讨论就差不多了。</p>\n<p>除此以外，问题的根源往往掩盖在很多问题表象之下，如果不解决根源问题，解决一个表象问题，获得一时安宁，一段时间后又发生另外的问题，长此以往反反复复。</p>\n<p>例如我们曾有个系统，今天交换机故障导致业务问题，明天系统 bug 导致业务问题，后天机柜断电导致业务问题，还被黑客攻击过，这些问题看起来都很独立，问题的发生也感觉都是偶然的，按照出一个问题解决一个问题的方式也没什么问题，但全年来看，业务就是出了很多问题，怎么解决？我们经过分析，发现根本原因是业务需要异地多活，而架构是双机房单中心的，我们需要做到的不是避免每个问题的发生（事实上也不可能避免），而是应该做到问题发生后能够快速处理，于是通过将架构重构为异地多活，重构完成后还是有各种偶发问题发生，但对业务的影响就很小了。</p>\n<p>发现问题的能力主要来源于经验，包括成功的经验、踩坑的经验、参考别人的经验，因此如果要培养自己这方面的能力，多思考、多总结、多学习、多参加行业交流。</p>\n<h5 id=\"技术创新\"><a href=\"#技术创新\" class=\"headerlink\" title=\"技术创新\"></a>技术创新</h5><p>达到这个级别基本都是业界大神一般的级别，说实话我也没什么经验，只能仰慕这些大神。</p>\n<p>例如：</p>\n<ul>\n<li><p>当年贝索斯要求亚马逊公司内的系统都服务化，后来是哪位大神想到可以把这个能力开放出来转换为“云计算”？</p>\n</li>\n<li><p>阿里云王坚博士当年在众人都不看好的情况下为何坚持云计算是未来？</p>\n</li>\n<li><p>Google 在解决大数据问题时，如何能够提炼出三篇论文，开启了一个大数据时代？</p>\n</li>\n</ul>\n<p><img src=\"/uploads/2019/08/WX20190816-174557.png\"></p>\n<h3 id=\"技术实力案例点评\"><a href=\"#技术实力案例点评\" class=\"headerlink\" title=\"技术实力案例点评\"></a>技术实力案例点评</h3><hr>\n<p>一个面试者面试 Java 技术专家岗位，其中有一项项目经验很牛逼：XX 架构重构，性能提升 10 倍。于是，我针对这个项目经验进行了深入的考察，结果……</p>\n<p>下面是我们大概的对话过程：</p>\n<p>我：请简单介绍一下这个项目重构。</p>\n<p>面：我们某个业务和比赛有关，每次关键比赛前业务访问量是平时的 10 倍以上，原来的系统量一大就卡死了，用户体验很不好，需要重构。</p>\n<p>我：具体怎么做的呢？</p>\n<p>面：我通过引入 mc 缓存，将原来直接访问数据库的操作改为先访问缓存，性能比原来提升了 10 倍。我：为何你想到了引入 mc？</p>\n<p>面：（卡了一下，有点惊讶我的问题）……我上网查了一下资料，很多都说 mc 能够大幅提升性能，并且使用后确实效果很好。</p>\n<blockquote>\n<p>[点评 1] 这是典型的“代码靠抄，方案靠搜，效果靠试”，面试者看到了一个问题，但没有分析和思考，然后上网搜方案，看到了好像很多人都说引入 mc 都能解决问题，于是尝试引入了 mc，最终确实好像解决了，这让面试者自我感觉良好。</p>\n<p>为何我在面试的时候问“为何引入”，这是不是一种“面试造航母，入职拧螺丝”的装逼面试呢？其实不然，我们的业务中遇到性能瓶颈的问题是非常常见的，而简单的“性能瓶颈”只是一个表象，我们看看可能的原因有哪些：</p>\n<ol>\n<li>数据库慢查询，例如不合理的查询、没有索引、表数量太大等；</li>\n<li>并发设计不合理，例如多线程锁设计不合理，采用了不合理的 Reactor 模型等；</li>\n<li>代码逻辑不合理，例如本来可以异步处理的也采用了同步处理，某个循环里面重复访问数据库，某个接口打印了大量日志等；</li>\n<li>外部系统性能低，例如依赖的某个系统性能低，太多无效的外部接口请求等；</li>\n<li>数据访问不合理，例如没有用缓存，没有分页等；</li>\n<li>非核心业务和核心业务互相影响；</li>\n</ol>\n<p>以上仅仅是举例，还有更多可能的原因，如果一个技术专家不具备“面”的技术，只知道 mc 可以提升性能这个“点”的技术，是远远不够的，一次运气好能解决问题，但不可能次次都运气好。 当然，如果面试的是“Java 高级开发工程师”，面试重点和面试问题又不一样了。</p>\n</blockquote>\n<hr>\n<p>我：mc 能大幅提升性能的原理是什么？</p>\n<p>面：缓存访问快，数据库访问慢。</p>\n<p>我：那 mc 性能多高，数据库性能多高？</p>\n<p>面：……（想了 10 秒）抱歉，没有研究过。</p>\n<blockquote>\n<p>[点评 2] 这是典型的知其然不知其所以然，开源方案拿来就用，基本的测试和原理研究都没做过。大部分人对于很多概念的理解都是“性能高”，“可靠性好”，“听说很厉害”，但在具体设计的时候，这个理解是远远不够的，一定要量化，例如：同样是负载均衡，Nginx 的性能量级是万级，LVS 是 10 万级，F5 这类设备是百万级（具体数值和硬件以及数据包大小相关，这里只给量级）。</p>\n<p>为何要研究原理呢？以 mc 为例，一致性 hash 和扩容相关，内存分配方式和缓存容量有关，如果这些都不清楚，实际应该部署多少 mc 节点，每个节点应该分配多少内存，这些都没法确定。</p>\n</blockquote>\n<hr>\n<p>我：没关系，那我们换个问题，重构后你们的系统用到的机器数量是多少？相比重构前减少了多少？</p>\n<p>面：机器数量是 100 台，相比重构前没有减少。</p>\n<p>我：哦，100 台机器，QPS 每台才 300 多，我看你们的业务也不是很复杂，为何这么低？</p>\n<p>面：……（卡住 10 秒）这……300 多 QPS 好像也不低吧？</p>\n<p>我：那你有没有分析过每次请求全流程每个阶段的性能耗时？瓶颈在哪里？</p>\n<p>面：（卡住 5 秒）没有分析过呢？</p>\n<p>我：那为何就认定引入 mc 就有效果？</p>\n<p>面：……（卡住 10 秒）我看大家都说引入缓存能大幅提升性能，而且最终效果确实很好。</p>\n<blockquote>\n<p>[点评] 这就是知道技术点，不知道技术线和技术面，按道理对于系统性能问题的分析，至少是技术线级别的，需要分析每个请求每个阶段的耗时和原因；也可以是技术面级别的，例如分析数据库的设计、服务器的负载均衡等，还可以是技术体级别的，例如架构是否合理，是否可以将某个子系统拆分，引入消息队列等。</p>\n</blockquote>\n<p>我：好吧，换个问题，如果让你再一次优化系统，你觉得可以怎么做？</p>\n<p>面：……（思考 20 秒）我觉得目前的系统性能已经足够，应该不需要优化了。</p>\n<blockquote>\n<p>[点评] 考察的是发现问题的能力，但他发现不了问题，其实前面已经都提到了，100 台机器就是问题，QPS 过低也是问题，但由于他没有经验，是看不出这些问题的。</p>\n</blockquote>\n<p>很遗憾，最终这个面试者没有通过面试。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><hr>\n<p>对于技术人员实力的判断，并不存在完全客观和可量化的标准，多少都带有评判者的主观判断，这也是最容易产生争议的地方，本文也是我自己的一个思考和总结，一家之言，抛砖引玉，欢迎大家探讨交流。</p>\n<p>文章来自 李云华–《当我们聊技术实力的时候，我们到底在聊什么》</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"技术实力的迷思\"><a href=\"#技术实力的迷思\" class=\"headerlink\" title=\"技术实力的迷思\"></a>技术实力的迷思</h3><hr>\n<p>俗话说“文无第一，武无第二”，技术就是一种“文”的能力，很多时候我们很难直观看出一个技术人员的实力，但不管是公司招聘的面试，还是公司内部的晋升面评，都需要在较短时间内快速判断一个技术人员的实力。正因为技术实力评价本身没有绝对客观的标准，很多时候都会听到类似的吐槽：</p>\n<blockquote>\n<p>“我们组内的 XX 技术实力不如我，竟然他晋升通过了，我却被刷掉了，评委真的是~！@#￥”……</p>\n<p>“面试官问的都是什么鬼问题，我知道的基本没问，我感觉他根本不会考察我的技术实力”……</p>\n<p>“听说算法和数据结构最能体现程序员的实力，我要好好啃啃《算法导论》”（然而啃完又忘记了）……</p>\n<p>……</p>\n</blockquote>\n<p>有很多类似的问题和吐槽，背后都可以归纳为一个问题：当我们聊技术实力的时候，我们到底在聊什么？</p>\n<blockquote>\n<p>有的人认为：技术实力就是指算法和数据结构很厉害……</p>\n<p>有的人认为：研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人……</p>\n<p>有的人认为：会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法……</p>\n<p>有的人认为：技术高手必须对业务很熟悉……</p>\n<p>有的人认为：贡献了开源项目代码的才是技术牛人……</p>\n<p>有的人认为：只有架构师才是技术大牛……</p>\n</blockquote>\n<p>……不一一列举，相信一千个人眼中有一千个哈姆雷特，一千个程序员心中有一千个技术大牛</p>\n<p><img src=\"/uploads/2019/08/WX20190816-173728.png\"></p>\n<h3 id=\"技术实力的本质\"><a href=\"#技术实力的本质\" class=\"headerlink\" title=\"技术实力的本质\"></a>技术实力的本质</h3><hr>\n<p>得益于工作岗位的关系，我在考核技术人员的实力时积累了较丰富的经验（包括踩坑的经验）。首先是招聘，前后面试了几百个人吧，技术范围包括服务器、android、iOS、前端，既包括初出茅庐的应届生，也包括腾讯的 T4 大牛；其次是晋升评委，作为职业等级晋升的评委，面评过几十个晋升的技术同学，各种案例都见过，也与其他评委一起互相交流，有时候甚至是针对某个同学通过还是不通过产生争执。通过这种不断的实践、思考、踩坑、交流的过程，逐步形成了一套完整的方法论，接下来就谈谈我的这套方法论，分享一下我是如何判断技术人员的技术实力的。</p>\n<p>简单来说，判断技术实力的一个总的原则就是： <strong>技术实力就是指解决问题的能力！</strong></p>\n<p>我们将这个原则细化一下，可以得到几个细则：</p>\n<p><strong>1. 不存在放之四海皆准的技术</strong></p>\n<p>简单来说，问题是和领域相关的，技术是用来解决问题的，因此技术也是领域相关的，不存在放之四海皆准的技术。</p>\n<p>有网友说：高斯林来做 iOS 开发，分分钟秒杀现在所有的 iOS 开发人员，因为目前 iOS 经验最丰富的开发人员，经验也不过 10 年。我认为这是不可能的，iOS 开发领域面临的问题，和开发 Java 编程语言面临的问题差异很大，当然，如果高斯林真的做上几年 iOS 开发，确实可能超过很多 iOS 开发人员，但一开始就秒杀哪些做了 7~8 年的 iOS 程序员，这个是不可能的。</p>\n<p><strong>2. 技术要能解决具体问题才有价值</strong></p>\n<p>技术只有能够解决某个领域的问题才有价值，否则光知道某个技术没什么用；掌握了某个技术但在当前的领域用不上，这个技术对当前领域来说也没有价值。</p>\n<p>当然，确实存在某些技术可能在当前看起来对当前领域没有用，但后面可能会用到，因此技术人员需要自己储备一些当前暂时没有用的技术以拓宽技术视野，例如当前大火的人工智能和区块链技术，但要注意“可能”这个词，这需要技术人员自己进行判断和平衡，不能拿技术储备作为托词一股脑的什么都储备，例如数据库开发工程师至少在这几年是不需要储备 VR 知识的。</p>\n<p><strong>3. 问题的复杂度决定技术实力的高度</strong></p>\n<p>问题的复杂度不同，复杂度越高，解决起来越困难，相应的技术实力要求也越高。</p>\n<p>我们拿这个原则去分析一下前面提到的各种技术实力的理解：</p>\n<p><strong>“技术实力就是指算法和数据结构很厉害”</strong></p>\n<p>很多面试官喜欢让面试者现场手写冒泡排序、快速排序、链表之类的代码，以此来判断面试者的技术实力，但我们用这个原则去分析一下就可以发现，这样并不能考核技术实力，假如招聘了一个会手写快速排序的面试者，招进来后你会让他用自己写的快速排序解决什么问题？貌似绝大部分场景下都不可能让一个新来的员工自己写个快速排序来解决某个问题吧？</p>\n<p>当然，肯定还是有人会说“我考核的是面试者的技术基础和思维能力”，这个说法没错，但如果是这个目的，现场手写快速排序这种面试方法就是错误的，如果是考察技术基础，考核的范围应该是算法的基本逻辑，优缺点、适用场景，因为这些技术点在后续具体应用中选择合适的算法来解决问题的时候很有用；如果是考察思维能力，考核的方式应该是给一个具体的算法应用题，来看看面试者的分析和思考过程，例如我在知乎上给了一道我们业务上曾经用到的“如何快速计算你好友的好友和你的共同好友数”，没想到引起了评论里面的大讨论，有兴趣的朋友也可以尝试一下。</p>\n<p><strong>“研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人”</strong></p>\n<p>国内技术人员（不知道国外是否类似）对于底层技术有一种偏见，认为只有懂底层才是真正的技术高手，否则都只是简单的调用 API 完成功能。我当年也不例外，我曾经说过“程序员的三个大坑：Linux 内核源码、编译原理（龙书）、深入浅出 MFC”，我每个都跳过，而且还花费了大量时间却收效甚微。其实用原则去分析一下就可以发现这个说法也站不住脚，如果我们从事 Linux 内核开发，编程语言开发，MFC 框架开发，这些技术确实能解决问题；但如果做得不是这些领域的开发，这些技术并不能帮我们解决什么问题，我还没见过哪个 Java 编程的问题需要我去用编译原理的技术去解决，也没见过哪个数据库的问题需要我去研究 Linux 内核源码才能解决，当然并不是说这些问题一定不存在，Java 语言本身肯定也有 bug，但这些问题是需要 Java 官方去解决，我们在应用中无需亲自去解决，否则的话，效率会非常低，个人爱好无可厚非，但团队必须考虑效率。</p>\n<p><strong>“会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法”</strong></p>\n<p>这是程序员群体里面永恒的一个话题，哪个语言才是最好的最牛逼的，其中两个著名的梗：PHP 是世界上最好的语言，C++ 是世界上最牛逼的语言。C++ 确实语法复杂，功能强大，真正能完全掌握 C++ 的程序员应该屈指可数，但这是否意味着掌握 C++ 就牛逼了呢？并不尽然，我们拿原则来分析一下，如果用 C++ 做游戏引擎，或者高性能中间件，C++ 确实能解决问题，但如果我们做的是 android 手机资讯 app，C++ 能解决什么问题呢？自己写个加密库可能比系统带的库漏洞还多，自己用 C++ 写个 SQLite 好像没什么意义。</p>\n<p><strong>“架构师才是技术大牛”</strong></p>\n<p>架构师几乎是每个程序员的技术梦想，能够成为架构师（真正的架构师，不是 PPT 架构师），技术实力肯定很强，这点是没有争议的，但问题是当不上架构师就不是技术大牛么？我们用原则来分析一下就会发现并不是这样的，架构师并不是全能的，他解决的主要问题是系统的结构设计，还有一些问题是架构师不能解决的，例如 MySQL 5.6 版本通过优化一个 false sharing 问题，性能提升 50%，</p>\n<p>（<a href=\"http://www.cis.upenn.edu/~delozier/docs/tmi_micro_2017.pdf\">http://www.cis.upenn.edu/~delozier&#x2F;docs&#x2F;tmi_micro_2017.pdf</a>）</p>\n<p>这种问题点的发现和处理并不比架构设计简单，能发现和解决这个问题的技术人员实力非常高。</p>\n<p>以上分析了几个典型的误区，其它的观点，这里只贴一下简单的答案，大家有兴趣也可以套用这个原则去分析一下具体的原因，基本上八九不离十：</p>\n<p>“技术高手必须对业务很熟悉” —— 正确</p>\n<p>“贡献了开源项目代码的才是技术牛人”—— 错误</p>\n<p><img src=\"/uploads/2019/08/WX20190816-174244.png\"></p>\n<h3 id=\"技术实力详解\"><a href=\"#技术实力详解\" class=\"headerlink\" title=\"技术实力详解\"></a>技术实力详解</h3><hr>\n<p>理解评估技术实力的基本原则后，我们知道了需要解决的问题复杂度越高，技术实力就越高。在这个基础上，我把技术实力分为两大类 6 分类：</p>\n<p><strong>硬实力</strong>：真正解决问题的能力，别人可以看出来的能力，技术实力按照“点、线、面、体”的 4 个分类逐层上升；</p>\n<p><strong>软实力：</strong>比硬实力更厉害但也更虚的能力，简单来说，要想解决问题首先得发现问题，但很多时候问题并不是一目了然的，需要有一定的技术洞察力。软实力主要包括 2 个核心能力：发现问题、技术创新。</p>\n<h4 id=\"硬实力\"><a href=\"#硬实力\" class=\"headerlink\" title=\"硬实力\"></a>硬实力</h4><p>我把技术硬实力分为四个等级：<strong>点、线、面、体</strong>，技术等级依次提升，解决的问题复杂度也越来越高，下面详细解释一下。</p>\n<h5 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h5><p>“点”就是某个具体的技术，用来解决某个具体的问题，例如使用 JDBC 从数据库读取数据，目的是解决数据掉电丢失的问题；使用 Java 多线程，目的是为了解决大量用户并发访问的吞吐量和时延问题。掌握了技术点，就可以开始基本的业务功能开发了。</p>\n<h5 id=\"技术线\"><a href=\"#技术线\" class=\"headerlink\" title=\"技术线\"></a>技术线</h5><p>“线”就是一系列相关的技术点组成，每个技术点都是为了解决某个问题。例如：</p>\n<p>为了完成一个用户请求，开发框架首先要有路由 router 功能，路由到具体 Controller 后，Controller 进行业务逻辑处理，处理过程中可能会使用 JDBC 来读取数据，访问 Redis 读取缓存等，这一连串的技术每个都解决了一个问题点，串起来就完成了一个业务功能的处理过程。</p>\n<p>为了定位一个线上 Java 服务器响应慢的问题，需要用到 tcpdump 抓包，使用 Java 工具查看 jvm 的状态，使用 mysql 命令行或者工具查看数据库状态，使用 explain 分析可疑 SQL 语句。</p>\n<p>掌握了技术线，就可以完成某个业务功能的全流程设计和开发了。</p>\n<h5 id=\"技术面\"><a href=\"#技术面\" class=\"headerlink\" title=\"技术面\"></a>技术面</h5><p>“面”就是某一类相关技术线的综合。例如：</p>\n<p>Java 开发是一个技术面，包括多线程、JDBC、文件读写、JVM 调优、JVM 工具等多个技术线；</p>\n<p>高性能开发是一个技术面，包括：数据库分库分表、缓存、多线程、HTTP 优化等；</p>\n<p>数据库维护是一个技术面，包括：数据库调优、数据库问题定位、高性能数据库表设计等；</p>\n<p>掌握技术面，已经是某个领域的专家了，简单来说就是这个领域的问题找你都可以搞定。</p>\n<h5 id=\"技术体\"><a href=\"#技术体\" class=\"headerlink\" title=\"技术体\"></a>技术体</h5><p>“体”就是多个技术面的综合。</p>\n<p>最常见的“体”就是架构设计，对于一个大型业务或者系统的架构师来说，需要掌握多个技术面，然后进行设计和取舍。例如，一个后台架构师需要掌握 Java 的技术面、数据库的技术面、网络的技术面等，以及业务领域知识。</p>\n<p>架构设计是横向技术面的综合，我称之为广度技术体；还有一种纵向技术面的综合，我称之为深度技术体。例如 Java 的开发工程师，当达到技术面的水平时掌握了“多线程、JDBC、文件读写、JVM 调优、JVM 工具等”，如果需要进一步在 Java 这个领域提升技术，就需要向下了解操作系统、硬件（CPU、内存、磁盘等），从而更好的解决某些复杂的问题，例如 Disruptor 高性能并发框架的设计。掌握了技术体，就可以进行架构设计，或者成为某个领域的资深专家了，解决领域级的复杂问题。</p>\n<h4 id=\"软实力\"><a href=\"#软实力\" class=\"headerlink\" title=\"软实力\"></a>软实力</h4><h5 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h5><p>有的问题很明显，例如线上出故障，系统性能不达标，系统性能需要达到 5W QPS；但有的问题并不那么明显，并不能一眼看出是问题在哪里，是技术问题还是管理问题。</p>\n<p>例如我们曾遇到团队间协作开发效率很低，每次开发一个业务功能，都需要几个系统的研发人员来讨论接口协议、接口数据格式、接口安全加密、业务逻辑等，大家都不厌其烦，但好像又都必不可少，团队间为了提高效率，项目经理制定了规范、流程、模板等，但作用最终都不大。那后来是怎么解决的呢？通过引入服务中心来完成系统间同步接口调用，通过引入消息队列来完成系统间异步消息通知，系统间协作效率大大提高，以前要开会讨论几个小时的事情，现在只要明确接口传输的数据内容即可，甚至都不用开会，两个研发一讨论就差不多了。</p>\n<p>除此以外，问题的根源往往掩盖在很多问题表象之下，如果不解决根源问题，解决一个表象问题，获得一时安宁，一段时间后又发生另外的问题，长此以往反反复复。</p>\n<p>例如我们曾有个系统，今天交换机故障导致业务问题，明天系统 bug 导致业务问题，后天机柜断电导致业务问题，还被黑客攻击过，这些问题看起来都很独立，问题的发生也感觉都是偶然的，按照出一个问题解决一个问题的方式也没什么问题，但全年来看，业务就是出了很多问题，怎么解决？我们经过分析，发现根本原因是业务需要异地多活，而架构是双机房单中心的，我们需要做到的不是避免每个问题的发生（事实上也不可能避免），而是应该做到问题发生后能够快速处理，于是通过将架构重构为异地多活，重构完成后还是有各种偶发问题发生，但对业务的影响就很小了。</p>\n<p>发现问题的能力主要来源于经验，包括成功的经验、踩坑的经验、参考别人的经验，因此如果要培养自己这方面的能力，多思考、多总结、多学习、多参加行业交流。</p>\n<h5 id=\"技术创新\"><a href=\"#技术创新\" class=\"headerlink\" title=\"技术创新\"></a>技术创新</h5><p>达到这个级别基本都是业界大神一般的级别，说实话我也没什么经验，只能仰慕这些大神。</p>\n<p>例如：</p>\n<ul>\n<li><p>当年贝索斯要求亚马逊公司内的系统都服务化，后来是哪位大神想到可以把这个能力开放出来转换为“云计算”？</p>\n</li>\n<li><p>阿里云王坚博士当年在众人都不看好的情况下为何坚持云计算是未来？</p>\n</li>\n<li><p>Google 在解决大数据问题时，如何能够提炼出三篇论文，开启了一个大数据时代？</p>\n</li>\n</ul>\n<p><img src=\"/uploads/2019/08/WX20190816-174557.png\"></p>\n<h3 id=\"技术实力案例点评\"><a href=\"#技术实力案例点评\" class=\"headerlink\" title=\"技术实力案例点评\"></a>技术实力案例点评</h3><hr>\n<p>一个面试者面试 Java 技术专家岗位，其中有一项项目经验很牛逼：XX 架构重构，性能提升 10 倍。于是，我针对这个项目经验进行了深入的考察，结果……</p>\n<p>下面是我们大概的对话过程：</p>\n<p>我：请简单介绍一下这个项目重构。</p>\n<p>面：我们某个业务和比赛有关，每次关键比赛前业务访问量是平时的 10 倍以上，原来的系统量一大就卡死了，用户体验很不好，需要重构。</p>\n<p>我：具体怎么做的呢？</p>\n<p>面：我通过引入 mc 缓存，将原来直接访问数据库的操作改为先访问缓存，性能比原来提升了 10 倍。我：为何你想到了引入 mc？</p>\n<p>面：（卡了一下，有点惊讶我的问题）……我上网查了一下资料，很多都说 mc 能够大幅提升性能，并且使用后确实效果很好。</p>\n<blockquote>\n<p>[点评 1] 这是典型的“代码靠抄，方案靠搜，效果靠试”，面试者看到了一个问题，但没有分析和思考，然后上网搜方案，看到了好像很多人都说引入 mc 都能解决问题，于是尝试引入了 mc，最终确实好像解决了，这让面试者自我感觉良好。</p>\n<p>为何我在面试的时候问“为何引入”，这是不是一种“面试造航母，入职拧螺丝”的装逼面试呢？其实不然，我们的业务中遇到性能瓶颈的问题是非常常见的，而简单的“性能瓶颈”只是一个表象，我们看看可能的原因有哪些：</p>\n<ol>\n<li>数据库慢查询，例如不合理的查询、没有索引、表数量太大等；</li>\n<li>并发设计不合理，例如多线程锁设计不合理，采用了不合理的 Reactor 模型等；</li>\n<li>代码逻辑不合理，例如本来可以异步处理的也采用了同步处理，某个循环里面重复访问数据库，某个接口打印了大量日志等；</li>\n<li>外部系统性能低，例如依赖的某个系统性能低，太多无效的外部接口请求等；</li>\n<li>数据访问不合理，例如没有用缓存，没有分页等；</li>\n<li>非核心业务和核心业务互相影响；</li>\n</ol>\n<p>以上仅仅是举例，还有更多可能的原因，如果一个技术专家不具备“面”的技术，只知道 mc 可以提升性能这个“点”的技术，是远远不够的，一次运气好能解决问题，但不可能次次都运气好。 当然，如果面试的是“Java 高级开发工程师”，面试重点和面试问题又不一样了。</p>\n</blockquote>\n<hr>\n<p>我：mc 能大幅提升性能的原理是什么？</p>\n<p>面：缓存访问快，数据库访问慢。</p>\n<p>我：那 mc 性能多高，数据库性能多高？</p>\n<p>面：……（想了 10 秒）抱歉，没有研究过。</p>\n<blockquote>\n<p>[点评 2] 这是典型的知其然不知其所以然，开源方案拿来就用，基本的测试和原理研究都没做过。大部分人对于很多概念的理解都是“性能高”，“可靠性好”，“听说很厉害”，但在具体设计的时候，这个理解是远远不够的，一定要量化，例如：同样是负载均衡，Nginx 的性能量级是万级，LVS 是 10 万级，F5 这类设备是百万级（具体数值和硬件以及数据包大小相关，这里只给量级）。</p>\n<p>为何要研究原理呢？以 mc 为例，一致性 hash 和扩容相关，内存分配方式和缓存容量有关，如果这些都不清楚，实际应该部署多少 mc 节点，每个节点应该分配多少内存，这些都没法确定。</p>\n</blockquote>\n<hr>\n<p>我：没关系，那我们换个问题，重构后你们的系统用到的机器数量是多少？相比重构前减少了多少？</p>\n<p>面：机器数量是 100 台，相比重构前没有减少。</p>\n<p>我：哦，100 台机器，QPS 每台才 300 多，我看你们的业务也不是很复杂，为何这么低？</p>\n<p>面：……（卡住 10 秒）这……300 多 QPS 好像也不低吧？</p>\n<p>我：那你有没有分析过每次请求全流程每个阶段的性能耗时？瓶颈在哪里？</p>\n<p>面：（卡住 5 秒）没有分析过呢？</p>\n<p>我：那为何就认定引入 mc 就有效果？</p>\n<p>面：……（卡住 10 秒）我看大家都说引入缓存能大幅提升性能，而且最终效果确实很好。</p>\n<blockquote>\n<p>[点评] 这就是知道技术点，不知道技术线和技术面，按道理对于系统性能问题的分析，至少是技术线级别的，需要分析每个请求每个阶段的耗时和原因；也可以是技术面级别的，例如分析数据库的设计、服务器的负载均衡等，还可以是技术体级别的，例如架构是否合理，是否可以将某个子系统拆分，引入消息队列等。</p>\n</blockquote>\n<p>我：好吧，换个问题，如果让你再一次优化系统，你觉得可以怎么做？</p>\n<p>面：……（思考 20 秒）我觉得目前的系统性能已经足够，应该不需要优化了。</p>\n<blockquote>\n<p>[点评] 考察的是发现问题的能力，但他发现不了问题，其实前面已经都提到了，100 台机器就是问题，QPS 过低也是问题，但由于他没有经验，是看不出这些问题的。</p>\n</blockquote>\n<p>很遗憾，最终这个面试者没有通过面试。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><hr>\n<p>对于技术人员实力的判断，并不存在完全客观和可量化的标准，多少都带有评判者的主观判断，这也是最容易产生争议的地方，本文也是我自己的一个思考和总结，一家之言，抛砖引玉，欢迎大家探讨交流。</p>\n<p>文章来自 李云华–《当我们聊技术实力的时候，我们到底在聊什么》</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0oi8mdf0000417ta0l19oyo","category_id":"cl0oi8mdr0004417tf8145pdm","_id":"cl0oi8me2000e417tbrjja4kr"},{"post_id":"cl0oi8mdx0009417td4fjalmg","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8me6000j417td7no6wve"},{"post_id":"cl0oi8mdl0001417tff2igmy9","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8me8000l417t0l39f3hw"},{"post_id":"cl0oi8mdq0003417thk1ncp52","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8med000p417tbool87co"},{"post_id":"cl0oi8me2000f417te8cm9scf","category_id":"cl0oi8mdr0004417tf8145pdm","_id":"cl0oi8meg000r417tas5nad9u"},{"post_id":"cl0oi8me8000k417t40y715y9","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mel000w417t7tv3g1u6"},{"post_id":"cl0oi8mdu0006417tbf5w30ug","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8meo0010417t1mbw3gcw"},{"post_id":"cl0oi8mdy000a417t3zvmd030","category_id":"cl0oi8meg000s417t5mhq6dx2","_id":"cl0oi8met0015417tdo9aevsg"},{"post_id":"cl0oi8me1000d417tg02jb0dj","category_id":"cl0oi8men000y417t0mav5qnr","_id":"cl0oi8mf1001b417tfrilh2s1"},{"post_id":"cl0oi8me4000i417thgs254b6","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mf8001k417t4im5dqik"},{"post_id":"cl0oi8me4000i417thgs254b6","category_id":"cl0oi8mer0013417t7ebjazkt","_id":"cl0oi8mfa001p417t4zgca1gy"},{"post_id":"cl0oi8me4000i417thgs254b6","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mfd001s417t55sebiib"},{"post_id":"cl0oi8mdt0005417t7vwld2e6","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mfg001x417tcanmbnqw"},{"post_id":"cl0oi8mdt0005417t7vwld2e6","category_id":"cl0oi8mew0018417t22sfbx1n","_id":"cl0oi8mfi0020417t5f1kg6ll"},{"post_id":"cl0oi8mf5001g417t423igrbk","category_id":"cl0oi8men000y417t0mav5qnr","_id":"cl0oi8mfk0025417tewlx9129"},{"post_id":"cl0oi8mef000q417tf39h0c0g","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mfm0028417t37r82cg6"},{"post_id":"cl0oi8mf7001j417tg08a3y5l","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mfn002c417t0udv2pgs"},{"post_id":"cl0oi8mf7001j417tg08a3y5l","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8mfp002g417t295tcfh6"},{"post_id":"cl0oi8meb000o417t256whj3h","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mfr002k417th8nxevcn"},{"post_id":"cl0oi8meb000o417t256whj3h","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8mfs002o417t0wvz6cwa"},{"post_id":"cl0oi8mf8001m417terkhc0az","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mft002s417t7cj888mi"},{"post_id":"cl0oi8mf8001m417terkhc0az","category_id":"cl0oi8mdr0004417tf8145pdm","_id":"cl0oi8mfu002w417tdva2d6lx"},{"post_id":"cl0oi8mfh001z417tfvash8g9","category_id":"cl0oi8meg000s417t5mhq6dx2","_id":"cl0oi8mfw0030417t3b66gdzn"},{"post_id":"cl0oi8mfe001u417t1daugjgm","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mfx0034417tbwugaf8i"},{"post_id":"cl0oi8mfe001u417t1daugjgm","category_id":"cl0oi8mdr0004417tf8145pdm","_id":"cl0oi8mfz0038417th05z8ra9"},{"post_id":"cl0oi8mfi0022417t32bihrv1","category_id":"cl0oi8meg000s417t5mhq6dx2","_id":"cl0oi8mg0003b417tdqyf8nks"},{"post_id":"cl0oi8meh000t417t3772eqza","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mg2003g417ta8edbj7c"},{"post_id":"cl0oi8meh000t417t3772eqza","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mg4003j417t7cccch1w"},{"post_id":"cl0oi8mfk0027417t4r7y5r31","category_id":"cl0oi8meg000s417t5mhq6dx2","_id":"cl0oi8mg8003o417t0klm4crc"},{"post_id":"cl0oi8mej000v417t6eys662g","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mg9003r417t3uhz5v84"},{"post_id":"cl0oi8mfm002a417t2ryh9g8b","category_id":"cl0oi8mew0018417t22sfbx1n","_id":"cl0oi8mgc003w417t4ui83qit"},{"post_id":"cl0oi8mel000x417tbikwbv35","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mgd003z417t1u2s6s0u"},{"post_id":"cl0oi8mel000x417tbikwbv35","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mgg0044417tarugbu7e"},{"post_id":"cl0oi8mft002u417t6nhp51kz","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mgm0047417t4mw5gym2"},{"post_id":"cl0oi8mfs002q417t312f574e","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mgo004c417t3w8td58c"},{"post_id":"cl0oi8mfs002q417t312f574e","category_id":"cl0oi8mer0013417t7ebjazkt","_id":"cl0oi8mgq004f417t19w0c2ut"},{"post_id":"cl0oi8mfv002y417t8ug3frv7","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mgs004i417tdby30vhy"},{"post_id":"cl0oi8meo0011417t4k2i3o52","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mgu004n417tgs3fep61"},{"post_id":"cl0oi8meo0011417t4k2i3o52","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mgv004p417t61bta2lo"},{"post_id":"cl0oi8meo0011417t4k2i3o52","category_id":"cl0oi8mer0013417t7ebjazkt","_id":"cl0oi8mgw004t417tgpru55hu"},{"post_id":"cl0oi8meo0011417t4k2i3o52","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mgy004v417t5zia6cdu"},{"post_id":"cl0oi8mfw0032417t8atq64wo","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mh00050417t9nb90is2"},{"post_id":"cl0oi8meq0012417t3jic51cd","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mh10053417t7162dn8m"},{"post_id":"cl0oi8meq0012417t3jic51cd","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mh50058417t1djld4ry"},{"post_id":"cl0oi8meq0012417t3jic51cd","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mh7005b417thblme8zu"},{"post_id":"cl0oi8mfy0036417tftuq4ub2","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mha005g417tfl9lhwca"},{"post_id":"cl0oi8met0016417t46s7gda6","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mhb005j417teuzxal3n"},{"post_id":"cl0oi8met0016417t46s7gda6","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mhe005n417tgmv91zcr"},{"post_id":"cl0oi8mev0017417t5dozdhk8","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mhg005r417t2gc588yv"},{"post_id":"cl0oi8mg0003e417t2m3h6ima","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mhh005u417t3ppsce0u"},{"post_id":"cl0oi8mf1001a417tgj8l6db5","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mhk005x417t1t9132ij"},{"post_id":"cl0oi8mfz003a417t0u5w8jxz","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mhl0061417tapppeute"},{"post_id":"cl0oi8mfz003a417t0u5w8jxz","category_id":"cl0oi8mer0013417t7ebjazkt","_id":"cl0oi8mhn0065417t4d166nlv"},{"post_id":"cl0oi8mfz003a417t0u5w8jxz","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mhp0069417thz7h3j6m"},{"post_id":"cl0oi8mg2003i417tcqh71ww8","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mhq006c417t6fm3co7x"},{"post_id":"cl0oi8mg2003i417tcqh71ww8","category_id":"cl0oi8mer0013417t7ebjazkt","_id":"cl0oi8mhs006f417t5wip1tp0"},{"post_id":"cl0oi8mg5003m417teur9dwhh","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mhv006i417tet4w516i"},{"post_id":"cl0oi8mg5003m417teur9dwhh","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mhw006m417t3i7ed9im"},{"post_id":"cl0oi8mg8003q417tc1b4gil5","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mhy006q417t73cs5fq9"},{"post_id":"cl0oi8mg8003q417tc1b4gil5","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8mhz006t417tby2venpm"},{"post_id":"cl0oi8mfc001r417tacy4gtcj","category_id":"cl0oi8mgb003v417t4gjd0439","_id":"cl0oi8mi1006w417t3obv32v0"},{"post_id":"cl0oi8mfc001r417tacy4gtcj","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mi2006z417tg879adyz"},{"post_id":"cl0oi8mfc001r417tacy4gtcj","category_id":"cl0oi8mdr0004417tf8145pdm","_id":"cl0oi8mi40073417tct8m1y5o"},{"post_id":"cl0oi8mgm0048417t8f6wfe0c","category_id":"cl0oi8mer0013417t7ebjazkt","_id":"cl0oi8mi50076417t30750ma0"},{"post_id":"cl0oi8mfp002i417tbudmas2q","category_id":"cl0oi8mgb003v417t4gjd0439","_id":"cl0oi8mi7007a417t39dy34yi"},{"post_id":"cl0oi8mfp002i417tbudmas2q","category_id":"cl0oi8mdr0004417tf8145pdm","_id":"cl0oi8mi8007d417t3fgg6bkz"},{"post_id":"cl0oi8mfr002n417t9flkg7x6","category_id":"cl0oi8mgo004b417t11s8esng","_id":"cl0oi8mia007h417tfqpr1who"},{"post_id":"cl0oi8mgo004d417tgkni3o4p","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mib007k417t2xx90z60"},{"post_id":"cl0oi8mgo004d417tgkni3o4p","category_id":"cl0oi8mer0013417t7ebjazkt","_id":"cl0oi8mid007o417td7pl3n8s"},{"post_id":"cl0oi8mga003t417tfo664g3s","category_id":"cl0oi8mgs004k417tajd98ko0","_id":"cl0oi8mie007q417tehnxahm5"},{"post_id":"cl0oi8mgv004r417tb9l6guu2","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mif007t417te2ie66ea"},{"post_id":"cl0oi8mf2001d417telgcd8or","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mih007w417ta4627td3"},{"post_id":"cl0oi8mf2001d417telgcd8or","category_id":"cl0oi8mgs004k417tajd98ko0","_id":"cl0oi8mij0080417t4h0u773k"},{"post_id":"cl0oi8mgx004u417tgpfmgqgt","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mik0083417tby78hyqo"},{"post_id":"cl0oi8mgx004u417tgpfmgqgt","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mil0086417t8zabd8fr"},{"post_id":"cl0oi8mgc003y417tbfhfd52j","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mim008a417t33j93c4q"},{"post_id":"cl0oi8mgc003y417tbfhfd52j","category_id":"cl0oi8mgs004k417tajd98ko0","_id":"cl0oi8min008d417tex8b8uwt"},{"post_id":"cl0oi8mgk0045417t5a4329yu","category_id":"cl0oi8mgs004k417tajd98ko0","_id":"cl0oi8mip008h417tefod39rc"},{"post_id":"cl0oi8mh6005a417tg0qlfne0","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mip008i417tbx57eej0"},{"post_id":"cl0oi8mh30055417tepvb853s","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miq008k417t7tadgyza"},{"post_id":"cl0oi8mh30055417tepvb853s","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8miq008l417tco3lg52m"},{"post_id":"cl0oi8mh00052417ta1oq0vcm","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8miq008o417teffvcqbm"},{"post_id":"cl0oi8mh00052417ta1oq0vcm","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8miq008q417t5tl79tmx"},{"post_id":"cl0oi8mh00052417ta1oq0vcm","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mir008t417tasx09qiy"},{"post_id":"cl0oi8mgd0041417t57ed4fka","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mir008u417t59hm5emn"},{"post_id":"cl0oi8mgd0041417t57ed4fka","category_id":"cl0oi8mgs004k417tajd98ko0","_id":"cl0oi8mir008w417t14fn76by"},{"post_id":"cl0oi8mha005i417tcxs61gck","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mir008x417t20ml5o2d"},{"post_id":"cl0oi8mhf005q417t0u5o2mg9","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mis008z417t535ygb7h"},{"post_id":"cl0oi8mgq004g417t8aevg5s1","category_id":"cl0oi8mhc005m417t5fb0ekew","_id":"cl0oi8mis0091417t506fhnhg"},{"post_id":"cl0oi8mhc005l417tdik66lj9","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mis0094417tcdoa8zpa"},{"post_id":"cl0oi8mhc005l417tdik66lj9","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8mis0096417t3mazduq9"},{"post_id":"cl0oi8mhg005s417t6y5x21nt","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mis0098417tf9smfbst"},{"post_id":"cl0oi8mgt004l417t1oyub1jl","category_id":"cl0oi8mhc005m417t5fb0ekew","_id":"cl0oi8mit009a417t5g9kgngd"},{"post_id":"cl0oi8mhi005w417teb696rpr","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mit009c417t0zq2gk16"},{"post_id":"cl0oi8mhi005w417teb696rpr","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8mit009e417t6vb8hejk"},{"post_id":"cl0oi8mhm0064417tcr6jc46e","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mit009f417t1plx6qg0"},{"post_id":"cl0oi8mgu004o417tg8lv3gxz","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mit009h417t7rc6bf5y"},{"post_id":"cl0oi8mgu004o417tg8lv3gxz","category_id":"cl0oi8mhc005m417t5fb0ekew","_id":"cl0oi8mit009i417t1cok0c00"},{"post_id":"cl0oi8mhn0067417t9my81qfn","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8miu009k417tg26y0kpr"},{"post_id":"cl0oi8mhp006b417tessz5qh4","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miu009m417tcxdi8xno"},{"post_id":"cl0oi8mgy004x417t8njj0k43","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miv009p417tgr1i7nxv"},{"post_id":"cl0oi8mgy004x417t8njj0k43","category_id":"cl0oi8mho0068417thkuq61rq","_id":"cl0oi8miv009r417tdct24svf"},{"post_id":"cl0oi8mhr006d417t4xsx259a","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miw009t417tdjmmggkq"},{"post_id":"cl0oi8mh8005d417tdqx5cx23","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miw009v417t439xay60"},{"post_id":"cl0oi8mh8005d417tdqx5cx23","category_id":"cl0oi8mho0068417thkuq61rq","_id":"cl0oi8miw009y417t2iurfdez"},{"post_id":"cl0oi8mhv006k417tc32o05ml","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miw00a0417tg2rkgs8x"},{"post_id":"cl0oi8mhw006o417tcynu9n5p","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8miw00a1417t00u2b0hn"},{"post_id":"cl0oi8mhk005z417t58mr094i","category_id":"cl0oi8mho0068417thkuq61rq","_id":"cl0oi8mix00a3417t3dp8buid"},{"post_id":"cl0oi8mht006g417t39fy2gle","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mix00a4417t4kk55wh4"},{"post_id":"cl0oi8mht006g417t39fy2gle","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mix00a6417t7awwe0xq"},{"post_id":"cl0oi8mht006g417t39fy2gle","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8mix00a8417t6jp54fpk"},{"post_id":"cl0oi8mhy006s417tdil6eop5","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miy00ab417t9c35btt2"},{"post_id":"cl0oi8mhy006s417tdil6eop5","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8miy00ad417t93kb4g2x"},{"post_id":"cl0oi8mi1006y417t39p15k9n","category_id":"cl0oi8men000y417t0mav5qnr","_id":"cl0oi8miy00ag417t9aci5puc"},{"post_id":"cl0oi8mhz006u417t4fzacrw0","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miy00ah417tbkhecj7r"},{"post_id":"cl0oi8mhz006u417t4fzacrw0","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8miy00aj417t1tin82cw"},{"post_id":"cl0oi8mi40075417t57os6bwx","category_id":"cl0oi8men000y417t0mav5qnr","_id":"cl0oi8miz00al417t706i5mkq"},{"post_id":"cl0oi8mi30071417t1nv2f6ff","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8miz00ao417tdpw31gov"},{"post_id":"cl0oi8mi30071417t1nv2f6ff","category_id":"cl0oi8mf9001n417tfpr9ffqy","_id":"cl0oi8miz00aq417t6xrjedut"},{"post_id":"cl0oi8mi60078417t0mtvb5yv","category_id":"cl0oi8men000y417t0mav5qnr","_id":"cl0oi8mj000as417tbmey7c9j"},{"post_id":"cl0oi8mi7007c417th9yb3cm2","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mj000at417tbz8zgdo5"},{"post_id":"cl0oi8mi8007f417t2869huo1","category_id":"cl0oi8men000y417t0mav5qnr","_id":"cl0oi8mj000av417t44li24k6"},{"post_id":"cl0oi8mia007j417tg3o86238","category_id":"cl0oi8mf3001f417tghvw3e51","_id":"cl0oi8mj000ax417texk1hk2b"},{"post_id":"cl0oi8mib007m417talmpgy9r","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mj100b0417tadf716fx"},{"post_id":"cl0oi8mie007r417th3c239r9","category_id":"cl0oi8men000y417t0mav5qnr","_id":"cl0oi8mj100b2417tb1ctgs4q"},{"post_id":"cl0oi8mid007p417t1f33dgpk","category_id":"cl0oi8mgb003v417t4gjd0439","_id":"cl0oi8mj100b5417t8ixabc80"},{"post_id":"cl0oi8mid007p417t1f33dgpk","category_id":"cl0oi8mdr0004417tf8145pdm","_id":"cl0oi8mj200b7417t3fwfe1vi"},{"post_id":"cl0oi8mig007v417t2i97ddwe","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mj200b9417teg3vform"},{"post_id":"cl0oi8mih007y417t1ecxetx0","category_id":"cl0oi8mgo004b417t11s8esng","_id":"cl0oi8mj200ba417tf8bw2180"},{"post_id":"cl0oi8mij0082417t8v2l2cbo","category_id":"cl0oi8mgo004b417t11s8esng","_id":"cl0oi8mj200bc417tfcb68kq3"},{"post_id":"cl0oi8mik0085417t05fjhhmk","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mj300be417tfs4q0qut"},{"post_id":"cl0oi8mil0089417t4a8v0ip8","category_id":"cl0oi8mdw0008417tcm7n7cz5","_id":"cl0oi8mj300bg417te6cg6odw"},{"post_id":"cl0oi8mim008c417t18wr67jn","category_id":"cl0oi8me0000c417t555j4eb9","_id":"cl0oi8mj300bj417t0cfgc0vz"},{"post_id":"cl0oi8min008g417tcc3016rl","category_id":"cl0oi8mgo004b417t11s8esng","_id":"cl0oi8mj300bl417tcdkp29sf"}],"PostTag":[{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8mdo0002417t2b2c9t6r","_id":"cl0oi8mf2001c417tgci32niy"},{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8mdv0007417t5edrhcp0","_id":"cl0oi8mf3001e417t83kfdwnz"},{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mf7001i417t7h8d5ilk"},{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8me3000g417t46s2dlwz","_id":"cl0oi8mf8001l417t7s0dfmvp"},{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8mea000n417t2zwlfae1","_id":"cl0oi8mfb001q417tecc1gv7h"},{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8meh000u417t02q480lk","_id":"cl0oi8mfe001t417tdlxzav3r"},{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8men000z417t7v104b4j","_id":"cl0oi8mfg001y417t35ada72v"},{"post_id":"cl0oi8mdf0000417ta0l19oyo","tag_id":"cl0oi8mes0014417t0t5wcu1v","_id":"cl0oi8mfi0021417t6jgb0srz"},{"post_id":"cl0oi8mf8001m417terkhc0az","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mfk0026417tcs65d3gh"},{"post_id":"cl0oi8mf8001m417terkhc0az","tag_id":"cl0oi8meh000u417t02q480lk","_id":"cl0oi8mfm0029417tbd7jba54"},{"post_id":"cl0oi8mf8001m417terkhc0az","tag_id":"cl0oi8mes0014417t0t5wcu1v","_id":"cl0oi8mfn002e417tcw8yfui6"},{"post_id":"cl0oi8mfc001r417tacy4gtcj","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mfp002h417tbmks1hnk"},{"post_id":"cl0oi8mfc001r417tacy4gtcj","tag_id":"cl0oi8meh000u417t02q480lk","_id":"cl0oi8mfr002l417tc7tk5ohf"},{"post_id":"cl0oi8mfe001u417t1daugjgm","tag_id":"cl0oi8mdo0002417t2b2c9t6r","_id":"cl0oi8mfs002p417tfmi06f3p"},{"post_id":"cl0oi8mfe001u417t1daugjgm","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mft002t417tb67zdstx"},{"post_id":"cl0oi8mfe001u417t1daugjgm","tag_id":"cl0oi8men000z417t7v104b4j","_id":"cl0oi8mfu002x417td2ahe9mj"},{"post_id":"cl0oi8mdq0003417thk1ncp52","tag_id":"cl0oi8mf00019417t4t6ifac4","_id":"cl0oi8mfw0031417t4xu67jjh"},{"post_id":"cl0oi8mdq0003417thk1ncp52","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mfx0035417tbb7q5svz"},{"post_id":"cl0oi8mdq0003417thk1ncp52","tag_id":"cl0oi8meh000u417t02q480lk","_id":"cl0oi8mfz0039417t5jdtc629"},{"post_id":"cl0oi8mdq0003417thk1ncp52","tag_id":"cl0oi8mff001v417t9w5mc00u","_id":"cl0oi8mg0003d417t0dapdwhc"},{"post_id":"cl0oi8mfp002i417tbudmas2q","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mg2003h417t4ajthpwb"},{"post_id":"cl0oi8mdt0005417t7vwld2e6","tag_id":"cl0oi8mfj0024417tbb1yd3it","_id":"cl0oi8mg4003k417t1du7af98"},{"post_id":"cl0oi8mdt0005417t7vwld2e6","tag_id":"cl0oi8mfn002d417tba74cwhj","_id":"cl0oi8mg8003p417t67ik4o42"},{"post_id":"cl0oi8mdt0005417t7vwld2e6","tag_id":"cl0oi8mfr002m417t7o3z3uxh","_id":"cl0oi8mg9003s417t3ddwhoy5"},{"post_id":"cl0oi8mdt0005417t7vwld2e6","tag_id":"cl0oi8mfu002v417tb3i7gj9k","_id":"cl0oi8mgc003x417tehaf66aj"},{"post_id":"cl0oi8mdu0006417tbf5w30ug","tag_id":"cl0oi8mfx0033417tawxl6k2e","_id":"cl0oi8mgd0040417t5uox18y9"},{"post_id":"cl0oi8me1000d417tg02jb0dj","tag_id":"cl0oi8mg0003c417t0b8d9gvz","_id":"cl0oi8mgl0046417t22rzg1e2"},{"post_id":"cl0oi8me1000d417tg02jb0dj","tag_id":"cl0oi8mg4003l417tg8ashw67","_id":"cl0oi8mgn0049417tdtacabmf"},{"post_id":"cl0oi8me1000d417tg02jb0dj","tag_id":"cl0oi8mga003u417tg7uw0i3k","_id":"cl0oi8mgp004e417ta5gwae9d"},{"post_id":"cl0oi8me2000f417te8cm9scf","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mgs004h417t2ndrd0f2"},{"post_id":"cl0oi8me2000f417te8cm9scf","tag_id":"cl0oi8meh000u417t02q480lk","_id":"cl0oi8mgt004m417t0neh0iiy"},{"post_id":"cl0oi8mgv004r417tb9l6guu2","tag_id":"cl0oi8mfx0033417tawxl6k2e","_id":"cl0oi8mgy004w417t1avt8bln"},{"post_id":"cl0oi8meb000o417t256whj3h","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mh00051417ta1h45iwl"},{"post_id":"cl0oi8meb000o417t256whj3h","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8mh30054417taa947vic"},{"post_id":"cl0oi8meb000o417t256whj3h","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mh50059417t1fpv69mc"},{"post_id":"cl0oi8mef000q417tf39h0c0g","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mh8005c417tb42k0cd5"},{"post_id":"cl0oi8mh30055417tepvb853s","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mha005h417t5yuc8js0"},{"post_id":"cl0oi8mh30055417tepvb853s","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8mhc005k417t5glsdtmp"},{"post_id":"cl0oi8mh30055417tepvb853s","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mhe005p417t7xr71h0r"},{"post_id":"cl0oi8mej000v417t6eys662g","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mhk005y417t0g6k11rq"},{"post_id":"cl0oi8mej000v417t6eys662g","tag_id":"cl0oi8mha005f417tadqh7y6f","_id":"cl0oi8mhl0062417t219ze8as"},{"post_id":"cl0oi8mej000v417t6eys662g","tag_id":"cl0oi8mhe005o417t2tas74g1","_id":"cl0oi8mhn0066417t6oct0vax"},{"post_id":"cl0oi8mel000x417tbikwbv35","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mhv006j417t4a16hdxg"},{"post_id":"cl0oi8mel000x417tbikwbv35","tag_id":"cl0oi8mfx0033417tawxl6k2e","_id":"cl0oi8mhw006n417t7a9h162t"},{"post_id":"cl0oi8mel000x417tbikwbv35","tag_id":"cl0oi8mhp006a417t4rxp5qrm","_id":"cl0oi8mhy006r417tddbyeup0"},{"post_id":"cl0oi8mhy006s417tdil6eop5","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mi1006x417tcyjm05cu"},{"post_id":"cl0oi8meo0011417t4k2i3o52","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mi20070417t6kethmkd"},{"post_id":"cl0oi8meo0011417t4k2i3o52","tag_id":"cl0oi8mhp006a417t4rxp5qrm","_id":"cl0oi8mi40074417t9iaoacin"},{"post_id":"cl0oi8mhz006u417t4fzacrw0","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8mi50077417t0xq89nqy"},{"post_id":"cl0oi8mhz006u417t4fzacrw0","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mi7007b417tcf2x2tkx"},{"post_id":"cl0oi8meq0012417t3jic51cd","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mi8007e417t4edyexi8"},{"post_id":"cl0oi8meq0012417t3jic51cd","tag_id":"cl0oi8mhp006a417t4rxp5qrm","_id":"cl0oi8mia007i417t3rbmhb6j"},{"post_id":"cl0oi8met0016417t46s7gda6","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mib007l417t2g9q2uid"},{"post_id":"cl0oi8mid007p417t1f33dgpk","tag_id":"cl0oi8mdz000b417t58qw7iiv","_id":"cl0oi8mig007u417tdazege41"},{"post_id":"cl0oi8mid007p417t1f33dgpk","tag_id":"cl0oi8meh000u417t02q480lk","_id":"cl0oi8mih007x417t6kvi4jsy"},{"post_id":"cl0oi8mid007p417t1f33dgpk","tag_id":"cl0oi8mff001v417t9w5mc00u","_id":"cl0oi8mij0081417tav32cwg9"},{"post_id":"cl0oi8mev0017417t5dozdhk8","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mik0084417t00y50udm"},{"post_id":"cl0oi8mev0017417t5dozdhk8","tag_id":"cl0oi8mic007n417tal0h4v67","_id":"cl0oi8mil0088417t3r9vc5py"},{"post_id":"cl0oi8mf2001d417telgcd8or","tag_id":"cl0oi8mgz004z417tclno9y5c","_id":"cl0oi8mim008b417t3x2bbmhf"},{"post_id":"cl0oi8mf2001d417telgcd8or","tag_id":"cl0oi8mii007z417t7s48a241","_id":"cl0oi8min008f417tbtf9a689"},{"post_id":"cl0oi8mf7001j417tg08a3y5l","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8miq008n417tg0y590az"},{"post_id":"cl0oi8mf7001j417tg08a3y5l","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8miq008p417t04jdfmcz"},{"post_id":"cl0oi8mf7001j417tg08a3y5l","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mir008s417t9ivdfwow"},{"post_id":"cl0oi8mfm002a417t2ryh9g8b","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mis0090417t2kecaryx"},{"post_id":"cl0oi8mfm002a417t2ryh9g8b","tag_id":"cl0oi8miq008r417t954d7ne3","_id":"cl0oi8mis0092417tetmv6rlj"},{"post_id":"cl0oi8mfm002a417t2ryh9g8b","tag_id":"cl0oi8mir008v417t4dpm2znp","_id":"cl0oi8mis0095417t8xr5bw1b"},{"post_id":"cl0oi8mfr002n417t9flkg7x6","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mit0099417t2laybcts"},{"post_id":"cl0oi8mfr002n417t9flkg7x6","tag_id":"cl0oi8mis0093417teu3ta2pi","_id":"cl0oi8mit009b417tdp2cgl0y"},{"post_id":"cl0oi8mfs002q417t312f574e","tag_id":"cl0oi8mis0097417tbgx94dm5","_id":"cl0oi8miu009l417tec148mjq"},{"post_id":"cl0oi8mfs002q417t312f574e","tag_id":"cl0oi8mit009d417t66vvfrcc","_id":"cl0oi8miv009n417t9muaci3b"},{"post_id":"cl0oi8mfs002q417t312f574e","tag_id":"cl0oi8mit009g417tbsbea1ex","_id":"cl0oi8miv009q417taoqs3s6g"},{"post_id":"cl0oi8mfz003a417t0u5w8jxz","tag_id":"cl0oi8mfx0033417tawxl6k2e","_id":"cl0oi8miw009u417t1lf6gij6"},{"post_id":"cl0oi8mfz003a417t0u5w8jxz","tag_id":"cl0oi8mit009d417t66vvfrcc","_id":"cl0oi8miw009w417t58cj8xx9"},{"post_id":"cl0oi8mfz003a417t0u5w8jxz","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8miw009z417tetnfevtl"},{"post_id":"cl0oi8mg0003e417t2m3h6ima","tag_id":"cl0oi8miv009s417t1ia7eib9","_id":"cl0oi8mix00a7417tdimmhfcc"},{"post_id":"cl0oi8mg0003e417t2m3h6ima","tag_id":"cl0oi8mfx0033417tawxl6k2e","_id":"cl0oi8mix00a9417t5spb1ib3"},{"post_id":"cl0oi8mg0003e417t2m3h6ima","tag_id":"cl0oi8miw009x417tefbr9dcj","_id":"cl0oi8miy00ac417t7kgbgmgv"},{"post_id":"cl0oi8mg0003e417t2m3h6ima","tag_id":"cl0oi8mix00a2417tc0rj0ucq","_id":"cl0oi8miy00ae417tewb51h5d"},{"post_id":"cl0oi8mg5003m417teur9dwhh","tag_id":"cl0oi8mix00a5417t6w3tdu96","_id":"cl0oi8miz00ak417t9261897i"},{"post_id":"cl0oi8mg5003m417teur9dwhh","tag_id":"cl0oi8mix00aa417t5vhwdrp4","_id":"cl0oi8miz00am417tcauth30f"},{"post_id":"cl0oi8mg5003m417teur9dwhh","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8miz00ap417t56o8hjiq"},{"post_id":"cl0oi8mg8003q417tc1b4gil5","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mj000aw417t1g1a9kgo"},{"post_id":"cl0oi8mg8003q417tc1b4gil5","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8mj100ay417t94ho42f8"},{"post_id":"cl0oi8mg8003q417tc1b4gil5","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mj100b1417tglr21cdl"},{"post_id":"cl0oi8mga003t417tfo664g3s","tag_id":"cl0oi8mii007z417t7s48a241","_id":"cl0oi8mj100b3417t505x1yyi"},{"post_id":"cl0oi8mgm0048417t8f6wfe0c","tag_id":"cl0oi8mis0097417tbgx94dm5","_id":"cl0oi8mj200b6417t4wul3ark"},{"post_id":"cl0oi8mgo004d417tgkni3o4p","tag_id":"cl0oi8mit009d417t66vvfrcc","_id":"cl0oi8mj200bd417t9p5m5twe"},{"post_id":"cl0oi8mgo004d417tgkni3o4p","tag_id":"cl0oi8mit009g417tbsbea1ex","_id":"cl0oi8mj300bf417t6ldj1eah"},{"post_id":"cl0oi8mgy004x417t8njj0k43","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mj300bi417tauiu2kx4"},{"post_id":"cl0oi8mgy004x417t8njj0k43","tag_id":"cl0oi8mj200bb417tgcyog9ik","_id":"cl0oi8mj300bk417ta7cl5jci"},{"post_id":"cl0oi8mh00052417ta1oq0vcm","tag_id":"cl0oi8mj300bh417t8wte0cz5","_id":"cl0oi8mj400bp417t2m0j8uc4"},{"post_id":"cl0oi8mh00052417ta1oq0vcm","tag_id":"cl0oi8mj300bm417t8qric5ex","_id":"cl0oi8mj400bq417tgefzcayx"},{"post_id":"cl0oi8mh00052417ta1oq0vcm","tag_id":"cl0oi8mj400bn417t6xdp0vf9","_id":"cl0oi8mj400bs417t8q85asc7"},{"post_id":"cl0oi8mhc005l417tdik66lj9","tag_id":"cl0oi8mj400bo417t2tu951qb","_id":"cl0oi8mj500bu417t7cfhe856"},{"post_id":"cl0oi8mhc005l417tdik66lj9","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mj500bv417t77pi40dv"},{"post_id":"cl0oi8mhc005l417tdik66lj9","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8mj600bx417t981wcz67"},{"post_id":"cl0oi8mhc005l417tdik66lj9","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mj600by417t47ste1n3"},{"post_id":"cl0oi8mhc005l417tdik66lj9","tag_id":"cl0oi8mj400br417t3p0111mj","_id":"cl0oi8mj600c0417t8f44cpp4"},{"post_id":"cl0oi8mhi005w417teb696rpr","tag_id":"cl0oi8mis0097417tbgx94dm5","_id":"cl0oi8mj600c1417tcjw9frjw"},{"post_id":"cl0oi8mhi005w417teb696rpr","tag_id":"cl0oi8mgn004a417t4may8p25","_id":"cl0oi8mj600c3417t0lb93oe9"},{"post_id":"cl0oi8mhi005w417teb696rpr","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8mj600c4417tec575lhr"},{"post_id":"cl0oi8mhk005z417t58mr094i","tag_id":"cl0oi8mj500bw417tcckgaptn","_id":"cl0oi8mj700c6417t51ocd7ii"},{"post_id":"cl0oi8mhk005z417t58mr094i","tag_id":"cl0oi8mj200bb417tgcyog9ik","_id":"cl0oi8mj700c7417tagfx4qt0"},{"post_id":"cl0oi8mht006g417t39fy2gle","tag_id":"cl0oi8mgs004j417teiojdxvl","_id":"cl0oi8mj700c9417tgh0l5i0g"},{"post_id":"cl0oi8mht006g417t39fy2gle","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mj700ca417tefnofqlp"},{"post_id":"cl0oi8mht006g417t39fy2gle","tag_id":"cl0oi8mj600c2417t84997nwc","_id":"cl0oi8mj700cb417tdclz0qkd"},{"post_id":"cl0oi8mhw006o417tcynu9n5p","tag_id":"cl0oi8mj700c5417teh4ncgnn","_id":"cl0oi8mj800cd417t6cpl9h0v"},{"post_id":"cl0oi8mhw006o417tcynu9n5p","tag_id":"cl0oi8mgv004q417texmc1m38","_id":"cl0oi8mj800ce417t0zfogvdy"},{"post_id":"cl0oi8mi1006y417t39p15k9n","tag_id":"cl0oi8mj700c8417t3cce2ds6","_id":"cl0oi8mj900ci417t9tjv6mm3"},{"post_id":"cl0oi8mi1006y417t39p15k9n","tag_id":"cl0oi8mj700cc417t98q0d4e7","_id":"cl0oi8mj900cj417t2phfauhy"},{"post_id":"cl0oi8mi1006y417t39p15k9n","tag_id":"cl0oi8mj800cf417t4nzs48vk","_id":"cl0oi8mj900cl417t1k6p4eop"},{"post_id":"cl0oi8mi1006y417t39p15k9n","tag_id":"cl0oi8mj800cg417t9mtf8ngh","_id":"cl0oi8mj900cm417t0txfh9f2"},{"post_id":"cl0oi8mi40075417t57os6bwx","tag_id":"cl0oi8mj800ch417t4bcq1srt","_id":"cl0oi8mj900co417takcka73n"},{"post_id":"cl0oi8mi40075417t57os6bwx","tag_id":"cl0oi8mj900ck417t15z66nmt","_id":"cl0oi8mja00cp417t1ui32sa3"},{"post_id":"cl0oi8mi60078417t0mtvb5yv","tag_id":"cl0oi8mj700c8417t3cce2ds6","_id":"cl0oi8mjb00cu417t8d6vg4dq"},{"post_id":"cl0oi8mi60078417t0mtvb5yv","tag_id":"cl0oi8mj700cc417t98q0d4e7","_id":"cl0oi8mjb00cv417t4ypmgglh"},{"post_id":"cl0oi8mi60078417t0mtvb5yv","tag_id":"cl0oi8mj800cf417t4nzs48vk","_id":"cl0oi8mjg00cx417t2acegls2"},{"post_id":"cl0oi8mi60078417t0mtvb5yv","tag_id":"cl0oi8mj800cg417t9mtf8ngh","_id":"cl0oi8mjg00cy417tcal5c5il"},{"post_id":"cl0oi8mia007j417tg3o86238","tag_id":"cl0oi8mjb00ct417t0dcueaa9","_id":"cl0oi8mjh00d1417t0ne6f1p5"},{"post_id":"cl0oi8mia007j417tg3o86238","tag_id":"cl0oi8mjf00cw417tc5dj287c","_id":"cl0oi8mjh00d2417t2twncbbh"},{"post_id":"cl0oi8mia007j417tg3o86238","tag_id":"cl0oi8mjg00cz417tgdkw6ve5","_id":"cl0oi8mjh00d4417tejwgcirt"},{"post_id":"cl0oi8mie007r417th3c239r9","tag_id":"cl0oi8mj700c8417t3cce2ds6","_id":"cl0oi8mji00d8417t5gni2h1f"},{"post_id":"cl0oi8mie007r417th3c239r9","tag_id":"cl0oi8mj700cc417t98q0d4e7","_id":"cl0oi8mjj00d9417tc5wud8ed"},{"post_id":"cl0oi8mie007r417th3c239r9","tag_id":"cl0oi8mj800cf417t4nzs48vk","_id":"cl0oi8mjj00db417tg128hqjx"},{"post_id":"cl0oi8mie007r417th3c239r9","tag_id":"cl0oi8mj800cg417t9mtf8ngh","_id":"cl0oi8mjj00dc417tchvj885d"},{"post_id":"cl0oi8mih007y417t1ecxetx0","tag_id":"cl0oi8mj900ck417t15z66nmt","_id":"cl0oi8mjj00de417t9ghta78t"},{"post_id":"cl0oi8mih007y417t1ecxetx0","tag_id":"cl0oi8mjj00da417t9g3uepr5","_id":"cl0oi8mjk00df417thmy47pyh"},{"post_id":"cl0oi8min008g417tcc3016rl","tag_id":"cl0oi8mj800ch417t4bcq1srt","_id":"cl0oi8mjk00dh417t7qxndbdv"},{"post_id":"cl0oi8min008g417tcc3016rl","tag_id":"cl0oi8mis0093417teu3ta2pi","_id":"cl0oi8mjk00di417teyk60t78"}],"Tag":[{"name":"blockchain","_id":"cl0oi8mdo0002417t2b2c9t6r"},{"name":"mist","_id":"cl0oi8mdv0007417t5edrhcp0"},{"name":"以太坊","_id":"cl0oi8mdz000b417t58qw7iiv"},{"name":"以太坊币","_id":"cl0oi8me3000g417t46s2dlwz"},{"name":"以太坊钱包","_id":"cl0oi8mea000n417t2zwlfae1"},{"name":"区块链","_id":"cl0oi8meh000u417t02q480lk"},{"name":"比特币","_id":"cl0oi8men000z417t7v104b4j"},{"name":"私有链","_id":"cl0oi8mes0014417t0t5wcu1v"},{"name":"token","_id":"cl0oi8mf00019417t4t6ifac4"},{"name":"智能合约","_id":"cl0oi8mff001v417t9w5mc00u"},{"name":"ascii","_id":"cl0oi8mfj0024417tbb1yd3it"},{"name":"unicode","_id":"cl0oi8mfn002d417tba74cwhj"},{"name":"utf-8","_id":"cl0oi8mfr002m417t7o3z3uxh"},{"name":"编码","_id":"cl0oi8mfu002v417tb3i7gj9k"},{"name":"Linux","_id":"cl0oi8mfx0033417tawxl6k2e"},{"name":"健康","_id":"cl0oi8mg0003c417t0b8d9gvz"},{"name":"健身","_id":"cl0oi8mg4003l417tg8ashw67"},{"name":"减肥","_id":"cl0oi8mga003u417tg7uw0i3k"},{"name":"PHP","_id":"cl0oi8mgn004a417t4may8p25"},{"name":"PHP7","_id":"cl0oi8mgs004j417teiojdxvl"},{"name":"PHP源码","_id":"cl0oi8mgv004q417texmc1m38"},{"name":"docker","_id":"cl0oi8mgz004z417tclno9y5c"},{"name":"docker network","_id":"cl0oi8mha005f417tadqh7y6f"},{"name":"libnetwork","_id":"cl0oi8mhe005o417t2tas74g1"},{"name":"容器","_id":"cl0oi8mhp006a417t4rxp5qrm"},{"name":"docker安全","_id":"cl0oi8mic007n417tal0h4v67"},{"name":"MySQL","_id":"cl0oi8mii007z417t7s48a241"},{"name":"算法","_id":"cl0oi8miq008r417t954d7ne3"},{"name":"贪心算法","_id":"cl0oi8mir008v417t4dpm2znp"},{"name":"面试","_id":"cl0oi8mis0093417teu3ta2pi"},{"name":"http","_id":"cl0oi8mis0097417tbgx94dm5"},{"name":"nginx","_id":"cl0oi8mit009d417t66vvfrcc"},{"name":"tcp","_id":"cl0oi8mit009g417tbsbea1ex"},{"name":"cli","_id":"cl0oi8miv009s417t1ia7eib9"},{"name":"shell","_id":"cl0oi8miw009x417tefbr9dcj"},{"name":"ulimit","_id":"cl0oi8mix00a2417tc0rj0ucq"},{"name":"brew","_id":"cl0oi8mix00a5417t6w3tdu96"},{"name":"Mac","_id":"cl0oi8mix00aa417t5vhwdrp4"},{"name":"PHP设计模式","_id":"cl0oi8mj200bb417tgcyog9ik"},{"name":"Apollo","_id":"cl0oi8mj300bh417t8wte0cz5"},{"name":"devops","_id":"cl0oi8mj300bm417t8qric5ex"},{"name":"微服务","_id":"cl0oi8mj400bn417t6xdp0vf9"},{"name":"json","_id":"cl0oi8mj400bo417t2tu951qb"},{"name":"PHP精度","_id":"cl0oi8mj400br417t3p0111mj"},{"name":"PHP原型模式","_id":"cl0oi8mj500bw417tcckgaptn"},{"name":"内存","_id":"cl0oi8mj600c2417t84997nwc"},{"name":"PHP7垃圾回收","_id":"cl0oi8mj700c5417teh4ncgnn"},{"name":"出国游","_id":"cl0oi8mj700c8417t3cce2ds6"},{"name":"团建","_id":"cl0oi8mj700cc417t98q0d4e7"},{"name":"普吉岛","_id":"cl0oi8mj800cf417t4nzs48vk"},{"name":"泰国","_id":"cl0oi8mj800cg417t9mtf8ngh"},{"name":"成长进阶","_id":"cl0oi8mj800ch417t4bcq1srt"},{"name":"程序员","_id":"cl0oi8mj900ck417t15z66nmt"},{"name":"HyperLogLog","_id":"cl0oi8mjb00ct417t0dcueaa9"},{"name":"Redis","_id":"cl0oi8mjf00cw417tc5dj287c"},{"name":"统计","_id":"cl0oi8mjg00cz417tgdkw6ve5"},{"name":"自我表达","_id":"cl0oi8mjj00da417t9g3uepr5"}]}}