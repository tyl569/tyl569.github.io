<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.8.9" created="2022-03-12 23:50" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Feilong-tech</title>
	<link>https://feilong.tech</link>
	<description></description>
	<pubDate>Sat, 12 Mar 2022 23:50:13 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://feilong.tech</wp:base_site_url>
	<wp:base_blog_url>https://feilong.tech</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[Feilong]]></wp:author_login><wp:author_email><![CDATA[tengyunlong@feilong.tech]]></wp:author_email><wp:author_display_name><![CDATA[Feilong]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>https://wordpress.org/?v=4.8.9</generator>

	<item>
		<title>15个PHP开发者常用的正则表达式及实例</title>
		<link>https://feilong.tech/2017/08/24/regular/</link>
		<pubDate>Thu, 24 Aug 2017 11:32:47 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
<p>从字符串中删除特定字符
本段代码实现删除字符串中除所有大小写字母及数字以外的字符</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$value = &quot;wWw.UncleToo.Com - 【UncleToo中文网】 - 12345&quot;;
$value = preg_replace(&quot;/[^A-Za-z0-9]/&quot;,&quot;&quot;,$value);
echo $value;
//输出：wWwUncleTooComUncleToo12345
?&gt;</code></pre>
<!--more-->
<blockquote>
<p>验证用户名
以下代码验证用户名是否由字母、数字及下划线组成。</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$username = &quot;uncletoo_COM123&quot;;
if (preg_match(&#039;/^[a-z\d_]{5,20}$/i&#039;, $username)) {
    echo &quot;用户名可用&quot;;
} else {
    echo &quot;用户名存在特殊字符&quot;;
}
?&gt;</code></pre>
<blockquote>
<p>添加信息到图片alt属性
使用下面函数，可以实现将文章标题添加到图片的alt属性中。</p>
</blockquote>
<pre><code class="language-php">&lt;?php
function add_alt_tags($content) {
    global $post;
    preg_match_all(&#039;/&lt;img (.*?)\/ &gt;/&#039;, $content, $images);
    if(!is_null($images)) {
        foreach($images[1] as $index =&gt; $value) {
            if(!preg_match(&#039;/alt=/&#039;, $value)) {
                $new_img = str_replace(&#039;&lt;img&#039;, &#039;&lt;img alt=&quot;&#039;.get_the_title().&#039;&quot;&#039;, $images[0][$index]);
                $content = str_replace($images[0][$index], $new_img, $content);
            }
        }
    }
    return $content;
}
?&gt;</code></pre>
<blockquote>
<p>将EMail文本自动添加Mailto链接</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$text = &quot;demo@abc.com&quot;;
$string = eregi_replace(&#039;([_\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\.)+[a-z]{2,3})&#039;,&#039;&lt;a href=&quot;mailto:\\1&quot;&gt;\\1&lt;/ a&gt;&#039;, $text);
echo $string;
?&gt;</code></pre>
<blockquote>
<p>过滤限制级词语</p>
</blockquote>
<pre><code class="language-php">&lt;?php
function filtrado($texto, $reemplazo = false) {
    $filtradas = &#039;admin,uncletoo,中文网&#039;; //这里定义需要过滤的词语
    $f = explode(&#039;,&#039;, $filtradas);
    $f = array_map(&#039;trim&#039;, $f);
    $filtro = implode(&#039;|&#039;, $f);
    return ($reemplazo) ? preg_replace(&quot;#$filtro#i&quot;, $reemplazo, $texto) : preg_match(&quot;#$filtro#i&quot;, $texto) ;
}
?&gt;</code></pre>
<blockquote>
<p>验证电话号码
这是一个很常见的功能</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$string = &quot;(010) 555-5555&quot;;
if (preg_match(&#039;/^\(?[0-9]{3}\)?|[0-9]{3}[-. ]? [0-9]{3}[-. ]?[0-9]{4}$/&#039;, $string)) {
   echo &quot;successful.&quot;;
}
?&gt;</code></pre>
<blockquote>
<p>替换超链接href属性的内容
在页面上查看源文件，显示为：&lt; a href=&quot;yes&quot; &gt;UncleToo中文网&lt; /a&gt;</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$html = &#039;&lt;a href=&quot;http://www.uncletoo.com&quot;&gt;UncleToo中文网&lt;/a&gt;&#039;;
$replacement = &quot;yes&quot;;
$pattern = &#039;/(?&lt;=href\=&quot;)[^]]+?(?=&quot;)/&#039;;
$replacedHrefHtml = preg_replace($pattern, $replacement, $html);
echo $replacedHrefHtml ;
?&gt;</code></pre>
<blockquote>
<p>验证邮箱正则表达式
此功能在用户注册是经常使用</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$regex = &quot;([a-z0-9_.-]+)&quot;. # name
&quot;@&quot;. # at
&quot;([a-z0-9.-]+){2,255}&quot;. # domain &amp; possibly subdomains
&quot;.&quot;. # period
&quot;([a-z]+){2,10}&quot;; # domain extension
$eregi = eregi_replace($regex, &#039;&#039;, $email);
$valid_email = empty($eregi) ? true : false;
?&gt;</code></pre>
<blockquote>
<p>IP地址验证</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$string = &quot;255.255.255.255&quot;;
if (preg_match(
&#039;/^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:[.](?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$/&#039;, $string)) {
    echo &quot;IP address is good.&quot;;
}
?&gt;</code></pre>
<blockquote>
<p>邮政编码验证</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$string = &quot;12345-1234&quot;;
if (preg_match(&#039;/^[0-9]{5}([- ]?[0-9]{4})?$/&#039;, $string)) {
    echo &quot;zip code checks out&quot;;
}
?&gt;</code></pre>
<blockquote>
<p>高亮显示文本</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$text = &quot;UncleToo（www.uncletoo.com）中文网&quot;;
$text = preg_replace(&quot;/\b(www)\b/i&quot;, &#039;&lt;span style=&quot;background:#5fc9f6&quot;&gt;\1&lt;/ span&gt;&#039;,$text);
echo $text;
?&gt;</code></pre>
<blockquote>
<p>从特定的URL中提取域名</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$url = &quot;http://www.uncletoo.com/plug/tags/?tag=PHP&quot;;
preg_match(&#039;@^(?:http://)?([^/]+)@i&#039;, $url, $matches);
$host = $matches[1];
echo $host;
//输出：www.uncletoo.com
?&gt;</code></pre>
<blockquote>
<p>验证域名格式是否正确</p>
</blockquote>
<pre><code class="language-php">&lt;?php
$url = &quot;http://www.uncletoo.com/&quot;;
if (preg_match(&#039;/^(http|https|ftp):\/\/([A-Z0-9][A-Z0-9_-]*(?:\.[A-Z0-9][A-Z0-9_-]*)+):?(\d+)?\/?/i&#039;, $url)) {
    echo &quot;域名格式正确.&quot;;
} else {
    echo &quot;域名格式错误.&quot;;
}
?&gt;</code></pre>
<blockquote>
<p>使用文章标题生成URL</p>
</blockquote>
<pre><code class="language-php">&lt;?php
function create_slug($string){
   $slug=preg_replace(&#039;/[^A-Za-z0-9-]+/&#039;, &#039;-&#039;, $string);
   return $slug;
}
echo create_slug(&#039;my name is uncletoo&#039;);
//输出：my-name-is-uncletoo
?&gt;</code></pre>
<blockquote>
<p>添加http://到URL地址
当我们需要用户填写网址时，很多用户往往不填写http://直接输入域名，使用下面代码可将http://添加到网址的前面。</p>
</blockquote>
<pre><code class="language-php">&lt;?php
if (!preg_match(&quot;/^(http|https|ftp):/&quot;, $_POST[&#039;url&#039;])) {
   $_POST[&#039;url&#039;] = &#039;http://&#039;.$_POST[&#039;url&#039;];
}
?&gt;</code></pre>
<blockquote>
<p>将URL转换为超链接
这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。</p>
</blockquote>
<pre><code class="language-php">&lt;?php
function makeLinks($text) {
    $text = eregi_replace(&#039;(((f|ht){1}tp://)[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)&#039;,&#039;\1&#039;, $text);
    $text = eregi_replace(&#039;([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)&#039;,&#039;\1\2&#039;,$text);
    $text = eregi_replace(&#039;([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]{2,3})&#039;,&#039;\1&#039;, $text);
    return $text;
}
?&gt;</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:32:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:32:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[regular]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[15%e4%b8%aaphp%e5%bc%80%e5%8f%91%e8%80%85%e5%b8%b8%e7%94%a8%e7%9a%84%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8f%8a%e5%ae%9e%e4%be%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-preg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>阿里云消息队列和消息服务的使用</title>
		<link>https://feilong.tech/2017/08/24/aliyun-mq/</link>
		<pubDate>Thu, 24 Aug 2017 11:37:31 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>应用场景</h3>
<h4>异步处理</h4>
<p>消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。</p>
<!--more-->
<blockquote>
<p><strong>串行方式</strong>：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟</p>
</blockquote>
<p><img src="/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%971-1.png" alt="" /></p>
<blockquote>
<p><strong>并行方式</strong>：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。</p>
</blockquote>
<p><img src="/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%972-1.png" alt="" /></p>
<p>消息队列实现方式：</p>
<p><img src="/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%974.png" alt="" /></p>
<h4>应用解耦</h4>
<p>用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。</p>
<p><img src="/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%975-300x111.png" alt="" /></p>
<p>消息队列形式：</p>
<p><img src="/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%976.png" alt="" /></p>
<h4>流量削峰</h4>
<p>很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。</p>
<p><img src="/uploads/2017/08/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%977.png" alt="" /></p>
<h3>阿里云消息队列和消息服务</h3>
<h4>消息服务和消息队列的对比</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">对比项目</th>
<th style="text-align: center;">消息服务(MNS,原MQS)</th>
<th style="text-align: center;">消息队列(ONS)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">queue模型</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">官方SDK</td>
<td style="text-align: center;">Java,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)</td>
<td style="text-align: center;">Java,C/C++,C#,PHP(http),Python(http)</td>
</tr>
<tr>
<td style="text-align: center;">支持JMS</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td style="text-align: center;">协议支持</td>
<td style="text-align: center;">HTTP</td>
<td style="text-align: center;">TCP,HTTP,MQTT</td>
</tr>
<tr>
<td style="text-align: center;">延时消息</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">定时消息</td>
<td style="text-align: center;">No</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">事务消息</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">消息Batch操作</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td style="text-align: center;">保证消息至少消费一次</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">支持RAM访问控制</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">消息优先级</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td style="text-align: center;">消息推拉模式</td>
<td style="text-align: center;">Pull，Push</td>
<td style="text-align: center;">Pull，Push</td>
</tr>
<tr>
<td style="text-align: center;">消息轨迹追踪</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">服务端消息过滤</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
</tr>
<tr>
<td style="text-align: center;">qps性能</td>
<td style="text-align: center;">默认5000</td>
<td style="text-align: center;">默认5000</td>
</tr>
<tr>
<td style="text-align: center;">数据可靠性</td>
<td style="text-align: center;">99.99999999%</td>
<td style="text-align: center;">99.99%</td>
</tr>
<tr>
<td style="text-align: center;">数据堆积</td>
<td style="text-align: center;">不限</td>
<td style="text-align: center;">不限</td>
</tr>
<tr>
<td style="text-align: center;">服务可用性</td>
<td style="text-align: center;">99.9%</td>
<td style="text-align: center;">99.9%</td>
</tr>
</tbody>
</table>
<h4>API对比</h4>
<p><a href="https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O">消息服务API地址</a></p>
<p><a href="https://help.aliyun.com/document_detail/29572.html">消息队列http API地址</a></p>
<blockquote>
<p><strong>消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到<a href="https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt">签名</a>的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。</strong></p>
<p><strong>消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。</strong></p>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:37:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:37:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[aliyun-mq]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e9%98%bf%e9%87%8c%e4%ba%91%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e5%92%8c%e6%b6%88%e6%81%af%e6%9c%8d%e5%8a%a1%e7%9a%84%e4%bd%bf%e7%94%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.132.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>读《代码整洁之道》</title>
		<link>https://feilong.tech/2017/08/24/reading-code-clean/</link>
		<pubDate>Thu, 24 Aug 2017 11:39:49 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。</h4>
<!--more-->
<h4>由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。</h4>
<h4>就像说的题目一样，主旨就是一个词：整洁</h4>
<h4>糟糕的代码</h4>
<h4>我们应该如何理解糟糕的代码？</h4>
<h4>无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。</h4>
<h4>假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·</h4>
<h4>整洁的代码</h4>
<h4>当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。</h4>
<h4><em>整洁的原则</em></h4>
<h4><em>变量</em></h4>
<h4>真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现<code>$name1</code>，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：</h4>
<pre><code class="language-php">$getActiveAccount
$getActiveAccounts
$getActiveAccountInfo</code></pre>
<h4>应该很难有人区分这三个函数有什么不同了，moneyAmount 和  money两个变量其实没有任何区别。</h4>
<h4><em>函数</em></h4>
<h4>对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。</h4>
<h4>在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。</h4>
<h4>作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。</h4>
<h4><em>格式</em></h4>
<h4>我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？</h4>
<h4>其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是<code>Java</code>但是思想是一致的。</h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:39:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:39:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[reading-code-clean]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e8%af%bb%e3%80%8a%e4%bb%a3%e7%a0%81%e6%95%b4%e6%b4%81%e4%b9%8b%e9%81%93%e3%80%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>一些杂谈琐事 —— 自我反思（一）</title>
		<link>https://feilong.tech/2017/08/24/thinking-1/</link>
		<pubDate>Thu, 24 Aug 2017 11:40:31 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，<code>“思考不足”</code>。</h4>
<h4>怎么来理解这四个字呢？用一个简单的小事情举个例子吧。</h4>
<!--more-->
<h4><em>假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情</em>。</h4>
<h4>刚来公司的时候，老大给我分配了任务，就是使用<code>Nodejs</code>搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：</h4>
<blockquote>
<ul>
<li>开发语言：之前都是使用<code>PHP</code>，但是给的源码是<code>Nodejs</code></li>
<li>实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作</li>
</ul>
</blockquote>
<h4>大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。</h4>
<h4>其实做过微信开发的，基本上都会知道一个名词——<em>access_token</em>，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。</h4>
<h4>时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨<em>英雄无用武之地</em>，辛苦写的demo迟迟没上线。</h4>
<h4>时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。</h4>
<h4>这时候摆在我面前的有两条路：</h4>
<blockquote>
<ul>
<li>继续查Nodejs资料</li>
<li>重新设计接口</li>
</ul>
</blockquote>
<h4>这次我并没有像之前一样，而是耐心从多个方面进行思考：<em><code>技术可行性</code>  </em>和<em>  <code>时间成本</code></em></h4>
<blockquote>
<ul>
<li>对于第一条，技术完全不熟悉，时间更是很难估计</li>
<li>对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。</li>
</ul>
</blockquote>
<h4>于是，我便重新设计接口，设计方法：</h4>
<blockquote>
<ul>
<li>access_token依然放在Nodejs那台服务器，作为核心的参数</li>
<li>使用Nodejs写一个接口，给云端使用，用来读取access_token</li>
<li>Nodejs还要写一个rebuilt接口，当access_token过期的时候，重新生成</li>
</ul>
</blockquote>
<h4>写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。</h4>
<p>记录下当前的时间：2016/08/03  21 : 54</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:40:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:40:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[thinking-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="think"><![CDATA[自我反思]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%80%e4%ba%9b%e6%9d%82%e8%b0%88%e7%90%90%e4%ba%8b-%e8%87%aa%e6%88%91%e5%8f%8d%e6%80%9d%ef%bc%88%e4%b8%80%ef%bc%89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[thinking1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.128.142";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bash基础学习一</title>
		<link>https://feilong.tech/2017/08/24/bash-lean-1/</link>
		<pubDate>Thu, 24 Aug 2017 11:41:06 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Bash 中处理特殊字符</h3>
<h3>符号</h3>
<h4>注释</h4>
<p>行号以#开头是注释，bash脚本的第一行通常是<code>#!/bin/bash</code>，意思是这个文件是bash脚本 <code>#!</code> 用于当前脚本的解释器</p>
<p>当然，在echo中转义的#是不能做转义的：</p>
<!--more-->
<pre><code class="language-bash">$ vim test.sh</code></pre>
<p>输入如下代码，并保存</p>
<pre><code class="language-bash">#!/bin/bash

 echo &quot;The # here does not begin a comment.&quot;
 echo &#039;The # here does not begin a comment.&#039;
 echo The \# here does not begin a comment.
 echo The # 这里开始一个注释

 echo ${PATH#*:}         # 参数替换，不是一个注释
 echo $(( 2#101011 ))   # 数制转换（使用二进制表示），32+8+2+1</code></pre>
<p>执行结果</p>
<pre><code class="language-bash">$ bash test.sh</code></pre>
<p>运行效果</p>
<pre><code class="language-bash">The # here does not begin a comment.
The # here does not begin a comment.
The # here does not begin a comment.
The
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
43</code></pre>
<h3>分号</h3>
<h4>命令分隔符</h4>
<p>使用分号可以分割在同一行的两个或两个以上的命令</p>
<pre><code class="language-bash">$ vim test2.sh</code></pre>
<p>输入如下代码，并保存</p>
<pre><code class="language-bash">#!/bin/bash
 echo hello; echo there
 filename=ttt.sh
 if [ -r &quot;$filename&quot; ]; then    # 注意: &quot;if&quot;和&quot;then&quot;需要分隔
     echo &quot;File $filename exists.&quot;; cp $filename $filename.bak
 else
     echo &quot;File $filename not found.&quot;; touch $filename
 fi; echo &quot;File test complete.&quot;</code></pre>
<p>运行脚本</p>
<pre><code class="language-bash">$ bash test2.sh</code></pre>
<p>运行结果</p>
<pre><code class="language-bash">hello
there
File ttt.sh not found
Filename test complete.</code></pre>
<h4>终止case选项(双;分号)</h4>
<p>使用双分号用于终止case选项</p>
<pre><code class="language-bash">$ vim test.bash</code></pre>
<p>输入如下代码，并保存</p>
<pre><code class="language-bash">#!/bin/bash
varname=b
case $varname in 
    [a-z]) echo &quot;abc&quot;;;
    [0-9]) echo &quot;123&quot;;;
esac    #case终止符号</code></pre>
<p>执行脚本，查看输出</p>
<pre><code class="language-bash">$ bash test.sh
abc</code></pre>
<p>解释说明，上面的代码，首先赋值给变量varname的值是b，然后使用case进行判断。
case的格式</p>
<pre><code class="language-bash">case $ in
    条件1) command;;
    条件2) command;;
    .
    .
    .
    *) command;; ##匹配所有
esac</code></pre>
<h3>点号（.）</h3>
<p>等价于source命令
bash 中的 source 命令用于在当前 bash 环境下读取并执行 FileName.sh 中的命令。</p>
<pre><code class="language-bash">$ source test.sh
Hello World
$ . test.sh
Hello World</code></pre>
<h3>引号</h3>
<h4>双引号</h4>
<p>&quot;STRING&quot; 将会阻止（解释）STRING中大部分特殊的字符。</p>
<h4>单引号</h4>
<p>'STRING' 将会阻止STRING中所有特殊字符的解释，这是一种比使用&quot;更强烈的形式。</p>
<h3>反引号</h3>
<p>反引号通常是用于命令，反引号中的命令会优先执行</p>
<pre><code class="language-bash">$ cp `mkdir back` test.sh back</code></pre>
<p>分析：反引号类似算法中的小括号，会优先执行，上面的运行结果</p>
<pre><code class="language-bash">$ cp `mkdir back` test.sh back
$ ll
total 16K
drwxrwxr-x 3 shiyanlou shiyanlou 4.0K Apr 14 14:43 Code
drwxrwxr-x 2 shiyanlou shiyanlou 4.0K Nov 27  2015 Desktop
drwxrwxr-x 2 shiyanlou shiyanlou 4.0K Apr 14 15:07 back
-rw-rw-r-- 1 shiyanlou shiyanlou   13 Apr 14 15:04 test.sh</code></pre>
<p>为了验证一下，我们可以删除back文件夹内容，然后执行 <strong>cp test.sh back <code>mkdir back</code></strong> 效果是一样的</p>
<h3>冒号</h3>
<h4>空命令</h4>
<p>等价于“NOP”（no op，一个什么也不干的命令）。也可以被认为与shell的内建命令true作用相同。“:”命令是一个bash的内建命令，它的退出码（exit status）是（0）。
如：</p>
<pre><code class="language-bash">#!/bin/bash

while :
do
    echo &quot;endless loop&quot;
done</code></pre>
<p>等价于</p>
<pre><code class="language-bash">#!/bin/bash

while true
do
    echo &quot;endless loop&quot;
done</code></pre>
<p>可以在 if/then 中作占位符：</p>
<pre><code class="language-bash">condition=5

if [ $condition -gt 0 ]
then :   # 什么都不做，退出分支
else
    echo &quot;$condition&quot;
fi</code></pre>
<h4>变量拓展/子串替换</h4>
<p>在与<code>&gt;</code>重定向操作符联合使用的时候，会把文件内容清空，但是并不会修改文件的权限。如果文件不存在，那么创建这个文件，在这方面，类似<code>cat</code>命令</p>
<pre><code class="language-bash">$ : &gt; test.bash
# 与 cat /dev/null &gt; test.sh
# /dev/null一直是一个空内容</code></pre>
<p>在与<code>&gt;&gt;</code>重定向操作符结合使用时，将不会对预先存在的目标文件(: &gt;&gt; target_file)产生任何影响。如果这个文件之前并不存在，那么就创建它。
&quot;:&quot;还用来在 /etc/passwd 和 $PATH 变量中做分隔符，如：</p>
<pre><code class="language-bash">$ echo $PATH
/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games</code></pre>
<h3>问号</h3>
<h4>操作符</h4>
<p>在一个双括号结构中，? 就是C语言的三元操作符，如：</p>
<pre><code class="language-bash">#!/bin/bash
 a=10
 (( t=a&lt;50?8:9 ))
 echo $t</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:41:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:41:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bash-lean-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash%e5%9f%ba%e7%a1%80%e5%ad%a6%e4%b9%a0%e4%b8%80]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.153.112";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CURL 设置CURLOPT_TIMEOUT_MS 超时时间</title>
		<link>https://feilong.tech/2017/08/24/curlopt_timeout_ms/</link>
		<pubDate>Thu, 24 Aug 2017 11:41:23 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>作为PHPer，基本上经常会使用curl函数，调用接口，爬取数据，有时候接口返回时间太长的话，会影响业务逻辑。</h4>
<h4>比如：我调用天气接口，如果天气接口处理时间很长，比如5s，这就严重影响到业务了。所以针对这种情况，我们需要直接忽略。</h4>
<h5>最近在调用图灵接口，最长返回时间高达4s，我们的期望是时间超过500毫秒，就直接忽略。</h5>
<p><em>curl可以通过设置变量 <code>CURLOPT_TIMEOUT_MS</code>或者 <code>CURLOPT_TIMEOUT</code>设置超时时间。</em></p>
<blockquote>
<p>CURLOPT_TIMEOUT_MS 以毫秒计算超时时间
CURLOPT_TIMEOUT 以秒计算超时时间</p>
</blockquote>
<p>查了手册关于<code>timeout</code>的设置</p>
<table>
<thead>
<tr>
<th style="text-align: center;">变量</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">CURLOPT_TIMEOUT</td>
<td style="text-align: center;">允许 cURL 函数执行的最长秒数。</td>
</tr>
<tr>
<td style="text-align: center;">CURLOPT_TIMEOUT_MS</td>
<td style="text-align: center;">设置cURL允许执行的最长毫秒数。 如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。</td>
</tr>
</tbody>
</table>
<h5>假设我们想要设置超时时间是500毫秒，那么直接设置 curl_setopt($ch, CURLOPT_TIMEOUT_MS, 500);</h5>
<p>但是，测试的时候，发现，设置了500ms，curl直接返回了false，并且打印了下错误信息：<code>cURL Error (28): Timeout was reached</code> 可能和libcurl 的编译有关系，我继续查了下php手册，发现了如下的内容</p>
<blockquote>
<p>If you want cURL to timeout in less than one second, you can use CURLOPT_TIMEOUT_MS, although there is a bug/&quot;feature&quot;  on &quot;Unix-like systems&quot; that causes libcurl to timeout immediately if the value is &lt; 1000 ms with the error &quot;cURL Error (28): Timeout was reached&quot;.  The explanation for this behavior is:
&quot;If libcurl is built to use the standard system name resolver, that portion of the transfer will still use full-second resolution for timeouts with a minimum timeout allowed of one second.&quot;</p>
<p>What this means to PHP developers is &quot;You can use this function without testing it first, because you can't tell if libcurl is using the standard system name resolver (but you can be pretty sure it is)&quot;</p>
<p>The problem is that on (Li|U)nix, when libcurl uses the standard name resolver, a SIGALRM is raised during name resolution which libcurl thinks is the timeout alarm.</p>
<p>The solution is to disable signals using CURLOPT_NOSIGNAL.  Here's an example script that requests itself causing a 10-second delay so you can test timeouts:</p>
</blockquote>
<p>内容的大概意思是：libcurl使用的是标准名称的解析器，内部传输信息号部分，依然是使用秒来计算是否超时，并且最少时间是1秒，如果想要设置超时时间小于1秒，那么直接通过<code>CURLOPT_NOSIGNAL</code>禁用信号即可。即：<code>curl_setopt($ch, CURLOPT_NOSIGNAL, 1);</code></p>
<pre><code class="language-php">#demo code

 if (!isset($_GET[&#039;foo&#039;])) {
        // Client
      $ch = curl_init(&#039;http://localhost/test/test_timeout.php?foo=bar&#039;);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_NOSIGNAL, 1);
      curl_setopt($ch, CURLOPT_TIMEOUT_MS, 200);
      $data = curl_exec($ch);
      $curl_errno = curl_errno($ch);
      $curl_error = curl_error($ch);
      curl_close($ch);

        if ($curl_errno &gt; 0) {
                echo &quot;cURL Error ($curl_errno): $curl_error\n&quot;;
        } else {
               echo &quot;Data received: $data\n&quot;;
        }
} else {
        // Server
        sleep(10);
        echo &quot;Done.&quot;;
}</code></pre>
<h4>本文连接：<a href="http://feilong.tech/2017/08/24/curlopt_timeout_ms">http://feilong.tech/2017/08/24/curlopt_timeout_ms</a></h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:41:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:41:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[curlopt_timeout_ms]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[curl-%e8%ae%be%e7%bd%aecurlopt_timeout_ms-%e8%b6%85%e6%97%b6%e6%97%b6%e9%97%b4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.139.118";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git 分支（branch）的使用整理</title>
		<link>https://feilong.tech/2017/08/24/git-branch/</link>
		<pubDate>Thu, 24 Aug 2017 11:42:06 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
<p>平时git branch用的比较少，大多数用的git add/commit/pull/push用的比较多，不过也特意找了一些资料
完整资料请点击<a href="http://blog.jobbole.com/78960/">这里</a>或者<a href="http://www.open-open.com/lib/view/open1328069889514.html">这里</a></p>
<p>每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。</p>
<!--more-->
<h4>1）我们在github创建一个test的项目，创建过程自行操作</h4>
</blockquote>
<p><img src="/uploads/2017/08/1469950279275.png" alt="" /></p>
<h4>2）我们把项目<code><code>git clone</code></code>到本地</h4>
<pre><code class="language-bash"> $ git clone https://github.com/tyl569/test.git ./
 Cloning into &#039;.&#039;...
 warning: You appear to have cloned an empty repository.
 Checking connectivity... done.</code></pre>
<h4>3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world.  当做项目好了。</h4>
<pre><code class="language-tex">hello ,world.</code></pre>
<h4>4）ok，接下来就是套路操作了。</h4>
<pre><code class="language-bash">$ git status
On branch master

Initial commit

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)

$ git add .
$ git commit -m 初次提交项目
[master (root-commit) 97b26e5] 初次提交项目
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt

$ git push
git: &#039;credential-osxkeychain&#039; is not a git command. See &#039;git --help&#039;.
Username for &#039;https://github.com&#039;: tyl569
Password for &#039;https://tyl569@github.com&#039;:
git: &#039;credential-osxkeychain&#039; is not a git command. See &#039;git --help&#039;.
Counting objects: 3, done.
Writing objects: 100% (3/3), 240 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/tyl569/test.git
 * [new branch]      master -&gt; master</code></pre>
<h4>5）可以从<code><code>git push</code></code>结果看到，这是一个新的分支。</h4>
<h4>6）创建一个新的分支，并且切换到新的分支上面。</h4>
<pre><code class="language-bash">$ git branch new
$ git checkout new
Switched to branch &#039;new&#039;
## 提示已经切换到new分支</code></pre>
<h4>7）此时在本地项目做一些改动，然后提交到github上面。</h4>
<pre><code class="language-bash"># git add/commit等操作省略
$ git push
fatal: The current branch new has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin new</code></pre>
<h4>在<code><code>git push</code></code>的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。</h4>
<pre><code class="language-bash">$ git push --set-upstream origin new
git: &#039;credential-osxkeychain&#039; is not a git command. See &#039;git --help&#039;.
Username for &#039;https://github.com&#039;: tyl569
Password for &#039;https://tyl569@github.com&#039;:
git: &#039;credential-osxkeychain&#039; is not a git command. See &#039;git --help&#039;.
Counting objects: 3, done.
Writing objects: 100% (3/3), 283 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/tyl569/test.git
 * [new branch]      new -&gt; new
Branch new set up to track remote branch new from origin.</code></pre>
<h4>8）查看github，会看到合并分支的请求</h4>
<p><img src="/uploads/2017/08/1469951539710.png" alt="" /></p>
<h4>查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户<code><code>pull</code><code>或者</code><code>clone</code></code>的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。</h4>
<p><img src="/uploads/2017/08/1469951597308.png" alt="" />
<img src="/uploads/2017/08/1469951611981.png" alt="" /></p>
<h4>9）如果功能在new分支上面开发完之后，合并分支。</h4>
<pre><code class="language-bash">$  git checkout master
$ git merge new
Updating 97b26e5..96d3fe8
Fast-forward
 test.txt | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)</code></pre>
<h4>10）这个时候，就会把new分支的改动，合并到master分支了，然后<code><code>push</code></code></h4>
<pre><code class="language-bash">git push
git: &#039;credential-osxkeychain&#039; is not a git command. See &#039;git --help&#039;.
Username for &#039;https://github.com&#039;: tyl569
Password for &#039;https://tyl569@github.com&#039;:
git: &#039;credential-osxkeychain&#039; is not a git command. See &#039;git --help&#039;.
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/tyl569/test.git
   97b26e5..96d3fe8  master -&gt; master</code></pre>
<p><img src="/uploads/2017/08/1469952187908.png" alt="" />
<img src="/uploads/2017/08/1469952201409.png" alt="" /></p>
<hr />
<h3>分支合并的作用：</h3>
<blockquote>
<ul>
<li>可以独立开发某个功能或者模块</li>
<li>如果功能没有搞完，也可以<code><code>push</code></code>，对项目没有影响</li>
</ul>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:42:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:42:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[git-branch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[git-%e5%88%86%e6%94%af%ef%bc%88branch%ef%bc%89%e7%9a%84%e4%bd%bf%e7%94%a8%e6%95%b4%e7%90%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git Push 出现错误处理</title>
		<link>https://feilong.tech/2017/08/24/git-push-error/</link>
		<pubDate>Thu, 24 Aug 2017 11:42:45 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=63</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>这几次一直使用<code>git push</code>出现如下错误，百度一直没有找到好的解决办法</h4>
<pre><code class="language-bash">remote: error: insufficient permission for adding an object to repository database ./objects
remote: fatal: failed to write object
error: unpack failed: unpack-objects abnormal exit
To git@GIT-ADDRESS
 ! [remote rejected] develop -&gt; develop (unpacker error)
error: failed to push some refs to &#039;git@GIT-ADDRESS&#039;</code></pre>
<!--more-->
<h4>基本上每次都是绕开：</h4>
<pre><code class="language-bash">$ git remote set-url origin HTTPS
#HTTPS 为https的项目地址
$ git push
#输入用户名
#输入密码</code></pre>
<h4>今天终于找到了解决办法：</h4>
<pre><code class="language-bash">#切换为ssh
$ git config --global push.default matching
$ git push</code></pre>
<h4>拓展：</h4>
<pre><code class="language-bash">$ git push origin master</code></pre>
<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>
<pre><code class="language-bash">$ git push origin
# git push</code></pre>
<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>
<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>
<pre><code class="language-bash">$ git config --global push.default matching
# 或者
$ git config --global push.default simple</code></pre>
<pre><code class="language-bash">$ git push --force origin</code></pre>
<p>上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:42:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:42:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[git-push-error]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[git-push-%e5%87%ba%e7%8e%b0%e9%94%99%e8%af%af%e5%a4%84%e7%90%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.132.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux 安装supervisor (CentOs or RedHat)</title>
		<link>https://feilong.tech/2017/08/24/linux-install-supervisor/</link>
		<pubDate>Thu, 24 Aug 2017 11:56:46 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。</h4>
<h4>supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</h4>
<!--more-->
<h4>安装supervisor</h4>
<pre><code class="language-bash">$ yum install python-setuptools</code></pre>
<p><img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151312.png" alt="" /></p>
<pre><code class="language-bash">$ easy_install supervisor</code></pre>
<p><img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151521.png" alt="" /></p>
<h4>测试是否安装成功</h4>
<pre><code class="language-bash">$ echo_supervisord_conf</code></pre>
<p><img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108151708.png" alt="" /></p>
<h4>创建配置文件</h4>
<h5>创建主配置文件</h5>
<pre><code class="language-bash">$ mkdir -m 755 -p /etc/supervisor/
$ echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code></pre>
<h5>创建项目配置目录</h5>
<pre><code class="language-bash">$ mkdir -m 755 conf.d</code></pre>
<p><img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108152106.png" alt="" /></p>
<h4>创建测试</h4>
<h5>在/home/tengyunlong/supervisor_simple目录下创建test.c</h5>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include &lt;unistd.h&gt;
int main() {
    FILE *fp = fopen(&quot;/home/slightech/supervisor_simple/a.txt&quot;, &quot;a+&quot;);
    if (fp == 0) {
        printf(&quot;Can not open file \n&quot;);
        return 0;
    }
    int ix = 0;
    for (;; ix++) {
        fseek(fp, 0, SEEK_END);
        char s_add_arr[10];
        memset(s_add_arr, &#039;\0&#039;, 10);
        sprintf(s_add_arr, &quot;%i\n&quot;, ix);
        fwrite(s_add_arr, strlen(s_add_arr), 1, fp);
        sleep(1);
    }
    fclose(fp);
    return 0;
}</code></pre>
<h5>编译为test</h5>
<pre><code class="language-bash">$ gcc -o test test.c</code></pre>
<h4>更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式</h4>
<p><img src="/uploads/2017/08/QQ%E5%9B%BE%E7%89%8720161108153215.png" alt="" /></p>
<h4>在/etc/supervisor/conf.d 创建test.conf文件</h4>
<pre><code class="language-bash">[program:test]
command=/home/slightech/supervisor_simple/test
;directory= ;directory to cwd to before exec (def no cwd)
autostart=true ; start at supervisord start (default: true)
autorestart=unexpected ; whether/when to restart (default: unexpected)
startsecs=1 ; number of secs prog must stay running (def. 1)
redirect_stderr=true ; redirect proc stderr to stdout (default false) 错误重定向
stdout_logfile=/var/log/supervisor/test.log ; stout log path, NONE of none ;default AUTO,log输出</code></pre>
<h4>启动supervisor服务</h4>
<pre><code class="language-bash">$ supervisord -c /etc/supervisor/supervisord.conf</code></pre>
<h4>使用pstree查看进程</h4>
<pre><code class="language-bash">$ pstree | grep supervisor</code></pre>
<p><img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108153954.png" alt="" /></p>
<h4>查看监控的进程，发现test running</h4>
<pre><code class="language-bash">$ supervisorctl -c /etc/supervisor/supervisord.conf</code></pre>
<p><img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20161108154215.png" alt="" /></p>
<h4>命令</h4>
<pre><code class="language-bash">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stop|start|restart all #停止|启动|重启 所有进程
$ supervisorctl [-c /etc/supervisor/supervisor.conf ] #登录控制台</code></pre>
<h4>参见<a href="http://www.jianshu.com/p/9abffc905645">supervisor初体验</a></h4>
<h4>本文地址： <a href="http://feilong.tech/2017/08/24/linux-install-supervisor/">http://feilong.tech/2017/08/24/linux-install-supervisor/</a></h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:56:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:56:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-install-supervisor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[linux-%e5%ae%89%e8%a3%85supervisor-centos-or-redhat]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,cpp,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.153.112";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux 将用户加入用户组</title>
		<link>https://feilong.tech/2017/08/24/linux-add-user-group/</link>
		<pubDate>Thu, 24 Aug 2017 11:57:24 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>准备工作</h4>
<p>两个账户：tengyunlong test
如果没有账户使用 adduser进行创建</p>
<pre><code class="language-bash">$ adduser test
$ usermod -a -G test test # 将test用户加入到test用户组
$ groups test #查看test的所有分组
$ test : test </code></pre>
<!--more-->
<p>使用test用户在/home/test/路径下新建test.txt使此文件允许test分组和test用户读写</p>
<pre><code class="language-bash">total 36
drwxr-xr-x 2 test test 4096 Jun  1 15:51 ./
drwxr-xr-x 4 root root 4096 Jun  1 15:49 ../
-rw-r--r-- 1 test test  220 Jun  1 15:49 .bash_logout
-rw-r--r-- 1 test test 3637 Jun  1 15:49 .bashrc
-rw-r--r-- 1 test test 8980 Jun  1 15:49 examples.desktop
-rw-r--r-- 1 test test  675 Jun  1 15:49 .profile
-rw-rw-r-- 1 test test    8 Jun  1 15:53 test.txt</code></pre>
<h4>添加分组</h4>
<p>使用root账户将 tengyunlong加到test分组</p>
<pre><code class="language-bash">$ usermod -a -G test tengyunlong
$ groups tengyunlong
tengyunlong : tengyunlong adm cdrom sudo dip plugdev lpadmin sambashare test #可以看到tengyunlong加到test分组了</code></pre>
<h4>运行测试</h4>
<p>切换tengyunlong账户，进入/home/test目录下</p>
<pre><code class="language-bash">$ ll
total 36
drwxr-xr-x 2 test test 4096 Jun  1 15:51 ./
drwxr-xr-x 4 root root 4096 Jun  1 15:49 ../
-rw-r--r-- 1 test test  220 Jun  1 15:49 .bash_logout
-rw-r--r-- 1 test test 3637 Jun  1 15:49 .bashrc
-rw-r--r-- 1 test test 8980 Jun  1 15:49 examples.desktop
-rw-r--r-- 1 test test  675 Jun  1 15:49 .profile
-rw-rw-r-- 1 test test    8 Jun  1 15:53 test.txt
$  echo &#039;sssssssssss&#039;&gt; test.txt
$ cat test.txt 
sssssssssss #可以看到内容被写入了</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:57:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:57:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-add-user-group]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[linux-%e5%b0%86%e7%94%a8%e6%88%b7%e5%8a%a0%e5%85%a5%e7%94%a8%e6%88%b7%e7%bb%84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.153.112";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux alias 永久生效</title>
		<link>https://feilong.tech/2017/08/24/linux-alias/</link>
		<pubDate>Thu, 24 Aug 2017 11:57:53 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间</h4>
<h4>比如设置 <code>alias db=&#039;mysql -uroot -proot&#039;</code>,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。</h4>
<!--more-->
<h4>alias永久生效</h4>
<h4>在<code>/home</code>用户目录下面有个隐藏文件<em><code>.bashrc</code></em>, 使用vim打开，然后在文档后面追加alias命令即可</h4>
<pre><code class="language-bash">$ vim /home/ubuntu/.bashrc

##在结尾追加alias命令，如alias db = &#039;mysql -uroot -proot&#039;

$ source ~/.bashrc ##使alias生效
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:57:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:57:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-alias]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[linux-alias-%e6%b0%b8%e4%b9%85%e7%94%9f%e6%95%88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux后台运行脚本</title>
		<link>https://feilong.tech/2017/08/24/linux-hang-up/</link>
		<pubDate>Thu, 24 Aug 2017 11:58:19 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Linux后台运行脚本</h3>
<h4>我们经常会在Linux运行很多脚本，但是有些脚本是没办法因为某些原因没办法放到后台运行，这就需要我们使用一些工具了，我作为linux新手，目前只知道部分工具或者命令：nuhup，supervisor，screen</h4>
<!--more-->
<h3>测试方法：持续写入内容，然后查看写入的内容结果</h3>
<h4>为了验证是否把程序挂到后台运行，我们使用一个循环写入的程序，然后查看被写入的文件，时不时刷新，查看是否有数据持续写入。</h4>
<ul>
<li>
<p><strong>创建一个test.c和test.txt</strong></p>
<pre><code class="language-bash">$ touch test.c
$ touch test.txt</code></pre>
</li>
<li>
<p><strong>编写代码</strong></p>
</li>
</ul>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include &lt;unistd.h&gt;
int main() {
        FILE *fp = fopen(&quot;test.txt&quot;, &quot;a+&quot;);
        if (fp == 0) {
                printf(&quot;Can not open file \n&quot;);
                return 0;
        }
        int ix = 0;
        for (;; ix++) {
                fseek(fp, 0, SEEK_END);
                char s_add_arr[10];
                memset(s_add_arr, &#039;\0&#039;, 10);
                sprintf(s_add_arr, &quot;%i this is test \n&quot;, ix);
                fwrite(s_add_arr, strlen(s_add_arr), 1, fp);
                sleep(1);
        }
        fclose(fp);
        return 0;
}</code></pre>
<ul>
<li><strong>编译c++文件</strong></li>
</ul>
<pre><code class="language-bash">$ gcc -o test test.c</code></pre>
<ul>
<li><strong>此时会生成一个test的可运行程序</strong></li>
</ul>
<p><img src="/uploads/2017/08/1489635678506.png" alt="" /></p>
<ul>
<li><strong>测试脚本是否可行</strong></li>
</ul>
<pre><code class="language-bash">$ ./test</code></pre>
<ul>
<li><strong>打开一个新窗口，使用vim命令查看是否有写入内容</strong>
<img src="/uploads/2017/08/1489635664287.png" alt="" />
<img src="/uploads/2017/08/1489635678506.png" alt="" /></li>
</ul>
<h3>nuhup</h3>
<ul>
<li><strong>运行脚本</strong></li>
</ul>
<pre><code class="language-bash">$ nohup ./test &gt; myout.file 2&gt;&amp;1 &amp;
[2] 3172
[1]   Terminated              nohup ./test</code></pre>
<ul>
<li><strong>查看进程</strong></li>
</ul>
<pre><code class="language-bash">$ jobs
[2]+  Running                 nohup ./test &gt; myout.file 2&gt;&amp;1 &amp;</code></pre>
<ul>
<li><strong>查看test.txt是否写进内容</strong></li>
</ul>
<pre><code class="language-bash">$ vim test.txt</code></pre>
<h3>supervisor</h3>
<h4>之前写过supervisor安装配置方法，具体参见 <a href="http://feilong.tech/?p=118">Linux 安装supervisor (CentOs or RedHat)</a></h4>
<h3>screen</h3>
<h4>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。</h4>
<ul>
<li><strong>运行脚本</strong></li>
</ul>
<pre><code class="language-bash">$ screen -S test ./test ##screen -S 会话命名 command，然后Ctrl+a+d放到后台
[detached from 4070.test]
$ screen -ls ## 查看会话
There is a screen on:
        4070.test       (03/15/2017 10:27:19 PM)        (Detached)
1 Socket in /var/run/screen/S-tengyunlong.</code></pre>
<ul>
<li><strong>查看test.txt内容是否写入</strong></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 19:58:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 11:58:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-hang-up]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,cpp,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[linux%e5%90%8e%e5%8f%b0%e8%bf%90%e8%a1%8c%e8%84%9a%e6%9c%ac]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.250";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[wave]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[botaogou@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.42.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-17 10:19:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-17 02:19:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[学习了～]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1510885158.106173038482666015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516204254.7921009;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"Feilong";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>MySQL事务隔离级别详解</title>
		<link>https://feilong.tech/2017/08/24/mysql-transaction/</link>
		<pubDate>Thu, 24 Aug 2017 12:02:44 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>四种隔离级别的解释</h4>
<p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>
<!--more-->
<ul>
<li>Read Uncommitted（读取未提交内容）</li>
</ul>
<p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为<strong>脏读（Dirty Read</strong>）。</p>
<ul>
<li>Read Committed（读取提交内容）</li>
</ul>
<p>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的<strong>不可重复读（Nonrepeatable Read</strong>），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>
<ul>
<li>Repeatable Read（可重读）</li>
</ul>
<p><strong>这是MySQL的默认事务隔离级别</strong>，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：<strong>幻读 （Phantom Read</strong>）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。<strong>InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题</strong>。</p>
<ul>
<li>Serializable（可串行化） </li>
</ul>
<p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>
<h4>不同隔离级别带来的问题</h4>
<p>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：</p>
<p><strong>脏读(Drity Read)</strong>：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</p>
<p><strong>不可重复读(Non-repeatable read)</strong>:在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</p>
<p><strong>幻读(Phantom Read)</strong>:在一个事务的两次查询中数据行数不一致，例如有一个事务查询了几列行Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几行数据是它先前所没有的。 （Mysql的InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。）</p>
<p>在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：</p>
<p><img src="/uploads/2017/08/a.jpg" alt="" /></p>
<h4>MySQL 中如何更新事务级别:</h4>
<pre><code class="language-sql">SELECT @@GLOBAL.tx_isolation, @@tx_isolation;
SET GLOBAL tx_isolation=&#039;REPEATABLE-READ&#039;;
SET SESSION tx_isolation=&#039;SERIALIZABLE&#039;;

or

SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE
SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ

整个语法是：

SET [GLOBAL | SESSION] TRANSACTION
    transaction_characteristic [, transaction_characteristic] ...

transaction_characteristic:
    ISOLATION LEVEL level
  | READ WRITE
  | READ ONLY

level:
     REPEATABLE READ
   | READ COMMITTED
   | READ UNCOMMITTED
   | SERIALIZABLE
</code></pre>
<p><code>但是两种修改方式效果是不一样的</code></p>
<p><img src="/uploads/2017/08/1-1.png" alt="" /></p>
<p>举例子：mysql打开两个客户端A、B，在A客户端修改事务隔离</p>
<blockquote>
<p>使用global 修改，那么A和B下次重新登录的时候显示修改后的效果
使用session形式的设置，当前的会话会立即生效，重新登录后不会生效</p>
</blockquote>
<p>详见: MySQL 官方文档: <a href="http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html">http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html</a></p>
<h4>实验</h4>
<p>下面，将利用MySQL的客户端程序，分别测试几种隔离级别。测试数据库为test，表为tx；
表结构：</p>
<pre><code class="language-sql">CREATE TABLE `tx` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `num` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB</code></pre>
<p>两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。</p>
<p>以下每次测试前初始数据为：</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)</code></pre>
<p>（一）、将A的隔离级别设置为read uncommitted(未提交读)</p>
<ul>
<li>在B未更新数据之前：
客户端A：</li>
</ul>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt; select @@tx_isolation;
+------------------+
| @@tx_isolation   |
+------------------+
| READ-UNCOMMITTED |
+------------------+
1 row in set (0.00 sec)

mysql&gt;
</code></pre>
<ul>
<li>B更新数据：
客户端B：</li>
</ul>
<pre><code class="language-sql">mysql&gt; select @@tx_isolation;
+-----------------+
| @@tx_isolation  |
+-----------------+
| REPEATABLE-READ |
+-----------------+
1 row in set (0.00 sec)

mysql&gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; update tx set num=10 where id=3;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>这个时候查看A客户端的数据:</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>客户端B的事务没有进行commit，但是已经可以在A客户端查看到更新的数据，这个时候就出现了<code>脏读</code></p>
<p>接下来将B事务进行回滚</p>
<pre><code class="language-sql">mysql&gt; rollback;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>再进行查看A客户端的数据</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<pre><code>    经过上面的实验可以得出结论，事务B更新了一条记录，但是没有提交，此时事务A可以查询出未提交记录。造成脏读现象。未提交读是最低的隔离级别。</code></pre>
<p>（二）、将客户端A的事务隔离级别设置为read committed(已提交读)</p>
<pre><code class="language-sql">mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
Query OK, 0 rows affected (0.00 sec)

mysql&gt;</code></pre>
<p>在B未更新数据之前：
客户端A：</p>
<pre><code class="language-sql">mysql&gt; select @@tx_isolation;
+----------------+
| @@tx_isolation |
+----------------+
| READ-COMMITTED |
+----------------+
1 row in set (0.00 sec)

mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql&gt;</code></pre>
<p>B更新数据：
客户端B：</p>
<pre><code class="language-sql">mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt; update tx set num=10 where id=3;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>这个时候查看客户端A：</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>接下来我们commit事务，然后查询A数据，发现能够查询到数据了（但是A还没有commit）：</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<pre><code>   经过上面的实验可以得出结论，已提交读隔离级别解决了脏读的问题，但是出现了不可重复读的问题，即事务A在两次查询的数据不一致，因为在两次查询之间事务B更新了一条数据。已提交读只允许读取已提交的记录，但不要求可重复读。</code></pre>
<p>(三)、将A的隔离级别设置为repeatable read(可重复读)
在B未更新数据之前：
客户端A：</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt; start transaction;
Query OK, 0 rows affected (0.00 sec)
</code></pre>
<p>B更新数据：
客户端B：</p>
<pre><code class="language-sql">mysql&gt; start transaction;
Query OK, 0 rows affected (0.00 sec)
mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt; update tx set num=10 where id=3;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)</code></pre>
<p>客户端A：</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>B插入数据：
客户端B：</p>
<pre><code class="language-sql">mysql&gt; insert tx set num = 5;
Query OK, 1 row affected (0.00 sec)

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
|  5 |    5 |
+----+------+
5 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>客户端A：</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)</code></pre>
<pre><code>   由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交记录，而且在一个事务两次读取一个记录期间，其他事务部的更新该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，但是可能产生幻读问题(注意Mysql的InnoDB 和 Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题)。</code></pre>
<p>(四)、将A的隔离级别设置为 可串行化 (Serializable)
A端打开事务，B端插入一条记录
事务A端：</p>
<pre><code class="language-sql">mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql&gt;</code></pre>
<p>事务B端：</p>
<pre><code class="language-sql">mysql&gt; update tx set num=10 where id=3;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<pre><code>    此时客户端B是可以修改数据的，（因为A还没有指定哪张表）</code></pre>
<p>接下来，我们使用A查询下表，然后使用B更新下数据
客户端A</p>
<pre><code class="language-sql">mysql&gt; select * from test.tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |   10 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)

mysql&gt;</code></pre>
<p>然后使用B客户端，进行更新数据:</p>
<pre><code class="language-sql">mysql&gt; update tx set num=3 where id=3;
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
mysql&gt;
</code></pre>
<pre><code>    因为此时事务A的隔离级别设置为serializable，开始事务后，并没有提交，所以事务B只能等待。</code></pre>
<p>事务A提交事务：
事务A端</p>
<pre><code class="language-sql">mysql&gt; commit;
Query OK, 0 rows affected (0.00 sec)</code></pre>
<p>事务B端</p>
<pre><code class="language-sql">mysql&gt; update tx set num=3 where id=3;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; select * from tx;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
|  4 |    4 |
+----+------+
4 rows in set (0.00 sec)</code></pre>
<pre><code>    serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，直到前一个事务完成并解除锁定为止 。是完整的隔离级别，会锁定对应的数据表格，因而会有效率的问题。</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:02:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:02:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-transaction]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[sql]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[mysql%e4%ba%8b%e5%8a%a1%e9%9a%94%e7%a6%bb%e7%ba%a7%e5%88%ab%e8%af%a6%e8%a7%a3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:12:"54.36.149.10";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NodeJs 多语言包</title>
		<link>https://feilong.tech/2017/08/24/nodejs-lang/</link>
		<pubDate>Thu, 24 Aug 2017 12:03:23 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[<p>公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese/English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在<a href="https://github.com">Github</a>找了找资源，废了九牛二虎之力终于找到了。</p>
<!--more-->
<h4>1) 安装语言包langs</h4>
<p>命令和安装express差不多：</p>
<pre><code class="language-bash">$ npm install langs --save</code></pre>
<h4>2) 引入拓展</h4>
<pre><code class="language-bash">var langs = require(&#039;langs&#039;);</code></pre>
<h4>3) 获取url参数，根据参数判断语言类别</h4>
<pre><code class="language-bash">exports.index = function (req, res, next) { 
    var query = req.query;
    var lang = query.lang;
    var user_id = query.user_id;
    var token = query.token;
    if (lang == &#039;chinese&#039;) {
        var lang = langs.where(&quot;name&quot;, &quot;Chinese&quot;);
    } else {
        var lang = langs.where(&quot;name&quot;, &quot;English&quot;);
    }
    res.render(&#039;index&#039;, {json_data});
}</code></pre>
<h4>4) 具体语言配置在 node_modules/langs/data.json 中配置</h4>
<h4>5) 拓展位置<a href="https://github.com/adlawson/nodejs-langs">nodejs-langs</a></h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:03:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:03:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nodejs-lang]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nodejs"><![CDATA[Nodejs]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[nodejs-%e5%a4%9a%e8%af%ad%e8%a8%80%e5%8c%85]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.152.56";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nodejs 使用pm2实现开机自启</title>
		<link>https://feilong.tech/2017/08/24/nodejs-pm2/</link>
		<pubDate>Thu, 24 Aug 2017 12:03:56 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[<p>公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 <code>reboot</code> 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 <code>shell</code> 太渣渣，搞不定。所以在社区找到了<code>pm2</code>，可以把<code>nodejs</code>加到自启服务中。</p>
<!--more-->
<h4>pm2有一些优势:</h4>
<blockquote>
<ul>
<li>自带负载均衡功能的node应用进程管理器</li>
<li>可以监控应用CPU和内存情况</li>
<li>操作简单</li>
<li>非常适合IaaS结构</li>
</ul>
</blockquote>
<h4>pm2也有劣势:</h4>
<blockquote>
<ul>
<li>不适合PaaS结构</li>
</ul>
</blockquote>
<h4>拓展:</h4>
<blockquote>
<ul>
<li>SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务</li>
<li>IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等</li>
<li>PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等
详细了解参见<a href="http://cloud.51cto.com/art/201107/278903.htm">云服务模式：SaaS、PaaS和IaaS，哪一种适合你？</a></li>
</ul>
</blockquote>
<h4>1、全局安装pm2</h4>
<pre><code class="language-bash">$ npm install pm2 -g</code></pre>
<h4>2、找到项目的目录，并使用pm2启动node服务</h4>
<pre><code class="language-bash">$ cd /usr/share/nginx/wechat-iot
$ pm2 start app.js
[PM2] Starting app.js in fork_mode (1 instance)
[PM2] Done.
┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐
│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │
├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤
│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │
└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘
 Use `pm2 show &lt;id|name&gt;` to get more details about an app</code></pre>
<h4>3、把node服务加到进程</h4>
<pre><code class="language-bash">$ pm2 startup centos #pm2 startup ubuntu
$ pm2 save </code></pre>
<h4>其他命令</h4>
<pre><code class="language-bash">$ pm2 stop app.js #停止node服务
$ pm2 restart app.js #重启node服务
$ pm2 delete app.js #在进程中删除
$ pm2 status #查看状态
$ pm2 monit #查看占用的CPU和内存</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:03:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:03:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nodejs-pm2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="nodejs"><![CDATA[Nodejs]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[nodejs-%e4%bd%bf%e7%94%a8pm2%e5%ae%9e%e7%8e%b0%e5%bc%80%e6%9c%ba%e8%87%aa%e5%90%af]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.143.124";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NodeJs Error: Can&#039;&#039;t set headers after they are sent.怎么解决？</title>
		<link>https://feilong.tech/2017/08/24/nodejs-error-cant-set-headers-after-they-are-sent/</link>
		<pubDate>Thu, 24 Aug 2017 12:04:34 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[<p>从字面的意思来说：不能发送header，因为已经发送过一次了。</p>
<p>我的程序之所以出现这种情况，是因为多次使用<code>res.sent()</code></p>
<p>原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 <code>res.writeHead()</code> 或 <code>res.write()</code> 或 <code>res.end()</code>），你再尝试通过 <code>res.setHeader()</code> 或 <code>res.writeHead()</code> 来设置响应头时（有些方法比如 <code>res.redirect()</code> 会调用 <code>res.writeHead()</code>），就会报这个错误。</p>
<p>解决办法：在调用函数后面加上<code>return;</code> 终止，这样就搞定了。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:04:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:04:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nodejs-error-cant-set-headers-after-they-are-sent]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nodejs"><![CDATA[Nodejs]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[nodejs-error-cant-set-headers-after-they-are-sent-%e6%80%8e%e4%b9%88%e8%a7%a3%e5%86%b3%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.128.142";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP 7 拓展编写--从hello world开始</title>
		<link>https://feilong.tech/2017/08/24/php-7-hello-world/</link>
		<pubDate>Thu, 24 Aug 2017 12:05:09 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[<p>本文主要以PHP7为基础，学习从0开始编写PHP7 拓展，拓展的主要功能是通过拓展，实现如下代码的效果</p>
<pre><code class="language-php">&lt;?php
function say() {
    return &#039;hello world&#039;;
}
echo say(); // hello world
?&gt;</code></pre>
<!--more-->
<h5>在拓展中实现say函数，输出hello world</h5>
<h4>第一步：生成代码</h4>
<h5>PHP给我们提供了拓展的生成工具，<code>ext_skel</code>。这个工具在PHP源码的 <code>ext/</code>文件夹下面，而且在ext/文件夹下是各种拓展目录。</h5>
<pre><code class="language-bash">$ cd php_src/ext/
$ ext_skel --extname=say</code></pre>
<h5><code>--extname</code> 参数是设置拓展的名字。执行完这么命令后，<code>ext</code>文件夹下就会生成一个say的文件夹</h5>
<h4>第二步：修改config.m4配置文件</h4>
<h5>config.m4 的作用是为了配合phpize工具生成configure文件。configure文件是为了用于环境监测，监测编译的环境是否满足条件。现在我们开始修改config.m4配置文件</h5>
<pre><code class="language-bash">$ cd say/
$ vim config.m4</code></pre>
<h5>打开config.m4文件，会有看到文件开头有如下内容</h5>
<pre><code class="language-bash">dnl If your extension references something external, use with:

dnl PHP_ARG_WITH(say, for say support,
dnl Make sure that the comment is aligned:
dnl [  --with-say             Include say support])

dnl Otherwise use enable:

dnl PHP_ARG_ENABLE(say, whether to enable say support,
dnl Make sure that the comment is aligned:
dnl [  --enable-say           Enable say support])
</code></pre>
<h5>其中dnl是注释，上面的内容大概是说：如果你编写的拓展依赖其他拓展，就使用去掉PHP_ARG_WITH注释内容，否则去掉PHP_ARG_ENABLE注释内容。我们这里不需要依赖其他拓展，所以我们去掉PHP_ARG_ENABLE注释内容。去掉后的内容如下：</h5>
<pre><code class="language-bash">
dnl If your extension references something external, use with:

dnl PHP_ARG_WITH(say, for say support,
dnl Make sure that the comment is aligned:
dnl [  --with-say             Include say support])

dnl Otherwise use enable:

PHP_ARG_ENABLE(say, whether to enable say support,
Make sure that the comment is aligned:
[  --enable-say           Enable say support])</code></pre>
<h4>第三步：代码实现</h4>
<h5>修改say.c代码 ，实现say方法。找到 PHP_FUNCTION(confirm_say_compiled) 方法，在上面增加如下方法：</h5>
<pre><code class="language-bash">PHP_FUNCTION(say)
{
    zend_string *strg;
    strg = strpprintf(0, &quot;hello world&quot;);
    RETURN_STR(strg);
}</code></pre>
<h5>然后找到PHP_FE(confirm_say_compiled,    NULL)在上面增加PHP_FE(say, NULL) ，如果不加上这个，那么say函数将不能引用，加完后的代码如下：</h5>
<pre><code class="language-bash">const zend_function_entry say_functions[] = {
        PHP_FE(say, NULL)                       /* For testing, remove later. */
        PHP_FE(confirm_say_compiled,    NULL)           /* For testing, remove later. */
        PHP_FE_END      /* Must be the last line in say_functions[] */
};</code></pre>
<p>其实在zend_function_entry 上面，你会看到<code>Every user visible function must have an entry in say_functions[]</code>，意思是说每个用户的函数必须定义在say_functions函数里面，否则在PHP使用say函数的时候报出函数未定义的错误<code>Fatal error: Uncaught Error: Call to undefined function say()</code></p>
<h4>第四步：编译安装</h4>
<pre><code class="language-bash">$ phpize
$ ./configure
$ make &amp;&amp; make install</code></pre>
<h5>然后修改php.ini，在配置文件结尾加上如下代码</h5>
<p>可以使用<code>php --ini</code>查看配置文件的位置</p>
<pre><code class="language-php">[say]
extsion=say.so</code></pre>
<h5>然后执行php -m 查看是否已经把say函数加载进来：</h5>
<pre><code class="language-bash">[PHP Modules]
Core
ctype
date
dom
fileinfo
filter
gd
hash
iconv
json
libxml
pcre
PDO
pdo_sqlite
Phar
posix
Reflection
say
session
SimpleXML
SPL
sqlite3
standard
tokenizer
xml
xmlreader
xmlwriter

[Zend Modules]</code></pre>
<h4>第五步：运行测试</h4>
<h5>编写PHP脚本，进行测试</h5>
<pre><code class="language-php">&lt;?php
echo say();
?&gt;</code></pre>
<h5>结果输出：</h5>
<pre><code class="language-bash">$ php test.php
$ hello world</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:05:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:05:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-7-hello-world]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating,bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-7-%e6%8b%93%e5%b1%95%e7%bc%96%e5%86%99-%e4%bb%8ehello-world%e5%bc%80%e5%a7%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.140.71";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP7 拓展编写--在拓展中调用函数</title>
		<link>https://feilong.tech/2017/08/24/php7-function/</link>
		<pubDate>Thu, 24 Aug 2017 12:05:52 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[<p>PHP中调用函数都比较简单，今天要实现如下效果的代码</p>
<pre><code class="language-php">&lt;?php
class demo {
    public function get_site_name($prefix)
    {
        return $prefix . &quot;肥龙的博客\n&quot;;
    }
}

function get_site_url($prefix)
{
    return $prefix . &quot;www.feilong.tech\n&quot;;
}

function call_function($obj, $fun, $param)
{
    if ($obj == null)
    {
        $result = $fun($param);
    }
    else
    {
        $result = $obj-&gt;$fun($param);
    }
    return $result;
}
$demo = new demo();
echo call_function($demo, &quot;get_site_name&quot;, &quot;site name:&quot;);
echo call_function(null, &quot;get_site_url&quot;, &quot;site url:&quot;);
?&gt;</code></pre>
<!--more-->
<p>我们将要实现call_function的方法的功能</p>
<h4>代码实现</h4>
<pre><code class="language-cpp">PHP_FUNCTION(call_function)
{
    zval            *obj = NULL;
    zval             *fun = NULL;
    zval             *param = NULL;
    zval             retval;
    zval             args[1];

#ifndef FAST_ZPP
    /* Get function parameters and do error-checking. */
    if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;zzz&quot;, &amp;obj, &amp;fun, &amp;param) == FAILURE) {
        return;
    }
#else
    ZEND_PARSE_PARAMETERS_START(3, 3)
        Z_PARAM_ZVAL(obj)
        Z_PARAM_ZVAL(fun)
        Z_PARAM_ZVAL(param)
    ZEND_PARSE_PARAMETERS_END();
#endif

    args[0] = *param;
    if (obj == NULL || Z_TYPE_P(obj) == IS_NULL) {
        call_user_function_ex(EG(function_table), NULL, fun, &amp;retval, 1, args, 0, NULL);
    } else {
        call_user_function_ex(EG(function_table), obj, fun, &amp;retval, 1, args, 0, NULL);
    }
    RETURN_ZVAL(&amp;retval, 0, 1);
}</code></pre>
<h4>代码解读</h4>
<table>
<thead>
<tr>
<th style="text-align: center;"><code>zend_parse_parameters</code>
在PHP7中提供了两种获取参数的方法。<code>zend_parse_parameters</code>和<code>FAST ZPP</code>方式.
在PHP7之前一直使用zend_parse_parameters函数获取参数。这个函数的作用，就是把传入的参数转换为PHP内核中相应的类型，方便在PHP扩展中使用。
<code>zend_parse_parameters(ZEND_NUM_ARGS(), type_spec, &amp;param1, &amp;param2)</code>
<code>ZEND_NUM_ARGS()</code>代表参数的个数，
<code>type_spec</code>代表参数的类型：具体的类型如下</th>
<th style="text-align: center;">参数</th>
<th>对应数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">|</td>
<td style="text-align: center;">之后的参数是可选。可以传，也可以不传</td>
</tr>
<tr>
<td style="text-align: center;">b</td>
<td style="text-align: center;">Boolean</td>
</tr>
<tr>
<td style="text-align: center;">l</td>
<td style="text-align: center;">long</td>
</tr>
<tr>
<td style="text-align: center;">d</td>
<td style="text-align: center;">double</td>
</tr>
<tr>
<td style="text-align: center;">s</td>
<td style="text-align: center;">String 字符串</td>
</tr>
<tr>
<td style="text-align: center;">r</td>
<td style="text-align: center;">Resource 资源</td>
</tr>
<tr>
<td style="text-align: center;">a</td>
<td style="text-align: center;">Array 数组</td>
</tr>
<tr>
<td style="text-align: center;">o</td>
<td style="text-align: center;">Object instance 对象</td>
</tr>
<tr>
<td style="text-align: center;">O</td>
<td style="text-align: center;">Object instance of a specified type 特定类型的对象</td>
</tr>
<tr>
<td style="text-align: center;">z</td>
<td style="text-align: center;">Non-specific zval 任意类型</td>
</tr>
<tr>
<td style="text-align: center;">Z</td>
<td style="text-align: center;">zval**类型</td>
</tr>
</tbody>
</table>
<p><code>fast zpp</code>
在PHP7中新提供的方式。是为了提高参数解析的性能。对应经常使用的方法，建议使用    <code>FAST ZPP</code> 方式。 使用方式： 以 <code>ZEND_PARSE_PARAMETERS_START(1, 2)</code> 开头。 第一个参数表示必传的参数个数，第二个参数表示最多传入的参数个数。 <code>以ZEND_PARSE_PARAMETERS_END();</code>结束。 中间是传入参数的解析。</p>
<p>值得注意的是，一般FAST ZPP的宏方法与  <code>zend_parse_parameters</code> 的specifier是一一对应的。如：
<code>Z_PARAM_OPTIONAL</code> 对应<code> |</code>
<code>Z_PARAM_STR</code> 对应<code> S</code>
<code>Z_PARAM_ZVAL</code> 对应 <code>z</code>
但是，<code>Z_PARAM_ZVAL_EX</code>方法比较特殊。它对应两个specifier，分别是 ! 和 / 。! 对应宏方法的第二个参数。/ 对应宏方法的第三个参数。如果想开启，只要设置为1即可。</p>
<p><code>call_user_function_ex</code></p>
<p><code>call_user_function_ex</code>方法用于调用函数和方法。参数说明如下：</p>
<p>第一个参数：方法表。通常情况下，写 <code>EG(function_table) </code>
第二个参数：对象。如果不是调用对象的方法，而是调用函数，填写NULL
第三个参数：方法名。
第四个参数：返回值。
第五个参数：参数个数。
第六个参数：参数值。是一个zval数组。
第七个参数：参数是否进行分离操作。
第八个参数：符号表。一般情况写设置为NULL即可。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:05:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:05:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php7-function]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating,cpp,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php7-%e6%8b%93%e5%b1%95%e7%bc%96%e5%86%99-%e5%9c%a8%e6%8b%93%e5%b1%95%e4%b8%ad%e8%b0%83%e7%94%a8%e5%87%bd%e6%95%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php 创建xml的几种方式</title>
		<link>https://feilong.tech/2017/08/24/php-xml/</link>
		<pubDate>Thu, 24 Aug 2017 12:06:20 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=132</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>1、直接创建字符串</h4>
<pre><code class="language-php">header(&quot;content-type:application/xml;&quot;);
$xml = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;
        &lt;people&gt;
        &lt;name&gt;Tyler Teng&lt;/name&gt;
        &lt;sex&gt;man&lt;/sex&gt;
        &lt;/people&gt;&quot;;
echo $xml;</code></pre>
<!--more-->
<h4>2、使用DOMDocument进行创建</h4>
<pre><code class="language-php">header(&quot;content-type:application/xml;&quot;);
$xml = new DOMDocument(&#039;1.0&#039;, &#039;utf-8&#039;);
$root = $xml-&gt;createElement(&#039;people&#039;);
$name = $xml-&gt;createElement(&#039;name&#039;, &#039;Tyler Teng&#039;);
$sex = $xml-&gt;createElement(&#039;sex&#039;, &#039;man&#039;);
$root-&gt;appendChild($name);
$root-&gt;appendChild($sex);
$xml-&gt;appendChild($root);

echo $xml-&gt;saveXML();</code></pre>
<h4>3、使用XMLWriter进行创建</h4>
<pre><code class="language-php">header(&#039;Content-type:application/xml&#039;);
$xml_writer = new XMLWriter;
$xml_writer-&gt;openMemory();
$xml_writer-&gt;startDocument(&#039;1.0&#039;, &#039;utf-8&#039;);
$xml_writer-&gt;startElement(&#039;people&#039;);
$xml_writer-&gt;writeElement(&#039;name&#039;, &#039;Tyler Teng&#039;);
$xml_writer-&gt;writeElement(&#039;sex&#039;, &#039;man&#039;);
$xml_writer-&gt;endElement();
$xml_writer-&gt;endDocument();

echo $xml_writer-&gt;outputMemory();</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:06:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:06:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-xml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-%e5%88%9b%e5%bb%baxml%e7%9a%84%e5%87%a0%e7%a7%8d%e6%96%b9%e5%bc%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.143.124";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【以太坊】创建以太坊钱包（mist）</title>
		<link>https://feilong.tech/?p=809</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=809</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>什么是mist</h4>
<p>mist是以太坊的钱包，其实就是类似于大家比较常用的支付宝软件，我们可以通过mist钱包创建钱包地址</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>809</wp:post_id>
		<wp:post_date><![CDATA[2021-06-19 17:13:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blockchain"><![CDATA[blockchain]]></category>
		<category domain="post_tag" nicename="mist"><![CDATA[mist]]></category>
		<category domain="category" nicename="etc"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a%e5%b8%81"><![CDATA[以太坊币]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a%e9%92%b1%e5%8c%85"><![CDATA[以太坊钱包]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<category domain="post_tag" nicename="%e6%af%94%e7%89%b9%e5%b8%81"><![CDATA[比特币]]></category>
		<category domain="post_tag" nicename="%e7%a7%81%e6%9c%89%e9%93%be"><![CDATA[私有链]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_advads_ad_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:11:"disable_ads";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[mist 钱包 以太坊钱包 区块链 以太坊]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP 底层: SAPI概述</title>
		<link>https://feilong.tech/2017/08/24/php-sapi/</link>
		<pubDate>Thu, 24 Aug 2017 12:08:44 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>概述</h3>
<blockquote>
<p>各个服务器抽象层遵守着相同的规定，统一称为SAPI接口。而SAPI接口的格式由一个_sapi_module_struct的结构体定义好。在PHP中，如果需要调用服务器的信息，统一通过SPAI接口进行实现。</p>
</blockquote>
<p>下面是SAPI调用的简单示意图</p>
<p><img src="/uploads/2017/07/02-02-01-sapi.png" alt="" /></p>
<!--more-->
<p>以CGI模式和apache2为例，启动方式如下：</p>
<pre><code class="language-cpp">.... // 上面都是初始化启动前的赋值操作
/* startup after we get the above ini override se we get things right */
cgi_sapi_module.startup(&amp;cgi_sapi_module)   //  cgi模式 cgi/cgi_main.c文件 main方法内

apache2_sapi_module.startup(&amp;apache2_sapi_module);
 //  apache2服务器  apache2handler/sapi_apache2.c文件 php_apache_server_startup方法

// 虽然方法不一样，但是使用的都是一个相同的结构体 _sapi_module_struct</code></pre>
<p>这里的cgi_sapi_module和apache2_sapi_module都是_sapi_module_struct格式的静态变量。cgi_sapi_module的startup方法指向php_cgi_startup函数指针。</p>
<p><img src="/uploads/2017/08/14994211711.png" alt="" /></p>
<h3>_sapi_module_struct结构体</h3>
<p>在结构体_sapi_module_struct中除了startup函数指针，还有许多其它方法或字段。</p>
<p>结构体大概是如下的格式：</p>
<pre><code class="language-cpp">struct _sapi_module_struct {
    char *name;
    char *pretty_name;

    int (*startup)(struct _sapi_module_struct *sapi_module);
    int (*shutdown)(struct _sapi_module_struct *sapi_module);

    int (*activate)(TSRMLS_D);
    int (*deactivate)(TSRMLS_D);

    int (*ub_write)(const char *str, unsigned int str_length TSRMLS_DC);
    void (*flush)(void *server_context);
    struct stat *(*get_stat)(TSRMLS_D);
    char *(*getenv)(char *name, size_t name_len TSRMLS_DC);

    void (*sapi_error)(int type, const char *error_msg, ...);

    int (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);
    int (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);
    void (*send_header)(sapi_header_struct *sapi_header, void *server_context TSRMLS_DC);

    int (*read_post)(char *buffer, uint count_bytes TSRMLS_DC);
    char *(*read_cookies)(TSRMLS_D);

    void (*register_server_variables)(zval *track_vars_array TSRMLS_DC);
    void (*log_message)(char *message);
    time_t (*get_request_time)(TSRMLS_D);
    void (*terminate_process)(TSRMLS_D);

    char *php_ini_path_override;

    void (*block_interruptions)(void);
    void (*unblock_interruptions)(void);

    void (*default_post_reader)(TSRMLS_D);
    void (*treat_data)(int arg, char *str, zval *destArray TSRMLS_DC);
    char *executable_location;

    int php_ini_ignore;

    int (*get_fd)(int *fd TSRMLS_DC);

    int (*force_http_10)(TSRMLS_D);

    int (*get_target_uid)(uid_t * TSRMLS_DC);
    int (*get_target_gid)(gid_t * TSRMLS_DC);

    unsigned int (*input_filter)(int arg, char *var, char **val, unsigned int val_len, unsigned int *new_val_len TSRMLS_DC);

    void (*ini_defaults)(HashTable *configuration_hash);
    int phpinfo_as_text;

    char *ini_entries;
    const zend_function_entry *additional_functions;
    unsigned int (*input_filter_init)(TSRMLS_D);
};</code></pre>
<p>其中一些函数指针的说明如下：</p>
<ul>
<li><strong>startup 当SAPI初始化时，首先会调用该函数。如果服务器处理多个请求时，该函数只会调用一次。 比如Apache的SAPI，它是以mod_php5的Apache模块的形式加载到Apache中的， 在这个SAPI中，startup函数只在父进程中创建一次，在其fork的子进程中不会调用。</strong></li>
<li><strong>activate 此函数会在每个请求开始时调用，它会再次初始化每个请求前的数据结构。</strong></li>
<li><strong>deactivate 此函数会在每个请求结束时调用，它用来确保所有的数据都，以及释放在activate中初始化的数据结构。</strong></li>
<li><strong>shutdown 关闭函数，它用来释放所有的SAPI的数据结构、内存等。</strong></li>
<li><strong>ub_write 不缓存的写操作(unbuffered write)，它是用来将PHP的数据输出给客户端， 如在CLI模式下，其最终是调用fwrite实现向标准输出输出内容；在Apache模块中，它最终是调用Apache提供的方法rwrite。</strong></li>
<li><strong>sapi_error 报告错误用，大多数的SAPI都是使用的PHP的默认实现php_error。</strong></li>
<li><strong>flush 刷新输出，在CLI模式下通过使用C语言的库函数fflush实现，在php_mode5模式下，使用Apache的提供的函数函数rflush实现。</strong></li>
<li><strong>read_cookie 在SAPI激活时，程序会调用此函数，并且将此函数获取的值赋值给SG(request_info).cookie_data。 在CLI模式下，此函数会返回NULL。</strong></li>
<li><strong>read_post 此函数和read_cookie一样也是在SAPI激活时调用，它与请求的方法相关，当请求的方法是POST时，程序会操作\$_POST、\$HTTP_RAW_POST_DATA等变量。</strong></li>
<li><strong>send_header 发送头部信息，此方法一般的SAPI都会定制，其所不同的是，有些的会调服务器自带的（如Apache），有些的需要你自己实现（如 FastCGI）。</strong></li>
</ul>
<p>以上的这些结构在各服务器的接口实现中都有定义。如Apache2的定义：</p>
<pre><code class="language-cpp">static sapi_module_struct apache2_sapi_module = {
    &quot;apache2filter&quot;,                       /* name */
    &quot;Apache 2.0 Filter&quot;,                   /* pretty_name*/

    php_apache2_startup,                        /* startup */
    php_module_shutdown_wrapper,            /* shutdown */

    NULL,                                   /* activate */
    NULL,                                   /* deactivate */

    php_apache_sapi_ub_write,               /* unbuffered write */
    php_apache_sapi_flush,                  /* flush */
    php_apache_sapi_get_stat,                       /* get uid */
    php_apache_sapi_getenv,                 /* getenv */

    php_error,                              /* error handler */

    php_apache_sapi_header_handler,         /* header handler */
    php_apache_sapi_send_headers,           /* send headers handler */
    NULL,                                   /* send header handler */

    php_apache_sapi_read_post,              /* read POST data */
    php_apache_sapi_read_cookies,           /* read Cookies */

    php_apache_sapi_register_variables,
    php_apache_sapi_log_message,            /* Log message */
    php_apache_sapi_get_request_time,       /* Get Request Time */
    NULL,                       /* Child terminate */

    STANDARD_SAPI_MODULE_PROPERTIES
};</code></pre>
<p>整个SAPI类似于一个面向对象中的模板方法模式的应用。 SAPI.c和SAPI.h文件所包含的一些函数就是模板方法模式中的抽象模板， 各个服务器对于sapi_module的定义及相关实现则是一个个具体的模板。</p>
<p>这样的结构在PHP的源码中有多处使用， 比如在PHP扩展开发中，每个扩展都需要定义一个zend_module_entry结构体。 这个结构体的作用与sapi_module_struct结构体类似，都是一个类似模板方法模式的应用。 在PHP的生命周期中如果需要调用某个扩展，其调用的方法都是zend_module_entry结构体中指定的方法， 如在上一小节中提到的在执行各个扩展的请求初始化时，都是统一调用request_startup_func方法， 而在每个扩展的定义时，都通过宏PHP_RINIT指定request_startup_func对应的函数。 以VLD扩展为例：其请求初始化为PHP_RINIT(vld),与之对应在扩展中需要有这个函数的实现：</p>
<pre><code class="language-cpp">PHP_RINIT_FUNCTION(vld) {
}</code></pre>
<p>所以， 我们在写扩展时也需要实现扩展的这些接口，同样，当实现各服务器接口时也需要实现其对应的SAPI。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:08:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:08:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-sapi]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[cpp,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-%e5%ba%95%e5%b1%82-sapi%e6%a6%82%e8%bf%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:12:"66.249.79.18";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP 底层：PHP的生命周期</title>
		<link>https://feilong.tech/2017/08/24/php-lifetime/</link>
		<pubDate>Thu, 24 Aug 2017 12:10:06 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>一切开始：SAPI接口</h4>
<p>SAPI 是Server Application Programming Interface 的简称，意思就是说，服务应用编程接口，PHP所有接口都是在这和系统进行交互。就像pc一样，无论安装在哪个系统，只要满足接口，都是可以正常运行的。PHP的脚本有很多运行方式，大多数是运行在web服务器，比如Apache或者nginx，或者命令行（CLI），或者嵌入其他程序里。</p>
<!--more-->
<h4>开始和结束</h4>
<p>PHP的开始和结束主要有两个阶段：<strong>处理请求之前的开始</strong>和<strong>请求之后的结束阶段</strong>。开始的阶段有两个过程：<strong>模块初始化阶段</strong>和<strong>模块激活阶段</strong>。</p>
<blockquote>
<ul>
<li>模块初始化阶段是MINIT(module init)，是在整个SAPI的什么周期内<strong>只会发生一次</strong>。也就是在lamp的时候，当Apache启动后，就开始启动MINIT，或者lnmp，当php-fpm启动后，会进行该步骤。例如PHP注册了一些拓展，则在该阶段回调所有的MINIT函数。
<pre><code class="language-cpp">PHP_MINIT_FUNCTION(myphpextension)
{
// 注册常量或者类等初始化操作
return SUCCESS; 
}</code></pre></li>
<li>模块激活阶段RINIT也叫请求初始化阶段（request init），该过程发生在请求的阶段。例如，当通过url请求某个页面，则在请求之前会进行模块激活（RINIT请求开始）。请求到达之后PHP初始化执行脚本的基本环境，例如创建一个执行环境，包括保存PHP运行过程中变量名称和值内容的符号表，以及当前所有的函数以及类等信息的符号表。然后PHP会调用所有模块的RINIT函数
<pre><code class="language-cpp">PHP_RINIT_FUNCTION(myphpextension)
{
// 例如记录请求开始时间
// 随后在请求结束的时候记录结束时间。这样我们就能够记录下处理请求所花费的时间了
return SUCCESS; 
}</code></pre></li>
<li>请求处理到达结束阶段，一般是执行到程序末尾或者调用<code>exit()</code>或者<code>die()</code> ，PHP都将进入结束阶段。和开始阶段对应，结束阶段也会分为两环节，一个在请求结束后停用模块(RSHUTDOWN，对应RINIT)
<pre><code class="language-cpp">PHP_RSHUTDOWN_FUNCTION(myphpextension)
{
// 例如记录请求结束时间，并把相应的信息写入到日至文件中。
return SUCCESS; 
}</code></pre></li>
<li>另一个阶段是，所有的请求都已处理完毕，SAPI也准备关闭了， PHP调用每个扩展的MSHUTDOWN方法，这是各个模块最后一次释放内存的机会。（这个是对于CGI和CLI等SAPI，没有“下一个请求”，所以SAPI立刻开始关闭。）
<pre><code class="language-cpp">PHP_MSHUTDOWN_FUNCTION(extension_name) {   
/* Free handlers and persistent memory etc */   
return SUCCESS;   
}  </code></pre>
<p>这样，整个PHP生命周期就结束了。要注意的是，只有在服务器没有请求的情况下才会执行“启动第一步”和“关闭第二步”。</p></li>
</ul>
</blockquote>
<p>SAPI运行PHP都经过下面几个阶段:</p>
<ul>
<li><strong>模块初始化阶段(Module init) </strong><br />
即调用每个拓展源码中的的PHP_MINIT_FUNCTION中的方法初始化模块,进行一些模块所需变量的申请,内存分配等。</li>
<li><strong>请求初始化阶段(Request init) </strong>
即接受到客户端的请求后调用每个拓展的PHP_RINIT_FUNCTION中的方法,初始化PHP脚本的执行环境。</li>
<li><strong>执行PHP脚本</strong></li>
<li><strong>请求结束(Request Shutdown)</strong>
这时候调用每个拓展的PHP_RSHUTDOWN_FUNCTION方法清理请求现场,并且ZE开始回收变量和内存。</li>
<li><strong>关闭模块(Module shutdown)</strong>
Web服务器退出或者命令行脚本执行完毕退出会调用拓展源码中的PHP_MSHUTDOWN_FUNCTION 方法</li>
</ul>
<h4>单进程SAPI生命周期</h4>
<p>CLI/CGI模式的PHP属于单进程的SAPI模式。这类的请求在处理一次请求后就关闭。也就是只会经过如下几个环节： 开始 - 请求开始 - 请求关闭 - 结束 SAPI接口实现就完成了其生命周期。如图所示：</p>
<p><img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194833.png" alt="" /></p>
<h4>多进程SAPI生命周期</h4>
<p>通常PHP是编译为apache的一个模块来处理PHP请求。Apache一般会采用多进程模式， Apache启动后会fork出多个子进程，每个进程的内存空间独立，每个子进程都会经过开始和结束环节，不过每个进程的开始阶段只在进程fork出来以来后进行，在整个进程的生命周期内可能会处理多个请求。只有在Apache关闭或者进程被结束之后才会进行关闭阶段，在这两个阶段之间会随着每个请求重复请求开始-请求关闭的环节。
<img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194749.png" alt="" /></p>
<h4>多线程的SAPI生命周期</h4>
<p>多线程模式和多进程中的某个进程类似，不同的是在整个进程的生命周期内会并行的重复着 请求开始-请求关闭的环节.
在这种模式下，只有一个服务器进程在运行着，但会同时运行很多线程，这样可以减少一些资源开销，向Module init和Module shutdown就只需要运行一遍就行了，一些全局变量也只需要初始化一次，因为线程独具的特质，使得各个请求之间方便的共享一些数据成为可能。
<img src="/uploads/2017/08/QQ%E6%88%AA%E5%9B%BE20170415194807.png" alt="" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:10:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:10:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-lifetime]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[cpp,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-%e5%ba%95%e5%b1%82%ef%bc%9aphp%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.128";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP curl传送json数据</title>
		<link>https://feilong.tech/2017/08/24/php-curl-json/</link>
		<pubDate>Thu, 24 Aug 2017 12:11:54 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>PHP curl传送json数据</h3>
<h4>说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）</h4>
<h4>今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。</h4>
<!--more-->
<h4>1)定义数据格式</h4>
<pre><code class="language-php">$params = array(
    &#039;name&#039; =&gt; &#039;Tyler Teng&#039;,
    &#039;sex&#039;  =&gt; &#039;male&#039;
);
$params = json_encode($params);</code></pre>
<h4>2)创建curl句柄，并且采用post方式进行传输</h4>
<pre><code class="language-php">$url    =  &#039;http://localhost/get.php&#039;;
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
$out = curl_exec($ch);
curl_close($ch);</code></pre>
<h4>3) 一般情况下，我们会在get.php使用</h4>
<pre><code class="language-php">print_r($_POST);
//string &#039;Array()&#039; (length=10)</code></pre>
<p>这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用</p>
<pre><code class="language-php">print_r(file_get_contents(&#039;php://input&#039;));
//string &#039;{&quot;name&quot;:&quot;Tyler Teng&quot;,&quot;sex&quot;:&quot;male&quot;}&#039; (length=34)</code></pre>
<p>来检验一下是不是有数据。</p>
<h4>4)使用json_decode()函数进行解析。</h4>
<pre><code class="language-php">$json = file_get_contents(&#039;php://input&#039;);
$array = json_decode($json, true);</code></pre>
<h4>5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了</h4>
<pre><code class="language-php">echo $array[&#039;name&#039;];
//string &#039;Tyler Teng&#039; (length=10)</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:11:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:11:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-curl-json]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-curl%e4%bc%a0%e9%80%81json%e6%95%b0%e6%8d%ae]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.128";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP UTC转GMT时区</title>
		<link>https://feilong.tech/2017/08/24/php-utc2gmt/</link>
		<pubDate>Thu, 24 Aug 2017 12:12:56 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
<p>很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。</p>
<p>背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。</p>
</blockquote>
<!--more-->
<h4>用过ci的都知道，<code>index.php</code>的第一句话就是</h4>
<pre><code class="language-php">date_default_timezone_set(&#039;UTC&#039;);</code></pre>
<h4>这就决定了，整个项目的时区是UTC时区。</h4>
<h4>但是客户端传上来的时区基本上是GMT开头，例如<code>GMT+8(北京时间)</code></h4>
<h4>所以要把UTC时区转换成GMT时区</h4>
<h4>Code如下</h4>
<pre><code class="language-php">$time_zone = &quot;GMT+8&quot;;
$time = time();
$date = date_create(date(&quot;Y-m-d H:i&quot;, $time), timezone_open(&#039;UTC&#039;));
$date = date_timezone_set($date, timezone_open($time_zone));
$date = date_format($date, &#039;Y-m-d H:i&#039;);</code></pre>
<h4>或者参照<a href="http://www.poluoluo.com/jzxy/201401/258989.html">php时区转换转换函数</a>:</h4>
<pre><code class="language-php">function toTimeZone($src, $from_tz = &#039;America/Denver&#039;, $to_tz = &#039;Asia/Shanghai&#039;, $fm = &#039;Y-m-d H:i:s&#039;) {
    $datetime = new DateTime($src, new DateTimeZone($from_tz));
    $datetime-&gt;setTimezone(new DateTimeZone($to_tz));
    return $datetime-&gt;format($fm);
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:12:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:12:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-utc2gmt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-utc%e8%bd%acgmt%e6%97%b6%e5%8c%ba]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.103";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP实现RSA加密、解密操作</title>
		<link>https://feilong.tech/2017/08/24/php-rsa/</link>
		<pubDate>Thu, 24 Aug 2017 12:16:45 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><a href="https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip">RSA生成工具</a></h4>
<h4>现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名<code>sign</code>验证。</h4>
<!--more-->
<h4>签名的作用</h4>
<h4>签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。</h4>
<h4>RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。</h4>
<h4>使用方法</h4>
<blockquote>
<ul>
<li>使用私钥进行加密，公钥用于解密</li>
<li>私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露 </li>
</ul>
</blockquote>
<h4>实现代码</h4>
<pre><code class="language-php">//生成签名
function build_sign($data) {
    $private_key = openssl_pkey_get_private(&#039;file://C:/key/rsa_private_key.pem&#039;);//私钥位置
    openssl_sign($data, $sign, OPENSSL_ALGO_SHA1);
    $sign = base64_encode($sign);

    return $sign;
}
//解密
function check_sign($date, $sign) {
    $sign = base64_decode($sign);
    $public_key = openssl_pkey_get_public(&#039;file://C:/key/rsa_public_key.pem&#039;);//公钥位置
    $result = openssl_verify($data, $sign, $key, OPENSSL_ALGO_SHA1) == 1;

    return $result;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:16:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:16:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-rsa]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php%e5%ae%9e%e7%8e%b0rsa%e5%8a%a0%e5%af%86%e3%80%81%e8%a7%a3%e5%af%86%e6%93%8d%e4%bd%9c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.139.118";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP使用fastcgi_finish_request 提高响应</title>
		<link>https://feilong.tech/2017/08/24/php-fastcgi_finish_request/</link>
		<pubDate>Thu, 24 Aug 2017 12:17:17 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做<code>fastcgi_finish_request</code>的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。</h4>
<!--more-->
<h4>听起来挺迷茫的，下面给大家举个例子</h4>
<pre><code class="language-php">&lt;?php
    echo &#039;This is example1&#039;;
    fastcgi_finish_request();
    echo &#039;This is example2&#039;;
    file_put_contents(&#039;/var/log/test.log&#039;, &#039;hello world&#039;);

?&gt;</code></pre>
<h4>当通过浏览器访问的时候，页面会输出<code>This is example1</code>，但是没有输出<code>This is example2</code>同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。</h4>
<h4>再来个直观的例子</h4>
<pre><code class="language-php">&lt;?php
    echo &#039;This is example1&#039;;
    fastcgi_finish_request();
    echo &#039;This is example2&#039;;
    file_put_contents(&#039;/var/log/test.log&#039;, time(&#039;Y-m-d H:i:s&#039;, time()), FILE_APPEND);
    sleep(1);
    file_put_contents(&#039;/var/log/test.log&#039;, time(&#039;Y-m-d H:i:s&#039;, time()), FILE_APPEND);
    sleep(1);
    file_put_contents(&#039;/var/log/test.log&#039;, time(&#039;Y-m-d H:i:s&#039;, time()), FILE_APPEND);
?&gt;</code></pre>
<h4>执行的结果就是页面值输出了<code>This is example1</code>,服务器记录了三条日志信息。</h4>
<h4>个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。</h4>
<h4>另外，在代码移植上建议加上如下代码</h4>
<pre><code class="language-php">&lt;?php
    if (!function_exists(&quot;fastcgi_finish_request&quot;)) {
          function fastcgi_finish_request()  {
          }
    }
?&gt;</code></pre>
<h4>fastcgi_finish_request虽然很好用，但是也有很多限制：</h4>
<ul>
<li>PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request</li>
</ul>
<p>内容参考鸟哥博客<a href="http://www.laruence.com/2011/04/13/1991.html">使用fastcgi_finish_request提高页面响应速度</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:17:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:17:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-fastcgi_finish_request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php%e4%bd%bf%e7%94%a8fastcgi_finish_request-%e6%8f%90%e9%ab%98%e5%93%8d%e5%ba%94]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.128.142";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sphinx 生成索引时出现WARNING: attribute &#039;&#039;id&#039;&#039; not found - IGNORING</title>
		<link>https://feilong.tech/2017/08/24/sphinx-warning/</link>
		<pubDate>Thu, 24 Aug 2017 12:18:45 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>公司由于业务发展需要使用sphinx、之前是师傅负责配置。现在变成是我来维护，由于对sphinx了解并不多，所以在生成索引的时候一直出现WARNING: attribute 'id' not found - IGNORING</h4>
<!--more-->
<p>我的表结构</p>
<pre><code class="language-sql">CREATE TABLE `user` (
  `id` int(10) NOT NULL,
  `name` varchar(20) DEFAULT NULL,
  `sex` tinyint(4) DEFAULT NULL,
  `create_time` int(10) DEFAULT NULL,
  `update_time` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=gbk;</code></pre>
<p>部分sphinx配置</p>
<pre><code class="language-roboconf">sql_query               = \
                SELECT id, name, sex, create_time, update_time FROM user
sql_attr_uint           = id
sql_attr_timestamp      = create_time
sql_attr_timestamp      = update_time
</code></pre>
<h4>查了一下资料，才知道sphinx会内置一个id 的字段，所以选择索引的时候，就不能设置<code>sql_attr_uint = id</code>，要不然就是重复了。但是sql第一列还必须是id字段才行 （听着有点矛盾）</h4>
<h4>可以有两个思路：</h4>
<h5>第一种</h5>
<ul>
<li>更改表结构，把id-&gt;uid</li>
<li>更改配置
<pre><code class="language-roboconf">sql_query               = \
            SELECT uid as id, uid, name, sex, create_time, update_time FROM user
sql_attr_uint           = uid
sql_attr_timestamp      = create_time
sql_attr_timestamp      = update_time</code></pre></li>
</ul>
<h5>第二种</h5>
<ul>
<li>
<p>不改表结构，只更改配置</p>
<pre><code class="language-roboconf">sql_query               = \
            SELECT  id, id as uid, name, sex, create_time, update_time FROM user
sql_attr_uint           = uid
sql_attr_timestamp      = create_time
sql_attr_timestamp      = update_time</code></pre>
</li>
</ul>
<h4>然后再生成索引应该就好了</h4>
<h4>附上sphinx配置说明</h4>
<p><img src="/uploads/2017/08/1491118645070.png" alt="" />
<img src="/uploads/2017/08/1491118649031.png" alt="" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:18:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:18:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sphinx-warning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[sql,roboconf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[sphinx-%e7%94%9f%e6%88%90%e7%b4%a2%e5%bc%95%e6%97%b6%e5%87%ba%e7%8e%b0warning-attribute-id-not-found-ignoring]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"66.249.73.144";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git SSH和HTTPS互相切换</title>
		<link>https://feilong.tech/2017/08/24/git-ssh-https/</link>
		<pubDate>Thu, 24 Aug 2017 12:19:12 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 <font color=red>git remote </font>可以实现</h4>
<!--more-->
<h4>1) 查看当前remote版本</h4>
<pre><code class="language-bash">$ git remote -v
origin  git@your domain:tylerteng/project.git (fetch)
origin  git@your domain:tylerteng/project.git (push)</code></pre>
<h4>2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS</h4>
<pre><code class="language-bash">$ git remote set-url origin https://your domain/tylerteng/project.git</code></pre>
<h4>3) 然后你再进行push等操作，就是按照HTTPS进行提交</h4>
<pre><code class="language-bash">$ git push
Username for &#039;https://your domain&#039;:
Password for &#039;https://tylerteng@your domain&#039;:</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:19:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:19:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[git-ssh-https]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[git-ssh%e5%92%8chttps%e4%ba%92%e7%9b%b8%e5%88%87%e6%8d%a2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.152.56";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ubuntu查看版本</title>
		<link>https://feilong.tech/2017/08/24/ubuntu-version/</link>
		<pubDate>Thu, 24 Aug 2017 12:19:37 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>使用命令：cat /proc/version 查看</h4>
<pre><code class="language-bash">$ cat /proc/version
Linux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016</code></pre>
<p>&lt;!--more--&gt;</p>
<h4>使用命令：uname -a 查看</h4>
<pre><code class="language-bash">$ uname -a
Linux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</code></pre>
<h4>使用命令：lsb_release -a 查看</h4>
<pre><code class="language-bash">$ lsb_release -a
Linux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
ubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 16.04.1 LTS
Release:        16.04
Codename:       xenial
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:19:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:19:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ubuntu-version]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[ubuntu%e6%9f%a5%e7%9c%8b%e7%89%88%e6%9c%ac]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.128.142";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ubuntu搭建lnmp环境</title>
		<link>https://feilong.tech/2017/08/24/ubuntu%e6%90%ad%e5%bb%balnmp%e7%8e%af%e5%a2%83/</link>
		<pubDate>Thu, 24 Aug 2017 12:20:18 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://blog.feilong.tech/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[<p><strong>项目基于php CI</strong></p>
<h4>1、安装mysql</h4>
<pre><code class="language-bash">$ sudo apt-get install mysql-server mysql-client</code></pre>
<!--more-->
<p><strong>安装过程会提示输入root的密码，连续输入两次</strong></p>
<pre><code class="language-bash">New password for the MySQL “root” user: &lt;– 输入你的密码
Repeat password for the MySQL “root” user: &lt;– 再输入一次</code></pre>
<h4>2、安装nginx</h4>
<p><strong>安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用</strong></p>
<pre><code class="language-bash">$ sudo service apache2 stop
$ sudo update-rc.d -f apache2 remove
$ sudo apt-get remove apache2
$ sudo apt-get install nginx
$ sudo service nginx start </code></pre>
<p><strong>试试安装是否成功，在浏览器输入IP或主机地址。</strong></p>
<h4>3、安装php</h4>
<pre><code class="language-bash">$ sudo apt-get install php7.0 -y</code></pre>
<p><strong>启动php-fpm</strong></p>
<pre><code class="language-bash">$ sudo service php7.0-fpm start</code></pre>
<p><strong>输入<code>php -i</code>命令，查看php是否运行, 这个命令和<code>phpinfo()</code>函数一样</strong></p>
<pre><code class="language-bash">$ sudo php -i</code></pre>
<h4>4、更改nginx配置文件</h4>
<pre><code class="language-bash">$ cd /etc/nginx/sites-enabled/
$ ll
total 8
drwxr-xr-x 2 root root 4096 Nov 22 08:20 ./
drwxr-xr-x 7 root root 4096 Nov 22 08:21 ../
lrwxrwxrwx 1 root root   34 Nov 22 06:10 default -&gt; /etc/nginx/sites-available/default</code></pre>
<p><strong>这里会有一个默认的default配置文件，更改配置文件，进行项目配置</strong></p>
<pre><code class="language-bash">server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_tokens off;
        root /usr/share/nginx/test;
        # Add index.php to the list if you are using PHP
        index  index.php index.html index.htm index.nginx-debian.html;
        server_name _;
        if ($request_filename !~ (\.jpg|css|js|png|fonts|img)) {
                rewrite ^/(.*)$ /index.php/$1 break;
        }
        location ~ / {
                root /usr/share/nginx/test;
                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;
                fastcgi_index  index.php;
                set $path_info &quot;&quot;;
                set $real_script_name $fastcgi_script_name;
                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                include        fastcgi_params;
        }
}</code></pre>
<p><strong>按需配置CI框架的数据库</strong></p>
<p><strong>新建控制器<code>Info.php</code>, 在里面增加php方法，运行检验</strong></p>
<pre><code class="language-php">&lt;?php if ( ! defined(&#039;BASEPATH&#039;)) exit(&#039;No direct script access allowed&#039;);

class Info extends CI_Controller {
    public function php() {
        echo &quot;hello world!&quot;;
    }
}</code></pre>
<p><strong>发现抛出一个致命的错误</strong></p>
<p><code>Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions-&gt;show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 {main} thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192</code></p>
<p><strong>报错的意思大概是说show_exception方法的参数是个实例化的，但是传入的参数不是一个实例</strong></p>
<p><strong>后来根据github上面的解决办法https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show_exception的参数</strong></p>
<p><strong>刷新后发现提示mysql的php拓展，使用命令安装php相关拓展</strong></p>
<h4>5、安装php拓展</h4>
<p><strong>查看支持的拓展</strong></p>
<pre><code class="language-bash">sudo apt-cache search php7.0

libapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)
php-all-dev - package depending on all supported PHP development packages
php7.0 - server-side, HTML-embedded scripting language (metapackage)
php7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)
php7.0-cli - command-line interpreter for the PHP scripting language
php7.0-common - documentation, examples and common module for PHP
php7.0-curl - CURL module for PHP
php7.0-dev - Files for PHP7.0 module development
php7.0-gd - GD module for PHP
php7.0-gmp - GMP module for PHP
php7.0-json - JSON module for PHP
php7.0-ldap - LDAP module for PHP
php7.0-mysql - MySQL module for PHP
php7.0-odbc - ODBC module for PHP
php7.0-opcache - Zend OpCache module for PHP
php7.0-pgsql - PostgreSQL module for PHP
php7.0-pspell - pspell module for PHP
.
.
.</code></pre>
<p><strong>为了保险起见，直接安装所有拓展</strong></p>
<pre><code class="language-bash">sudo apt-get install php-all-dev</code></pre>
<p><strong>然后刷新发现正常输出<code>hello world!</code></strong></p>
<p><strong>然后我把show_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show_exception也是由于缺少拓展造成的</strong></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2017-08-24 20:20:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-24 12:20:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ubuntu%e6%90%ad%e5%bb%balnmp%e7%8e%af%e5%a2%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"167.114.64.97";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nginx配置tcp代理</title>
		<link>https://feilong.tech/2017/09/08/nginx-tcp-proxy/</link>
		<pubDate>Fri, 08 Sep 2017 06:19:04 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[<p>nginx从<code>1.9.0</code>开始，支持动态拓展，并且新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。</p>
<!--more-->
<h2>用法</h2>
<p>stream模块用法和http模块差不多，关键的是语法几乎一致。熟悉http模块配置语法的上手更快，以下是一个配置了tcp负载均衡的例子, 有 server，upstream块，而且还有server，hash， listen， proxy_pass等指令，如果不看最外层的stream关键字，还以为是http模块呢。</p>
<pre><code class="language-nginx">
user nginx;
worker_processes auto;
stream {
    upstream sphinx {
    server 127.0.0.1:9312;
}
server {
   listen 9311;
   proxy_pass sphinx; # 把9311端口监听的数据转发到9312
 }
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2017-09-08 14:19:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-08 06:19:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nginx-tcp-proxy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="tcp"><![CDATA[tcp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[nginx,clike]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[nginx%e9%85%8d%e7%bd%aetcp%e4%bb%a3%e7%90%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.152.56";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP源码分析之哈希表</title>
		<link>https://feilong.tech/2017/09/20/phpsource-hash/</link>
		<pubDate>Wed, 20 Sep 2017 12:04:15 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[<p>PHP中使用最频繁的莫过于字符串和数组了，然而PHP中的数组主要是基于哈希表，这篇文章主要是分析一下PHP源码的内部哈希表的实现方式。PHP版本基于PHP 5.3。</p>
<!--more-->
<h2>基本概念</h2>
<p>哈希表在实践中使用非常的广泛，哈希表的优势在于查询的时间复杂度是O(1), 哈希表提供增删改查等操作，这些操作在最坏的情况下就是和链表的性能O(n)一样。</p>
<p>哈希表主要有一下组成：</p>
<ul>
<li>键（key）：用于操作数据的标示，例如PHP数组中的索引，或者字符串键等等。</li>
<li>槽(slot/bucket)：哈希表中用于保存数据的一个单元，也就是数据真正存放的容器。</li>
<li>哈希函数(hash function)：将key映射(map)到数据应该存放的slot所在位置的函数。</li>
<li>哈希冲突(hash collision)：哈希函数将两个不同的key映射到同一个索引的情况。</li>
</ul>
<p>哈希表可以理解为数组的拓展，哈希表使用的是键的方式，然后通过哈希函数映射到一个索引，这个索引可以理解称是这个值得实际的存储位置。</p>
<pre><code>hash（key）-> index</code></pre>
<p>通过合理设计的哈希函数，我们就能将key映射到合适的范围，因为我们的key空间可以很大(例如字符串key)， 在映射到一个较小的空间中时可能会出现两个不同的key映射被到同一个index上的情况， 这就是我们所说的出现了冲突。 目前解决hash冲突的方法主要有两种：链接法和开放寻址法。</p>
<h2>哈希冲突</h2>
<h3>链接法</h3>
<p>链接法通常是通过一个链表保存bucket值的方式来解决冲突，链接法的最坏情况就是所有的key都映射到一个槽位，这样就使哈希表成了一个链表，然后在查询的时候，时间复杂度就成了O（n）。所以选择一哈希函数非常重要，最好能够使哈希值的散列度大一些，分布均匀一些。</p>
<p>由于目前大部分的编程语言的哈希表实现都是开源的，大部分语言的哈希算法都是公开的算法，
虽然目前的哈希算法都能良好的将key进行比较均匀的分布，而这个假使的前提是key是随机的，正是由于算法的确定性，
这就导致了别有用心的黑客能利用已知算法的可确定性来构造一些特殊的key，让这些key都映射到
同一个槽位导致哈希表退化成单链表，导致程序的性能急剧下降，从而造成一些应用的吞吐能力急剧下降，
尤其是对于高并发的应用影响很大，通过大量类似的请求可以让服务器遭受DoS(服务拒绝攻击)，
这个问题一直就存在着，只是最近才被各个语言重视起来。 </p>
<p>哈希冲突攻击利用的哈希表最根本的弱点是：<strong>开源算法和哈希实现的确定性以及可预测性</strong>，这样攻击者才可以利用特殊构造的key来进行攻击。要解决这个问题的方法则是让攻击者无法轻易构造
能够进行攻击的key序列。</p>
<blockquote>
<p><strong>NOTE</strong>
在笔者编写这节内容的时候PHP语言也采取了相应的措施来防止这类的攻击，PHP采用的是一种
治标不治本的做法: <a href="http://cn2.php.net/manual/en/info.configuration.php#ini.max-input-vars">限制用户提交数据字段数量</a>
这样可以避免大部分的攻击，不过应用程序通常会有很多的数据输入方式，比如，SOAP，REST等等，
比如很多应用都会接受用户传入的JSON字符串，在执行json_decode()的时候也可能会遭受攻击。
所以最根本的解决方法是让哈希表的碰撞key序列无法轻易的构造，目前PHP中还没有引入不增加额外的复杂性情况下的完美解决方案。</p>
</blockquote>
<p>目前PHP中HashTable的哈希冲突解决方法就是链接法。</p>
<h3>开放寻址法</h3>
<p>通常还有另外一种解决冲突的方法：开放寻址法。使用开放寻址法是槽本身直接存放数据，
在插入数据时如果key所映射到的索引已经有数据了，这说明发生了冲突，这是会寻找下一个槽，
如果该槽也被占用了则继续寻找下一个槽，直到寻找到没有被占用的槽，在查找时也使用同样的策略来进行。</p>
<p>由于开放寻址法处理冲突的时候占用的是其他槽位的空间,这可能会导致后续的key在插入的时候更加容易出现
哈希冲突，所以采用开放寻址法的哈希表的装载因子不能太高，否则容易出现性能下降。</p>
<blockquote>
<p><strong>NOTE</strong>
<em>装载因子</em>是哈希表保存的元素数量和哈希表容量的比，通常采用链接法解决冲突的哈希表的装载
因子最好不要大于1，而采用开放寻址法的哈希表最好不要大于0.5。</p>
</blockquote>
<h2>PHP的实现</h2>
<p>PHP中的哈希表实现在Zend/zend_hash.c中，还是按照上一小节的方式，先看看PHP实现中的数据结构，
PHP使用如下两个数据结构来实现哈希表，HashTable结构体用于保存整个哈希表需要的基本信息，
而Bucket结构体用于保存具体的数据内容，如下：</p>
<pre><code class="language-c">typedef struct _hashtable { 
    uint nTableSize;        // hash Bucket的大小，最小为8，以2x增长。
    uint nTableMask;        // nTableSize-1 ， 索引取值的优化
    uint nNumOfElements;    // hash Bucket中当前存在的元素个数，count()函数会直接返回此值 
    ulong nNextFreeElement; // 下一个数字索引的位置
    Bucket *pInternalPointer;   // 当前遍历的指针（foreach比for快的原因之一）
    Bucket *pListHead;          // 存储数组头元素指针
    Bucket *pListTail;          // 存储数组尾元素指针
    Bucket **arBuckets;         // 存储hash数组
    dtor_func_t pDestructor;    // 在删除元素时执行的回调函数，用于资源的释放
    zend_bool persistent;       //指出了Bucket内存分配的方式。如果persisient为TRUE，则使用操作系统本身的内存分配函数为Bucket分配内存，否则使用PHP的内存分配函数。
    unsigned char nApplyCount; // 标记当前hash Bucket被递归访问的次数（防止多次递归）
    zend_bool bApplyProtection;// 标记当前hash桶允许不允许多次访问，不允许时，最多只能递归3次
#if ZEND_DEBUG
    int inconsistent;
#endif
} HashTable;</code></pre>
<p>nTableSize字段用于标示哈希表的容量，哈希表的初始容量最小为8。首先看看哈希表的初始化函数:</p>
<pre><code class="language-c">ZEND_API int _zend_hash_init(HashTable *ht, uint nSize, hash_func_t pHashFunction,
                    dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)
{
    uint i = 3;
    //...
    if (nSize &gt;= 0x80000000) {
        /* prevent overflow */
        ht-&gt;nTableSize = 0x80000000;
    } else {
        while ((1U &lt;&lt; i) &lt; nSize) {
            i++;
        }
        ht-&gt;nTableSize = 1 &lt;&lt; i;
    }
    // ...
    ht-&gt;nTableMask = ht-&gt;nTableSize - 1;

    /* Uses ecalloc() so that Bucket* == NULL */
    if (persistent) {
        tmp = (Bucket **) calloc(ht-&gt;nTableSize, sizeof(Bucket *));
        if (!tmp) {
            return FAILURE;
        }
        ht-&gt;arBuckets = tmp;
    } else {
        tmp = (Bucket **) ecalloc_rel(ht-&gt;nTableSize, sizeof(Bucket *));
        if (tmp) {
            ht-&gt;arBuckets = tmp;
        }
    }

    return SUCCESS;
}</code></pre>
<p>例如如果设置初始大小为10，则上面的算法将会将大小调整为16。也就是始终将大小调整为接近初始大小的
2的整数次方。</p>
<p>为什么会做这样的调整呢？我们先看看HashTable将哈希值映射到槽位的方法，上一小节我们使用了取模的方式来将哈希值
映射到槽位，例如大小为8的哈希表，哈希值为100， 则映射的槽位索引为: 100 % 8 = 4，由于索引通常从0开始，
所以槽位的索引值为3，在PHP中使用如下的方式计算索引：</p>
<pre><code class="language-c">h = zend_inline_hash_func(arKey, nKeyLength);
nIndex = h &amp; ht-&gt;nTableMask;</code></pre>
<p>从上面的_zend_hash_init()函数中可知，ht-&gt;nTableMask的大小为ht-&gt;nTableSize -1。
这里使用&amp;操作而不是使用取模，这是因为是相对来说取模操作的消耗和按位与的操作大很多。</p>
<blockquote>
<p><strong>NOTE</strong>
mask的作用就是将哈希值映射到槽位所能存储的索引范围内。 例如：某个key的索引值是21，
哈希表的大小为8，则mask为7，则求与时的二进制表示为： 10101 &amp; 111 = 101 也就是十进制的5。
因为2的整数次方-1的二进制比较特殊：后面N位的值都是1，这样比较容易能将值进行映射，
如果是普通数字进行了二进制与之后会影响哈希值的结果。那么哈希函数计算的值的平均分布就可能出现影响。</p>
</blockquote>
<p>设置好哈希表大小之后就需要为哈希表申请存储数据的空间了，如上面初始化的代码，
根据是否需要持久保存而调用了不同的内存申请方法。如前面PHP生命周期里介绍的,是否需要持久保存体现在：持久内容能在多个请求之间访问，而非持久存储是会在请求结束时释放占用的空间。
具体内容将在内存管理章节中进行介绍。 </p>
<p>HashTable中的nNumOfElements字段很好理解，每插入一个元素或者unset删掉元素时会更新这个字段。
这样在进行count()函数统计数组元素个数时就能快速的返回。</p>
<p>nNextFreeElement字段非常有用。先看一段PHP代码：</p>
<pre><code class="language-php">&lt;?php
$a = array(10 =&gt; &#039;Hello&#039;);
$a[] = &#039;TIPI&#039;;
var_dump($a);

// ouput
array(2) {
  [10]=&gt;
  string(5) &quot;Hello&quot;
  [11]=&gt;
  string(5) &quot;TIPI&quot;
}</code></pre>
<p>PHP中可以不指定索引值向数组中添加元素，这时将默认使用数字作为索引，
和<a href="http://en.wikipedia.org/wiki/Enumerated_type">C语言中的枚举</a>类似，
而这个元素的索引到底是多少就由nNextFreeElement字段决定了。
如果数组中存在了数字key，则会默认使用最新使用的key + 1，例如上例中已经存在了10作为key的元素，
这样新插入的默认索引就为11了。</p>
<h4>数据容器：槽位</h4>
<p>下面看看保存哈希表数据的槽位数据结构体：</p>
<pre><code class="language-c">typedef struct bucket {
    ulong h;            // 对char *key进行hash后的值，或者是用户指定的数字索引值
    uint nKeyLength;    // hash关键字的长度，如果数组索引为数字，此值为0
    void *pData;        // 指向value，一般是用户数据的副本，如果是指针数据，则指向pDataPtr
    void *pDataPtr;     //如果是指针数据，此值会指向真正的value，同时上面pData会指向此值
    struct bucket *pListNext;   // 整个hash表的下一元素
    struct bucket *pListLast;   // 整个哈希表该元素的上一个元素
    struct bucket *pNext;       // 存放在同一个hash Bucket内的下一个元素
    struct bucket *pLast;       // 同一个哈希bucket的上一个元素
    // 保存当前值所对于的key字符串，这个字段只能定义在最后，实现变长结构体
    char arKey[1];              
} Bucket;</code></pre>
<p>如上面各字段的注释。h字段保存哈希表key哈希后的值。这里保存的哈希值而不是在哈希表中的索引值，
这是因为索引值和哈希表的容量有直接关系，如果哈希表扩容了，那么这些索引还得重新进行哈希在进行索引映射，
这也是一种优化手段。
在PHP中可以使用字符串或者数字作为数组的索引。
数字索引直接就可以作为哈希表的索引，数字也无需进行哈希处理。h字段后面的nKeyLength字段是作为key长度的标示，
如果索引是数字的话，则nKeyLength为0。在PHP数组中如果索引字符串可以被转换成数字也会被转换成数字索引。
<strong>所以在PHP中例如'10'，'11'这类的字符索引和数字索引10， 11没有区别。</strong></p>
<p>上面结构体的最后一个字段用来保存key的字符串，而这个字段却申明为只有一个字符的数组，
其实这里是一种长见的<a href="http://stackoverflow.com/a/4690976/319672">变长结构体</a>，主要的目的是增加灵活性。
以下为哈希表插入新元素时申请空间的代码</p>
<pre><code class="language-c">p = (Bucket *) pemalloc(sizeof(Bucket) - 1 + nKeyLength, ht-&gt;persistent);
if (!p) {
    return FAILURE;
}</code></pre>
<p>如代码，申请的空间大小加上了字符串key的长度，然后把key拷贝到新申请的空间里。
在后面比如需要进行hash查找的时候就需要对比key这样就可以通过对比p-&gt;arKey和查找的key是否一样来进行数据的
查找。申请空间的大小-1是因为结构体内本身的那个字节还是可以使用的。</p>
<blockquote>
<p><strong>NOTE</strong>
在PHP5.4中将这个字段定义成const char* arKey类型了。</p>
</blockquote>
<p><img src="/uploads/2017/09/03-01-02-zend_hashtable.png" alt="哈希表" />memcpy(p-&gt;arKey, arKey, nKeyLength);</p>
<p>上图来源于<a href="http://gsm56.com/?p=124">网络</a>。</p>
<ul>
<li>Bucket结构体维护了两个双向链表，pNext和pLast指针分别指向本槽位所在的链表的关系。</li>
<li>而pListNext和pListLast指针指向的则是整个哈希表所有的数据之间的链接关系。
HashTable结构体中的pListHead和pListTail则维护整个哈希表的头元素指针和最后一个元素的指针。</li>
</ul>
<blockquote>
<p><strong>NOTE</strong>
PHP中数组的操作函数非常多，例如：array_shift()和array_pop()函数，分别从数组的头部和尾部弹出元素。
哈希表中保存了头部和尾部指针，这样在执行这些操作时就能在常数时间内找到目标。
PHP中还有一些使用的相对不那么多的数组操作函数：next()，prev()等的循环中，
哈希表的另外一个指针就能发挥作用了：pInternalPointer，这个用于保存当前哈希表内部的指针。
这在循环时就非常有用。</p>
</blockquote>
<p>如图中左下角的假设，假设依次插入了Bucket1，Bucket2，Bucket3三个元素：</p>
<ol>
<li>插入Bucket1时，哈希表为空，经过哈希后定位到索引为1的槽位。此时的1槽位只有一个元素Bucket1。
其中Bucket1的pData或者pDataPtr指向的是Bucket1所存储的数据。此时由于没有链接关系。pNext，
pLast，pListNext，pListLast指针均为空。同时在HashTable结构体中也保存了整个哈希表的第一个元素指针，
和最后一个元素指针，此时HashTable的pListHead和pListTail指针均指向Bucket1。</li>
<li>插入Bucket2时，由于Bucket2的key和Bucket1的key出现冲突，此时将Bucket2放在双链表的前面。
由于Bucket2后插入并置于链表的前端，此时Bucket2.pNext指向Bucket1，由于Bucket2后插入。
Bucket1.pListNext指向Bucket2，这时Bucket2就是哈希表的最后一个元素，这是HashTable.pListTail指向Bucket2。</li>
<li>插入Bucket3，该key没有哈希到槽位1，这时Bucket2.pListNext指向Bucket3，因为Bucket3后插入。
同时HashTable.pListTail改为指向Bucket3。</li>
</ol>
<p>简单来说就是哈希表的Bucket结构维护了哈希表中插入元素的先后顺序，哈希表结构维护了整个哈希表的头和尾。
在操作哈希表的过程中始终保持预算之间的关系。</p>
<h3>哈希表的操作接口</h3>
<p>和上一节类似，将简单介绍PHP哈希表的操作接口实现。提供了如下几类操作接口：</p>
<ul>
<li>初始化操作，例如zend_hash_init()函数，用于初始化哈希表接口，分配空间等。</li>
<li>查找，插入，删除和更新操作接口，这是比较常规的操作。</li>
<li>迭代和循环，这类的接口用于循环对哈希表进行操作。</li>
<li>复制，排序，倒置和销毁等操作。</li>
</ul>
<p>本小节选取其中的插入操作进行介绍。
在PHP中不管是对数组的添加操作（zend_hash_add），还是对数组的更新操作（zend_hash_update），
其最终都是调用_zend_hash_add_or_update函数完成，这在面向对象编程中相当于两个公有方法和一个公共的私有方法的结构，
以实现一定程度上的代码复用。</p>
<pre><code class="language-c">ZEND_API int _zend_hash_add_or_update(HashTable *ht, const char *arKey, uint nKeyLength, void *pData, uint nDataSize, void **pDest, int flag ZEND_FILE_LINE_DC)
{
     //...省略变量初始化和nKeyLength &lt;=0 的异常处理

    h = zend_inline_hash_func(arKey, nKeyLength);
    nIndex = h &amp; ht-&gt;nTableMask;

    p = ht-&gt;arBuckets[nIndex];
    while (p != NULL) {
        if ((p-&gt;h == h) &amp;&amp; (p-&gt;nKeyLength == nKeyLength)) {
            if (!memcmp(p-&gt;arKey, arKey, nKeyLength)) { //  更新操作
                if (flag &amp; HASH_ADD) {
                    return FAILURE;
                }
                HANDLE_BLOCK_INTERRUPTIONS();

                //..省略debug输出
                if (ht-&gt;pDestructor) {
                    ht-&gt;pDestructor(p-&gt;pData);
                }
                UPDATE_DATA(ht, p, pData, nDataSize);
                if (pDest) {
                    *pDest = p-&gt;pData;
                }
                HANDLE_UNBLOCK_INTERRUPTIONS();
                return SUCCESS;
            }
        }
        p = p-&gt;pNext;
    }

    p = (Bucket *) pemalloc(sizeof(Bucket) - 1 + nKeyLength, ht-&gt;persistent);
    if (!p) {
        return FAILURE;
    }
    memcpy(p-&gt;arKey, arKey, nKeyLength);
    p-&gt;nKeyLength = nKeyLength;
    INIT_DATA(ht, p, pData, nDataSize);
    p-&gt;h = h;
    CONNECT_TO_BUCKET_DLLIST(p, ht-&gt;arBuckets[nIndex]); //Bucket双向链表操作
    if (pDest) {
        *pDest = p-&gt;pData;
    }

    HANDLE_BLOCK_INTERRUPTIONS();
    CONNECT_TO_GLOBAL_DLLIST(p, ht);    // 将新的Bucket元素添加到数组的链接表的最后面
    ht-&gt;arBuckets[nIndex] = p;
    HANDLE_UNBLOCK_INTERRUPTIONS();

    ht-&gt;nNumOfElements++;
    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        /*  如果此时数组的容量满了，则对其进行扩容。*/
    return SUCCESS;
}</code></pre>
<p>整个写入或更新的操作流程如下：</p>
<ol>
<li>生成hash值，通过与nTableMask执行与操作，获取在arBuckets数组中的Bucket。</li>
<li>如果Bucket中已经存在元素，则遍历整个Bucket，查找是否存在相同的key值元素，如果有并且是update调用，则执行update数据操作。</li>
<li>创建新的Bucket元素，初始化数据，并将新元素添加到当前hash值对应的Bucket链表的最前面（CONNECT_TO_BUCKET_DLLIST）。</li>
<li>将新的Bucket元素添加到数组的链接表的最后面（CONNECT_TO_GLOBAL_DLLIST）。</li>
<li>将元素个数加1，如果此时数组的容量满了，则对其进行扩容。这里的判断是依据nNumOfElements和nTableSize的大小。
如果nNumOfElements &gt; nTableSize则会调用zend_hash_do_resize以2X的方式扩容（nTableSize &lt;&lt; 1）。</li>
</ol>
<h2>参考文献</h2>
<ul>
<li>《深入理解PHP内核》</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2017-09-20 20:04:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-20 12:04:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[phpsource-hash]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[c,clike,php,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90%e4%b9%8b%e5%93%88%e5%b8%8c%e8%a1%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.103";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP源码分析之cli模式执行的过程</title>
		<link>https://feilong.tech/2017/09/26/phpsource-cli/</link>
		<pubDate>Tue, 26 Sep 2017 12:50:15 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[<p>众所周知，PHP在web上应用很广泛。接近80%的web网站都是使用PHP+MySQL，虽然越来越多的新语种崛起，但是现在PHP依然是中小型web系统的首选。PHP除了在web上有很多应用，也经常被用作脚本工具，虽然没有原生shell效率高，但是起点比较低。今天就和大家分享下PHP cli模式的执行过程。</p>
<!--more-->
<h4>前期准备</h4>
<pre><code>PHP的版本：5.3
代码查看工具：VSCODE 或者sublime text</code></pre>
<h4>一切从SAPI开始</h4>
<p><code>SAPI</code>是<code>Server Application Programming Interface</code>的缩写，翻译过来就是服务应用程序接口，可以理解称是一种接口的规范，只要是符合规范的语言，都是可以通过SAPI和服务器进行数据交互。</p>
<p>通常，在web模式下，PHP通常都是运行在Apache或者nginx这类web服务器上面，程序执行结束后，将结果显示在浏览器上面。其实命令行和web执行过程是稍微有点不同的。命令行是将参数传给PHP的解释器，然后把运行结果显示在窗口上面。有兴趣的可以阅读下<a href="http://www.php-internals.com/book/?p=chapt02/02-01-php-life-cycle-and-zend-engine">深入PHP内核：用户代码的执行</a> 了解一下PHP的生命周期。</p>
<p>PHP的cli模式最开始是随着PHP  4.2.0的版本发布的，但是当时只是一个实验版本，并且需要使用<code>./configure --enable-cli</code>参数才会进行安装。直到PHP 4.3.0之后，才把cli模式当成正式的模块，<code>--enable-cli</code> 参数会被默认得设置为 on，也可以用参数 <code>--disable-cli</code> 来屏蔽。</p>
<h4>入口的位置</h4>
<p>当我们忘记一个命令的option的时候，我们通常会使用<code>-h/--help</code>来查看帮助</p>
<pre><code class="language-bash">    [root@root ~]$ php -h
    Usage: php [options] [-f] &lt;file&gt; [--] [args...]
       php [options] -r &lt;code&gt; [--] [args...]
       php [options] [-B &lt;begin_code&gt;] -R &lt;code&gt; [-E &lt;end_code&gt;] [--] [args...]
       php [options] [-B &lt;begin_code&gt;] -F &lt;file&gt; [-E &lt;end_code&gt;] [--] [args...]
       php [options] -- [args...]
       php [options] -a

      -a               Run as interactive shell
      -c &lt;path&gt;|&lt;file&gt; Look for php.ini file in this directory
      -n               No php.ini file will be used
      -d foo[=bar]     Define INI entry foo with value &#039;bar&#039;
      -e               Generate extended information for debugger/profiler
      -f &lt;file&gt;        Parse and execute &lt;file&gt;.
      -h               This help
      -i               PHP information
      -l               Syntax check only (lint)
      -m               Show compiled in modules
      -r &lt;code&gt;        Run PHP &lt;code&gt; without using script tags &lt;?..?&gt;
      -B &lt;begin_code&gt;  Run PHP &lt;begin_code&gt; before processing input lines
      -R &lt;code&gt;        Run PHP &lt;code&gt; for every input line
      -F &lt;file&gt;        Parse and execute &lt;file&gt; for every input line
      -E &lt;end_code&gt;    Run PHP &lt;end_code&gt; after processing all input lines
      -H               Hide any passed arguments from external tools.
      -s               Output HTML syntax highlighted source.
      -v               Version number
      -w               Output source with stripped comments and whitespace.
      -z &lt;file&gt;        Load Zend extension &lt;file&gt;.

      args...          Arguments passed to script. Use -- args when first argument
                       starts with - or script is read from stdin

      --ini            Show configuration file names

      --rf &lt;name&gt;      Show information about function &lt;name&gt;.
      --rc &lt;name&gt;      Show information about class &lt;name&gt;.
      --re &lt;name&gt;      Show information about extension &lt;name&gt;.
      --ri &lt;name&gt;      Show configuration for extension &lt;name&gt;.</code></pre>
<p>以上就是PHP的命令已经一些参数。
在<code>/sapi/cli/php_cli.c</code>文件里面有个<code>main</code>方法，可以说这个方法就是程序的入口位置了。</p>
<h4>运行的流程</h4>
<p>从代码可以看得出来，这个过程大概可以分为：</p>
<ul>
<li>参数的处理</li>
<li>cli_sapi_module的初始化</li>
<li>cli_sapi_module的启动(starup)</li>
<li>函数的执行</li>
<li>垃圾回收</li>
<li>输出信息</li>
</ul>
<h5>参数的处理</h5>
<p>PHP的命令可以接受一系列的参数，比如常见的<code>php -i</code>或者<code>php -m</code>等等，传递给全局变量<code>$argv</code>
，该数组中下标为零的成员为脚本的名称（当 PHP 代码来自标准输入获直接用 -r 参数以命令行方式运行时，该名称为&quot;-&quot;）。另外，全局变量 \$argc 存有 \$argv 数组中成员变量的个数（而非传送给脚本程序的参数的个数）。</p>
<p>对于参数的解析，可以查看下PHP的源码 <code>/sapi/cli/php_cli.c</code> 大概725行左右</p>
<pre><code class="language-cpp">    .....
    while ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0, 2))!=-1) { //对参数进行解析
        switch (c) {
            case &#039;c&#039;:
                if (cli_sapi_module.php_ini_path_override) {
                    free(cli_sapi_module.php_ini_path_override);
                }
    .....
</code></pre>
<p>完整的解析方法就是<code>php_getopt</code>，在<code>/main/getopt.c</code> 的第58行左右，在php_getopt方法里面，通过对 '-' 或者 '--' 的处理，获取具体的参数，然后返回。</p>
<pre><code class="language-cpp">PHPAPI int php_getopt(int argc, char* const *argv, const opt_struct opts[], char **optarg, int *optind, int show_err, int arg_start) </code></pre>
<h5>cli_sapi_module的初始化</h5>
<p>其实cli_sapi_module的初始化和参数的处理两个过程的先后并不是很明显，因为在参数处理之前，也有一些简单的初始化操作，比如对cli模式下的PHP配置文件的初始化，因为在使用cli命令的时候是需要一些初始化的值才行。</p>
<pre><code class="language-cpp">    cli_sapi_module.ini_defaults = sapi_cli_ini_defaults;
    cli_sapi_module.php_ini_path_override = NULL;
    cli_sapi_module.phpinfo_as_text = 1;
    sapi_startup(&amp;cli_sapi_module);</code></pre>
<p>我之所以放到后面，是因为大部分的成员变量初始化都是在参数处理之后的。</p>
<p>cli_sapi_module是一个静态全局变量，数据结构比较容易理解</p>
<pre><code class="language-cpp">static sapi_module_struct cli_sapi_module = {
    &quot;cli&quot;,                            /* name */
    &quot;Command Line Interface&quot;,     /* pretty name */

    php_cli_startup,                /* startup */
    php_module_shutdown_wrapper,    /* shutdown */

    NULL,                           /* activate */
    sapi_cli_deactivate,            /* deactivate */

    sapi_cli_ub_write,              /* unbuffered write */
    sapi_cli_flush,                 /* flush */
    NULL,                           /* get uid */
    NULL,                           /* getenv */
    .....</code></pre>
<p><strong>其实伴随着cli_sapi_module初始化，PHP也会对模块进行启动的操作</strong></p>
<pre><code class="language-cpp">static int php_cli_startup(sapi_module_struct *sapi_module) /* {{{ */
{
    if (php_module_startup(sapi_module, NULL, 0)==FAILURE) {
        return FAILURE;
    }
    return SUCCESS;
}</code></pre>
<h5>cli_sapi_module启动(startup)</h5>
<p>启动的过程比较简单明白，如果启动失败的话，那就goto错误信息处理阶段，在控制台输出错误信息</p>
<pre><code class="language-cpp">    /* startup after we get the above ini override se we get things right */
    if (cli_sapi_module.startup(&amp;cli_sapi_module)==FAILURE) {
        /* there is no way to see if we must call zend_ini_deactivate()
         * since we cannot check if EG(ini_directives) has been initialised
         * because the executor&#039;s constructor does not set initialize it.
         * Apart from that there seems no need for zend_ini_deactivate() yet.
         * So we goto out_err.*/
        exit_status = 1;
        goto out_err;
    }</code></pre>
<h5>函数的执行</h5>
<p>启动结束后，PHP会根据参数不同，调用不同的函数，比如当用户输入<code>php -i</code>的时候，那么就打印出PHP的info信息；输入<code>php -m</code>的时候打印出已经安装的模块...</p>
<pre><code class="language-cpp">while ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, 0, 2)) != -1) {
    switch (c) {
        ......              
        case &#039;i&#039;: /* php info &amp; quit */
            if (php_request_startup(TSRMLS_C)==FAILURE) { ## 请求初始化操作
                goto err;
            }
            request_started = 1;
            php_print_info(0xFFFFFFFF TSRMLS_CC);
            php_end_ob_buffers(1 TSRMLS_CC);
            exit_status=0;
            goto out;
        case &#039;m&#039;: /* list compiled in modules */
            if (php_request_startup(TSRMLS_C)==FAILURE) {
                goto err;
            }
            request_started = 1;
            php_printf(&quot;[PHP Modules]\n&quot;);
            print_modules(TSRMLS_C);
            php_printf(&quot;\n[Zend Modules]\n&quot;);
            print_extensions(TSRMLS_C);
            php_printf(&quot;\n&quot;);
            php_end_ob_buffers(1 TSRMLS_CC);
            exit_status=0;
            goto out;
        case &#039;v&#039;: /* show php version &amp; quit */
            if (php_request_startup(TSRMLS_C) == FAILURE) {
                goto err;
            }
            request_started = 1;
            php_printf(&quot;PHP %s (%s) (built: %s %s) %s\nCopyright (c) 1997-2010 The PHP Group\n%s&quot;,
            PHP_VERSION, sapi_module.name, __DATE__, __TIME__,
            ....</code></pre>
<p>此外，根据对参数的switch的case的比较，确定behavior （解释器行为）根据解释器行为，然后根据不同的behavior 做出想用的动作。</p>
<pre><code class="language-cpp">...
case PHP_MODE_LINT:
    exit_status = php_lint_script(&amp;file_handle TSRMLS_CC);
    if (exit_status==SUCCESS) {
        zend_printf(&quot;No syntax errors detected in %s\n&quot;, file_handle.filename);
    } else {
        zend_printf(&quot;Errors parsing %s\n&quot;, file_handle.filename);
    }
    break;
case PHP_MODE_STRIP:
    if (open_file_for_scanning(&amp;file_handle TSRMLS_CC)==SUCCESS) {
        zend_strip(TSRMLS_C);
    }
    goto out;
    break;
....</code></pre>
<p>伴随着不同的解释器行为，进行请求的处理</p>
<pre><code class="language-cpp">    if (php_request_startup(TSRMLS_C)==FAILURE) {
        *arg_excp = arg_free;
        fclose(file_handle.handle.fp);
        PUTS(&quot;Could not startup.\n&quot;);
        goto err;
    }</code></pre>
<h5>垃圾回收</h5>
<p>在代码的执行过程中，PHP会通过全局函数<code>CG()</code>或者函数<code>free()</code>将内存和数据进行释放，进行垃圾的回收。</p>
<h5>输出信息</h5>
<p>运行的最后应该就是对信息的输出和对SAPI的关闭。这部分其实和web请求类似，输出（错误信息）之后，PHP会通过<code>php_request_shutdown</code>，<code>php_module_shutdown</code>和<code>sapi_shutdown</code>等对相应的请求、模块和SAPI等进行关闭。<strong>但是和web请求不一样的是，每次结束cli模式的时候都是会对模块进行关闭(<code>php_module_shutdown</code>)，但是web模式缺不是，web模式在PHP启动和关闭的时候才会知心模块的初始化以及关闭，并是不每处理完一个请求就开启/关闭一次。</strong></p>
<h4>总结</h4>
<p>cli模式和web模式其实大同小异，整个PHP的生命周期基本一致：开始-&gt;模块初始化-&gt;请求初始化-&gt;执行PHP脚本-&gt;关闭请求-&gt;关闭模块。但是最大的不同是因为是否重复的启动，因为在web模式下，往往是连续的请求，也就是通常用户经常做页面的跳转，如果重复的启动也关闭模块，势必会造成性能上的差异。但是cli模式往往都是单次的请求，是不连续的。</p>
<h4>文献参考</h4>
<p><a href="http://www.php-internals.com">深入理解PHP的内核</a></p>
<p><a href="http://www.php100.com/manual/php/features.commandline.html">PHP的命令行模式</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2017-09-26 20:50:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-26 12:50:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[phpsource-cli]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,cpp,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90%e4%b9%8bcli%e6%a8%a1%e5%bc%8f%e6%89%a7%e8%a1%8c%e7%9a%84%e8%bf%87%e7%a8%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.128";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用docker搭建lnmp环境</title>
		<link>https://feilong.tech/2017/10/29/docker-lnmp/</link>
		<pubDate>Sun, 29 Oct 2017 13:07:26 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<p>docker是一个开源的容器引擎，随着“微服务架构”正在变得越来越重要，docker也变得越来越火。但是网上的文章中，要么是很有借鉴意义的干货，要么就是使用高端术语来讲述什么叫做微服务架构。今天我就通过文章来记述一下传统lnmp迁移docker的过程。</p>
<!--more-->
<!-- TOC -->
<ul>
<li><a href="#项目背景">项目背景</a></li>
<li><a href="#前期准备">前期准备</a>
<ul>
<li><a href="#安装docker">安装docker</a></li>
<li><a href="#获取php-fpm镜像">获取php-fpm镜像</a></li>
<li><a href="#同理获取nginx镜像和mysql镜像">同理获取nginx镜像和MySQL镜像</a></li>
<li><a href="#端口检查">端口检查</a></li>
<li><a href="#查看镜像">查看镜像</a></li>
<li><a href="#运行镜像">运行镜像</a></li>
</ul></li>
<li><a href="#镜像配置">镜像配置</a></li>
<li><a href="#总结">总结</a></li>
</ul>
<!-- /TOC -->
<h4>项目背景</h4>
<p>主要是以自身的博客系统作为迁移的样例，项目环境是传统的lnmp环境。</p>
<h4>前期准备</h4>
<h5>安装docker</h5>
<pre><code class="language-bash">$ sudo apt-get install docker.io -y
Reading package lists... Done
Building dependency tree
Reading state information... Done
...
Setting up docker.io (1.6.2~dfsg1-1ubuntu4~14.04.1) ...
docker start/running, process 26908</code></pre>
<h5>获取php-fpm镜像</h5>
<pre><code class="language-bash">$ sudo docker search php-fpm #查找php-fpm镜像
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
php                               While designed for web development, the PH...   2782      [OK]
richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable ...   454                  [OK]
bitnami/php-fpm                   Bitnami PHP-FPM Docker Image                    41                   [OK]
phpdockerio/php7-fpm
...

$ sudo docker pull  phpdockerio/php7-fpm:latest
latest: Pulling from phpdockerio/php7-fpm
632d62e9ff45: Pull complete
4719c3e8a982: Pull complete
2309d29c605a: Pull complete
83aeee240cf5: Pull complete
6962aaa46258: Pull complete
ceb4c4ec812a: Pull complete
821e3516e882: Pull complete
ef64564fd4f8: Pull complete
4ce8803d2ea8: Pull complete
ba9d4bc26f3e: Pull complete
20fd756c6431: Pull complete
f7729a02ff06: Pull complete
Digest: sha256:a2a240a31c8afdf723a8554b6c46691069a80ac622cbb5ab77fcd7b5762ddc58
Status: Downloaded newer image for phpdockerio/php7-fpm:latest</code></pre>
<h5>同理获取nginx镜像和MySQL镜像</h5>
<pre><code class="language-bash">$ sudo docker pull nginx:latest
$ sudo docker pull mysql:latest</code></pre>
<h5>端口检查</h5>
<pre><code class="language-bash">$ netstat -anp | grep &quot;80\|3306\|9000&quot; ##查看80 3306 和 9000端口占用情况，如果被占用，停掉响应服务</code></pre>
<h5>查看镜像</h5>
<pre><code class="language-bash">$ sudo docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
mysql                  latest              3ad8e8e4bdb1        14 hours ago        408.2 MB
phpdockerio/php7-fpm   latest              f7729a02ff06        5 days ago          166.2 MB
nginx                  latest              2ecc072be0ec        7 days ago          108.3 MB</code></pre>
<h5>运行镜像</h5>
<p>生成MySQL容器</p>
<pre><code class="language-bash">$ sudo docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 --name docker_mysql_00 mysql:latest</code></pre>
<p>生成nginx容器，外部80端口映射到内部80端口，关联容器内外文件夹</p>
<pre><code class="language-bash">$ sudo docker run -d -p 80:80 -v /usr/share/nginx:/usr/share/nginx -v /etc/nginx:/etc/nginx --name docker_nginx_00 nginx:lastest</code></pre>
<p>生成php-fpm容器, 同理</p>
<pre><code class="language-bash">$ sudo docker run -d -p 9000:9000 -v /usr/share/nginx:/usr/share/nginx --name docker_php_fpm_00 phpdockerio/php7-fpm</code></pre>
<h4>镜像配置</h4>
<p>查看容器的ip</p>
<pre><code class="language-bash">$ sudo docker inspect docker_php_fpm_00 docker_nginx_00 docker_mysql_00| grep &quot;IPAddress&quot;
&quot;IPAddress&quot;: &quot;172.17.0.7&quot;,
&quot;IPAddress&quot;: &quot;172.17.0.3&quot;,
&quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</code></pre>
<p>配置nginx和php-fpm</p>
<pre><code class="language-bash">$ sudo docker exec -ti docker_nginx_00 /bin/bash #进入docker_nginx_00容器
vim /etc/nginx/sites-enabled/blog.conf ##像正常一样配置nginx，
</code></pre>
<pre><code class="language-nginx">server {
        listen 80;
        root /usr/share/nginx/wordpress;
        index index.php index.html index.htm index.nginx-debian.html;

        server_name blog.feilong.tech www.feilong.tech feilong.tech;

        location ~ \.php$ {
                fastcgi_pass 172.17.0.7:9000; ##php-fpm容器的IP
                fastcgi_index  index.php;
                set $path_info &quot;&quot;;
                set $real_script_name $fastcgi_script_name;
                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                include        fastcgi_params;

        }
}</code></pre>
<p>同理配置好MySQL的IP地址，容器可能没有安装vim，所以编辑之前需要提前<code>apt-get update</code>。然后进行安装。</p>
<h4>总结</h4>
<p>安装过程比较复杂，尤其是需要配置IP。其实整个过程并不是符合docker的期望，理想情况是将lnmp放到一个容器中，即直接使用<code>sudo docker search lnmp</code>查找镜像，进行意见安装。前端使用nginx，通过\$host配置转发到端口，然后通过docker端口的映射到达容器内部。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2017-10-29 21:07:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-29 13:07:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-lnmp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e5%ae%b9%e5%99%a8"><![CDATA[容器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,nginx,clike]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bd%bf%e7%94%a8docker%e6%90%ad%e5%bb%balnmp%e7%8e%af%e5%a2%83]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"66.249.71.144";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用docker搭建lnmp (二)</title>
		<link>https://feilong.tech/2017/11/01/docker-lnmp-2/</link>
		<pubDate>Wed, 01 Nov 2017 07:45:31 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[<p>docker 名为容器。何为容器，也就是所谓的瓶子，罐子。用可以容纳东西的容器，不同容器之间互不影响。比如，一个瓶子装酒精，一个瓶子装水，非人为状态下，两个瓶子是没有关联的。</p>
<p>同样，docker也就是这个作用，每个docker可以作为叫做一个“瓶子”，每个&quot;瓶子&quot;可以当做PHP的运行环境，可以当做Java的运行环境。环境完全独立。外部的环境(内存，操作系统，CPU等)相当于柜子，承载着这些&quot;瓶子&quot;。</p>
<!--more-->
<p><img src="/uploads/2017/11/shiyi.png" alt="" /></p>
<p>上一篇博客记录的是比较简单的docker配置lnmp的过程。但是并不是一个正确的例子，虽然我没有线上使用docker的经验，但是以我来看，可以使用nginx作为前端机，然后配置外部机器的某个端口（如8080）映射到docker内部的某个端口（80），然后域名的请求转发到机器的8080端口，自然就到了docker内部了。</p>
<p><img src="/uploads/2017/11/tuopu.png" alt="" /></p>
<!-- TOC -->
<ul>
<li><a href="#获取lnmp镜像">获取lnmp镜像</a></li>
<li><a href="#运行一个docker">运行一个docker</a></li>
<li><a href="#进入该容器里面">进入该容器里面</a></li>
<li><a href="#配置nginx">配置nginx</a></li>
<li><a href="#配置mysql">配置MySQL</a></li>
<li><a href="#找到wordpress项目然后更改配置文件改成mysql的账号密码和数据库-略">找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）</a></li>
<li><a href="#前端机nginx绑定域名并且将请求转发到8080端口">前端机nginx绑定域名，并且将请求转发到8080端口</a></li>
<li><a href="#访问域名测试是否正常">访问域名，测试是否正常</a></li>
<li><a href="#总结">总结</a></li>
</ul>
<!-- /TOC -->
<h4>获取lnmp镜像</h4>
<pre><code class="language-bash">$ docker search lnmp

NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
imagine10255/centos6-lnmp-php56   centos6-lnmp-php56                              31                   [OK]
twang2218/lnmp-nginx              这是 LNMP 示例中的 nginx 镜像                           9                    [OK]
domainer/centos-lnmp                                                              5                    [OK]
maxwhale/ubuntu14-lnmp1.2         Ubuntu14.04 lnmp1.2                             4                    [OK]
dzer/lnmp                         lnmp环境                                          4
maxwhale/lnmp-docker              LNMP Docker                                     4                    [OK]
winstonpro/lnmp                   based on ubuntu 14.04                           3
...

$ docker pull domainer/centos-lnmp
latest: Pulling from domainer/centos-lnmp
latest: Pulling from imagine10255/centos6-lnmp-php56
f402e43879a8: Pull complete
e76184b3b2ef: Extracting [==========&gt;                                        ] 7.864 MB/36.8 MB
c92be21ea534: Download complete
ae5dfaaf3d26: Downloading [====================================&gt;              ]  6.53 MB/8.989 MB
....
Digest: sha256:a555d86ace933743c1c1f0373f16931a58dd737f889a04cfd8027e3eeb0c3c48
Status: Downloaded newer image for domainer/centos-lnmp:latest</code></pre>
<h4>运行一个docker</h4>
<pre><code class="language-bash">$ docker run -d -v /etc/docker_nginx:/etc/nginx -v /tmp:/tmp -v /usr/share/docker_nginx:/usr/share/nginx -p 8080:80 --name my_blog domainer/centos-lnmp #外部端口8080映射到内部80端口 
$ docker ps
CONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                          NAMES
b9c310b6bf8a        domainer/centos-lnmp   &quot;supervisord -n&quot;    5 seconds ago       Up 4 seconds        22/tcp, 0.0.0.0:8080-&gt;80/tcp   my_blog</code></pre>
<h4>进入该容器里面</h4>
<pre><code class="language-bash">$ docker exec -ti my_blog /bin/bash ## 进入容器
[root@3f2505bc3bd5 nginx]# yum update ## 更新源，然后启动各个服务
[root@3f2505bc3bd5 nginx]# /etc/init.d/nginx start
Starting nginx:                                            [  OK  ]
[root@3f2505bc3bd5 nginx]# /etc/init.d/mysqld start
Starting mysqld:                                           [  OK  ]
[root@3f2505bc3bd5 nginx]# /etc/init.d/php-fpm start
Starting php-fpm:                                          [  OK  ]</code></pre>
<h4>配置nginx</h4>
<pre><code class="language-bash">$ docker exec -ti 3f2505bc3bd5 /bin/bash
[root@3f2505bc3bd5 nginx]# cd /etc/nginx/conf.d/
[root@3f2505bc3bd5 nginx]# vim blog.conf</code></pre>
<pre><code class="language-nginx">server {
        listen 80;
        root /usr/share/nginx/wordpress;
        index index.php index.html index.htm index.nginx-debian.html;

        location ~ \.php$ {
                fastcgi_pass 127.0.0.1:9000;
                fastcgi_index  index.php;
                set $path_info &quot;&quot;;
                set $real_script_name $fastcgi_script_name;
                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_na
me;
                include        fastcgi_params;

        }
}</code></pre>
<h4>配置MySQL</h4>
<p>先将外部的MySQL导出来，放到 /tmp目录下，因为之前/tmp 映射到了容器内部</p>
<pre><code class="language-mysql">mysqldump -hlocalhost -uroot -pYOUR_PASSWORD wordpress &gt; /tmp/wordpress.sql</code></pre>
<p>登录容器内部，导入MySQL</p>
<pre><code class="language-bash">$ docker exec -ti 3f2505bc3bd5 /bin/bash
$ mysql -uroot -pSlightech602 &lt; wordpress.sql</code></pre>
<p>如果出现<code>Unknown collation: &#039;utf8mb4_unicode_520_ci&#039;</code> 只需要把<code>utf8mb4_unicode_520_ci</code>替换成<code>utf8_general_ci</code>
如果出现<code>Unknown collation: &#039;utf8mb4&#039;</code> 只需要把<code>utf8mb4</code>替换成<code>utf8</code></p>
<h4>找到WordPress项目，然后更改配置文件，改成mysql的账号密码和数据库 （略）</h4>
<h4>前端机nginx绑定域名，并且将请求转发到8080端口</h4>
<pre><code class="language-nginx">upstream docker0 {
    server 127.0.0.1:8080;
}

server {
    listen 80;
    server_name test.feilong.tech;
    root /usr/share/docker_nginx/wordpress;
    index index.php index.html index.htm index.nginx-debian.html;

    location / {
        proxy_pass http://docker0;
    }
}</code></pre>
<h4>访问域名，测试是否正常</h4>
<p>test.feilong.tech</p>
<h4>总结</h4>
<p>可能实际线上的情景非常复杂，因为很多大厂会有几百个docker实例，以及完善的监控机制，以上也是一个比较简单的demo罢了。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date><![CDATA[2017-11-01 15:45:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-01 07:45:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-lnmp-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e5%ae%b9%e5%99%a8"><![CDATA[容器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,nginx,clike]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[183]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.139.118";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP设计模式--工厂模式</title>
		<link>https://feilong.tech/2018/01/02/php-factory/</link>
		<pubDate>Tue, 02 Jan 2018 14:01:52 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<p>工厂模式就是创建“某种东西”。对于工厂模式，要创建的是一个“产品”，这个产品与创建它的类之间不存在绑定。实际上，为了保持这种松耦合，客户会通过一个工厂发出请求，再由工厂创建请求的产品。</p>
<h2>何时使用工厂方法</h2>
<p>如果一个类要创建的对象数目固定，而且已知，name构建这个类时，就可以采用一种可以预测的方式创建制定数目的对象。例如，如果你要开发一个世界的地图应用，由不同的对象表示七大洲，可以肯定的是，这些对象不会改变。另一方面，如果你要为不同种类的昆虫创建一个网站，肯定会不断发现新的昆虫，或者有些昆虫会有改变，还有可能某些品种会在短时间内灭绝。要处理这种变化，程序必须充分的灵活性。这种项目就可以考虑使用工厂模式。</p>
<p><img src="/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="" /></p>
<h2>优势</h2>
<p>我感觉工厂模式的最大优势在于封装，把对象相互隔离，没有影响。</p>
<h2>最简单的例子</h2>
<h3>工厂</h3>
<p>第一步是建立工厂。我们使用一个抽象类Creator作为接口。</p>
<pre><code class="language-php">&lt;?php
// Creator
abstract class Creator {

    protected abstract function factoryMethod();

    public function startFactory() {
        $mfg  = $this-&gt;factoryMethod();
        return $mfg;
    }
}</code></pre>
<p>第二步是集成实现这个接口。我使用了两个子类来实现接口的方法。</p>
<pre><code class="language-php">&lt;?php
//TextFactory.php
include_once &#039;Creator.php&#039;;
include_once &#039;TextProduct.php&#039;;

class TextFactory extends Creator {

    protected function factoryMethod() {
        $product = new TextProduct();
        return $product-&gt;getProperties();
    }

}</code></pre>
<pre><code class="language-php">&lt;?php
// GraphicFactory
include_once &#039;Creator.php&#039;;
include_once &#039;GraphicProduct.php&#039;;

class GraphicFactory extends Creator {

    protected function factoryMethod() {
        $product = new GraphicProduct();
        return $product-&gt;getProperties();
    }
}</code></pre>
<h3>产品</h3>
<p>工厂模式的第二个接口就是产品，其实“产品”这个含义是相对于“工厂”的概念，并不一定是实实在在的产品，比如，我们可以把人当初产品等等。</p>
<pre><code class="language-php">&lt;?php
interface Product {
    public function getProperties();
}</code></pre>
<p>同样的，我们再使用两个子类分别继承实现Product的属性。这里有两个“产品”，分别是 图像 和 文字，但是两个“产品”的属性是不一样的。</p>
<pre><code class="language-php">&lt;?php
//GraphicProduct
include_once &#039;Product.php&#039;;
class GraphicProduct implements Product {

    private $mfgProduct;

    public function getProperties() {
        $this-&gt;mfgProduct = &quot;This is a graphic.&quot;;
        return $this-&gt;mfgProduct;
    }

}</code></pre>
<pre><code class="language-php">&lt;?php
// TextProduct
include_once &#039;Product.php&#039;;
class TextProduct implements Product {

    private $mfgProduct;

    public function getProperties() {
        $this-&gt;mfgProduct = &quot;This is a text .&quot;;
        return $this-&gt;mfgProduct;
    }
}</code></pre>
<h3>客户</h3>
<p>客户就是指代码运行结果的显示终端，也就是所说的客户端了</p>
<pre><code class="language-php">&lt;?php
include_once &#039;GraphicFactory.php&#039;;
include_once &#039;TextFactory.php&#039;;

class Client {
    private $someGraphicObject;
    private $someTextObject;

    public function __construct() {
        $this-&gt;someGraphicObject = new GraphicFactory();
        echo $this-&gt;someGraphicObject-&gt;startFactory() . &quot;\n&quot;;
        $this-&gt;someTextProduct = new TextFactory();
        echo $this-&gt;someTextProduct-&gt;startFactory() . &quot;\n&quot;;
    }

}
$worker = new Client();</code></pre>
<h3>代码运行</h3>
<pre><code class="language-shell">feilongdeMBP:Factory feilong$ php Client.php
This is a graphic.
This is a text</code></pre>
<h2>参考资料</h2>
<ul>
<li>Learning PHP设计模式</li>
</ul>
<h2>附件</h2>
<ul>
<li><a href="/uploads/2018/01/Factory.zip">PHP工厂模式demo</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2018-01-02 22:01:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-02 14:01:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-factory]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="php-design"><![CDATA[PHP设计模式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f-%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.143.124";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP7内存管理之引用计数</title>
		<link>https://feilong.tech/2018/01/17/php7-refcount/</link>
		<pubDate>Wed, 17 Jan 2018 15:38:53 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=199</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>C/C++的内存管理</h4>
<p>C/C++想要在堆上面分配内存，需要手动进行内存的分配和释放，变量管理非常的麻烦和繁琐，稍有不慎，就可能会造成内存上的错误使用。现在的一些高级语言，都普遍实行自动GC机制。</p>
<h4>自己的意淫</h4>
<p>我们自己先思考下实行自动GC的方法，当我们定义一个变量的时候，给变量分配一块内存，用于保存zval和value的值，等到函数返回的时候，再讲内存回收。如果将变量赋值给其他变量的时候，再进行内存的复制，变量之间相互独立，互不影响。</p>
<p><img src="/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1.png" alt="" /></p>
<h4>PHP的内存管理</h4>
<p>PHP的内存管理肯定不会像是我们想象的那么简单，如果那么简单，那该要浪费多少内存。PHP的内存管理是采用：<strong>引用计数+写时复制</strong> 的方法。</p>
<h4>引用计数</h4>
<p>引用计数是指会有多少个zval指向同一个zend_value。当把变量赋值给一个新的变量的时候，引用计数就会+1。PHP7是将引用计数保存到了zval的结构中。</p>
<pre><code class="language-cpp">//php7
typedef union _zend_value {
    zend_long         lval;             /* long value */
    double            dval;             /* double value */
    zend_refcounted  *counted;  // 引用计数
    zend_string      *str;
    zend_array       *arr;
    zend_object      *obj;
    zend_resource    *res;
    zend_reference   *ref;
    zend_ast_ref     *ast;
    zval             *zv;
    void             *ptr;
    zend_class_entry *ce;
    zend_function    *func;
    struct {
        uint32_t w1;
        uint32_t w2;
    } ww;
} zend_value;</code></pre>
<p>PHP5是把引用计数放到了zend_struct里面</p>
<pre><code class="language-cpp">struct _zval_struct {
    /* Variable information */
    zvalue_value value;     /* value */
    zend_uint refcount__gc; //引用计数
    zend_uchar type;    /* active type */
    zend_uchar is_ref__gc;
};</code></pre>
<p>PHP5不是这篇文章的重点，暂且不说。</p>
<p>下面我们看下PHP7 <code>zend_refcounted</code>具体的结构</p>
<pre><code class="language-cpp">typedef struct _zend_refcounted_h {
    uint32_t         refcount;          /* reference counter 32-bit */
    union {
        struct {
            ZEND_ENDIAN_LOHI_3(
                zend_uchar    type,
                zend_uchar    flags,    /* used for strings &amp; objects */
                uint16_t      gc_info)  /* keeps GC root number (or 0) and color */
        } v;
        uint32_t type_info;
    } u;
} zend_refcounted_h;

struct _zend_refcounted {
    zend_refcounted_h gc;
};</code></pre>
<p>很明显，<code>refcount</code>字段使用了进行计数操作的。
举个例子来看看：</p>
<pre><code class="language-php">&lt;?php
$a = array();
echo xdebug_debug_zval(&#039;a&#039;);
$b = $a;
echo xdebug_debug_zval(&#039;a&#039;);
$c = $b;
echo xdebug_debug_zval(&#039;a&#039;);
unset($c);
echo xdebug_debug_zval(&#039;a&#039;);
?&gt;</code></pre>
<p>运行结果如下：
a: (refcount=1, is_ref=0)=array ()
a: (refcount=2, is_ref=0)=array ()
a: (refcount=3, is_ref=0)=array ()
a: (refcount=2, is_ref=0)=array ()</p>
<p>就像代码运行结果一样，首先定义了一个变量a，引用给数组分配了一块空间，引用计数为1，然后把a赋值给变量b，引用计数+1，然后赋值给变量c，继续+1，然后把变量c释放，引用计数-1。</p>
<p>但是，并不是所有的变量都会使用引用计数。<strong>比如整形，浮点型，布尔型，NULL，他们的值是直接保存在zval中，所以他们的引用计数是0。这个也是PHP5和PHP7的一个不同点。</strong></p>
<p>举例说明：</p>
<pre><code class="language-php">&lt;?php
$a = 123;
echo xdebug_debug_zval(&#039;a&#039;);
$b = $a;
echo xdebug_debug_zval(&#039;a&#039;);
?&gt;</code></pre>
<p>PHP5
a: (refcount=1, is_ref=0)=123
a: (refcount=2, is_ref=0)=123</p>
<p>PHP7
a: (refcount=0, is_ref=0)=123
a: (refcount=0, is_ref=0)=123</p>
<h4>特殊情况</h4>
<p>在PHP7中还有两种特殊的情况</p>
<p>举例说明：</p>
<pre><code class="language-php">&lt;?php
$a = &quot;hi&quot;;
$b = $a;
$c = $a;
xdebug_debug_zval(&#039;a&#039;);
?&gt;</code></pre>
<p>PHP7
a: (refcount=0, is_ref=0)='hi'</p>
<pre><code class="language-php">&lt;?php
$a = &quot;hi&quot;.time();
$b = $a;
$c = $a;
xdebug_debug_zval(&#039;a&#039;);
?&gt;</code></pre>
<p>PHP7
a: (refcount=3, is_ref=0)='hi1516202718'</p>
<p>wtf，为什么这两个是不一样的？这就是另外的特殊情况了。</p>
<ul>
<li>在PHP中，函数名、类名、变量名、静态字符串等这种类型，比如第一个例子<code>$a = &quot;hi&quot;</code>，后面的字符串是唯一不变的，这等同于C语言中的<code>char *a = &quot;hi&quot;</code>，这些字符串是整个请求周期，请求结束后，同意销毁，自然不用引用计数来进行管理。</li>
<li>不可变数组，这是opcache的一种优化类型，这里不做详细说明。</li>
</ul>
<h4>总结</h4>
<p>引用计数算是PHP7和PHP5的一个重要的变更，这个也是内存的一个优化的地方。
在PHP5中，引用计数是在zval中，而不是在zend_value中，这样一来，导致变量复制的时候要复制两个结构(zval和zend_value)，PHP7将引用计数放到zend_value中，这样就可以进行公用，设计也更加合理。</p>
<h4>参考文献</h4>
<ul>
<li>《PHP7内核剖析》</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2018-01-17 23:38:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-17 15:38:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php7-refcount]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[cpp,c,php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php7%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e4%b9%8b%e5%bc%95%e7%94%a8%e8%ae%a1%e6%95%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.138";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP7内存管理之写时复制</title>
		<link>https://feilong.tech/2018/01/21/php7-copy-on-write/</link>
		<pubDate>Sun, 21 Jan 2018 13:23:59 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=201</guid>
		<description></description>
		<content:encoded><![CDATA[<p>其实PHP的内存管理是包含<a href="http://feilong.tech/?p=199">引用计数</a>和写时复制两部分，这篇文章主要是介绍写时复制。</p>
<h4>简要介绍</h4>
<p>其实写时复制在计算机中有很多应用，它只在必要的时候才会进行深拷贝，也就是把保存的值连同内存一块拷贝一份，可以很好的节省效率。比如，Linux在fork子进程的时候，不会立刻复制父进程的地址空间，而是和父进程共享一个地址空间，只有在必要写入的时候，才会复制地址空间，和父进程进行分离。简单来讲，资源的复制是只有需要写入的时候，再回进行，再次之前，都是以只读的方式进行共享。</p>
<h4>PHP的写时复制</h4>
<p>PHP的写时复制原理是一样的。当变量要修改value的结构的时候，这个时候，就会对之前共享的内存资源进行复制一份进行修改，同事断开原来的指向，指向复制后的内存地址。
举个例子：</p>
<pre><code class="language-php">&lt;?php
$a = array(1, 2);
$b = $a;
$c = $b;
echo xdebug_debug_zval(&#039;a&#039;);
?&gt;</code></pre>
<p>PHP7
a: (refcount=3, is_ref=0)=array (0 =&gt; (refcount=0, is_ref=0)=1, 1 =&gt; (refcount=0, is_ref=0)=2)</p>
<pre><code class="language-php">&lt;?php
$a = array(1, 2);
$b = $a;
$c = $b;
//进行分离
$c[] = 3;
echo xdebug_debug_zval(&#039;a&#039;);
?&gt;</code></pre>
<p>PHP7
a: (refcount=2, is_ref=0)=array (0 =&gt; (refcount=0, is_ref=0)=1, 1 =&gt; (refcount=0, is_ref=0)=2)</p>
<p>运行结果很明显，当变量c新插入了一个元素，对那么就没有在继续引用变量a，而是独立复制了一份。</p>
<p><img src="/uploads/2018/01/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png" alt="" /></p>
<p>然而并不是所有的类型都是支持写时复制，比如对象、资源就无法进行复制，也就是无法进行分离，如果多个变量指向同一个对象，当其中一个变量修改对象的时候，其修改将会反应到所有对象上面。事实上只有string和array两种支持分离。
举个例子：</p>
<pre><code class="language-php">&lt;?php
class test {
        public $c = 123;
}

$a = new test();
$b = $a;
$c = $b;
echo xdebug_debug_zval(&#039;a&#039;);
$c-&gt;c = 456;
echo $a-&gt;c;
echo &quot;\n&quot;;
echo xdebug_debug_zval(&#039;a&#039;);
?&gt;</code></pre>
<p>PHP7
a: (refcount=3, is_ref=0)=class test { public $c = (refcount=0, is_ref=0)=123 }
456
a: (refcount=3, is_ref=0)=class test { public $c = (refcount=0, is_ref=0)=456 }</p>
<p>同样，变量a实例化了一个新的对象，然后依次进行赋值给其他变量，使用xdebug_debug_zval的时候，打印出来了变量a的3次引用计数，然后对变量c进行赋值，咦？居然发现变量a的引用计数没有变化，所以object的类型是不支持写时复制的。</p>
<table>
<thead>
<tr>
<th style="text-align: left;">支持复制的value类型：</th>
<th style="text-align: left;">type</th>
<th>copyable</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">simple types</td>
<td style="text-align: left;">N</td>
</tr>
<tr>
<td style="text-align: left;">string</td>
<td style="text-align: left;">Y</td>
</tr>
<tr>
<td style="text-align: left;">interned string</td>
<td style="text-align: left;">N</td>
</tr>
<tr>
<td style="text-align: left;">array</td>
<td style="text-align: left;">Y</td>
</tr>
<tr>
<td style="text-align: left;">immutable array</td>
<td style="text-align: left;">N</td>
</tr>
<tr>
<td style="text-align: left;">object</td>
<td style="text-align: left;">N</td>
</tr>
<tr>
<td style="text-align: left;">resource</td>
<td style="text-align: left;">N</td>
</tr>
<tr>
<td style="text-align: left;">reference</td>
<td style="text-align: left;">N</td>
</tr>
</tbody>
</table>
<h3>参考文献</h3>
<p>《PHP7内核剖析》</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2018-01-21 21:23:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-21 13:23:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php7-copy-on-write]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="%e5%86%85%e5%ad%98"><![CDATA[内存]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php7%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e4%b9%8b%e5%86%99%e6%97%b6%e5%a4%8d%e5%88%b6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.140";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>基于以太坊创建私有链进行挖矿、交易</title>
		<link>https://feilong.tech/2018/01/23/eth/</link>
		<pubDate>Tue, 23 Jan 2018 06:18:36 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[<p>要说2018年什么最火，无疑就是区块链。比特币的疯狂上涨，每个比特币超过了1万美金。随之而来的就是区块链的技术。
以太坊（Ethereum）并不是一个机构，而是一款能够在区块链上实现智能合约、开源的底层系统。本文主要是通过以太坊，创建私有链，实现挖矿和交易。</p>
<h4>安装golang</h4>
<h5>克隆项目</h5>
<pre><code class="language-bash">$ git clone https://github.com/golang/go.git</code></pre>
<h5>安装go 1.4</h5>
<p>golang 是自编译，所以如果安装版本 &gt;=1.5 需要先编译1.4版本，然后再安装其他版本</p>
<pre><code class="language-bash">$ cp -r go/ $HOME/go1.4 #复制一份文件夹，用于编译1.4版本
$ cd $HOME/go1.4
$ git checkout release-branch.go1.4
$ cd src
$ ./make.bash # 进行编译</code></pre>
<p>编译之后，开始安装go 1.9版本</p>
<pre><code class="language-bash">$ cd $HOME/install/go
$ git checkout release-branch.go1.9
$ cd src/
$ ./all.bash #安装1.9版本
##### Building Go bootstrap tool.
cmd/dist

##### Building Go toolchain using /home/test/go1.4.
bootstrap/cmd/internal/dwarf
bootstrap/cmd/internal/objabi
bootstrap/cmd/internal/src
bootstrap/cmd/internal/sys
bootstrap/cmd/internal/obj
bootstrap/cmd/internal/obj/arm
bootstrap/cmd/internal/obj/arm64
bootstrap/cmd/internal/obj/mips
bootstrap/cmd/internal/obj/ppc64
bootstrap/cmd/internal/obj/s390x
... ##各种编译安装信息
##### API check
Go version is &quot;go1.9.2&quot;, ignoring -next /home/test/install/go/api/next.txt

ALL TESTS PASSED

---
Installed Go for linux/amd64 in /home/test/install/go
Installed commands in /home/test/install/go/bin
*** You need to add /home/test/install/go/bin to your PATH.</code></pre>
<p>配置环境变量</p>
<pre><code class="language-bash">$ export PATH=$PATH:/home/test/install/go/bin</code></pre>
<p>查看安装版本</p>
<pre><code class="language-bash">$ go version
go version go1.9.2 linux/amd64</code></pre>
<h5>克隆go-ethereum</h5>
<pre><code class="language-bash">$ git clone https://github.com/ethereum/go-ethereum.git</code></pre>
<h5>安装以太坊</h5>
<pre><code class="language-bash">$ make geth

build/env.sh go run build/ci.go install ./cmd/geth
>&gt;&gt; /home/test/install/go/bin/go install -ldflags -X main.gitCommit=5d4267911a7791bfa60f275a97347372fbf0ce99 -v ./cmd/geth
github.com/ethereum/go-ethereum/common/hexutil
github.com/ethereum/go-ethereum/crypto/sha3
github.com/ethereum/go-ethereum/common
...
github.com/ethereum/go-ethereum/vendor/github.com/gizak/termui
github.com/ethereum/go-ethereum/vendor/github.com/naoina/go-stringutil
github.com/ethereum/go-ethereum/vendor/github.com/naoina/toml/ast
github.com/ethereum/go-ethereum/vendor/github.com/naoina/toml
github.com/ethereum/go-ethereum/cmd/geth
Done building.
Run &quot;/home/test/install/go-ethereum/build/bin/geth&quot; to launch geth.</code></pre>
<h5>创建连接</h5>
<pre><code class="language-bash">$ ln -s  /home/test/install/go-ethereum/build/bin/geth /usr/local/bin/geth</code></pre>
<h4>创建私有链</h4>
<h5>创建创世区块</h5>
<pre><code class="language-json">{
    &quot;config&quot;: {
        &quot;chainId&quot;: 15,
        &quot;homesteadBlock&quot;: 0,
        &quot;eip155Block&quot;: 0,
        &quot;eip158Block&quot;: 0
    },
    &quot;coinbase&quot; : &quot;0x0000000000000000000000000000000000000000&quot;,
    &quot;difficulty&quot; : &quot;0x40000&quot;,
    &quot;extraData&quot; : &quot;&quot;,
    &quot;gasLimit&quot; : &quot;0xffffffff&quot;,
    &quot;nonce&quot; : &quot;0x0000000000000042&quot;,
    &quot;mixhash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;parentHash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;timestamp&quot; : &quot;0x00&quot;,
    &quot;alloc&quot;: { }
}</code></pre>
<pre><code class="language-bash">$ mkdir my_chain
$ cd my_chain
$ vim genesis.json # json文件的内容是上面的json字符串</code></pre>
<h5>创建创世节点，并且初始化数据</h5>
<pre><code class="language-bash">$ geth --datadir data00 init genesis.json</code></pre>
<p><code>data00</code>就是用来保存创世节点的数据</p>
<h5>启动节点，指定networkid</h5>
<pre><code class="language-bash">$ geth --datadir ./data00 --networkid 5201314 console #使用console 支持命令行模式</code></pre>
<p><img src="/uploads/2018/01/00.png" alt="" /></p>
<h5>创建节点的账号</h5>
<pre><code class="language-bash"># 在console命令模式下
> personal.newAccount(&quot;123&quot;)
&quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;</code></pre>
<h5>开始进行挖矿</h5>
<pre><code class="language-bash">> miner.start()
INFO [01-23|00:14:37] Updated mining threads                   threads=0
INFO [01-23|00:14:37] Transaction pool price threshold updated price=18000000000
INFO [01-23|00:14:37] Etherbase automatically configured       address=0x9FF8676095e5999bf82EafEaB98192E33ad74364
null
> INFO [01-23|00:14:37] Starting mining operation
INFO [01-23|00:14:37] Commit new mining work                   number=1 txs=0 uncles=0 elapsed=146.511µs
INFO [01-23|00:14:43] Generating DAG in progress               epoch=0 percentage=0 elapsed=4.529s
INFO [01-23|00:14:48] Generating DAG in progress               epoch=0 percentage=1 elapsed=8.913s
INFO [01-23|00:14:52] Generating DAG in progress               epoch=0 percentage=2 elapsed=13.169s
INFO [01-23|00:14:56] Generating DAG in progress               epoch=0 percentage=3 elapsed=17.298s
INFO [01-23|00:15:01] Generating DAG in progress               epoch=0 percentage=4 elapsed=21.964s
...</code></pre>
<p>等到percentage加载到100的时候就开始进行挖矿</p>
<p><img src="/uploads/2018/01/%E6%8C%96%E7%9F%BF.png" alt="" /></p>
<h5>结束挖矿</h5>
<pre><code class="language-bash">> miner.stop()</code></pre>
<h5>查看挖矿的金额</h5>
<pre><code class="language-bash">> eth.getBalance(eth.accounts[0])
5000000000000000000</code></pre>
<h5>新开一个窗口，创建第二个节点</h5>
<pre><code class="language-bash">$ geth --datadir data01 init genesis.json</code></pre>
<h5>运行第二个节点</h5>
<p>networkid需要和第一个账号相同</p>
<pre><code class="language-bash">$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console #使用命令行模式</code></pre>
<h5>创建账号</h5>
<pre><code class="language-bash">> personal.newAccount(&quot;456&quot;)
&quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;</code></pre>
<h5>开始进行挖矿</h5>
<pre><code class="language-bash">> miner.start()</code></pre>
<h5>结束挖矿</h5>
<pre><code class="language-bash">> miner.stop()</code></pre>
<h4>用户交易</h4>
<h5>回到第一个节点</h5>
<p>查看节点信息</p>
<pre><code class="language-bash">> admin.nodeInfo.enode
&quot;enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303&quot;</code></pre>
<h5>切换到第二个节点窗口</h5>
<p>建立联系, 添加第一个节点enode</p>
<pre><code class="language-bash"> admin.addPeer(&quot;enode://49e538b3f090a04e97f56a7fd1e6223c29599535d5e93010349147dee334b690744504f057ae11adb2804baada222375a56398ef42be536c595c6197a4a7cb2d@[::]:30303&quot;)
true</code></pre>
<h5>切换到第一个控制台</h5>
<p>查看建立的联系数量</p>
<pre><code class="language-bash">> net.peerCount
1</code></pre>
<p>peerCount=1，说明已经建立了联系</p>
<h5>开始进行交易</h5>
<p>切换到一个控制台，交易之前，需要先解锁账号才行</p>
<pre><code class="language-bash">> personal.unlockAccount(eth.accounts[0], &quot;123&quot;)
true</code></pre>
<p>返回true说明已经解锁成功</p>
<pre><code class="language-bash">> eth.sendTransaction({from: &quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;, to: &quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;, value: web3.toWei(1, &quot;ether&quot;)})</code></pre>
<p>to和form分别是接受和发送的账号，也就是personal.listAccounts里面的账号</p>
<p>查看确认下交易信息</p>
<pre><code class="language-bash">> eth.pendingTransactions
[{
    blockHash: null,
    blockNumber: null,
    from: &quot;0x9ff8676095e5999bf82eafeab98192e33ad74364&quot;,
    gas: 90000,
    gasPrice: 18000000000,
    hash: &quot;0x6146513432b27b6a27f54b64fcf0a30dc90290452dfd25e282a05aaf423f4afa&quot;,
    input: &quot;0x&quot;,
    nonce: 0,
    r: &quot;0x77644ff132f800da9b2d8133c796916f956061a491b55e3cbbd0d710f5157199&quot;,
    s: &quot;0x9dbe268e152e5fc15421efa5b00e5d4a601ef4cb2655b577901fd96c5d3c959&quot;,
    to: &quot;0xfc350d17b0fb92eeb0a3bab80116c27d9f7e40d1&quot;,
    transactionIndex: 0,
    v: &quot;0x42&quot;,
    value: 1000000000000000000
}]</code></pre>
<p>开始进行挖矿，使交易生效</p>
<pre><code class="language-bash">> miner.start()</code></pre>
<h5>确认交易是否成功</h5>
<p>在一个和第二个控制台分别运行命令，确认是否交易成功</p>
<pre><code class="language-bash">> eth.getBalance(eth.accounts[0])</code></pre>
<h4>总结</h4>
<h5>挖矿对电脑要求比较高，我使用阿里云的服务器，1核1G基本的配置，两个节点同时挖矿，经常出现CPU吃满的情况。</h5>
<p><img src="/uploads/2018/01/CPU%E5%90%83%E6%BB%A1.png" alt="" /></p>
<p><img src="/uploads/2018/01/io%E8%AF%BB%E5%86%99.png" alt="" /></p>
<h5>还有一个比较奇怪的，当发起交易的时候，一定要进行挖矿操作，才能使交易生效。</h5>
<h4>参考文献</h4>
<p><a href="http://www.cnblogs.com/zl03jsj/category/997608.html">blockchain随笔</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2018-01-23 14:18:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-23 06:18:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[eth]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blockchain"><![CDATA[blockchain]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="etc"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e6%af%94%e7%89%b9%e5%b8%81"><![CDATA[比特币]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
			<wp:meta_value><![CDATA[比特币 blockchain 以太坊 以太币]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[比特币 blockchain 以太坊 以太币]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[46]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,json]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%9f%ba%e4%ba%8e%e4%bb%a5%e5%a4%aa%e5%9d%8a%e5%88%9b%e5%bb%ba%e7%a7%81%e6%9c%89%e9%93%be%e8%bf%9b%e8%a1%8c%e6%8c%96%e7%9f%bf%e3%80%81%e4%ba%a4%e6%98%93]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"185.191.171.4";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>基于以太坊实现局域网多节点挖矿</title>
		<link>https://feilong.tech/2018/01/25/eth-2/</link>
		<pubDate>Thu, 25 Jan 2018 09:32:35 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[<p>上一篇文章简要介绍了本地实现私有链挖矿和转账，现在这篇文章主要实现局域网下实现多个节点实现挖矿</p>
<h3>前提，已经安装了go-ethereum，如果没有安装请移步<a href="http://feilong.tech/?p=206">基于以太坊创建私有链进行挖矿、交易</a></h3>
<h3>机器：Ubuntu(两个节点)，Mac(一个节点)</h3>
<h3>创建创世节点</h3>
<h4>创建节点json文件</h4>
<pre><code class="language-bash">$ mkdir my_eth2
$ cd my_eth2
$ vim genesis.json
{
  &quot;config&quot;: {
        &quot;chainId&quot;: 10,
        &quot;homesteadBlock&quot;: 0,
        &quot;eip155Block&quot;: 0,
        &quot;eip158Block&quot;: 0
    },
  &quot;coinbase&quot;   : &quot;0x0000000000000000000000000000000000000000&quot;,
  &quot;difficulty&quot; : &quot;0x20000&quot;,
  &quot;extraData&quot;  : &quot;&quot;,
  &quot;gasLimit&quot;   : &quot;0x2fefd8&quot;,
  &quot;nonce&quot;      : &quot;0x0000000000000042&quot;,
  &quot;mixhash&quot;    : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
  &quot;parentHash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
  &quot;timestamp&quot;  : &quot;0x00&quot;,
  &quot;alloc&quot;      : {}
}</code></pre>
<h4>生成节点(以下使用节点1代指)</h4>
<pre><code class="language-bash">$ geth --datadir data00 init genesis.json
WARN [01-25|17:04:25] No etherbase set and no accounts found as default
INFO [01-25|17:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/chaindata cache=16 handles=16
INFO [01-25|17:04:25] Writing custom genesis block
INFO [01-25|17:04:25] Successfully wrote genesis state         database=chaindata                                  hash=5e1fc7…d790e0
INFO [01-25|17:04:25] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data00/geth/lightchaindata cache=16 handles=16
INFO [01-25|17:04:25] Writing custom genesis block
INFO [01-25|17:04:25] Successfully wrote genesis state         database=lightchaindata                                  hash=5e1fc7…d790e0</code></pre>
<h4>启动节点1</h4>
<pre><code class="language-bash">$ geth --datadir ./data00 --networkid 5201314 console</code></pre>
<h4>创建账号</h4>
<pre><code class="language-bash">> personal.newAccount(&quot;123&quot;)
&quot;0x0b514e769e4e1990f8fb0f0f9d876d7f2b9fa5ba&quot;</code></pre>
<h3>本地创建第二个节点(以下使用节点2代指)</h3>
<h4>新开窗口，创建节点2</h4>
<pre><code class="language-bash">$ geth --datadir data01 init genesis.json
WARN [01-25|17:07:33] No etherbase set and no accounts found as default
INFO [01-25|17:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/chaindata cache=16 handles=16
INFO [01-25|17:07:33] Writing custom genesis block
INFO [01-25|17:07:33] Successfully wrote genesis state         database=chaindata                                  hash=5e1fc7…d790e0
INFO [01-25|17:07:33] Allocated cache and file handles         database=/home/ubuntu/my_eth2/data01/geth/lightchaindata cache=16 handles=16
INFO [01-25|17:07:33] Writing custom genesis block
INFO [01-25|17:07:33] Successfully wrote genesis state         database=lightchaindata                                  hash=5e1fc7…d790e0</code></pre>
<h4>运行节点2</h4>
<pre><code class="language-bash">$ geth --datadir data01 --networkid 5201314 --ipcdisable --port 61910 --rpcport 8200 console</code></pre>
<h4>创建节点2的账号</h4>
<pre><code class="language-bash"> &gt; personal.newAccount(&quot;123&quot;)
&quot;0x3babf1eeb8d5d29acc4d1f6408529b36b4e6f880&quot;</code></pre>
<h3>在Mac上创建新节点，以下使用(节点3代指)</h3>
<p><code>创世节点的json文件要和Ubuntu一致</code></p>
<h4>初始化节点3</h4>
<pre><code class="language-bash">$ geth --datadir data00 init genesis.json
WARN [01-25|17:14:10] No etherbase set and no accounts found as default
INFO [01-25|17:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/chaindata cache=16 handles=16
INFO [01-25|17:14:10] Writing custom genesis block
INFO [01-25|17:14:10] Successfully wrote genesis state         database=chaindata                                      hash=5e1fc7…d790e0
INFO [01-25|17:14:10] Allocated cache and file handles         database=/Users/feilong/my_chain2/data00/geth/lightchaindata cache=16 handles=16
INFO [01-25|17:14:10] Writing custom genesis block
INFO [01-25|17:14:10] Successfully wrote genesis state         database=lightchaindata                                      hash=5e1fc7…d790e0</code></pre>
<h4>运行节点3</h4>
<pre><code class="language-bash">$ geth --datadir data00 --networkid 5201314 --ipcdisable --port 61911 --rpcport 8200 console #使用61911端口，保证networkid一致</code></pre>
<h4>创建账号</h4>
<pre><code class="language-bash">> personal.newAccount(&quot;123&quot;)
&quot;0xf81b1d6c0e0835790c7e4af8a02301a67e5a0dcb&quot;</code></pre>
<h3>节点1和节点2建立联系</h3>
<h4>节点2运行 <code>&gt; admin.nodeInfo.enode</code> 查看node信息</h4>
<pre><code class="language-bash">> admin.nodeInfo.enode
&quot;enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910&quot;</code></pre>
<h4>节点1添加节点2</h4>
<pre><code class="language-bash">> admin.addPeer(&quot;enode://d5bb9fecc8e997905220b5e8c0db8396880bd5326143614b33f81ead534fc4d8282cbdda620fb81eaea66c359c3acd7d590f64981099b3cc063fddae9ac376d9@192.168.164.210:61910&quot;)
true</code></pre>
<h4>节点1和节点2运行<code>&gt; net</code></h4>
<pre><code class="language-bash">> net
{
  listening: true,
  peerCount: 1, #说明添加成功
  version: &quot;5201314&quot;,
  getListening: function(callback),
  getPeerCount: function(callback),
  getVersion: function(callback)
}</code></pre>
<h3>节点1和节点3建立联系</h3>
<h4>节点3运行 <code>&gt; admin.nodeInfo.enode</code> 查看node信息</h4>
<pre><code class="language-bash">>  admin.nodeInfo.enode
&quot;enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911&quot;</code></pre>
<h4>节点1添加节点3</h4>
<pre><code class="language-bash">> admin.addPeer(&quot;enode://34dcd9b7e64b24a25fe25b6e2aab6fc10525a439b2174ad79bd55bbf867f98060f7eef26c83223ae665372afa819ffd5c9c49a039c4e5e9c4e72be35a3b65aa8@192.168.164.210:61911&quot;)
true</code></pre>
<h4>分别查看节点1和节点3链接情况</h4>
<p>节点1</p>
<pre><code class="language-bash">> net
{
  listening: true,
  peerCount: 2, ##节点1连接两个节点
  version: &quot;5201314&quot;,
  getListening: function(callback),
  getPeerCount: function(callback),
  getVersion: function(callback)
}</code></pre>
<p>节点3</p>
<pre><code class="language-bash">> net
{
  listening: true,
  peerCount: 1,
  version: &quot;5201314&quot;,
  getListening: function(callback),
  getPeerCount: function(callback),
  getVersion: function(callback)
}</code></pre>
<h3>节点挖矿测试</h3>
<h4>使用任一节点挖矿，然后观察其他两个控制台，发现都会有同步的数据，说明节点2和节点3也是连接的状态（由于电脑性能原因，挖矿的时候需要等percentage到达100之后才会开始）</h4>
<h3>遇到的坑</h3>
<ul>
<li>要保证创世节点的json文件一致</li>
<li>保证在统一局域网内，使用Telnet命令测试</li>
<li>节点2和节点3的端口注意不要重复</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2018-01-25 17:32:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-25 09:32:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[eth-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="etc"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<category domain="post_tag" nicename="%e7%a7%81%e6%9c%89%e9%93%be"><![CDATA[私有链]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%9f%ba%e4%ba%8e%e4%bb%a5%e5%a4%aa%e5%9d%8a%e5%88%9b%e5%bb%ba%e7%a7%81%e6%9c%89%e9%93%be%e5%ae%9e%e7%8e%b0%e5%90%8c%e4%b8%80%e5%b1%80%e5%9f%9f%e7%bd%91%e6%8c%96%e7%9f%bf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.250";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP7内存管理之垃圾回收</title>
		<link>https://feilong.tech/2018/02/21/php7-gc/</link>
		<pubDate>Wed, 21 Feb 2018 10:54:26 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=205</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>回收过程</h4>
<p>在自动GC机制中，在zval断开value指向的时候如果发现refcount=0的时候，则会直接释放value，这就是自动回收GC的过程。发生断开的两种情况为修改变量与函数返回的时候，修改变量的时候，会断开原有的value指向，函数返回的时候，则会释放局部变量，也就是把所有局部变量的refcount计数-1。
此外，当使用unset函数的时候，也会主动销毁这个变量。</p>
<h4>垃圾回收</h4>
<p>虽然有了自动GC机制，但是有一种情况是没办法解决的，那就是因为变量因为循环引用而无法回收造成的内存泄露，这种情况通常是循环引用。简单来讲，循环引用就是引用自身，这种情况一般只会发生在数组或者对象的身上。比如定义了<code>$a = array()</code> ，插入一个新元素，这个元素对数组自身进行引用<code>$a[] = &amp;$a</code>，当所有的外部引用都断开了，但是数据的refcount仍然大于0而得不到释放，但是事实上，这个变量没有在使用的价值了。</p>
<pre><code class="language-php">&lt;?php
$a = array();
$a[] = &amp;$a;
unset($a);
?&gt;</code></pre>
<p>在unset之前，变量a是有两次引用的，一个来自$a，一个来自$a[1]</p>
<p><img src="/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="" /></p>
<p>unset($a)之后，减少了一次引用的recount，这个时候，已经没有了外部的引用，但是还有一个内部还有一个元素指向该引用。</p>
<p><img src="/uploads/2018/02/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-2.png" alt="" /></p>
<p>像这种因为循环指向没办法释放的变量称之为垃圾。PHP引入了另外的一种机制来进行垃圾回收。</p>
<ul>
<li>如果一个变量的value的refcount减少到0，说明这个value可以释放，那么这就不属于垃圾</li>
<li>如果一个变量的value减少之后大于0，那么这个value还不能被释放，那么这个value就是垃圾。
所以，判断一个变量是不是垃圾，要看value的refcount是否减少到了0。</li>
</ul>
<p>目前垃圾回收只会出现在array和object两种类型中，当一个value被视为垃圾的时候，PHP会将这个value收集起来，等到打到了规定的数量，启动垃圾回收机制，进行统一的释放。</p>
<h4>回收的时机</h4>
<p>前面说了，PHP垃圾回收并不是产生一个垃圾value，就进行释放，而是把value收集起来统一释放，以为value的分析和释放，也是有性能消耗的。
在php.ini中，<code>zend.enable_gc</code>用来设置是否启动垃圾回收机制。绝大多数都是默认开启的，因为每个都有可能在写程序的时候，出现内存垃圾，如果把这个配置关闭了，那么就有可能造成所谓的垃圾泄露。
除了<code>zend.enable_gc</code>以为，还会配合<code>zend/zend_gc.c</code>里面的变量<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>实现垃圾回收，默认<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>的值是10001，GC_ROOT_BUFFER_MAX_ENTRIES[0]是用来保存一些header的数据，GC_ROOT_BUFFER_MAX_ENTRIES[1]~GC_ROOT_BUFFER_MAX_ENTRIES[10000]用来收集垃圾的数据。如果你想强制执行垃圾回收，也可使用函数<a href="http://php.net/manual/zh/function.gc-collect-cycles.php">gc_collect_cycles()</a>实现。</p>
<h4>参考文献</h4>
<ul>
<li>PHP7内核剖析</li>
<li>PHP手册</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2018-02-21 18:54:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-21 10:54:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php7-gc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php7-gc"><![CDATA[PHP7垃圾回收]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php7%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e4%b9%8b%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.139.118";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用Nginx实现流量限流</title>
		<link>https://feilong.tech/2018/01/25/nginx-limit-rate/</link>
		<pubDate>Thu, 25 Jan 2018 15:47:21 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=214</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Nginx是高性能的http服务器，同时也可以作为一个反向代理的服务器，甚至还可以作为一个IMAP/pop3/SMTP服务器。Nginx除了负责请求的负载均衡和分发等工作外，自带的限流模块也可以帮助运维人员限制流量的速率。</p>
<h4>更改配置</h4>
<p>开启Nginx的限流功能</p>
<pre><code class="language-nginx">http {
    #定义每个IP的session空间大小
    limit_conn_zone $binary_remote_addr zone=one:20m;
    #与limit_conn_zone类似，定义每个允许发起的请求速率
    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;
    #定义每个IP发起的并发连接数
    limit_conn one 10;
    #缓存还没来得及处理的请求
    limit_req zone=req_one burst=100;

    #rewrite_log on;
    #error_log /var/log/nginxrewrite.log notice;
        client_body_buffer_size 256M;
        include       mime.types;
        default_type  application/octet-stream;

        log_format  main  &#039;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#039;
                      &#039;$status $body_bytes_sent &quot;$http_referer&quot; &#039;
                      &#039;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_filename&quot;&#039;;
        sendfile        on;

        keepalive_timeout  65;
        include servers/*.conf;
}</code></pre>
<h4>进行验证</h4>
<p>我们使用Linux或者mac自带的<code>ab</code>命令进行验证，并且实时查看access.log。在Nginx配置文件中，我们设置的请求速率是每秒1个请求，那我们则需要设置每秒超多1个请求才行</p>
<pre><code class="language-bash">$ ab -n 20 http://sdeno-api/info/php</code></pre>
<p><img src="/uploads/2018/01/nginx_limit_request00.png" alt="" /></p>
<p>从截图的日志中，我们可以看出Nginx限流模块确实可以限制请求速率。</p>
<h4>其他</h4>
<p>由于nginx的版本问题，旧版本会limit_conn_zone-&gt;limit_zone</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2018-01-25 23:47:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-25 15:47:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nginx-limit-rate]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="http"><![CDATA[http]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[nginx,clike,bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bd%bf%e7%94%a8nginx%e5%ae%9e%e7%8e%b0%e6%b5%81%e9%87%8f%e9%99%90%e6%b5%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"185.191.171.2";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于limit_req和limit_conn的区别</title>
		<link>https://feilong.tech/2018/01/26/limit_req-limit_conn/</link>
		<pubDate>Fri, 26 Jan 2018 15:34:13 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>request和connection区别</h4>
<p>在nginx里面，limit_req和limit_conn都是用来限流的但是两者不在一个层次上，在此之前，需要先清楚request和connect的区别。
request是请求，是http层面的。connection是链接，指的是tcp层面。所以，从含义上面可以知道两者不在一个层次。
我们在打开一个网页的时候，请求过程一般就是先经过tcp三次握手，然后在进行http请求。也就是一个connection建立之后，可以有很多request。</p>
<p>一个connection建立，只要服务器处理的过来，可以处理任意多的request都是没有问题的</p>
<p>好了，现在知道区别了。</p>
<h4>limit_conn</h4>
<pre><code class="language-nginx">http {
    limit_conn_zone $binary_remote_addr zone=one:20m;
    limit_conn one 1; #最多可以进行1个connection
    client_body_buffer_size 256M;
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  &#039;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#039;
                      &#039;$status $body_bytes_sent &quot;$http_referer&quot; &#039;
                      &#039;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_filename&quot;&#039;;
    sendfile        on;

    keepalive_timeout  65;
    include servers/*.conf;
}</code></pre>
<p>上面的配置文件的含义很明白，nginx只接受最多一个connect，我们使用ab命令查看下</p>
<pre><code class="language-bash">$ ab -n10  http://sdeno-api/info/php #默认通过一个connect送10个request</code></pre>
<p><img src="/uploads/2018/01/limit_conn_00.png" alt="" /></p>
<p>从截图看来，在一个并发下，处理10个request下完全没有问题</p>
<p>接下来我们使用2个并发，2个请求试下，也就是两个用户，每个用户发送一个request</p>
<pre><code class="language-bash">$ ab -n2 -c2 http://sdeno-api/info/php</code></pre>
<p><img src="/uploads/2018/01/limit_conn_01.png" alt="" /></p>
<p>从截图中可以看到，由于nginx设置了至多限制一个并发，所以导致两个用户的请求只能有一个被处理掉，另外一个返回http 503</p>
<h4>limit_req</h4>
<p>下面更改下nginx.conf配置文件</p>
<pre><code class="language-nginx">http {
    limit_conn_zone $binary_remote_addr zone=one:20m;
    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;
    limit_conn one 20;
    limit_req zone=req_one burst=5;
    client_body_buffer_size 256M;
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  &#039;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#039;
                      &#039;$status $body_bytes_sent &quot;$http_referer&quot; &#039;
                      &#039;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_filename&quot;&#039;;
    sendfile        on;

    keepalive_timeout  65;
    include servers/*.conf;
}</code></pre>
<p>上面的配置的含义是请求速率限制为1r/s，然后再缓存5个request，然后再依次处理请求（令牌桶算法）</p>
<pre><code class="language-bash">$ ab -n10 -c10 http://sdeno-api/info/php</code></pre>
<p><img src="/uploads/2018/01/limit_conn_02-1.png" alt="" /></p>
<p>我们使用压测命令，10个并发，10个请求，根据配置的文件，当有请求过来，nginx先处理一个请求，然后将5个请求缓存下来(burst=5)，根据设置的速率1r/s进行处理，也就是一共能够处理6个请求，其余的请求则被丢掉。</p>
<p>接下来我们再继续更改下nginx配置文件</p>
<pre><code class="language-bash">$ ab -n10 -c10 http://sdeno-api/info/php</code></pre>
<pre><code class="language-nginx">http {
    limit_conn_zone $binary_remote_addr zone=one:20m;
    limit_req_zone $binary_remote_addr zone=req_one:20m rate=1r/s;
    limit_conn one 20;
    limit_req zone=req_one burst=5 nodelay;
    client_body_buffer_size 256M;
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  &#039;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#039;
                      &#039;$status $body_bytes_sent &quot;$http_referer&quot; &#039;
                      &#039;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_filename&quot;&#039;;
    sendfile        on;

    keepalive_timeout  65;
    include servers/*.conf;
}</code></pre>
<p><img src="/uploads/2018/01/limit_conn_03.png" alt="" /></p>
<p>咦？增加了nodelay好像和不加有点不同。这是因为请求过来的时候，会爆发出一个峰值的处理能力，处理的总的请求数是burst+1，其余的请求丢弃。</p>
<h4>总结</h4>
<ul>
<li>
<p>request和connect是完全不同层面的含义，一个属于http，一个属于tcp</p>
</li>
<li>
<p><code>limit_req zone=req_zone burst=5</code> 依照在limti_req_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，在缓冲队列中的请求会等待慢慢处理，超过了burst缓冲队列长度和rate处理能力的请求被直接丢弃，表现为对收到的请求有延时</p>
</li>
<li>
<p><code>limit_req zone=req_zone burst=5 nodelay</code> 依照在limti_req_zone中配置的rate来处理请求，同时设置了一个大小为5的缓冲队列，当请求到来时，会爆发出一个峰值处理能力，对于峰值处理数量之外的请求，直接丢弃。</p>
</li>
</ul>
<h4>参考文献</h4>
<ul>
<li><a href="http://blog.csdn.net/hellow__world/article/details/78658041">Nginx下limit_req模块burst参数超详细解析</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2018-01-26 23:34:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-26 15:34:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[limit_req-limit_conn]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="http"><![CDATA[http]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="tcp"><![CDATA[tcp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[nginx,clike,bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%85%b3%e4%ba%8elimit_req%e5%92%8climit_conn%e7%9a%84%e5%8c%ba%e5%88%ab]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.132.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP设计模式-原型模式</title>
		<link>https://feilong.tech/2018/02/21/php-prototype-pattern/</link>
		<pubDate>Wed, 21 Feb 2018 12:28:08 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>原型模式</h4>
<p>原型设计模式是通过使用一种克隆技术复制实例化的对象。新对象是通过复制原型而进行创建的。原型设计模式的目的是通过克隆以减少实例化对象的开销。</p>
<p><img src="/uploads/2018/02/%E5%8E%9F%E5%9E%8B%E7%B1%BB%E5%9B%BE.png" alt="" /></p>
<h4>何时使用原型模式</h4>
<p>原型模式要求你创建某个原型对象的多个实例，这个时候就可以使用原型模式。比如，在关于进化的研究，通常使用果蝇作为研究对象。果蝇很快繁殖，基本上一个小时就能进行产卵，和其他的生物相比，找到和记录变异的几率更大。如果换做大象的话（比如大象的孕育期长达22个月），那么整个研究过程将会消耗很长的时间。因此，只需要完成两个实例化（一个雄性和一个雌性），然后就可以跟进克隆多个变异，而不需要由具体类另外创建实例。</p>
<h4>克隆函数</h4>
<p>使用原型模式，首先就要了解如何使用PHP的__clone()。</p>
<pre><code class="language-php">abstract class CloneMe {
    public $name;
    abstract function __clone();
}

class Person extends CloneMe {

    public function __construct() {
        $this-&gt;name = &quot;Original&quot;;
        echo &#039;hello&#039;;
    }

    public function display() {
        echo &quot;\n$this-&gt;name\n&quot;;
    }

    public function __clone() {}

}
$worker = new Person();
$worker-&gt;display();

$slacker = clone $worker;
$slacker-&gt;display();</code></pre>
<p>定义了一个抽象类<code>CloneMe</code>，然后定义一个<code>Person</code>类进行实现。定义一个变量<code>$worker </code>进行实例化，然后使用关键字<code>clone</code>进行对象的克隆。</p>
<p>输出结果:
hello
Original</p>
<p>Original</p>
<p>不过需要注意的是，__clone()不能直接调用，会出现报错<code>Fatal error: Cannot call __clone() method on objects - use &#039;clone $obj&#039; instead</code></p>
<h4>克隆不会启动构造函数</h4>
<p>上面的输出结果可能已经见到了，clone是不会启动构造函数的。其实这个也是比较理解的。举个例子，现在有一个人A，那么这个人肯定会有手脚，那么<code>手脚</code>就算是默认构造函数进行的初始化，如果要根据A克隆一个人B，那么B不用再造<code>手脚</code>，而是克隆之后，就自带了A的<code>手脚</code>，当然，你也可以把B的<code>手脚</code>砍掉(比如$slacker-&gt;name=&quot;Tyler Teng&quot;)。</p>
<pre><code class="language-php">abstract class CloneMe {
    public $name;
    abstract function __clone();
}

class Person extends CloneMe {

    public function __construct() {
        $this-&gt;name = &quot;Original&quot;;
        echo &#039;hello&#039;;
    }

    public function display() {
        echo &quot;\n$this-&gt;name\n&quot;;
    }

    public function __clone() {
    }

}
$worker = new Person();
$worker-&gt;display();

$slacker = clone $worker;
$slacker-&gt;name = &quot;Tyler Teng&quot;;
$slacker-&gt;display();</code></pre>
<p>输出结果
hello
Original</p>
<p>Tyler Teng</p>
<h4>研究果蝇</h4>
<h5>抽象类和具体实现</h5>
<p>简单定义三个属性：眼睛的颜色，翅膀震动次数，眼睛个数</p>
<pre><code class="language-php">abstract class IPrototype {
    public $eyeColor;
    public $wingBeat;
    public $uniyEyes;
    abstract function __clone();
}</code></pre>
<p>除了一些基本的属性，还需要区别雄性和雌性</p>
<pre><code class="language-php">include_once &#039;IPrototype.php&#039;;
class FemaleProto extends IProtoType {

    const gender = &quot;FEMALE&quot;;
    public $fecundity;

    public function __construct() {
        $this-&gt;eyeColor = &quot;red&quot;;
        $this-&gt;wingBeat = &quot;220&quot;;
        $this-&gt;unitEyes = &quot;760&quot;;
    }

    public function __clone() {}

}</code></pre>
<pre><code class="language-php">include_once &quot;IPrototype.php&quot;;
class MaleProto extends IPrototype {

    const gender = &quot;MALE&quot;;

    public $mated;

    public function __construct() {
        $this-&gt;eyeColor = &quot;red&quot;;
        $this-&gt;wingBeat = &quot;220&quot;;
        $this-&gt;unitEyes = &quot;760&quot;;
    }

    public function __clone() {}

}</code></pre>
<h5>客户端</h5>
<p>我们定义一个<code>Client</code>类，首先从具体类中实例化$fly1和$fly2，$c1Fly、$c2Fly和$updateCloneFly则分别是这两个类实例的克隆</p>
<pre><code class="language-php">function __autoload($class_name) {
    include_once realpath(__DIR__) . &#039;/&#039; .  $class_name . &#039;.php&#039;;
}
class Client {
    private $fly1;
    private $fly2;

    private $c1Fly;
    private $c2Fly;
    private $upDatadCloneFly;

    public function __construct() {
        $this-&gt;fly1 = new MaleProto();
        $this-&gt;fly2 = new FemaleProto();

        $this-&gt;c1Fly = clone $this-&gt;fly1;
        $this-&gt;c2Fly = clone $this-&gt;fly2;

        $this-&gt;upDatadCloneFly = clone $this-&gt;fly2;
        $this-&gt;c1Fly-&gt;mated = &quot;true&quot;;
        $this-&gt;c2Fly-&gt;fecundity = &quot;186&quot;;
        $this-&gt;upDatadCloneFly-&gt;eyeColor = &quot;purple&quot;;
        $this-&gt;upDatadCloneFly-&gt;wingBeat = &quot;220&quot;;
        $this-&gt;upDatadCloneFly-&gt;unitEyes = &quot;750&quot;;
        $this-&gt;upDatadCloneFly-&gt;fecundity = &quot;92&quot;;

        $this-&gt;showFly($this-&gt;c1Fly);
        $this-&gt;showFly($this-&gt;c2Fly);
        $this-&gt;showFly($this-&gt;upDatadCloneFly);
    }

    public function showFly(IProtoType $fly) {
        echo &quot;Eye color : &quot; . $fly-&gt;eyeColor . &quot;\n&quot;;
        echo &quot;Wing Beats/second : &quot; . $fly-&gt;wingBeat . &quot;\n&quot;;
        echo &quot;Eye units : &quot; . $fly-&gt;unitEyes . &quot;\n&quot;;
        $genderNow = $fly::gender;
        echo &quot;Gender : &quot; . $genderNow . &quot;\n&quot;;
        if ($genderNow == &quot;FEMALE&quot;) {
            echo &quot;Numbers of eges : &quot; . $fly-&gt;fecundity .  &quot;\n&quot;;
        } else {
            echo &quot;Mate : &quot; . $fly-&gt;mated . &quot;\n&quot;;
        }
    }
}

$woker = new Client();</code></pre>
<p>输出
Eye color : red
Wing Beats/second : 220
Eye units : 760
Gender : MALE
Mate : true
Eye color : red
Wing Beats/second : 220
Eye units : 760
Gender : FEMALE
Numbers of eges : 186
Eye color : purple
Wing Beats/second : 220
Eye units : 750
Gender : FEMALE
Numbers of eges : 92</p>
<h4>总结</h4>
<p>作为被克隆的类，默认构造函数不应该做太多的初始化，否则结果往往不灵活，而且是过度的耦合设计。构造函数不应完成具体的工作，一种做法是忽略模式类中的构造函数，除非你有充分的理由包含这些构造函数；另外一种做法是，允许在需要的时间调用，让客户端负责实例化和克隆的有关事务。</p>
<h4>参考文献</h4>
<ul>
<li>Learning PHP设计模式</li>
</ul>
<h4>附件</h4>
<ul>
<li><a href="/uploads/2018/02/test2.zip">PHP原型模式demo</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2018-02-21 20:28:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-21 12:28:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-prototype-pattern]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php-prototype-pattern"><![CDATA[PHP原型模式]]></category>
		<category domain="category" nicename="php-design"><![CDATA[PHP设计模式]]></category>
		<category domain="post_tag" nicename="php%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f"><![CDATA[PHP设计模式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f-%e5%8e%9f%e5%9e%8b%e6%a8%a1%e5%bc%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.103";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP设计模式-适配器模式</title>
		<link>https://feilong.tech/2018/03/09/php-adapter-mode/</link>
		<pubDate>Thu, 08 Mar 2018 16:12:25 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>适配器模式</h4>
<h5>组合优于继承</h5>
<p>学习设计模式，最经常听到的一句话就是：<code>组合优于继承</code>，因为使用组合，可以使参与者之间的绑定更宽松，在重用、结构和修改等方面会有很多的有点。这个和继承不同，继承类或者所继承的类中包含已经实现的方法，这其实也是一种绑定，使用组合，就没有这种紧密绑定的缺点。</p>
<p><img src="/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE.png" alt="使用继承的适配器类图" /></p>
<center>使用继承的适配器类图</center>
<p><img src="/uploads/2018/02/%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9B%BE-2.png" alt="使用组合的适配器类图" /></p>
<center>使用组合的适配器类图</center>
<h4>组合适配器的例子</h4>
<p>有一家温湿度传感器公司，这个传感器可以测试空气的温度和湿度。分别调用getTemperature()方法和geThumidity()</p>
<pre><code class="language-php">class Sensor {

    public function getThumidity() {
        echo &quot;the thumidity is 1234... \n&quot;;
    }

    public function getTemperature() {
        echo &quot;the temperature is 45678... \n&quot;;
    }
}</code></pre>
<p>这个时候呢，由于公司扩大业务，有一家智能家居的公司前来谈合作，想要使用遥控，来读取温度和湿度，分别调用方法 getThumidityByRemote() 和getTemperatureByRemote() ,没办法，只能扩充Sensor的类了。</p>
<pre><code class="language-php">class Sensor {

    public function getThumidity() {
        echo &quot;the thumidity is 1234... \n&quot;;
    }

    public function getTemperature() {
        echo &quot;the temperature is 45678... \n&quot;;
    }

    public function getThumidityByRemote() {
        echo &quot;the thumidity is 1234... \n&quot;;
    }

    public function getTemperatureByRemote() {
        echo &quot;the temperature is 45678... \n&quot;;
    }
}</code></pre>
<p>紧接着，又来了一家智能音箱的公司，也要接入温湿度传感器，但是这家公司是根据用户的话的内容来区分是否查询温湿度getByAnswer($code), $code = 0的时候，查询温度，当$code = 1的时候，查询湿度。</p>
<pre><code class="language-php">class Sensor {

    public function getThumidity() {
        echo &quot;the thumidity is 1234... \n&quot;;
    }

    public function getTemperature() {
        echo &quot;the temperature is 45678... \n&quot;;
    }

    public function getThumidityByRemote() {
        echo &quot;the thumidity is 1234... \n&quot;;
    }

    public function getTemperatureByRemote() {
        echo &quot;the temperature is 45678... \n&quot;;
    }

    public function getByAsnwer($code) {
        if ($code == 0) {
            echo &quot;the temperature is 45678... \n&quot;;
        } else if ($code == 1) {
            echo &quot;the thumidity is 1234... \n&quot;;
        }
    }
}</code></pre>
<p>可能你已经发现了问题，随着其他的公司不断的接入，Sensor的类会变得更加臃肿不看。或许我们应该好好区分一下整个过程中的角色问题。</p>
<p><img src="/uploads/2018/03/Adapter-300x235.png" alt="" /></p>
<ol>
<li>目标(Target)角色：智能家居公司和智能音箱公司的接口或者方法，使我们需要实现的目标(target)，因为外接需要调用这两个方法才行</li>
<li>源(Adaptee)角色：Sensor的温湿度查询，是我们需要适配方法，也就是，我们可以通过这两个方法，进行温湿度查询。</li>
<li>适配器(Adapter)角色：我们需要通过这个，来协调目标角色和源角色。</li>
</ol>
<p>定义Sensor类</p>
<pre><code class="language-php">class Sensor {

    public function geThumidity() {
        echo &quot;the thumidity is 1234... \n&quot;;
    }

    public function getTemperature() {
        echo &quot;the temperature is 45678... \n&quot;;
    }

}</code></pre>
<p>定义智能家居和智能音箱的接口</p>
<pre><code class="language-php">interface Household {
    public function geThumidityByRemote();
    public function getTemperatureByRemote();
}</code></pre>
<pre><code class="language-php">interface Spearkers {
    public function getByAnswer($code);
}</code></pre>
<p>定义适配器</p>
<pre><code class="language-php">class HouseholdTarget implements Household {

    private $_sensor = NULL;

    public function __construct(Sensor $sensor) {
        $this-&gt;_sensor = $sensor;
    }

    public function geThumidityByRemote() {
        $this-&gt;_sensor-&gt;geThumidity();
    }
    public function getTemperatureByRemote() {
        $this-&gt;_sensor-&gt;getTemperature();
    }

}</code></pre>
<pre><code class="language-php">class SpearkersTargat implements Spearkers {

    private $_sensor = NULL;

    public function __construct(Sensor $sensor) {
        $this-&gt;_sensor = $sensor;
    }

    public function getByAnswer($code) {
        if ($code == 0) {
            $this-&gt;_sensor-&gt;getTemperature();
        } else if ($code == 1) {
            $this-&gt;_sensor-&gt;geThumidity();
        }
    }

}</code></pre>
<p>客户端进行调用</p>
<pre><code class="language-php">function __autoload($class_name) {
    if (file_exists(__DIR__ . &quot;/{$class_name}.php&quot;)) {
        require_once __DIR__ . &quot;/{$class_name}.php&quot;;
    }
}

$sensor = new Sensor();
$HouseholdTarget = new HouseholdTarget($sensor);
$HouseholdTarget-&gt;geThumidityByRemote();
$HouseholdTarget-&gt;getTemperatureByRemote();

$SpearkersTargat = new SpearkersTargat($sensor);
$SpearkersTargat-&gt;getByAnswer(0);
$SpearkersTargat-&gt;getByAnswer(1);</code></pre>
<p>输出结果
the thumidity is 1234...
the temperature is 45678...
the temperature is 45678...
the thumidity is 1234... </p>
<h4>结论</h4>
<p>使用适配器模式之后，能够更加方便对其进行拓展，如果有再多的公司进行接入，也不用担心影响Sensor类。</p>
<h4>使用场景</h4>
<p>1．系统需要使用现有的类，而此类的接口不符合系统的需要。</p>
<p>2．想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。这些源类不一定有很复杂的接口。</p>
<p>3.（对组合适配器而言）在设计里，需要改变多个已有子类的接口，如果使用类的适配器模式，就要针对每一个子类做一个适配器，而这不太实际。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2018-03-09 00:12:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-08 16:12:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-adapter-mode]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="php-design"><![CDATA[PHP设计模式]]></category>
		<category domain="post_tag" nicename="php%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f"><![CDATA[PHP设计模式]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f-%e9%80%82%e9%85%8d%e5%99%a8%e6%a8%a1%e5%bc%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.152.56";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用 iPhone 轻松下载微博小视频</title>
		<link>https://feilong.tech/2018/02/25/download-weibo-video/</link>
		<pubDate>Sun, 25 Feb 2018 14:25:50 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=241</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我经常喜欢看一些比较污的视频，这些视频基本上来自于微博。iPhone和Android有一个很大的不同，就是下载视频比较难。之前使用Pro recorder，但是这个APP有数量限制，一旦到了规定的数量，需要购买会员。下面和大家分享一下如何使用iPhone下载微博上面的小视频另一种方法。</p>
<h4>下载Wordflow</h4>
<p>打开App Store，搜索workflow，并进行下载</p>
<p><img src="/uploads/2018/02/IMG_0863-169x300.png" alt="" /></p>
<h4>下载workflow插件</h4>
<p>使用iPhone的自带浏览器Safari 打开连接 <a href="http://workflow.sspai.com/#/main/workflow">http://workflow.sspai.com/#/main/workflow</a> ，然后找到插件，进行下载</p>
<p><img src="/uploads/2018/02/IMG_0864-169x300.png" alt="" /></p>
<p>点击<code>获取该workflow</code>，这个时候会询问是否打开workflow，然后选择确认。</p>
<p><img src="/uploads/2018/02/IMG_0865-169x300.png" alt="" /></p>
<p>选择<code>get workflow</code> 进行安装。</p>
<h4>下载小视频准备</h4>
<p>打开微博你想要下载的小视频，拷贝连接</p>
<p><img src="/uploads/2018/02/IMG_0868-169x300.png" alt="" /></p>
<p>返回workflow的主界面，点击刚刚下载的插件。</p>
<p><img src="/uploads/2018/02/IMG_0867-169x300.png" alt="" /></p>
<p>这个时候，复制的链接已经自动粘贴到了workflow里面。</p>
<h4>开始下载</h4>
<p><img src="/uploads/2018/02/IMG_0872-169x300.png" alt="" /></p>
<p>点击开始进行下载，这个时候会有一系列的操作自动运行。</p>
<p>选择<code>Save Video</code>进行保存操作。</p>
<h4>查看视频</h4>
<p>进行iPhone相册，查看下载的小视频。</p>
<p><img src="/uploads/2018/02/IMG_0871-169x300.png" alt="" /></p>
<h4><a href="http://workflow.sspai.com/#/main/workflow">workflow中文推荐站</a></h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2018-02-25 22:25:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-25 14:25:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[download-weibo-video]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e7%94%a8-iphone-%e8%bd%bb%e6%9d%be%e4%b8%8b%e8%bd%bd%e5%be%ae%e5%8d%9a%e5%b0%8f%e8%a7%86%e9%a2%91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"185.191.171.13";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>一次由于curl调用https接口导致的502</title>
		<link>https://feilong.tech/2018/03/06/curl-https-502/</link>
		<pubDate>Tue, 06 Mar 2018 12:49:06 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>背景描述</h4>
<p>最近在调研百度人脸识别的服务，百度的人脸识别是免费的，但是有QPS的限制，QPS免费的最大值是5，也就是峰值在每秒5次，都是可以免费使用的。我从百度平台下载的SDK，但是到了第一步就被卡主了。</p>
<p>当我使用检测接口的时候，频繁出现 502。在之前，本地运行PHP的时候，也会偶尔出现502，但是并没有这么高。这次变态的浮现率是100%. </p>
<p>查了下nginx日志<code>*173 upstream prematurely closed connection while reading response header from upstream, client: 127.0.0.1, server: sdeno-api, request: &quot;GET /facev1/test HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;</code> </p>
<p>在网上查了一下，说什么的都有，大多数是在说nginx的问题。没有一个能够解决问题。</p>
<h4>发现问题</h4>
<p>我发现，出现http 502 的接口使用了curl，所以很可能是curl代码有问题。我自己有写了一段代码，调用百度首页<code>http://www.baidu.com</code>，咦？正常返回啊。完全没有问题。后来百度查了很多，最终发现一个不起眼的问题 <code>php curl 调用https出现502问题</code>。我验证了一些，我曹，果然只有https接口是不正常的。</p>
<h4>解决办法</h4>
<p>后来找到了一个靠谱的方法，那就是使用sudo重启php-fpm.</p>
<pre><code class="language-bash">$ brew services stop php53
$ sudo brew services start php53</code></pre>
<p>其实除了这样，还可以考虑下重装或者升级PHP的版本。我把本地的php5.3卸载了，重新安装了php5.6也解决了问题。</p>
<pre><code class="language-bash">$ brew uninstall php53
$ brew install php56</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2018-03-06 20:49:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-06 12:49:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[curl-https-502]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%80%e6%ac%a1%e7%94%b1%e4%ba%8ecurl%e5%af%bc%e8%87%b4%e7%9a%84502]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.139.118";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux自定义PHP的环境变量</title>
		<link>https://feilong.tech/2018/03/07/linux-php-const/</link>
		<pubDate>Wed, 07 Mar 2018 09:41:46 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[<p>很多时候，我们会使用 PHP的<code>$_SERVER</code>数组，通过这个数组，可以获取一些服务器的变量信息。但是不同的模式下，这个全局数组是不一样的。比如，在web模式下，<code>$_SERVER</code> 是获取的fastcgi_params，在cli模式下，获取的是环境变量(也就是常见的Linux 的export设置的)</p>
<p>举个例子，我们要设置$_SERVER['AAAAA']='test_data'</p>
<p>刚开始，不管web模式下，还是cli模式下，都是没有这个值的。</p>
<p>web模式
<img src="/uploads/2018/03/WX20180307-173333-300x55.png" alt="" /></p>
<p>cli模式
<img src="/uploads/2018/03/WX20180307-173521.png" alt="" /></p>
<h4>更改nginx 的环境变量</h4>
<p>找到fastcgi_params文件，一般是和nginx.conf在同一个目录，</p>
<p><img src="/uploads/2018/03/WX20180307-173138.png" alt="" /></p>
<pre><code class="language-bash">$ sudo nginx -s reload </code></pre>
<p>然后刷新页面
<img src="/uploads/2018/03/WX20180307-173727.png" alt="" /></p>
<h4>更改cli模式先的环境变量</h4>
<pre><code class="language-bash">$ vim ~/.bashrc</code></pre>
<p><img src="/uploads/2018/03/WX20180307-173048.png" alt="" /></p>
<pre><code class="language-bash">$ source ~/.bashrc
$ php -r &#039;var_dump($_SERVER[&quot;AAAAA&quot;]);&#039;;</code></pre>
<p><img src="/uploads/2018/03/WX20180307-173922.png" alt="" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 17:41:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 09:41:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-php-const]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[linux%e8%87%aa%e5%ae%9a%e4%b9%89php%e7%9a%84%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"185.191.171.9";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>记面试N个PHP程序员的经历</title>
		<link>https://feilong.tech/2018/03/23/interview-phpers/</link>
		<pubDate>Fri, 23 Mar 2018 11:42:44 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<p>最近公司扩招，由于公司的业务扩张，所以需要再招几个PHPer。北京这边本来PHPer很少，算上我也就两个，另一个算是我的半个师傅。一面肯定不能让他来做，所以我就自己来进行一面。下面说下我这几天面试的感悟。</p>
<h4>1、笔试篇</h4>
<p><img src="/uploads/2018/03/timg.png" alt="" /></p>
<p>由于自己是第一次面试别人，所以前一天下午，就让人力的同事把简历打印出来，提前准备准备，我也是针对这几个人的简历，除了几道题，可以说，这几道题是完全和简历的内容相符的。这些笔试题包括 PHP的输出、include等函数的区别、session与cookie的关系、截取字符串、HTML、js以及MySQL的基本知识。也就是简单的不能简单的问题了。</p>
<p>到了第二天，看了几个人的笔试结果，结果是非常差，就连基本的知识点都没写出来或者写错了。看了笔试题，我内心还是比较火大的，因为笔试算是对一个面试者技能第一眼体现。就相当于相亲一样，第一印象往往是非常关键的。所以，笔试是进入一面的敲门砖。还记得我第一次参加笔试，答完笔试题就被告知“等消息”，我终于体会到面试官的感觉了。就连基本的笔试题都答不出来，你有什么资格面试！</p>
<h4>2、简历篇</h4>
<p><img src="/uploads/2018/03/timg-1-1024x768.jpg" alt="" /></p>
<h5>1、简历大同小异，没有亮点</h5>
<p>由于是第一次面试，虽然笔试结果并不理想，但是我还是一个人一个人的面。我拿着简历，让面试者自我介绍，这个估计是所有面试的基本过程。大多数的简历上面写的内容：</p>
<ul>
<li>对项目的bug进行修复，维护系统</li>
<li>进行需求分析，跟进开发工作</li>
<li>后期的维护工作</li>
<li>系统的增删改查 </li>
<li>......</li>
</ul>
<p>简历内容完全是大同小异，根本就没有亮点。作为面试官，我最想看到的就是简历上面要有一些与众不同的亮点，<strong>比如做了遇到了哪些技术难点，已经一些解决问题的思路，这样要比写已经基本的项目经验更优吸引力</strong>。就算这个问题到了最后，没有找到一个完美的解决方案，这也算是一个亮点。</p>
<h5>2、对技术的了解程度</h5>
<p>最好了解你简历里面提到的技术。这一点很重要。
基本上每个人的简历上面都会写<code>熟悉redis、memcache或者MongoDB</code>，但是每次询问到这些技术的时候，大多数回答：我们用了这些技术。但是确完全没有更深入的答案。只是停留在使用的上面。如果 <code>你能够提到redis哨兵的作用、redis原理、MongoDB与关系型数据库的优势和劣势</code>，这无疑是加分项。因为，使用谁都会!</p>
<h4>面试篇</h4>
<h5>1、别妄想打感情牌</h5>
<p>别打算用感情打动面试官，没用的！！！面试官代表着公司的利益，如果面试官招到的人不合格，那么公司对面试官的评价会受到直接的影响。所以面试官能不能找到一个合格人员，也和自己的利益息息相关。
我面试了一个人，基础真的很差，简历也非常简单，基本上一无所长，“我真的很想加入你们的公司....”。结果很明显，这样完全是没有意义的。就算你侥幸过了一面，但是还有二面。如果二面的面试官一看，这个人什么都不会，那么势必会怀疑一面面试官的能力，怀疑他没有尽职尽责的筛选，耽误别人的时间。</p>
<h5>2、基础一定要扎实</h5>
<p>如果过了一面，二面面试官除了会问一些项目经验，可能会问的更加深入。比如一些原理、内核或者系统设计相关知识。所以想要成为一个高阶的PHP程序员，还需要对PHP的内核、数据库的原理、数据结构都要具备才行。</p>
<h4>总结</h4>
<p>吃程序员这碗饭的人太多了，所以想要找到一个高薪的工作，一定要让自己脱颖而出才行。一个优秀的程序员，肯定不是一个只懂写代码的程序员，更应该是一个有好奇心、喜欢探索、喜欢分享的人。希望自己有一天也能成为像鸟哥、reeze那样的人！！！</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2018-03-23 19:42:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-23 11:42:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[interview-phpers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="think"><![CDATA[自我反思]]></category>
		<category domain="post_tag" nicename="%e9%9d%a2%e8%af%95"><![CDATA[面试]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[265]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e8%ae%b0%e9%9d%a2%e8%af%95n%e4%b8%aaphp%e7%a8%8b%e5%ba%8f%e5%91%98%e7%9a%84%e7%bb%8f%e5%8e%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.103";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>awk命令的简单介绍</title>
		<link>https://feilong.tech/2018/04/08/awk/</link>
		<pubDate>Sun, 08 Apr 2018 15:54:50 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=271</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>背景</h4>
<p>awk算是Linux上面比较实用频繁的命令之一。第一次见到这个命令，是同事们分析一些日志实用，通过这个命令与其他命令结合，可以有效的分析nginx日志的一些访问情况。所以我也特意找了一些资料，查询了一下。</p>
<h4>语法规则</h4>
<p>awk的命令的语法规则是  <code>awk &#039;条件类型1{动作1} 条件类型2{动作2} ...&#039; 文件名；</code> 。awk条件类型后面的{}是满足条件后处理的一些动作。这些动作可以形成一套连续的操作。awk的处理单元是每一行。也就是每行处理之后，再对下一行进行处理。所以，awk并不适合对大量数据处理。</p>
<h4>awk的处理原理</h4>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ awk &#039;{print $0}&#039; /etc/passwd
##
# User Database
#
# Note that this file is consulted directly only when the system is running
# in single-user mode.  At other times this information is provided by
# Open Directory.
#
# See the opendirectoryd(8) man page for additional information about
# Open Directory.
##
nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
root:*:0:0:System Administrator:/var/root:/bin/sh
daemon:*:1:1:System Services:/var/root:/usr/bin/false
_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico
_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false
_networkd:*:24:24:Network Services:/var/networkd:/usr/bin/false
_installassistant:*:25:25:Install Assistant:/var/empty:/usr/bin/false
_lp:*:26:26:Printing Services:/var/spool/cups:/usr/bin/false
.....</code></pre>
<p>我们发现，这样输出的内容和执行<code>cat /etc/passwd</code>内容是一样的。</p>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ awk &#039;{print $1}&#039; /etc/passwd
##
#
#
#
#
#
#
#
#
##
nobody:*:-2:-2:Unprivileged
root:*:0:0:System
daemon:*:1:1:System
_uucp:*:4:4:Unix
_taskgated:*:13:13:Task
_networkd:*:24:24:Network
_installassistant:*:25:25:Install
_lp:*:26:26:Printing
_postfix:*:27:27:Postfix
_scsd:*:31:31:Service
_ces:*:32:32:Certificate
_mcxalr:*:54:54:MCX
_appleevents:*:55:55:AppleEvents
_geod:*:56:56:Geo
_serialnumberd:*:58:58:Serial
_devdocs:*:59:59:Developer
_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false
_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false
.....</code></pre>
<p>随着print后面的变化，输出的内容也发生了变化</p>
<p>所以，awk的原理是这样的</p>
<p><img src="/uploads/2018/04/WX20180408-225116.png" alt="" /></p>
<p>除了这个，awk还有一些标量的含义</p>
<table>
<thead>
<tr>
<th>标量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>NR</td>
<td>当前的行号</td>
</tr>
<tr>
<td>NF</td>
<td>每一行拥有的字段总数</td>
</tr>
<tr>
<td>FS</td>
<td>每行的字段分隔符（默认空格）</td>
</tr>
<tr>
<td>RS</td>
<td>每行的结束符（默认\n）</td>
</tr>
</tbody>
</table>
<h4>实际操作</h4>
<h5>以分号进行分割</h5>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ awk &#039;FS=&quot;:&quot; {print $1}&#039; /etc/passwd ## 或 awk -F &quot;:&quot; &#039;{print $1}&#039; /etc/passwd
##
# User Database
#
# Note that this file is consulted directly only when the system is running
# in single-user mode.  At other times this information is provided by
# Open Directory.
#
# See the opendirectoryd(8) man page for additional information about
# Open Directory.
##
nobody
root
daemon
_uucp
_taskgated
_networkd
_installassistant
_lp
_postfix
_scsd
_ces
_mcxalr
....</code></pre>
<h5>比如，只看 第20行到30行的内容</h5>
<pre><code class="language-shell">feilongdeMBP:~ feilong$ awk &#039;{if(NR&gt;=20 &amp;&amp; NR&lt;=30) {print &quot;行号是: &quot; NR &quot; &quot; $0}}&#039; /etc/passwd
行号是: 20 _scsd:*:31:31:Service Configuration Service:/var/empty:/usr/bin/false
行号是: 21 _ces:*:32:32:Certificate Enrollment Service:/var/empty:/usr/bin/false
行号是: 22 _mcxalr:*:54:54:MCX AppLaunch:/var/empty:/usr/bin/false
行号是: 23 _appleevents:*:55:55:AppleEvents Daemon:/var/empty:/usr/bin/false
行号是: 24 _geod:*:56:56:Geo Services Daemon:/var/db/geod:/usr/bin/false
行号是: 25 _serialnumberd:*:58:58:Serial Number Daemon:/var/empty:/usr/bin/false
行号是: 26 _devdocs:*:59:59:Developer Documentation:/var/empty:/usr/bin/false
行号是: 27 _sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false
行号是: 28 _mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false
行号是: 29 _ard:*:67:67:Apple Remote Desktop:/var/empty:/usr/bin/false
行号是: 30 _www:*:70:70:World Wide Web Server:/Library/WebServer:/usr/bin/false</code></pre>
<h5>已知 test.txt 内容是 &quot;I am Poe,my qq is 33794712&quot;。过滤相应字符串，是输出结果为 &quot;Poe 33794712&quot;</h5>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ awk -F &quot;[ ,]+&quot; &#039;{print $3 &quot; &quot; $7}&#039; test.txt
Poe 33794712</code></pre>
<h4>BEGIN和END模块</h4>
<p>begin和end主要是只在awk执行开始（还没对第一行进行操作）和结束（对最后一行处理结束）后的行为。所以，begin和end只会操作一次。所以begin和end更像是 编程语言中的默认构造函数和析构函数。</p>
<h5>统计用户的数量</h5>
<pre><code class="language-bash">feilongdeMBP:Downloads feilong$ awk &#039;BEGIN{count = 0} {if (NR &gt; 10) { count ++} } { if (NR &gt; 10 ) { print $1}} END{print &quot;总的用户数量是: &quot; count}&#039; /etc/passwd ## 以为我的机器上面前10行不是用户的数据
nobody:*:-2:-2:Unprivileged
root:*:0:0:System
daemon:*:1:1:System
_uucp:*:4:4:Unix
_taskgated:*:13:13:Task
_networkd:*:24:24:Network
_installassistant:*:25:25:Install
_lp:*:26:26:Printing
_postfix:*:27:27:Postfix
_scsd:*:31:31:Service
_ces:*:32:32:Certificate
_mcxalr:*:54:54:MCX
_appleevents:*:55:55:AppleEvents
_geod:*:56:56:Geo
_serialnumberd:*:58:58:Serial
_devdocs:*:59:59:Developer
_sandbox:*:60:60:Seatbelt:/var/empty:/usr/bin/false
_mdnsresponder:*:65:65:mDNSResponder:/var/empty:/usr/bin/false
_ard:*:67:67:Apple
_www:*:70:70:World
_eppc:*:71:71:Apple
总的用户数量是: 93</code></pre>
<h5>总计金额</h5>
<pre><code class="language-shell">feilongdeMBP:~ feilong$ cat test.txt
Name    1st 2st 3st
Tyler   100 200 500
Start   59  30  444
Jack    345 222 67

feilongdeMBP:~ feilong$  awk &#039;BEGIN{ totle = 0;} NR==1{print &quot;Name\t1st\t2st\t3st\tTotle&quot;} NR&gt;=2{totle = $2 + $3 + $4; print $1 &quot;\t&quot; $2 &quot;\t&quot; $3 &quot;\t&quot; $4 &quot;\t&quot;  totle}&#039; test.txt
Name    1st 2st 3st Totle
Tyler   100 200 500 800
Start   59  30  444 533
Jack    345 222 67  634</code></pre>
<h5>统计字节数量</h5>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ ll | grep JPG
-rw-r--r--@   1 feilong  access_bpf    255800  3  1 16:49 IMG_0898.JPG
-rw-r--r--@   1 feilong  access_bpf    258234  3  1 16:49 IMG_0899.JPG
-rw-r--r--@   1 feilong  access_bpf    338363  3  4 10:32 IMG_0930.JPG

feilongdeMBP:~ feilong$ ll | grep JPG | awk &#039;BEGIN{size = 0;} {size += $5} END{print &quot;The .JPG file size:&quot; size/1024/1024 &quot;MB&quot;}&#039;
The .JPG file size:0.812909MB</code></pre>
<h4>awk还有丰富的运算符</h4>
<p>awk支持大多数的运算符，这些运算符和编程语言基本类似</p>
<p><img src="/uploads/2018/04/1089507-20170126224150269-207487187.jpg" alt="" /></p>
<h4>正则表达式</h4>
<p>语法结构 <code>awk &#039;/正则表达式/{动作}&#039; 文件</code></p>
<h5>找出匹配包含root的行</h5>
<pre><code class="language-shell">feilongdeMBP:~ feilong$ awk &#039;/root/{print $0}&#039; /etc/passwd
root:*:0:0:System Administrator:/var/root:/bin/sh
daemon:*:1:1:System Services:/var/root:/usr/bin/false
_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false</code></pre>
<h4>其他</h4>
<p>awk还有其他的功能，比如支持for循环，if语句，while循环等待</p>
<h5>for 循环</h5>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ awk &#039;/root/{print $0; for(i=1; i&lt; 4; i++) {print &quot;test&quot;}}&#039; /etc/passwd
root:*:0:0:System Administrator:/var/root:/bin/sh
test
test
test
daemon:*:1:1:System Services:/var/root:/usr/bin/false
test
test
test
_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false
test
test
test</code></pre>
<h4>参考资料</h4>
<ul>
<li><a href="https://www.cnblogs.com/ginvip/p/6352157.html">Linux三剑客之awk命令</a></li>
<li>鸟哥的Linux私房菜基础学习篇</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date><![CDATA[2018-04-08 23:54:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-08 15:54:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[awk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[awk%e5%91%bd%e4%bb%a4%e7%9a%84%e7%ae%80%e5%8d%95%e4%bb%8b%e7%bb%8d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"220.181.108.81";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>索引对性能到底有多少的影响？？</title>
		<link>https://feilong.tech/2018/04/13/mysql-index/</link>
		<pubDate>Fri, 13 Apr 2018 12:06:33 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=274</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>索引到底对性能有多少影响？</h4>
<p>这个问题估计是很多MySQL小白好奇的问题。当然我也是一样。因为之前的时候，并没有对索引有太多的注意，而且之前的工作经历，因为数据量很小，索引所起到的作用并不是很大，所以也没有太大注意。</p>
<h4>事情的起点</h4>
<p>我在公司是做后端开发（PHPer），除了日常的开发工作，也要兼职公司的运维。每周安排一个人跟进报警邮件，出现问题及时通报。</p>
<p>像很多创业公司的一样，我们选用的是阿里云的ECS+RDS。因为如果自己购买服务器，不管是运维成本还是物理成本都是比较高的。</p>
<p>一天将近半夜12点的时候，报警日志突然出现了<code>MySQL server has gone away</code></p>
<p>遇到问题肯定是先Baidu，我找到了MySQL官方的解释，原因是查询的时候，出现的mysql断开的情况。我登录阿里云rds后台，发现wait_timeout时间长得很。不应该会出现超时的情况。</p>
<p><img src="/uploads/2018/04/29826BAFF73C1D32CDD9C5A89502CB29.png" alt="" /></p>
<p>一个同事：“会不会和rds经常CPU报警有关？”</p>
<p>我勒个去，我查了一下rds监控，果然CPU持续升高。</p>
<p><img src="/uploads/2018/04/1523616180755.jpg" alt="" /></p>
<h4>问题跟进</h4>
<p>rds自带了日志系统，可以方便。查看了一下慢日志系统，果然有很多的慢SQL日志。</p>
<p><img src="/uploads/2018/04/WX20180413-194555.png" alt="" /></p>
<p>我曹，每次扫描了8W多行。看来是没有使用到索引。加上次数频繁，解析的总次数高达 1762833762 行。</p>
<h4>定位问题</h4>
<p>查看MySQL的执行计划</p>
<pre><code class="language-sql">mysql&gt; explain extended SELECT * FROM `test` WHERE `is_deleted` =0 AND `a` = 81644;
+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+
| id | select_type | table     | type | possible_keys | key  | key_len | ref  | rows  | Extra       |
+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+
|  1 | SIMPLE      | test | ALL  | a_index      | NULL | NULL    | NULL | 86172 | Using where |
+----+-------------+-----------+------+---------------+------+---------+------+-------+-------------+
1 row in set, 3 warnings (0.01 sec)
mysql&gt; show warnings;
| Level   | Code | Message                                                                                             
| Warning | 1739 | Cannot use ref access on index &#039;a_index&#039; due to type or collation conversion on field &#039;a&#039;                                                                                                 |
| Warning | 1739 | Cannot use range access on index &#039;a_index&#039; due to type or collation conversion on field &#039;a&#039;</code></pre>
<p>果然是没有用到索引，全表扫描。</p>
<p>原来，由于a数据类型是varchar类型的。但是查询的时候，使用的int类型，在执行SQL语句的时候，由于类型原因，造成了隐式转换。没有用到索引。所以实际上，应该把原来的SQL语句更改成 <code>SELECT * FROM  test  WHERE is_deleted =0 AND a = &#039;81644&#039;</code>。</p>
<p>虽然原因找到了，但是查询的SQL那么多，定位那具体的php文件以及对于的代码行数，也是一个难题。</p>
<h4>PHP慢日志</h4>
<p>为了能够定位代码的效率，PHP自带一个功能，那就是慢日志。如果PHP脚本，执行时间比较长的时候，那么PHP会认为这段代码是有问题的，PHP会把代码的基本信息打印到慢日志里面，能够方便开发者定位问题。</p>
<p>这么说来，如果找到慢日志里面关于执行这个SQL的代码，也就能够准确定位到对应的PHP文件。</p>
<h4>索引对性能的影响！</h4>
<p>接下来用对比图来比较下使用索引和没有使用索引的对比吧</p>
<p><img src="/uploads/2018/04/WX20180413-200112.png" alt="" /></p>
<p>优化之后的SQL执行效率，相比之前要高出很多，CPU占用率稳定保持在个位数，甚至 5%一下，相比之前80%左右，呈现指数的翻倍。</p>
<h4>总结</h4>
<p>其实隐式转换是MySQL索引经常遇到的问题。我最开始听说是前段时间，阿里云组织了一个<a href="https://yq.aliyun.com/roundtable/56333?utm_content=m_25986">慢SQL的优化大赛</a>。虽然没有得到名次，但是确实通过大赛，学到了很多关于索引的知识。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2018-04-13 20:06:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-13 12:06:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-index]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[sql]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e7%b4%a2%e5%bc%95%e5%af%b9%e6%80%a7%e8%83%bd%e5%88%b0%e5%ba%95%e6%9c%89%e5%a4%9a%e5%b0%91%e7%9a%84%e5%bd%b1%e5%93%8d%ef%bc%9f%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.103";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>让Json更懂中文(JSON_UNESCAPED_UNICODE)</title>
		<link>https://feilong.tech/2018/07/05/php-json-encode/</link>
		<pubDate>Thu, 05 Jul 2018 07:57:10 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=283</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>背景</h4>
<p>在工作期间，遇到一个关于json的问题，就是如果是中文，那么json就会自动将中文编码成Unicode，这样并不是说有问题，只是可读性大大降低。</p>
<p>之前遇到这个问题的时候，一直以为是在http传输过程中造成的，但是真是原因是由于json_encode的时候，中文自动被编码成了Unicode。</p>
<pre><code class="language-php">$array = array(
    &#039;name&#039; =&gt; &#039;肥龙&#039;
);
echo json_encode($array);</code></pre>
<p>执行结果:</p>
<p><img src="/uploads/2018/07/json_encode.png" alt="" /></p>
<h4>PHP新特性</h4>
<p>但是从<code>PHP5.4</code>之后，这个更新了一个新的json_encode的特性，是专门针对中文问题的。那就是增加新特性——JSON_UNESCAPED_UNICODE。</p>
<pre><code class="language-php">$array = array(
    &#039;name&#039; =&gt; &#039;肥龙&#039;
);
echo json_encode($array, JSON_UNESCAPED_UNICODE);</code></pre>
<p>执行结果：</p>
<p><img src="/uploads/2018/07/json_encode2.png" alt="" /></p>
<h4>总结</h4>
<p>这个特性帮助我们编码更高可读性的json，但是这个特性是在PHP5.4之后才增加的，所以PHP5.3版本暂不支持，会提示<code> Use of undefined constant JSON_UNESCAPED_UNICODE</code></p>
<p><img src="/uploads/2018/07/json_encode3-1024x82.png" alt="" /></p>
<h4>参考文献</h4>
<ul>
<li><a href="http://www.laruence.com/2011/10/10/2239.html">让Json更懂中文(JSON_UNESCAPED_UNICODE)</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date><![CDATA[2018-07-05 15:57:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-05 07:57:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-json-encode]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e8%ae%a9json%e6%9b%b4%e6%87%82%e4%b8%ad%e6%96%87json_unescaped_unicode]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"91.219.254.100";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vscode安装psr2格式化工具</title>
		<link>https://feilong.tech/2018/07/26/vscode-install-psr2/</link>
		<pubDate>Wed, 25 Jul 2018 16:14:21 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>关于</h3>
<p>PSR应该算得上是PHP比较权威的codestyle的标准了，大多数的PHP届都是沿用psr的风格。当然，其中也会或多或少的有一些自己的风格，比如PHP Ci框架，也有一些自己的代码风格。</p>
<p>vscode是我用了这么多编译器中最好用的了，它虽然不想sublime那样轻便，但是他自带的一些工具非常好用。比如，集成git之后，不用再使用命令行提交变更，解决冲突直接一个按钮操作。用金星姐姐的话来说，“完美”。</p>
<h3>开始安装</h3>
<p>VScode有一款插件，是用来做PHP代码格式化的，叫做 <code>PHP Formatter</code>， 如果你们公司使用PSR的命名规范，那么这个简直就是福音啊。 下载链接 <a href="https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter">https://marketplace.visualstudio.com/items?itemName=Sophisticode.php-formatter</a></p>
<h4>安装php-cs-fixer</h4>
<pre><code class="language-bash">$ composer require fabpot/php-cs-fixer #使用composer安装依赖</code></pre>
<p><img src="/uploads/2018/07/QQ20180725-235749@2x-1024x350.png" alt="" /></p>
<h4>在VScode上面下载插件</h4>
<p><img src="/uploads/2018/07/QQ20180726-000004-1024x859.png" alt="" /></p>
<h4>配置插件</h4>
<p>VScode-&gt;Code-&gt;首选项-&gt;设置
在<code>用户设置</code>增加截图的json的配置项
<img src="/uploads/2018/07/475A8C81-7869-4446-AD83-3EC62F51A6E7-1024x588.png" alt="" /></p>
<h3>enjoin</h3>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date><![CDATA[2018-07-26 00:14:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-25 16:14:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vscode-install-psr2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[vscode%e5%ae%89%e8%a3%85psr2%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%b7%a5%e5%85%b7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"66.249.73.148";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>将MySQL数据导出到Excel</title>
		<link>https://feilong.tech/2018/08/07/mysqldump-excel/</link>
		<pubDate>Tue, 07 Aug 2018 04:23:18 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>背景</h4>
<p>有一天PM跑来找我，让我导出一部分数据。之前做导出的功能，基本上都是依靠代码的方式，如果针对这种临时性需求，如果还要临时写代码，加上自测，一天的时间就这样没了。</p>
<h4>执行</h4>
<pre><code class="language-bash">$ mysql -uroot -proot -e &#039;select * from test&#039; &gt; test.xls</code></pre>
<h4>发现问题</h4>
<p>本来以为只要这条命令就行，但是发现导出的Excel是乱码，原来是因为配置文件里面，客户端连接的编码方式不是utf8</p>
<h4>重试</h4>
<pre><code class="language-bash">$ mysql -uroot -proot -e &#039;set names utf8; select * from test&#039; &gt; test.xls</code></pre>
<p>网上找了一下方案，需要使用记事本打开，然后另存为中文的编码方式。</p>
<p>但是我使用Mac打开的时候，没有找到<code>另存为</code>选项 - -</p>
<p><img src="/uploads/2018/08/WX20180807-121223@2x.png" alt="" /></p>
<h4>解决办法</h4>
<p>文件-&gt;复制-&gt;存储(副本)-&gt;纯文本编码:(中文 GB18030)-&gt;更改文件拓展名为xls 即可</p>
<p><img src="/uploads/2018/08/20180807121627.jpg" alt="" /></p>
<p><img src="/uploads/2018/08/WX20180807-122030@2x.png" alt="" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date><![CDATA[2018-08-07 12:23:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-07 04:23:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysqldump-excel]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%b0%86mysql%e6%95%b0%e6%8d%ae%e5%af%bc%e5%87%ba%e5%88%b0excel]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.128.142";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>读《财富自由之路》</title>
		<link>https://feilong.tech/2018/08/25/reading/</link>
		<pubDate>Sat, 25 Aug 2018 04:14:15 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=301</guid>
		<description></description>
		<content:encoded><![CDATA[<p>有人说李笑来是骗子，但是就算是骗子又能怎样，只要他的想法能够帮助我们能够成长，能够变得强大，难道不就足够了吗？</p>
<h3>初次了解</h3>
<p>第一次听说李笑来基本上和其他人是一样的，最开始是通过比特币疯长，然后就是比特币最多的中国人。另一个就是我的一个朋友是李笑来的特粉。后来就直接在网上购买了一本《财富自由之路》。</p>
<p>这本书和他的《把时间当朋友》都卖的不错（当然《TOEFL核心词汇21天突破》卖的也很好，但是偏向于英语专业），所以就在京东买了一本。</p>
<p>买书的初衷基本上和大家的想法一致，准备依靠这本书走向财富自由（天真脸），但是看了一半才知道，这本书其实偏重于方法论。</p>
<h3>什么叫做财富自由</h3>
<p>这个问题既简单又困难，我觉得一般人很难给出具体的概念。“我觉得我不用上班就是实现财富既有”，“我有xxx钱就是实现财富自由”...，但是这些说法似乎都不能让人信服，因为毕竟马云还要继续工作，况且，不工作，一直享受的人生，真的没什么意义。</p>
<p>“财富自由就是某个人不用再因为满足生活必需而出卖自己的时间”。</p>
<p>是的，我们的工作都算是因为生活必需而出卖自己的时候。每个人的工资的高低，也是因为单位时间产生的价值更高。</p>
<p>所以，想要实现财富自由，那就嘴根本的办法，就是让我们单位时间产生的价值更高，换句话来讲，实现财富自由只能靠提升我们自己的价值来实现。</p>
<h3>元认知</h3>
<p><code>元认知</code>这个词应该算是书中出现的最频繁的词汇。<code>元认知</code> 按照书中说法就是<code>对认知的认知，对思考的思考</code>。这句话听着虽然有些拗口，但是其实和<code>三思而后行</code> 是有些类似的。</p>
<p>当我们遇到一些困难的时候，我们会想到一些解决的办法，但是这些解决办法并不都是合理的，所以我们就需要在这些方法里面做一些筛选，这就是所谓的<code>元认知</code>。</p>
<h3>笃信</h3>
<p>除了<code>元认知</code>以外，还有一个词，我觉得对我也很有意义——笃信。笃信，也就是120%的相信。当真的能够把这个词汇加到自己的脑子里面，然后再加上<code>元认知</code>，基本上就不会害怕所谓的新东西和新事物了。</p>
<p>举个例子，公司前段时间新买了一台咖啡机，我算是对新事物感兴趣的人。新买的咖啡机，基本上很少人会用，但是有一本说明书。我拿起来看了起来，然后按照说明书，做一些笨拙的操作。但是我并不会在意别人的看法：使用咖啡机居然还要看说明书。这个时候，我的<code>元认知</code>开始启动，它告诉我：“并不是每个人都会使用咖啡机，最开始学习使用的时候，都是从笨拙的操作开始，不用担心自己笨拙，使用的次数多了，也就是越来越熟练了”，然后我<code>笃信</code>自己能够学会使用咖啡机，现在，基本上公司里面我算是非常熟练的使用咖啡机的人了。</p>
<p>很多人，很在意别人的看法，然后放弃解除新事物，新东西。但是，任何学习，都是从笨拙的操作开始的，难道最开始学习算是的时候，不是掰着手指计算的吗？</p>
<h3>其他</h3>
<p>书中除了<code>元认知</code>和<code>笃信</code>，还有其他很多内容，比如，如何投资...，但是那些都不重要了，重要的是，只要学会结合使用<code>元认知</code>和<code>笃信</code>，那么基本上不用再担心遇到问题了。</p>
<h3>总结</h3>
<p>其实<code>元认知</code>我们一直都是存在的，但是很多时候，我们并没有注意到。</p>
<p>不管怎么说，这本书都算是提高自己的好书。</p>
<p>在写这篇博客的时候，我不再害怕自己写不好文字，因为我笃信自己会把自己的写作水平一点点提高，我笃信总有一天，我的写作水平能够到达一个比较好的水平 ：）</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date><![CDATA[2018-08-25 12:14:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-25 04:14:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[reading]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e8%af%bb%e3%80%8a%e8%b4%a2%e5%af%8c%e8%87%aa%e7%94%b1%e4%b9%8b%e8%b7%af%e3%80%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker之link的使用</title>
		<link>https://feilong.tech/2018/08/31/docker-link/</link>
		<pubDate>Fri, 31 Aug 2018 14:52:43 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=304</guid>
		<description></description>
		<content:encoded><![CDATA[Docker功能可以说是非常强大，但是如果想要短时间掌握docker的使用，还是有一些难度的。之前有了解一些docker的知识，但是大多数都是囫囵吞枣。并没有从最基础的知识学起，所以现在想要系统的学习一下docker的知识。
<h3>通信的痛点</h3>
link的主要作用是实现不同容器之间的连接。
举个例子，我现在有个PHP的容器，我又创建了一个mysql的容器，这个时候，如果我想要使用PHP连接mysql的容器，最常规的方式就是通过ip连接。但是这样的话，如果mysql的容器一旦重启或者重新编译，那么ip就会有可能变动，我们就需要手动更改PHP容器内连接的ip，这样的维护成本太高了。
link的作用就是要解决这个痛点问题。
<h3>link的实现</h3>
我们首先pull一个busybox的镜像，busybox是一个非常小巧的Linux镜像，占用的空间只有几MB，但是相比较Ubuntu的镜像，要小很多倍，而且也集成了很全的Linux命令

<img class="alignnone size-full wp-image-305" src="/uploads/2018/08/pull-busybox.png" alt="" width="585" height="106" />

<img class="alignnone size-full wp-image-306" src="/uploads/2018/08/busyboxandubuntu.png" alt="" width="796" height="180" />
<h4>创建test1容器</h4>
<img class="alignnone size-full wp-image-307" src="/uploads/2018/08/test1.png" alt="" width="703" height="303" />

从截图中，我们可以看出test1的ip是172.17.0.2
<h4>创建test2容器</h4>
我们需要新打开一个窗口，然后创建test2容器

<img class="alignnone size-full wp-image-308" src="/uploads/2018/08/test2.png" alt="" width="495" height="73" />

这个时候我们ping test1的容器，是不能ping通的。
<h4>使用link关联test1和test2</h4>
我们推出test2，删除test2容器，重新run一个容器

<img class="alignnone size-full wp-image-309" src="/uploads/2018/08/test22.png" alt="" width="604" height="291" />

这个时候我们发现test2里面是可以通过别名test1去进行连接，

所以，比如test1里面运行了mysql，test2里面运行了PHP，那么，连接mysql的地方，完全可以把主机的地址写成test1
<h3>总结</h3>
使用link的作用显而易见，我们可以通过别名，直接让两个容器进行通信，使用容器名称通信的优势：
<ol>
 	<li>不用担心ip的变动，因为name是唯一的</li>
 	<li>极大的增加了可读性</li>
 	<li>降低了运维成本</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2018-08-31 22:52:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-31 14:52:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-link]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e5%ae%b9%e5%99%a8"><![CDATA[容器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[docker%e4%b9%8blink%e7%9a%84%e4%bd%bf%e7%94%a8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"111.197.235.32";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker之运行golang</title>
		<link>https://feilong.tech/2018/09/02/docker-golang/</link>
		<pubDate>Sat, 01 Sep 2018 16:21:04 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[<p>众所周知，docker解决了编程的痛点问题——运行环境，所以我先走基本上尽量都使用docker运行。这样做，首先就是让我不必关心配置复杂的运行环境，另外也可以让我更加熟练的使用docker。</p>
<pre><code class="language-go">//go-sample.go
package main
import &quot;fmt&quot;
func main() {
    fmt.Println(&quot;hello world&quot;);
}</code></pre>
<h2>Golang:onbuild</h2>
<p>现在关于go的docker镜像也发布了很多个版本，我们首先介绍一下<code>golang:onbuild</code>以及如何使用。
<code>golang:onbuild</code>是go语言官方发布的一款很小的镜像(只有几KB大小)，目的是为了让我们可以编译go文件，并且运行。使用的方式很简单，只需要创建一个Dockerfile，然后在首行加上<code>FROM golang:onbuild</code>。</p>
<pre><code class="language-bash">-rw-r--r--@ 1 feilong wheel 20 9 2 00:23 Dockerfile
-rw-r--r-- 1 feilong wheel 72 9 2 00:03 go-sample.go
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$ cat Dockerfile
FROM golang:onbuild
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$ docker build -t golang_onbuild .
Sending build context to Docker daemon  3.072kB
Step 1/1 : FROM golang:onbuild
onbuild: Pulling from library/golang
ad74af05f5a2: Pull complete
2b032b8bbe8b: Pull complete
a9a5b35f6ead: Pull complete
25d9840c55bc: Pull complete
d792ec7d64a3: Pull complete
be556a93c22e: Pull complete
3a5fce283a1e: Pull complete
0621865a0c2e: Pull complete
Digest: sha256:c0ec19d49014d604e4f62266afd490016b11ceec103f0b7ef44875801ef93f36
Status: Downloaded newer image for golang:onbuild
# Executing 3 build triggers
 ---&gt; Running in 109c7a7ebeb5
+ exec go get -v -d
Removing intermediate container 109c7a7ebeb5
 ---&gt; Running in c0dfd28de95e
+ exec go install -v
app
Removing intermediate container c0dfd28de95e
 ---&gt; 820e315d7160
Successfully built 820e315d7160
Successfully tagged golang_onbuild:latest
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$ docker run -it --rm --name go_onbuild golang_onbuild
+ exec app
hello world</code></pre>
<p>我们根据docker:onbuild的Dockerfile文件具体分析一个整个编译的过程(以1.3.1版本为例)</p>
<pre><code class="language-dockerfile">FROM golang:1.3.1

RUN mkdir -p /go/src/app
WORKDIR /go/src/app

# this will ideally be built by the ONBUILD below ;)
CMD [&quot;go-wrapper&quot;, &quot;run&quot;]

ONBUILD COPY . /go/src/app
ONBUILD RUN go-wrapper download
ONBUILD RUN go-wrapper install</code></pre>
<p>从Dockerfile和build过程可以看出，在进行build的时候，经历了三次触发器:</p>
<ul>
<li>首先，将当前目录拷贝到<code>. /go/src/app</code></li>
<li>下载对应的依赖包</li>
<li>编译安装</li>
</ul>
<p>编译之后，golang:onbuild镜像默认包含了一个CMD [&quot;app&quot;] 命令，用来执行编译后的go文件。</p>
<p>我们通过实际run一个容器验证一下：</p>
<pre><code class="language-bash">feilongdeMBP:go feilong$ docker run -it --rm --name golang_onbuild golang_onbuild
+ exec app
hello world</code></pre>
<h2> Golang:latest</h2>
<p>相比较golang:onbuild的便利性，golang:latest就变得很灵活了，需要我们手动编译go文件，然后手动执行编译后的文件。因为毕竟电脑并不知道你具体想要编译的顺序，以及你要想要执行的编译文件。运行过程如下：</p>
<pre><code class="language-bash">feilongdeMBP:go feilong$ ll
total 16
-rw-r--r--@ 1 feilong  wheel  133  9  2 00:04 Dockerfile
-rw-r--r--  1 feilong  wheel   72  9  2 00:03 go-sample.go
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$ cat Dockerfile
FROM golang:latest

RUN mkdir -p /go/src/app
WORKDIR /go/src/app

COPY . /go/src/app
RUN go build -o app .
CMD [ &quot;/go/src/app/app&quot; ]
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$
feilongdeMBP:go feilong$ docker build -t go_go .
Sending build context to Docker daemon 3.072kB
Step 1/6 : FROM golang:latest
 ---&gt; 7e9ac7032e33
Step 2/6 : RUN mkdir -p /go/src/app
 ---&gt; Running in b5d3f63578ed
Removing intermediate container b5d3f63578ed
 ---&gt; 95c2beb49121
Step 3/6 : WORKDIR /go/src/app
 ---&gt; Running in 3011d74944c9
Removing intermediate container 3011d74944c9
 ---&gt; 82d6a45aa3e3
Step 4/6 : COPY . /go/src/app
 ---&gt; 475b2bdd5769
Step 5/6 : RUN go build -o app .
 ---&gt; Running in 5802ac0c98b4
Removing intermediate container 5802ac0c98b4
 ---&gt; 7a019370f09d
Step 6/6 : CMD [ &quot;/go/src/app/app&quot; ]
 ---&gt; Running in a3f6ad19d2ef
Removing intermediate container a3f6ad19d2ef
 ---&gt; 635417bdcda8
Successfully built 635417bdcda8
Successfully tagged go_go:latest</code></pre>
<p>run一个容器，查看运行效果</p>
<pre><code class="language-bash">feilongdeMBP:go feilong$ docker run -it --rm --name go go_go
hello world</code></pre>
<h2>总结</h2>
<p>golang:onbuild和golang:lastest各有利弊，前者更加简单，能够更加简明扼要的告诉我们运行过程，而后者更加灵活，将更多的操作命令交给了开发人员。</p>
<h2>参考文献</h2>
<ul>
<li><a href="https://time-track.cn/build-minimal-go-image.html">https://time-track.cn/build-minimal-go-image.html</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date><![CDATA[2018-09-02 00:21:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-01 16:21:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-golang]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[45]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[docker%e4%b9%8b%e8%bf%90%e8%a1%8cgolang]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[go,clike,bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.152.56";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker之命名空间</title>
		<link>https://feilong.tech/2018/09/10/docker-namespace/</link>
		<pubDate>Mon, 10 Sep 2018 15:19:32 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=332</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1. 基本架构</h2>
<p>docker目前采用了标准的C/S架构。客户端和服务端既可以运行在一个机器上，又可以通过socket或者restful API来进行通信。</p>
<p><a href="/uploads/2018/09/屏幕快照-2018-09-03-下午11.32.07.png"></a></p>
<h3>1.1 服务端</h3>
<p>docker服务端一般都是在宿主机上，来接受客户端的命令。docker默认使用套接字的方式，但是也是允许使用tcp进行端口的监听，可以使用docker daemon -H IP:PORT的方式进行监听。</p>
<h3>1.2 客户端</h3>
<p>docker的客户端主要作用是向服务端发送操作的指令。客户端默认也是采用套接字的方式，向本地的docker服务端发送命令。当然，客户端也是可以使用tcp的方式进行发送指令，使用docker -H tcp://IP:PORT，用来指定接收命令的docker服务端。</p>
<h2>2. 命名空间</h2>
<p>大家在平时使用Linux或者macos的时候，我们并没有拆分多个环境的需求。但是在服务器上面，加入一台服务器运行多个进程，进程之间是相互影响的，比如共享内存，操作相同的文件。我们其实更希望能够将这些进程分离开，这样情况下，如果服务受到攻击，不会影响其他的服务。</p>
<p><img src="/uploads/2018/09/屏幕快照-2018-09-04-下午10.59.44.png" alt="Alt text" /></p>
<p>docker目前主要有6命名空间的隔离方式</p>
<h3>2.1 进程空间隔离</h3>
<p>进程在操作系统中是一个很重要的概念，也就是大家认为的正在运行中的程序。</p>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ ps -ef
UID PID PPID C STIME TTY TIME CMD
0 1 0 0 9:31下午 ?? 0:10.07 /sbin/launchd
0 44 1 0 9:31下午 ?? 0:00.65 /usr/sbin/syslogd
0 45 1 0 9:31下午 ?? 0:01.37 /usr/libexec/UserEventAgent (System)
0 48 1 0 9:31下午 ?? 0:00.25 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld
0 49 1 0 9:31下午 ?? 0:02.57 /usr/libexec/kextd
0 50 1 0 9:31下午 ?? 0:02.40 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd
0 52 1 0 9:31下午 ?? 0:00.16 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted
55 55 1 0 9:31下午 ?? 0:00.38 /System/Library/CoreServices/appleeventsd --server
0 56 1 0 9:31下午 ?? 0:00.75 /usr/sbin/systemstats --daemon</code></pre>
<p>可见当前系统运行了很多“程序”。</p>
<p>我们现在新建一个容器，然后进入容器看下，docker容器里面的进程列表</p>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ docker run -it --rm --name test busybox
/ # ps -ef
PID   USER     TIME  COMMAND
    1 root      0:00 sh
    6 root      0:00 ps -ef</code></pre>
<p>对比很明显，容器内部只有很少的几个正在运行的进程。</p>
<p>我们新建一个窗口，然后看下宿主机上面和docker相关的进程</p>
<pre><code class="language-bash">localhost:~ feilong$ ps -ef | grep docker
    0    82     1   0  9:31下午 ??         0:00.02 /Library/PrivilegedHelperTools/com.docker.vmnetd
  501   918   879   0 10:26下午 ??         0:00.14 /Applications/Docker.app/Contents/MacOS/com.docker.supervisor -watchdog fd:0
  501   920   918   0 10:26下午 ??         0:03.32 com.docker.osxfs serve --address fd:3 --connect vms/0/connect --control fd:4 --log-destination asl
  501   921   918   0 10:26下午 ??         0:00.73 com.docker.vpnkit --ethernet fd:3 --port fd:4 --diagnostics fd:5 --pcap fd:6 --vsock-path vms/0/connect --host-names host.docker.internal,docker.for.mac.host.internal,docker.for.mac.localhost --gateway-names gateway.docker.internal,docker.for.mac.gateway.internal,docker.for.mac.http.internal --vm-names docker-for-desktop --listen-backlog 32 --mtu 1500 --allowed-bind-addresses 0.0.0.0 --http /Users/feilong/Library/Group Containers/group.com.docker/http_proxy.json --dhcp /Users/feilong/Library/Group Containers/group.com.docker/dhcp.json --port-max-idle-time 300 --max-connections 2000 --gateway-ip 192.168.65.1 --host-ip 192.168.65.2 --lowest-ip 192.168.65.3 --highest-ip 192.168.65.254 --log-destination asl --udpv4-forwards 123:127.0.0.1:59434 --gc-compact-interval 1800
  501   922   918   0 10:26下午 ??         0:01.17 com.docker.driver.amd64-linux -addr fd:3 -debug
  501   928   922   0 10:26下午 ??         2:40.08 com.docker.hyperkit -A -u -F vms/0/hyperkit.pid -c 2 -m 2048M -s 0:0,hostbridge -s 31,lpc -s 1:0,virtio-vpnkit,path=vpnkit.eth.sock,uuid=246fb3f9-3ad5-4683-837a-33ac39f57f25 -U 5a3669ae-b209-443a-a074-312cd32a258a -s 2:0,ahci-hd,/Users/feilong/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw -s 3,virtio-sock,guest_cid=3,path=vms/0,guest_forwards=2376;1525 -s 4,ahci-cd,/Applications/Docker.app/Contents/Resources/linuxkit/docker-for-mac.iso -s 5,ahci-cd,vms/0/config.iso -s 6,virtio-rnd -s 7,virtio-9p,path=vpnkit.port.sock,tag=port -l com1,autopty=vms/0/tty,asl -f bootrom,/Applications/Docker.app/Contents/Resources/uefi/UEFI.fd,,
  501  2074  1102   0 11:21下午 ??         0:00.50 /Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper.app/Contents/MacOS/Code Helper /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/vscode-languageclient/lib/utils/electronForkStart /Users/feilong/.vscode/extensions/peterjausovec.vscode-docker-0.1.0/node_modules/dockerfile-language-server-nodejs/lib/server.js --node-ipc --node-ipc --clientProcessId=1102
  501  2100  1065   0 11:24下午 ttys001    0:00.12 docker run -it --rm --name test busybox
  501  2086  2083   0 11:21下午 ttys002    0:00.19 docker exec -it 910aa64a312b3a884f4efb059e47ee601bbd3ba3d62f4c92abd4120cff770828 /bin/sh
  501  2090  2087   0 11:21下午 ttys003    0:00.12 docker exec -it 73f8fbcc50651fd4fea9fe0be7fe4066ea78efd7e9b2438fe657a3e7725e7903 /bin/sh
  501  2115  2111   0 11:27下午 ttys004    0:00.00 grep docker
</code></pre>
<p>在进程列表中，我们没有看到容器内部运行的进程，说明相对于容器的“外部”，容器“内部”的进程是隔离的。但是我们也可以发现，刚刚创建的名字为test的容器，实质上就是宿主机上面的一个PID为2090的进程。</p>
<p>所以，我们可以理解docker的进程树是这个状态：</p>
<p><img src="/uploads/2018/09/屏幕快照-2018-09-04-下午11.43.31.png" alt="Alt text" /></p>
<h3>2.2 网络空间隔离</h3>
<p>容器其实不能完全和宿主机器隔离网络，要不然的话容器就没办法通过外部进行访问，那么也就没有实际的意义。但是容器之间是网络隔离的，这种隔离的方式，就是通过网络命名空间实现的。</p>
<p>docker有四种不同的网络模式：Host、Container、None和bridge</p>
<p>docker默认的是桥接模式。</p>
<p>docker在创建容器的时候， 不仅会给容器创建IP地址，还会在宿主机上面创建一个虚拟网桥docker0，在运行的时候，将容器和该网桥进行相连。</p>
<p>在默认的情况下，创建容器的时候，都会创建一对虚拟网卡，两个虚拟网卡组成数据通道，一个在容器内部，另外一个加入到docker0的网桥中。</p>
<p>打开两个窗口，分别创建redis和redis2容器</p>
<pre><code class="language-bash">[root@izj6c9b96ia369l2i47yq3z feilong]# docker run -it --rm --name redis  -p 6379:6379 redis:latest /bin/bash
root@d89535b59b0b:/data#
[root@izj6c9b96ia369l2i47yq3z feilong]# docker run -it --rm --name redis2 -p 6378:6379 redis:latest /bin/bash
root@7736850135af:/data#</code></pre>
<pre><code class="language-bash">打开第三个窗口，查看网桥的状态
&lt;pre class=&quot;prettyprint&quot;&gt;[feilong@izj6c9b96ia369l2i47yq3z ~]$ brctl show
bridge name     bridge id               STP enabled     interfaces
docker0         8000.024219a15f9d       no              veth8331b03
                                                        vethc5f3cb9</code></pre>
<p><img src="/uploads/2018/09/屏幕快照-2018-09-06-下午8.43.46.png" alt="Alt text" /></p>
<p>docker0 会为每一个容器分配一个新的 IP 地址并将 docker0 的 IP 地址设置为默认的网关。网桥 docker0 通过 iptables 中的配置与宿主机器上的网卡相连，所有符合条件的请求都会通过 iptables 转发到 docker0 并由网桥分发给对应的机器。同时也会在防火墙加上一条新的规则。</p>
<pre><code class="language-bash">[root@izj6c9b96ia369l2i47yq3z feilong]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination
DOCKER-USER  all  --  anywhere             anywhere
DOCKER-ISOLATION-STAGE-1  all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
DOCKER     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere
ACCEPT     all  --  anywhere             anywhere

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain DOCKER (1 references)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             172.17.0.2           tcp dpt:6379
ACCEPT     tcp  --  anywhere             172.17.0.3           tcp dpt:6379
ACCEPT     tcp  --  anywhere             172.17.0.4           tcp dpt:http
......</code></pre>
<h3>2.3 挂载点命名空间</h3>
<p>docker已经可以通过命名空间将网络和进程进行隔离。挂载命名空间，允许不同的容器，查看到不同的文件结构，这样，每个命名空间的进程所看到的文件目录彼此被隔离。每个容器内的进程只会更改容器内部的文件目录。</p>
<h3>2.4 IPC命名空间</h3>
<p>容器中的进程交互采用的是Linux中常见的进程间交互方式（Interprocess Communication， IPC），包括信号量、消息队列和内存共享等。IPC命名空间和PID命名空间可以组合使用，同一个IPC命名空间的进程可以彼此可见，允许进行交互，不同空间的进程无法交互。</p>
<h3>2.5 UTS 命名空间</h3>
<p>UTS（Unix time-sharing system）命名空间允许每个容器拥有一个独立的主机名和域名，从而可以虚拟出一个独立的主机名和网络空间的环境，就可以跟网络上的一台独立主机一样。</p>
<p>默认情况下，docker的主机名是容器的id</p>
<p><img src="/uploads/2018/09/WX20180908-004426@2x-1024x293.png" alt="Alt text" /></p>
<p><img src="/uploads/2018/09/WX20180908-004332@2x-1024x55.png" alt="Alt text" /></p>
<h3>2.6 用户命名空间</h3>
<p>每个容器内部都有不同的用户组和组id，也就是说可以在容器内部使用特定的内部用户执行程序，而不是宿主机上的用户。每个容器都有root账号，但是和宿主机都不在一个命名空间。通过使用命名空间隔离，来保证容器内部用户无法操作容器外部的操作权限。</p>
<h2>3. 总结</h2>
<p>6种命名空间让容器之间松耦合，也让容器与宿主机松偶尔。同时，也保证了安全性。容器内部不能操作其他容器内部的东西，docker的这种命名空间隔离的方式，也比较符合Linux的系统设计。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date><![CDATA[2018-09-10 23:19:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-10 15:19:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-namespace]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[45]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[docker之核心技术]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[docker%e4%b9%8b%e6%a0%b8%e5%bf%83%e6%8a%80%e6%9c%af]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
			<wp:meta_value><![CDATA[docker namespace]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[docker namespace]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"66.249.71.144";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker之控制组</title>
		<link>https://feilong.tech/2018/09/12/docker-cgroups/</link>
		<pubDate>Wed, 12 Sep 2018 10:55:50 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=361</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>1. 作用</h3>
<p>控制度(CGroups) 其实是Linux内核的一个特性，主要是用来控制共享资源，比如限制内存、CPU的的一些使用等。容器使用的CPU、内存等硬件信息，其实就是使用的宿主机上面的硬件设备，所以合理的分配资源，也是为了避免不同容器之间、容器和宿主机进程之间，产生资源的抢占。</p>
<h2>2. 容器控制组</h2>
<h3>2.1 资源限制</h3>
<p>比如我们要限制容器的使用内存，可以在run的时候加上--memory的参数</p>
<pre><code class="language-bash">feilongdeMBP:~ feilong$ docker run -it --rm --name test --memory 10m busybox</code></pre>
<p>然后新打开一个窗口，可以实时查看下容器的内存使用情况</p>
<img class="alignnone size-full wp-image-362" src="/uploads/2018/09/WX20180912-000121.png" alt="" width="942" height="104" />
<p>TIP:</p>
<p style="padding-left: 30px;">使用docker-compose的时候需要注意一下，设置内存限制的参数是mem_limit，但是在docker-compose的3.x版本之后，不支持这个参数，所以在写docker-compose.yaml 的时候，会出现 Unsupported config option for xxxx: 'mem_limit' 的错误信息，所以需要指定 version: '2'</p>
<h3>2.2 优先级</h3>
<p>docker run的时候支持使用-c 或者 --cpu-shares 用来指定容器使用CPU的加权值。如果不指定，那么就是使用的是默认值，一般是1024。</p>
<p>-c 或者 --cpu-shares并不能指定容器能够使用多少CPU或者多少GHz，而是一个加权值。有点类似nginx的负载均衡配置。</p>
<p>这个配置在少量容器的时候，并没有太大的实际意义。只有CPU资源比较紧缺的时候，这个配置参数才会展现出来。</p>
<p>比如，一个容器的加权值是100，另一个加权值是50，那么加权值为100的容器，获取CPU时间片的概率就是另一个的2倍</p>
<p>如果只有一个容器，那么CPU时间片肯定都会给这个容器使用。</p>
<p>创建一个容器，安装stress软件，然后开启10个进程，看下CPU占用情况</p>
<pre><code class="language-bash">localhost:marvin feilong$ docker run -itd --name cpu512  --cpu-shares 512 ubuntu
localhost:marvin feilong$ docker exec -it cpu512
# apt update
# apt install stress
# stress -c 10
stress: info: [250] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd</code></pre>
<p>打开一个新窗口，然后登录到这个容器，使用top查看下CPU占用情况</p>
<pre><code class="language-bash">localhost:~ feilong$ docker exec -it cpu512 sh</code></pre>
<img class="alignnone size-full wp-image-367" src="/uploads/2018/09/WX20180912-185154.png" alt="" width="591" height="401" />
<p>可以从截图看到cpu大概占用了3.3%左右</p>
<p>新打开另一个窗口，创建新容器，一样的操作，安装stress，然后开10个进程，查看下CPU占用情况</p>
<pre><code class="language-bash">localhost:~ feilong$ docker run -itd --name cpu1024  --cpu-shares 1024 ubuntu
# apt update
# apt install stress
# stress -c 10
stress: info: [241] dispatching hogs: 10 cpu, 0 io, 0 vm, 0 hdd</code></pre>
<p>新开窗口，进入cpu1024容器，然后使用top查看CPU占用情况</p>
<p><img src="/uploads/2018/09/WX20180912-185440.png" alt="Alt text" /></p>
<p>可以看出CPU占用情况大概是6.6%左右，基本上是cpu是cpu512的两倍。</p>
<h3>2.3 资源审计</h3>
<p>资源审计主要是做一些审计操作，用来统计系统实际上把多少资源用到适合的目的上，可以使用cpuacct子系统记录某个进程组使用的CPU时间</p>
<h3>2.4 隔离</h3>
<p>为组隔离命名空间，这样一个组不会看到另一个组的进程、网络连接和文件系统</p>
<h3>2.5 控制</h3>
<p>挂起、恢复和重启动等操作</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date><![CDATA[2018-09-12 18:55:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-12 10:55:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-cgroups]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[CGroup docker控制组 CGroups]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.152.56";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker之联合文件系统</title>
		<link>https://feilong.tech/2018/09/17/docker-unionfs/</link>
		<pubDate>Sun, 16 Sep 2018 16:45:44 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1. 作用</h2>
<p>联合文件系统（UnionFS） 是一种轻量级的高性能分层文件系统，它支持将文件系统中的修改信息当做一次提交，然后层层叠加（有点像git），同时可以将不同的目录挂载到同一个虚拟文件系统下，应用看到的是挂载的最终结果。</p>
<p>Debian/Ubuntu上成熟的AUFS（Another Union File System）就是一种联合文件系统的实现。AUFS支持为每个成员目录设定只读权限（readonly）、读写权限（readwrite）或（whiteout-able）权限，同时AUFS里有一个类似分层的概念，对只读权限的分支可以在逻辑上进行增量地修改（不影响其他只读部分）。</p>
<p>Docker镜像自身就是由多个文件层组成，每一层组成有唯一的编号（层ID）</p>
<h2>2. docker存储</h2>
<p>联合文件是docker镜像技术的基础。docker镜像就是根据分层技术来进行继承的。</p>
<p><img src="/uploads/2018/09/20160819173838.png" alt="Alt text" /></p>
<p>举个例子，用户基于一些基础镜像，来制作另外的一个镜像。这些镜像共享同一个基础镜像层，提高的存储的效率和空间利用率。</p>
<p>假如，我们使用php7做基础镜像，来制作多个不同的镜像，那么这些镜像，就会公用一个基础镜像作为“底层”，这样做，提高了利用率，因为不用每个自定义镜像都要创建php7的“底层”。这也就是，为什么我们再build一个镜像的时候，会把基础镜像pull下来。当我们创建的自定义镜像还要有变动的时候，至于要创建一个新的层就好了。这样，也就不用我们从头开始构建镜像，节省了构建时间。</p>
<p><code>这也是docker十分轻量级和快速的重要原因！</code></p>
<p>docker安装自带了查看镜像层的命令：docker history</p>
<p>下面我们来看下基础镜像和自定义镜像层的比较：</p>
<pre><code class="language-bash">localhost:~ feilong$ docker pull php:7.0
7.0: Pulling from library/php
7.0: Pulling from library/php
802b00ed6f79: Pull complete
59f5a5a895f8: Pull complete
6898b2dbcfeb: Pull complete
8e0903aaa47e: Pull complete
b627a118b728: Pull complete
e2e2cb10942b: Pull complete
e63e2fa0c7d4: Pull complete
57c09353077e: Pull complete
Digest: sha256:f0e774402dd485c11c60f52c05989da088c5debb44d1126cc089970e1bfca002
Status: Downloaded newer image for php:7.0
localhost:~ feilong$
localhost:~ feilong$
localhost:~ feilong$
localhost:~ feilong$
localhost:~ feilong$
localhost:~ feilong$ docker history php:7.0
IMAGE CREATED CREATED BY SIZE COMMENT
a6c560acbfc5 9 hours ago /bin/sh -c #(nop) CMD [&quot;php&quot; &quot;-a&quot;] 0B
&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENTRYPOINT [&quot;docker-php-e… 0B
&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) COPY multi:2cdcedabcf5a3b9… 6.42kB
&lt;missing&gt; 9 hours ago /bin/sh -c set -eux; savedAptMark=&quot;$(apt-m… 79.4MB
&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) COPY file:207c686e3fed4f71… 587B
&lt;missing&gt; 9 hours ago /bin/sh -c set -xe; fetchDeps=&#039; wget &#039;;… 13.3MB
&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_SHA256=ff6f62afeb… 0B
&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_URL=https://secur… 0B
&lt;missing&gt; 9 hours ago /bin/sh -c #(nop) ENV PHP_VERSION=7.0.32 0B
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV GPG_KEYS=1A4E8B7277C4… 0B
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_LDFLAGS=-Wl,-O1 -… 0B
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_CPPFLAGS=-fstack-… 0B
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_CFLAGS=-fstack-pr… 0B
&lt;missing&gt; 10 days ago /bin/sh -c mkdir -p $PHP_INI_DIR/conf.d 0B
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHP_INI_DIR=/usr/loca… 0B
&lt;missing&gt; 10 days ago /bin/sh -c apt-get update &amp;&amp; apt-get install… 209MB
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ENV PHPIZE_DEPS=autoconf … 0B
&lt;missing&gt; 10 days ago /bin/sh -c set -eux; { echo &#039;Package: php… 46B
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) CMD [&quot;bash&quot;] 0B
&lt;missing&gt; 10 days ago /bin/sh -c #(nop) ADD file:e6ca98733431f75e9… 55.3MB</code></pre>
<p>我pull了一个php:7.0的镜像，可以看到，整个过程分为20层，每个层级都会执行对应的命令，然后我们基于php7在做一些自定义的操作：安装mysqli和redis的扩展，构建一个新的镜像：</p>
<pre><code class="language-bash">#Dockerfile
FROM php:7.0
RUN apt-get update \
    &amp;&amp; docker-php-ext-install mysqli \
    &amp;&amp; curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz \
    &amp;&amp; tar zxvf redis-4.1.0.tgz \
    &amp;&amp; cd redis-4.1.0 \
    &amp;&amp; phpize \
    &amp;&amp; ./configure \
    &amp;&amp; make &amp;&amp; make install \
    &amp;&amp; echo &quot;extension=redis.so&quot; &gt; /usr/local/etc/php/conf.d/redis.ini \
    &amp;&amp; cd .. \
    &amp;&amp; rm -rf redis-4.1.0.tgz redis-4.1.0</code></pre>
<pre><code class="language-bash">localhost:feilong_test feilong$ docker build -t feilongtest .
Sending build context to Docker daemon  2.048kB
Step 1/2 : FROM php:7.0
 ---&gt; a6c560acbfc5
Step 2/2 : RUN apt-get update     &amp;&amp; docker-php-ext-install mysqli     &amp;&amp; curl -L -o ./redis-4.1.0.tgz http://pecl.php.net/get/redis-4.1.0.tgz     &amp;&amp; tar zxvf redis-4.1.0.tgz     &amp;&amp; cd redis-4.1.0     &amp;&amp; phpize     &amp;&amp; ./configure     &amp;&amp; make &amp;&amp; make install     &amp;&amp; echo &quot;extension=redis.so&quot; &gt; /usr/local/etc/php/conf.d/redis.ini     &amp;&amp; cd ..     &amp;&amp; rm -rf redis-4.1.0.tgz redis-4.1.0
 ---&gt; Running in bd2e3fbbde25
Get:3 http://security.debian.org/debian-security stretch/updates InRelease [94.3 kB]
Get:4 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [414 kB]
Ign:1 http://cdn-fastly.deb.debian.org/debian stretch InRelease
Get:2 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]
Get:5 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [5148 B]
Get:6 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]
Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7099 kB]
省略
Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20151012/
Removing intermediate container bd2e3fbbde25
 ---&gt; 41b978fc1549
Successfully built 41b978fc1549
Successfully tagged feilongtest:latest</code></pre>
<p>然后我们看下自己构建的镜像层</p>
<pre><code class="language-bash">localhost:feilong_test feilong$ docker history feilongtest
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
41b978fc1549        48 seconds ago      /bin/sh -c apt-get update     &amp;&amp; docker-php-…   18.3MB
a6c560acbfc5        10 hours ago        /bin/sh -c #(nop)  CMD [&quot;php&quot; &quot;-a&quot;]             0B
&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENTRYPOINT [&quot;docker-php-e…   0B
&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop) COPY multi:2cdcedabcf5a3b9…   6.42kB
&lt;missing&gt;           10 hours ago        /bin/sh -c set -eux;   savedAptMark=&quot;$(apt-m…   79.4MB
&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop) COPY file:207c686e3fed4f71…   587B
&lt;missing&gt;           10 hours ago        /bin/sh -c set -xe;   fetchDeps=&#039;   wget  &#039;;…   13.3MB
&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_SHA256=ff6f62afeb…   0B
&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_URL=https://secur…   0B
&lt;missing&gt;           10 hours ago        /bin/sh -c #(nop)  ENV PHP_VERSION=7.0.32       0B
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV GPG_KEYS=1A4E8B7277C4…   0B
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_LDFLAGS=-Wl,-O1 -…   0B
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_CPPFLAGS=-fstack-…   0B
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_CFLAGS=-fstack-pr…   0B
&lt;missing&gt;           10 days ago         /bin/sh -c mkdir -p $PHP_INI_DIR/conf.d         0B
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHP_INI_DIR=/usr/loca…   0B
&lt;missing&gt;           10 days ago         /bin/sh -c apt-get update &amp;&amp; apt-get install…   209MB
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  ENV PHPIZE_DEPS=autoconf …   0B
&lt;missing&gt;           10 days ago         /bin/sh -c set -eux;  {   echo &#039;Package: php…   46B
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B
&lt;missing&gt;           10 days ago         /bin/sh -c #(nop) ADD file:e6ca98733431f75e9…   55.3MB</code></pre>
<p>可以看出，在dockerfile里面，增加了1步操作，分别是按照mysqli和redis扩展，然后在build镜像的时候，在原有的20层的基础上，继续添加了1层。</p>
<p>基础镜像层的层内容都是不可用自改的、只读的。当docker利用镜像创建容器的时候，会在最顶端创建一个可以读写的层给容器。容器内的数据，都会写到这个读写层里面。当所操作的对象位于比较深的层时，需要先复制到最上层的可读写层。当数据对象较大的时候，往往意味着IO性能比较差。因此，一般推荐奖容器修改数据通过volume方式挂载，而不是直接修改镜像内的数据。</p>
<p>Docker的所有存储，都是在docker文件夹下面，以Centos或者Ubuntu为例，默认的路径一般是/var/lib/docker。（我仅仅以Centos为例）</p>
<pre><code class="language-bash">[root@izj6c9b96ia369l2i47yq3z docker]# ll
total 52
drwx------ 2 root root 4096 Sep  6 20:09 builder
drwx------ 4 root root 4096 Sep  6 20:09 buildkit
drwx------ 3 root root 4096 Sep  6 20:09 containerd
drwx------ 2 root root 4096 Sep 17 00:07 containers
drwx------ 3 root root 4096 Sep  6 20:09 image
drwxr-x--- 3 root root 4096 Sep  6 20:09 network
drwx------ 4 root root 4096 Sep 17 00:07 overlay2
drwx------ 4 root root 4096 Sep  6 20:09 plugins
drwx------ 2 root root 4096 Sep  6 20:09 runtimes
drwx------ 2 root root 4096 Sep  6 20:09 swarm
drwx------ 2 root root 4096 Sep 16 23:56 tmp
drwx------ 2 root root 4096 Sep  6 20:09 trust
drwx------ 2 root root 4096 Sep  6 20:55 volumes</code></pre>
<p>docker的镜像层基本上都是在overlay2里面</p>
<pre><code class="language-bash">[root@izj6c9b96ia369l2i47yq3z overlay2]# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
busybox latest e1ddd7948a1c 6 weeks ago 1.16MB
[root@izj6c9b96ia369l2i47yq3z docker]# cd overlay2/
[root@izj6c9b96ia369l2i47yq3z overlay2]# ll
total 8
drwx------ 3 root root 4096 Sep 16 23:56 4c819c3673c3416b65c2cf6394818d270363cfd53a0389a5f6c237e1c8ad3ef4
drwxr-xr-x 2 root root 4096 Sep 17 00:07 l</code></pre>
<p>现在，我们只有一个busybox的镜像，该目录下面包括diff文件夹，diff文件夹就是我们创建容器之后，初始化的文件夹</p>
<pre><code class="language-bash">[root@izj6c9b96ia369l2i47yq3z diff]# ll
total 40
drwxr-xr-x 2 root      root      12288 Aug  1 04:20 bin
drwxr-xr-x 2 root      root       4096 Aug  1 04:20 dev
drwxr-xr-x 3 root      root       4096 Aug  1 04:20 etc
drwxr-xr-x 2 nfsnobody nfsnobody  4096 Aug  1 04:20 home
drwx------ 2 root      root       4096 Aug  1 04:20 root
drwxrwxrwt 2 root      root       4096 Sep 17 00:06 tmp
drwxr-xr-x 3 root      root       4096 Aug  1 04:20 usr
drwxr-xr-x 4 root      root       4096 Aug  1 04:20 var
[root@izj6c9b96ia369l2i47yq3z diff]#</code></pre>
<p>为了验证我们说的是否是正确的，我们在tmp的文件夹里面创建一个测试的文件a.txt，然后写入Hello world</p>
<pre><code class="language-bash">[root@izj6c9b96ia369l2i47yq3z diff]# touch  tmp/a.txt
[root@izj6c9b96ia369l2i47yq3z diff]# echo &#039;Hello world&#039; &gt; tmp/a.txt
[root@izj6c9b96ia369l2i47yq3z diff]# cat tmp/a.txt
Hello world
[root@izj6c9b96ia369l2i47yq3z diff]#</code></pre>
<p>如果分析是正确的，那么创建的容器中，也会存在这个文件</p>
<pre><code class="language-bash">[root@izj6c9b96ia369l2i47yq3z diff]# docker run -it --rm --name test busybox
/ # ll
sh: ll: not found
/ # ls -l
total 36
drwxr-xr-x    2 root     root         12288 Jul 31 20:20 bin
drwxr-xr-x    5 root     root           360 Sep 16 16:19 dev
drwxr-xr-x    1 root     root          4096 Sep 16 16:19 etc
drwxr-xr-x    2 nobody   nogroup       4096 Jul 31 20:20 home
dr-xr-xr-x  131 root     root             0 Sep 16 16:19 proc
drwx------    1 root     root          4096 Sep 16 16:19 root
dr-xr-xr-x   13 root     root             0 Sep 16 16:19 sys
drwxrwxrwt    2 root     root          4096 Sep 16 16:17 tmp
drwxr-xr-x    3 root     root          4096 Jul 31 20:20 usr
drwxr-xr-x    4 root     root          4096 Jul 31 20:20 var
/ # ls -l tmp
total 4
-rw-r--r--    1 root     root            12 Sep 16 16:17 a.txt
/ # cat tmp/a.txt
Hello world
/ #</code></pre>
<p>在创建的容器中，我们果然看到了内容为Hello world的tmp/a.txt文件</p>
<p>在创建容器之后，我们会发现多了两个文件夹</p>
<p><img src="/uploads/2018/09/WX20180917-002724@2x-1024x494.png" alt="Alt text" /></p>
<p>这两个文件夹，是用来存储一些容器的数据，如果容器一旦删除，那么这些数据也会随着一块被清理掉，这就是为什么建议我们把一些重要的数据，挂载到外部的原因！</p>
<p><img src="/uploads/2018/09/WX20180917-003010@2x-1024x368.png" alt="Alt text" /></p>
<h2>3. 多种文件系统比较</h2>
<p>Docker目前支持多种联合文件系统：AUFS、OverlayFS、btrfs、vfs、zfs和Device Mapper等。</p>
<p>AUFS：最早支持的文件系统，对Debian/Ubuntu支持比较好，虽然没有合并到Linux内核，但是成熟度很高</p>
<p>OverlayFS：类似AUFS，性能更好，上面的例子明显就是OverlayFS，已经合并到内核，将来会取代AUFS</p>
<p>Device Mapper：Redhat和Docker团队一起开发并用于支持RHEL的文件系统，内核支持，性能略慢，成熟度高</p>
<p>...</p>
<h2>4. 总结</h2>
<p>docker的镜像层级设计，让docker的性能更高，更加符合软件设计，具有很高的复用性，这个也是docker镜像编译迅速的重要原因。</p>
<p>此外，docker容器默认将数据存储到docker文件夹下，如果容器被删除，那么容器数据也将被删除掉，所以，对于容器的重要数据，我们应该映射到宿主机上面，避免由于容器删除，而导致的数据丢失。</p>
<p>另：关于镜像层ID为missing，请参阅论坛：<a href="https://forums.docker.com/t/layer-ids-shown-as-missing-in-history/6325">Layer IDs shown as \&lt;missing> in history</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date><![CDATA[2018-09-17 00:45:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-16 16:45:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-unionfs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.140.71";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[yifan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[168@yifans.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://zyf.im</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.193.228.67]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-20 19:52:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-20 11:52:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[龙哥 牛批]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Feilong]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[569914877@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.118.74.90]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-27 22:31:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-27 14:31:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哈哈，学习中~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Docker之安全防护与配置</title>
		<link>https://feilong.tech/2018/09/24/docker-safe-and-config/</link>
		<pubDate>Sun, 23 Sep 2018 16:49:34 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=396</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1. 风险的来源</h2>
<p>docker的安全性，在很大程度上来自于Linux的本身。目前，我们考虑到的安全性时，主要考虑下面几个方面：</p>
<ul>
<li>Linux内核的命名空间机制提供的容器隔离安全</li>
<li>Linux控制组机制对容器资源的控制能力安全</li>
<li>Linux内核的能力机制所带来的操作权限安全</li>
<li>docker程序（尤其是服务端）本身的抗攻击性</li>
<li>其他安全增强机制（包括APPArmor、SELinux等）对容器安全的影响</li>
<li>通过第三方工具（包括docker bench工具）对docker环境的安全性的评估</li>
</ul>
<h2>2. 风险的分析</h2>
<h3>2.1 命名空间隔离的安全</h3>
<p>当我们在运行docker run的时候，docker会对针对容器创建一个隔离的命名空间，通过这个命名空间，将容器之间的进程和网络进行隔离，这就意味着容器不能独立的访问其他容器的接口或者套接字。</p>
<p>我们知道，所有容器的网络都是通过docker0进行桥接，当然，如果宿主机上面做一些特殊的配置，可以实现 container1-&gt;宿主机-&gt;container2 网络的交互方式。</p>
<p>那么，命名空间的架构设计本身，是否是足够安全呢？</p>
<p>其实，命名空间出现的历史很长了，从Linux内核2.6.15的版本（大概是2008年）就已经开始引用了命名空间，但是实际上，“命名空间”这个含义要更早，最开始是从2005年开始提出来的，所以设计和实现足够成熟。</p>
<p>当然，和虚拟机相比，命名空间并不是绝对。因为命名空间，实际上是<font color="red">“假隔离”</font>，虚拟机是<font color="red">“真隔离”</font>。运行在容器内的应用，会直接访问宿主机上面的内核和部分文件。所以，归根结底，我们应该保证的是镜像是足够安全的，只有镜像是安全的，才能保证我们能够在Linux运行安全可信的服务。</p>
<h3>2.2 控制组资源控制的安全</h3>
<p>CGroups有一个重要的作用就是资源审计和资源限制</p>
<p>当我们再运行docker run的时候，docker会通过Linux的相关调用，在后台创建一个控制组，用来控制容器对宿主机的资源消耗，比如控制容器使用内存、CPU等。</p>
<p>控制组有很多重要的作用。比如确保每个容器能够合理的使用共享资源，最重要的是可以通过控制组限制资源的使用，这一点在防止DDoS的时候尤其重要。</p>
<p><strong><em>对于PaaS、容器云这样的容器服务平台，运行着成千上万个容器的实例，如果一旦某个容器被DDoS攻击，那么就会控制组的作用就显现出来，这样可以防止单个容器抢占过多资源，导致整个服务平台出现雪崩！</em></strong></p>
<h3>2.3 内核能力机制</h3>
<p>传统的Unix系统对进程的权限其实只有root权限和非root权限两种粗粒度。</p>
<p>后来，随着Linux内核的升级，开始对权限的粒度越来越灵活，例如，可以给用户分配某个文件的修改权限、可以给某个用户操作某个进程的权限等等。</p>
<p>默认情况下，docker在运行容器的时候，只使用Linux内核的一部分能力，而且，容器的一些能力往往也是由宿主机上面的一些服务进行支持，比如网络的管理等。所以docker其实并不需要获取真正的“root权限”，此外，容器还能禁用一些不必要的权限，比如：</p>
<ul>
<li>禁止任何文件挂载操作（挂载实际上是宿主机，而不是容器本身）；</li>
<li>禁止访问宿主机上面的套接字；</li>
<li>禁止访问一些文件系统的操作，比如创建新设备；</li>
<li>禁止模板加载</li>
</ul>
<p><strong><em>所以，及时攻击者入侵到容器内部，在容器内部获取了root权限，也并不是真正的宿主机上面的“root权限”，能进行的破坏也是有限的。</em></strong></p>
<h3>2.4 Docker服务端的防护</h3>
<p>使用docker最核心的就是docker服务器了。由于现在启动docker服务器需要使用root权限，所以服务端的权限显得尤其重要。</p>
<p>首先，我们应该确保运行docker的用户是可信的人。由于容器的内部一般都是root权限，如果某个恶意的用户，将宿主机上面的/目录映射到容器内部，那么容器理论上就会有修改根目录下面的权限。因此，在创建容器的时候，我们应该详细检查运行的参数。</p>
<p>尽量将容器映射到非root权限的用户目录下面，这样，可以有效减轻容器和宿主机上面因为权限而导致的安全隐患。</p>
<p>允许docker服务端在非root权限下运行，利用安全可靠的子进程限制特殊权限的操作。比如，这些子进程只能负责文件管理、配置等操作。</p>
<h3>2.5 更多安全特性的使用</h3>
<p>除了docker能力机制之外，我们可以使用一些安全软件增加docker的安全性。比如APParmor等。</p>
<p>docker默认只启用了能力机制。用户还可以启用更多的方案加强docker安全：</p>
<ul>
<li>在内核中启用GRSEC和PAX，这样可以增加更多编译和运行的检查；并且通过地址随机化机制避免恶意探测。启动该特性不需要docker进行任何配置。<a href="https://hardenedlinux.github.io/system-security/2015/09/06/hardening-es-in-docker-with-grsec.html">社区最佳实践：基于PaX/Grsecurity &amp; STIG &amp; Sheild针对es的Docker场景化加固</a></li>
<li>使用一些增强安全特性的容器模板，比如带APParmor的模板和Redhat带SELinux的策略的模板。这些模板提供了额外的安全特性。<a href="&quot;https://docs.docker.com/engine/security/apparmor">AppArmor security profiles for Docker</a></li>
<li>用户可以自定义更加严格的访问控制机制来制定安全策略。</li>
</ul>
<p>此外，将宿主机的文件挂载到容器内部的时候，可以通过设置一些只读（read-only）权限来避免容器对宿主机文件系统的破坏，特别是一些系统运行状态的目录，包括/proc/sys、/proc/irq、/proc/bus等等。</p>
<h3>2.6 使用第三方检测工具</h3>
<p>前面说了很多加强docker安全性的方式，但是注意去检查，会比较繁琐。幸亏现在有一些自动化的检测工具，比较出名的就是docker bench和Clair。</p>
<h4>2.6.1 docker bench</h4>
<p>docker bench其实是一个docker的镜像，仓库地址：<a href="https://hub.docker.com/r/docker/docker-bench-security/">https://hub.docker.com/r/docker/docker-bench-security/</a> 通过运行docker bench，可以对docker的一些配置做自动化安全检测。检测的标准是CIS Docker，检测项包括主机配置、Docker引擎、配置文件权限、镜像管理、容器运行时环境、安全项等6大方面。</p>
<pre><code class="language-bash">$ docker run -it --net host --pid host --userns host --cap-add audit_control \
    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
    -v /var/lib:/var/lib \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /usr/lib/systemd:/usr/lib/systemd \
    -v /etc:/etc --label docker_bench_security \
    docker/docker-bench-security</code></pre>
<p><img src="/uploads/2018/09/docker-bench-1.png" alt="Alt text" />
<img src="/uploads/2018/09/docker-bench-2-1024x650.png" alt="Alt text" /></p>
<p>在输出的结果中，会给出响应的提示信息，然后用户可以根据对应的提示，进行一些配置的更改等操作。一般是避免出现WARN或以上的问题。</p>
<h2>3. 总结</h2>
<p>docker其实自身携带的一些基本的抵御安全风险的机制，配合APParmor等安全机制，可以让docker容器更加安全。任何技术层面的实现，都需要合理的使用才能等到巩固，特别是生产环境，可能遭遇很多位置的安全风险，所以需要配合完善的监控系统来加强管理。</p>
<p>Docker使用的时候需要注意：</p>
<ul>
<li>容器自身携带的隔离，并不是很完善，需要加强对容器的安全审查。</li>
<li>尽量使用官方的镜像，降低安全风险。</li>
<li>采用专门的服务器用来管理docker服务，加强对容器的监控机制。</li>
<li>随着容器的大规模使用，甚至构成容器集群的时候，需要考虑容器网络上必备的安全防护，比如DDoS攻击等。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date><![CDATA[2018-09-24 00:49:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-23 16:49:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-safe-and-config]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="docker-safety"><![CDATA[docker安全]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"66.249.71.148";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>写给工程师的十条精进原则(转自美团点评技术团队)</title>
		<link>https://feilong.tech/2018/09/27/principle-of-diligence/</link>
		<pubDate>Thu, 27 Sep 2018 04:22:55 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[<h1 id="-">引言</h1>
时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”......那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。

8年过去了，自己从一个职场小白逐步成长为一名技术Leader。我发现团队中的很多同学在不停地重复犯着自己当年类似的错误。他们并不是不努力，到底是哪里出了问题？经过一段时间的观察与思考后，我想我找到了答案。那就是：我们大多数同学在工作中缺乏原则的指导。原则，犹如指引行动的“灯塔”，它连接着我们的价值观与行动。不久前，桥水基金创始人雷·达里奥在《原则》一书中所传达的理念，引爆了朋友圈。<strong>每个人都应该有自己的原则，当我们需要作出选择时，一定要坚持以原则为中心。</strong>但是在现实生活中，我们往往缺少对原则的总结，对于很多人来说这是一门“只可意会不可言传”的玄学，是属于老司机的秘密，其实不然。

“追求卓越”是美团的价值观。作为一名技术人员，我们应该如何践行呢？本文总结了十条精进原则，希望能够给大家带来一些启发，更好地指导我们的行动。

<img src="https://tech.meituan.com/img/10_principles_for_engineers/10-1.jpg" alt="" />
<h1 id="-owner-">原则一：Owner意识</h1>
“Owner意识”主要体现在两个层面：一是认真负责的态度，二是积极主动的精神。

<strong>认真负责是工作的底线。</strong>首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD的工程交付质量，还会对协同工作的RD、QA、PM等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。

<strong>积极主动是“Owner意识”更高一级的要求。</strong>RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。
<h1 id="-">原则二：时间观念</h1>
相信大家都有时间观念，但是真正能执行到位的可能并没有那么多。互联网是一个快速发展的行业，RD的研发效率是一个公司硬实力的重要体现。项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱程度的评价。大家可能会问：难度几乎相同的项目，为什么有的同学经常Delay，而有的同学每次都能按时上线？一个很重要的原因，就是这些按时交付的同学往往具备如下两个特质：<strong>做事有计划，工作分主次。</strong>

<strong>工作安排要有计划性。</strong>通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。

<strong>工作安排要分清楚主次。</strong>我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。
<h1 id="-">原则三：以终为始</h1>
“以终为始”（Begin With The End In Mind），是史蒂芬·柯维在《高效能人士的七个习惯》中提到的一个习惯。它是以所有事物都经过两次创造的原则（第一次为心智上的创造，第二次为实际的创造）为基础的。直观的表达就是：<strong>先想清楚目标，然后努力实现。</strong>

在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现得尤为明显。例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，<strong>所以要根据问题设定目标，再进行优化</strong>。

“以终为始”，这一原则还可以作用于我们的学习中。很多同学看过很多技术文章，但是总是感觉自己仍然一无所知。很重要的一个原因，就是没有<strong>带着目标去学习</strong>。在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？是想把Redis的持久化原理搞清楚，还是把Redis的主从同步机制弄明白，亦或是想学习整个Redis Cluster的架构体系。如果我们能够带着问题与目标，再进行相关的资料搜集与学习，就会事半功倍。这种学习模式的效果会比碎片化阅读好很多。
<h1 id="-">原则四：闭环思维</h1>
你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。

之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。<strong>它强调的是一种即时反馈闭环，</strong>如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的To Do进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入“沟通-发现问题-再沟通-再发现问题”的恶性循环中。<strong>真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收。</strong>

<strong>“闭环思维”还要求能够定期主动进行阶段性的反馈。</strong>刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。
<h1 id="-">原则五：保持敬畏</h1>
“君子之心，常怀敬畏”，保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。

<strong>当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致。</strong>以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。类似的问题，还包括对上线流程不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。

保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，<strong>让规范与约定与时俱进，也是另一种形式的敬畏。</strong>

<img src="https://tech.meituan.com/img/10_principles_for_engineers/10-2.jpg" alt="" />
<h1 id="-">原则六：事不过二</h1>
“事不过二”，是我们团队一贯坚持的原则，它可以解读为两层含义。

一层含义是<strong>“所有的评审与问题讨论，不要超过两次”</strong>。之所以有这样的要求，是因为我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此，我们团队规定：<strong>所有的评审最多两次。</strong>通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。

“事不过二”原则的另一层含义，是<strong>“同样的错误不能犯第二次”</strong>。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。
<h1 id="-">原则七：设计优先</h1>
“设计优先”这条原则，相对来说更加具体一些。之所以单列一项，是因为架构设计太重要了。Uncle Bob曾说过：“软件架构的目标，是为了让构建与维护系统的所需人力资源最小化。”

<strong>架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题。</strong>很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计得足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。<strong>无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构。</strong>因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。

<strong>“设计优先”这一原则，要求写别人看得懂的设计</strong>。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。

<img src="https://tech.meituan.com/img/10_principles_for_engineers/10-3.jpg" alt="" />
<h1 id="-p-pc-">原则八：P/PC平衡</h1>
“P/PC平衡”原则，即产出与产能平衡原则。伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。<strong>产出与产能必须平衡，才能达到真正的高效能</strong>。为了让大家更清晰的了解这一原则，本文举两个例子。

从系统的角度看，每一个系统都是通过持续不断地叠加功能来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消亡。

再从RD的角度来看这个问题，RD通过做需求来给公司创造价值，实现自己的产出。而RD的产能是指技术能力、软素质、身体健康状况，有这些资本后，我们才能进行持续的产出。在日常工作中，我发现很多RD往往只重视产出。他们也在很努力地做项目，但是每一个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做得一般，还会抱怨自己得不到任何成长。这就是P/PC不平衡的体现。<strong>如果能在做项目的过程中，通过学习总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果。</strong>

“P/PC平衡”原则还适用于很多其他的领域，例如团队、家庭等，我本人也非常推崇这一原则。希望大家也能将其作为自身的一项基本原则，努力寻找到产出与产能的平衡点。
<h1 id="-">原则九：善于提问</h1>
<strong>“善于提问”，首先要勤于提问</strong>。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，<strong>只有在争辩中，才可能诞生最好的主意和最好的决定</strong>。

在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。

<strong>“善于提问”，还要懂得如何提问</strong>。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：批判性思维。

批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。同样，在阅读一篇技术博客的时候，也要使用批判性的思维，多问几个为什么，作者得出的结论是否合理？论据是否充分？只有这样，才能不断地获取真正的知识。
<h1 id="-">原则十：空杯心态</h1>
“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。

<strong>保持“空杯心态”这一原则要求我们时刻进行自我检视与反省</strong>。在工作中，多去跟不同级别的同学聊一聊，或者做一个360度评估，这有助于我们更加客观地评价自己。在横向对比中，多向那些优秀的同学看齐，学习他人的优点。很多同学在设计评审或者代码review过程中，针对别人提出的问题与建议，往往都采用一种对立的态度。错误地认为别人是在挑刺，是在针对自己。诚然，在某些方面，我们可能确实比其他人想得深入，但是这不代表在所有方面都能考虑周全。对于别人的建议，建议使用“善于提问”原则里提到的批判性思维仔细分析一下，虚心地吸取那些好的建议。

工作学习就像“练级打怪”，技能储备的越多，就越容易走到最后。保持空杯心态，可以让我们发现很多以前注意不到的新能力，我们要做的就是努力学习它，将它们转化为自己能力库的一部分。
<h1 id="-">总结</h1>
以上，是我总结的工作与学习的十条基本原则。其中有的侧重于个人做事情的方法，如“Owner意识”、“时间观念”、“以终为始”、”闭环思维”；有的侧重于团队工作标准规范，如“保持敬畏”、“事不过二”、“设计优先”；有的侧重于团队或个人效能提升，如“P/PC平衡”、“善于提问”、“空杯心态”。这些原则是我多年在工作与学习中，不断总结得来的经验。希望在大家面临选择时，这些原则能够起到一定的帮助和指导作用。

以原则为中心地工作与生活，让自己与团队变得更加强大。
<h1 id="-">作者介绍</h1>
云鹏，2014年加入美团，先后参与了美团酒店供应链体系、分布式调度系统的建设，现在负责美团旅行客户关系管理系统、基础信息服务的建设工作。
<h4>原文地址https://tech.meituan.com/10_principles_for_engineers.html</h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date><![CDATA[2018-09-27 12:22:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-27 04:22:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[principle-of-diligence]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<category domain="post_tag" nicename="%e6%88%90%e9%95%bf%e8%bf%9b%e9%98%b6"><![CDATA[成长进阶]]></category>
		<category domain="post_tag" nicename="%e7%a8%8b%e5%ba%8f%e5%91%98"><![CDATA[程序员]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>docker之libnetwork插件化网络功能</title>
		<link>https://feilong.tech/2018/10/02/docker-libnetwork/</link>
		<pubDate>Tue, 02 Oct 2018 15:06:07 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=402</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>1. 背景</h1>
<p>docker的版本不断迭代，从1.7开始，docker将网络的部分以插件化的方式剥离出来，允许用户通过命令实现不同的后端，增加了docker的灵活性。剥离出来的网络叫做libnetwork，显而易见，它希望将来为不同的容器定义统一网络层的规范。</p>
<h1>2. 容器的网络模型（CNM）</h1>
<p>容器网络模型（Container Networking Model，CNM）最开始的提出者是思科公司员工Erik，设计了一个docker扩展的网桥模型。后来，他将这个模型反馈给docker的团队，得到了docker的极大的认可，也是libnetwork的雏形。</p>
<p>CNM主要包含三点sandbox、endpoint和network。</p>
<p>之前有篇文章是<a class="u-url url" href="http://feilong.tech/2018/09/10/docker-namespace/" target="_blank" rel="bookmark noopener">DOCKER之命名空间</a> ，文章简要说了一下网络的隔离，讲述了一些docker的网络基本知识。其实也是libnetwork的一个缩影。</p>
<p>sandbox相当于网卡配置、路由表、dns配置、网络命名空间等</p>
<p>endpoint相当于容器内部的虚拟网卡（eth0等）</p>
<p>network代表一个或者多个网络</p>
<p>当然，这些概念并不是对等，这里只是有一个类比的关系。</p>
<img class="size-full wp-image-403 aligncenter" src="/uploads/2018/09/mp55072270_1453099798138_1_th.jpeg" alt="" width="600" height="235" />
<p>可见，具体底层网络如何实现，每个容器的endpoint所连接的network，以及sandbox如何进行隔离，都可以不用关心。只要libnetwork提供网络和接入点，只需要容器给街上或者拔下（这里指的是endpoint和network的链接和断开），剩下的都是直接由驱动自己实现。</p>
<h1>3. docker网络bridge</h1>
<p>docker自带了查看网络的命令</p>
<pre><code class="language-bash">localhost:~ feilong$ docker network ls
NETWORK ID          NAME                  DRIVER              SCOPE
5adfcce2b464        bridge                bridge              local
c2d85093b647        docker_default        bridge              local
0eec2b9c7d57        go_default            bridge              local
604e2a13b930        host                  host                local
bded596e1021        marvin2_default       bridge              local
6c006e90b785        marvin_code-network   bridge              local
ef31b0632a2f        marvin_default        bridge              local
72169048d0e7        none                  null                local
6eb2e51b63e2        redis_default         bridge              local
6c6e4cc36312        registry_default      bridge              local
localhost:~ feilong$</code></pre>
<p>从查询结果，可以看出，我的电脑上面，有很多的网络信息。docker默认是携带3种网络：bridge、host、none，这三个网络是不能被删除的</p>
<pre><code class="language-bash">localhost:~ feilong$ docker network rm host
Error response from daemon: host is a pre-defined network and cannot be removed
localhost:~ feilong$ docker network rm bridge
Error response from daemon: bridge is a pre-defined network and cannot be removed
localhost:~ feilong$ docker network rm none
Error response from daemon: none is a pre-defined network and cannot be removed
localhost:~ feilong$</code></pre>
<p>我们在运行容器的时候，指定的网络类型（--network=bridge|--network=host|--network=none）其实就是来源于这里，又由于docker默认是使用bridge的网络类型，通常是省略这个参数。</p>
<h4>使用docker-compose发生了什么？</h4>
<p>我们在使用docker-compose的时候，通常是不用设置--link参数的，那是因为，docker会认为使用docker-compose启动多个容器，但是这几个容器是组成了一个service，会自动创建一个bridge类型的网络，然后将启动的容器，放到这个网络中，和其他的网络进行隔离。</p>
<pre><code class="language-yaml"># docker-compose.yaml
version: &#039;3&#039;

services: 
  busybox1:
    image: busybox
    container_name: busybox1
  busybox2:
    image: busybox
    container_name: busybox2
  busybox3:
    image: busybox
    container_name: busybox3</code></pre>
<p>查看docker的网络</p>
<pre><code class="language-bash">localhost:test feilong$ docker network ls
NETWORK ID          NAME                  DRIVER              SCOPE
5adfcce2b464        bridge                bridge              local
c2d85093b647        docker_default        bridge              local
0eec2b9c7d57        go_default            bridge              local
604e2a13b930        host                  host                local
bded596e1021        marvin2_default       bridge              local
6c006e90b785        marvin_code-network   bridge              local
ef31b0632a2f        marvin_default        bridge              local
72169048d0e7        none                  null                local
6eb2e51b63e2        redis_default         bridge              local
6c6e4cc36312        registry_default      bridge              local
localhost:test feilong$</code></pre>
<p>运行docker-compose，然后查看网络</p>
<pre><code class="language-bash">localhost:test feilong$ docker-compose up -d
Creating network &quot;test_default&quot; with the default driver
Creating busybox2 ... done
Creating busybox3 ... done
Creating busybox1 ... done
localhost:test feilong$ docker network ls
NETWORK ID          NAME                  DRIVER              SCOPE
5adfcce2b464        bridge                bridge              local
c2d85093b647        docker_default        bridge              local
0eec2b9c7d57        go_default            bridge              local
604e2a13b930        host                  host                local
bded596e1021        marvin2_default       bridge              local
6c006e90b785        marvin_code-network   bridge              local
ef31b0632a2f        marvin_default        bridge              local
72169048d0e7        none                  null                local
6eb2e51b63e2        redis_default         bridge              local
6c6e4cc36312        registry_default      bridge              local
fca18d6c1259        test_default          bridge              local</code></pre>
<p>从上面，我们看出，在运行docker-compose的时候，就已经创建了一个网络，叫做 test_default</p>
<h4>--link ？</h4>
<p>我们知道，想要将两个容器链接起来，可以使用--link参数（在使用命令行 docker run的时候）。其实，我们在进行docker run的时候，创建的容器，加入了一个默认的网络“bridge”，但是在“bridge”中，默认是不能进行连接的，需要加上--link，使bridge内部的容器进行连接。这样也是为了隔离容器。试想一下，如果不采用这个机制，那么网络空间就不再是隔离的状态了，就和docker的设计不太相符。</p>
<p>我们分别运行一个test1和test2容器</p>
<pre><code class="language-bash">feilongdeMacBook-Pro:~ feilong$ docker run -itd --name test1 busybox
bfca24444ce4ee16d6e2af76cf0967d0923dbbed4310c811cdbefef5d6b5b67f
feilongdeMacBook-Pro:~ feilong$ docker run -itd --name test2 busybox
48a5c7e9c042de472ed5edd328a53952fe9552357eff7b1c81f4d9e3bbed1c8c
feilongdeMacBook-Pro:~ feilong$ docker ps | grep test
48a5c7e9c042        busybox                              &quot;sh&quot;                     6 seconds ago       Up 5 seconds                                  test2
bfca24444ce4        busybox                              &quot;sh&quot;                     10 seconds ago      Up 9 seconds                                  test1
b742b60be6a0        registry:latest                      &quot;/entrypoint.sh /etc…&quot;   22 hours ago        Up 3 hours          0.0.0.0:32768-&gt;5000/tcp   thirsty_almeida
feilongdeMacBook-Pro:~ feilong$</code></pre>
<p>然后我们进入test1，ping一下test2</p>
<pre><code class="language-bash">feilongdeMacBook-Pro:~ feilong$ docker exec -it test1 sh
/ # ping test2
ping: bad address &#039;test2&#039;
/ #</code></pre>
<p>结果很明显，是不通的！</p>
<p>但是他们是在同一个网络里面的</p>
<img class="alignnone size-full wp-image-405" src="/uploads/2018/10/1__bash.jpg" alt="" width="1362" height="650" />
<img class="alignnone size-full wp-image-406" src="/uploads/2018/10/2__bash.jpg" alt="" width="1434" height="824" />
<h1>4. 总结</h1>
<p>libnetwork通过CNM，抽象了下层网络的实现让docker可以根据需要，实现不同的网络技术，docke将swarm引擎加到了新的版本中，以提供集群网络的更好支持。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date><![CDATA[2018-10-02 23:06:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-02 15:06:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-libnetwork]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="docker-network"><![CDATA[docker network]]></category>
		<category domain="post_tag" nicename="libnetwork"><![CDATA[libnetwork]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,yaml]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.250";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP配合使用携程Apollo配置中心</title>
		<link>https://feilong.tech/2018/10/27/php-apollo-config-center/</link>
		<pubDate>Sat, 27 Oct 2018 08:41:39 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=411</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>1. 背景</h1>
<p>平时开发最头疼之一就是各种配置：</p>
<ol>
    <li>一个项目往往会包含各式各样的配置信息，且不说数据库、redis、memcache这些常用的配置，还会有很多业务上的配置。</li>
    <li>线上、测试和开发环境配置各不一样，每个环境都要保存一份</li>
    <li>每次上线的时候，都要挨个check一下，</li>
    <li>更改某个配置，需要重新上线代码</li>
    <li>￼....</li>
</ol>
<p>所以配置中心，在devops的开发中，是必不可少的，配置中心，也可以有效的避免，因为更改配置代码，导致的代码运行出错的风险。</p>
<h1>2. Apollo</h1>
<p>携程的<a href="https://github.com/ctripcorp/apollo">Apollo</a>配置中心，在业内算是比较有名的，github上面大概有8.5k的star。很多知名的公司也都在使用。至于实现的原理直接看github上面的wiki即可。</p>
<h1>3. DO IT</h1>
<h2>3.1 创建项目</h2>
<p>3.1.1 创建项目，clone项目</p>
<img class="alignnone wp-image-413" src="/uploads/2018/10/WX20181027-143049@2x.png" alt="" width="700" height="154" />
<p>3.1.2 按需更改docker-compose.yml</p>
<pre><code class="language-bash">feilong$ cd scripts/docker-quick-start/
feilongdeMacBook-Pro:docker-quick-start feilong$ ll
total 8
-rw-r--r--  1 feilong  wheel  663 Oct 27 14:56 docker-compose.yml
drwxr-xr-x  4 feilong  wheel  128 Oct 27 14:56 sql</code></pre>
<p>因为我不是java技术栈，所以以docker运行。</p>
<p>本地由于8080端口被占用，所以把端口改为8082</p>
<pre><code class="language-yaml"># docker-compose.yml
version: &#039;2&#039;

services:
  apollo-quick-start:
    image: nobodyiam/apollo-quick-start
    container_name: apollo-quick-start
    depends_on:
      - apollo-db
    ports:
      - &quot;8082:8080&quot;
      - &quot;8070:8070&quot;
    links:
      - apollo-db

  apollo-db:
    image: mysql:5.7
    container_name: apollo-db
    environment:
      TZ: Asia/Shanghai
      MYSQL_ALLOW_EMPTY_PASSWORD: &#039;yes&#039;
    depends_on:
      - apollo-dbdata
    ports:
      - &quot;13306:3306&quot;
    volumes:
      - ./sql:/docker-entrypoint-initdb.d
    volumes_from:
      - apollo-dbdata

  apollo-dbdata:
    image: alpine:latest
    container_name: apollo-dbdata
    volumes:
      - /var/lib/mysql</code></pre>
<p>通过docker-compose启动Apollo服务</p>
<pre><code class="language-bash">feilongdeMacBook-Pro:docker-quick-start feilong$ docker-compose up -d
Creating network &quot;docker-quick-start_default&quot; with the default driver
Creating apollo-dbdata ... done
Creating apollo-db     ... done
Creating apollo-quick-start ... done
feilongdeMacBook-Pro:docker-quick-start feilong$</code></pre>
<p>访问地址 localhost:8070，如果启动失败的话，请参考 <a href="https://github.com/ctripcorp/apollo/issues/1473" target="_blank" rel="noopener">#1473 docker_quick_start 起不来</a></p>
<img class="alignnone wp-image-414" src="/uploads/2018/10/WX20181027-152632.png" alt="" width="700" height="414" />
<h2>3.2 配置</h2>
<p>Apollo内置了账号 <em><strong>apollo/admin</strong></em>，登录之后，可以看到有个默认的应用SampleApp</p>
<img class="alignnone wp-image-415" src="/uploads/2018/10/WX20181027-153023.png" alt="" width="700" height="333" />
<p>通过后台创建一个用于演示的redis的配置信息</p>
<img class="alignnone wp-image-416" src="/uploads/2018/10/WX20181027-153143@2x.png" alt="" width="700" height="377" />
<img class="alignnone wp-image-417" src="/uploads/2018/10/1540625597036.jpg" alt="" width="700" height="380" />
<p>创建结束后，点击“发布”按钮，发布最新的配置</p>
<h2>3.3 运行测试</h2>
<p>除了配置的server端，还要有接受配置的client端，我是PHP技术栈，所以就以PHP为主</p>
<h3>3.3.1 初始化项目</h3>
<p>配置php项目，通过<em>composer</em>引入Apollo的SDK</p>
<pre><code class="language-bash">feilongdeMacBook-Pro:apollo feilong$ composer require multilinguals/apollo-client --ignore-platform-reqs
Using version ^0.1.1 for multilinguals/apollo-client
./composer.json has been created
Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 1 install, 0 updates, 0 removals
 - Installing multilinguals/apollo-client (v0.1.1): Downloading (100%)
Writing lock file
Generating autoload files</code></pre>
<img class="alignnone wp-image-419" src="/uploads/2018/10/WX20181027-161420@2x.png" alt="" width="700" height="117" />
<p>新建一个<em>pull.php</em>，为了能够实时获取最新的配置，需要长时间运行。</p>
<pre><code class="language-php">&lt;?php
require_once &#039;vendor/autoload.php&#039;;

use Org\Multilinguals\Apollo\Client\ApolloClient;

// docker-compose里面配置的API服务的端口
$serverIp = &#039;192.168.1.72:8082&#039;;
// 在Apollo的后台可以查到
$appId = &#039;SampleApp&#039;;
$namespaces = array(&#039;application&#039;);
$apollo = new ApolloClient($serverIp, $appId, $namespaces);
$apollo-&gt;save_dir = &#039;config&#039;;

$restart = true; //auto start if failed
do {
    $error = $apollo-&gt;start();
    if ($error) {
        echo(&#039;error:&#039;.$error.&quot;\n&quot;);
    }
} while ($error &amp;&amp; $restart);</code></pre>
<h3>3.3.2 运行项目</h3>
<p>新建一个config的目录，运行pull.php文件，获取配置信息</p>
<img class="alignnone wp-image-420" src="/uploads/2018/10/WX20181027-162049@2x.png" alt="" width="700" height="208" />
<p>新建一个窗口，查看下config文件夹下的文件</p>
<img class="alignnone wp-image-421" src="/uploads/2018/10/WX20181027-162156@2x.png" alt="" width="700" height="413" />
<p>发现新建了一个配置文件，里面是相应的配置信息</p>
<p>后台做一些更新操作</p>
<img class="alignnone wp-image-424" src="/uploads/2018/10/WX20181027-162346.png" alt="" width="700" height="362" />
<img class="alignnone wp-image-423" src="/uploads/2018/10/WX20181027-162403.png" alt="" width="700" height="159" />
<p>发布配置，查看配置文件</p>
<img class="alignnone wp-image-422" src="/uploads/2018/10/WX20181027-162428@2x.png" alt="" width="700" height="264" />
<h1>4. 总结</h1>
<p>通过配置中心，我们就不用在部署的时候，手动一直更改项目的配置文件，可以实现自动化，降低人为风险。</p>
<p>此外，Apollo是版本控制的，支持回滚操作，这样，就算是出现手误，也能及时回滚配置，及时生效。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>411</wp:post_id>
		<wp:post_date><![CDATA[2018-10-27 16:41:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-27 08:41:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-apollo-config-center]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apollo"><![CDATA[Apollo]]></category>
		<category domain="post_tag" nicename="devops"><![CDATA[devops]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e6%9c%8d%e5%8a%a1"><![CDATA[微服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[Apollo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,yaml,php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"185.191.171.19";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用VS Code调试PHP7的源码</title>
		<link>https://feilong.tech/2019/02/24/debug-php7/</link>
		<pubDate>Sun, 24 Feb 2019 12:40:53 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我是PHP的爱好者，大一下半年开始接触PHP到现在，已经有了几个年头，但是我不敢说自己<span style="color: #ff0000;">“精通PHP”</span>，因为我连PHP内核源码都还没看全，现在顶多停留在<span style="color: #339966;">“熟悉”</span>的层面。</p>
<p>我2018年买了一本《PHP7的内核剖析》，但是只是看了一些罢了。因为里面很多原理不太明白。如果真的要读懂一本书，尤其是技术相关，一定要手把手操作才能真正的理解！！！</p>
<p>但是自从装了几次PHP源码失败之后，就没有再尝试下去的决心了。书，也就仍在了一边，没有再看。</p>
<p>但是上次一个朋友分享了一篇文章《<a href="https://mp.weixin.qq.com/s/SaT9jIxfnOw7htKoS8hedg" target="_blank" rel="noopener">程序员装逼被怼，决定用面试证明自己，结果...... </a>》，还是多少有一些小触动的。</p>
<p>所以，就再次拿起来书本，开始“啃骨头”。</p>
<h2>1.安装PHP7源码</h2>
<p>源码下载容易安装难！</p>
<p>自从上次几次失败之后，也多少总结一点小经验。</p>
<pre><code class="language-bash">$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm #生成Makefile</code></pre>
<p>如果没有configure命令，需要使用buildconf生成一下</p>
<pre><code class="language-bash">$ ./buildconf --force </code></pre>
<p>出现了报错</p>
<pre><code class="language-bash">checking for libiconv... no
configure: error: Please specify the install prefix of iconv with --with-iconv=&lt;DIR&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;$ brew install libiconv
$ ./configure --prefix=/usr/local/php7 --enable-debug --enable-fpm --with-iconv=/usr/local/opt/libiconv
...
Generating files
configure: creating ./config.status
creating main/internal_functions.c
creating main/internal_functions_cli.c
+--------------------------------------------------------------------+
| License:                                                           |
| This software is subject to the PHP License, available in this     |
| distribution in the file LICENSE.  By continuing this installation |
| process, you are bound by the terms of this license agreement.     |
| If you do not agree with the terms of this license, you must abort |
| the installation process at this point.                            |
+--------------------------------------------------------------------+

Thank you for using PHP.

config.status: creating php7.spec
config.status: creating main/build-defs.h
config.status: creating scripts/phpize
config.status: creating scripts/man1/phpize.1
config.status: creating scripts/php-config
config.status: creating scripts/man1/php-config.1
config.status: creating sapi/cli/php.1
config.status: creating sapi/fpm/php-fpm.conf
config.status: creating sapi/fpm/www.conf
config.status: creating sapi/fpm/init.d.php-fpm
config.status: creating sapi/fpm/php-fpm.service
config.status: creating sapi/fpm/php-fpm.8
config.status: creating sapi/fpm/status.html
config.status: creating sapi/cgi/php-cgi.1
config.status: creating ext/phar/phar.1
config.status: creating ext/phar/phar.phar.1
config.status: creating main/php_config.h
config.status: executing default commands
$ make #编译
$ make install #安装&lt;/pre&gt;</code></pre>
<h2>2. 配置lnmp</h2>
<p>配置lnmp的步骤就不再多说了</p>
<h2>3. 更改www.conf</h2>
<p>安装源码之后的bin文件，会都保存到/usr/local/php7文件夹下面，PHP-fpm的配置文件也是一样。</p>
<pre><code class="language-bash">$ ll
total 472
-rwxrwxrwx  1 root  wheel   1271 Feb 21 22:44 pear.conf
-rwxrwxrwx  1 root  wheel   4465 Feb 21 23:25 php-fpm.conf
-rwxrwxrwx  1 root  wheel   4465 Feb 21 22:44 php-fpm.conf.default
drwxrwxrwx  4 root  wheel    128 Feb 24 00:27 php-fpm.d
-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:07 php.ini
-rwxrwxrwx@ 1 root  wheel  69692 Feb 22 08:06 php.ini-development
-rwxrwxrwx@ 1 root  wheel  69724 Feb 22 08:06 php.ini-production</code></pre>
<p>我们是想要通过web的方式，调试源码的运行过程。</p>
<p>大家知道，PHP-fpm是基于多进程的，我们在使用VS Code进行调试的时候，会需要选择挂起的进程号（下面会后响应的步骤说明）。所以，我们最好能够只有一个php-fpm的子进程，这样，就能确保选择的进程，能正常停顿到断点位置。</p>
<pre><code class="language-bash">....

;pm = dynamic
pm = static

.....

pm.max_children = 1
</code></pre>
<h2>4. 配置调试文件</h2>
<img class="alignnone wp-image-431" src="/uploads/2019/02/WeChat66016f8d6aa495d141d88a8f1af530fe.png" alt="" width="225" height="398" />
<p>添加配置，使用attach的方式</p>
<pre><code class="language-json">{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [{
            &quot;name&quot;: &quot;(lldb) Attach&quot;,
            &quot;type&quot;: &quot;cppdbg&quot;,
            &quot;request&quot;: &quot;attach&quot;,
            &quot;program&quot;: &quot;/usr/local/php7/sbin/php-fpm&quot;,
            &quot;processId&quot;: &quot;${command:pickProcess}&quot;,
            &quot;MIMode&quot;: &quot;lldb&quot;
        }
    ]
}</code></pre>
<h2>5. 运行测试</h2>
<p>我就以数组的PHP代码文件为例，进行测试。</p>
<p>在nginx的项目目录里面创建一个测试文件。比如 a.php</p>
<pre><code class="language-bash">&lt;?php
$arr = [1,2,3,4,5];
array_push($arr, 10, 20);
var_dump($arr);</code></pre>
<p>我们在源码文件 ext/standard/array.c里面加个断点</p>
<img class="alignnone wp-image-432" src="/uploads/2019/02/WX20190224-203146@2x.png" alt="" width="620" height="324" />
<p>开始进行调试</p>
<img class="alignnone wp-image-433" src="/uploads/2019/02/WX20190224-203242@2x.png" alt="" width="814" height="213" />
<p>我们再选择进程号的时候，需要选择大的进程号，因为小进程号主要是php-fpm主进程，主进程是用来管理子进程的，子进程才是正在进行执行代码的进程</p>
<p>然后访问a.php文件</p>
<p><a href="http://localhost/a.php">http://localhost/a.php</a></p>
<img class="alignnone wp-image-434" src="/uploads/2019/02/WX20190224-203334@2x.png" alt="" width="1019" height="515" />
<p>侧边栏显示了调用的堆栈信息，以及传入的参数信息。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date><![CDATA[2019-02-24 20:40:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-24 12:40:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[debug-php7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d6ab399bbeca4d2046c4b5a0182cfb3f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[学习PHP源码 调试PHP源码]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[41]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_60d91c2f7c80e69cf26288fc6fe224b4]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_b9594d9ff79cb9f0e29293d6b02918fc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3f820e3e738e56e1e110f679f494f2f7]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_127f4466a9fc1d9fa1914c12657862c7]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash,json]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.128.142";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux之统计ip排行</title>
		<link>https://feilong.tech/2019/06/06/linux%e4%b9%8b%e7%bb%9f%e8%ae%a1ip%e6%8e%92%e8%a1%8c/</link>
		<pubDate>Thu, 06 Jun 2019 14:52:13 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=443</guid>
		<description></description>
		<content:encoded><![CDATA[面试或者笔试中，经常会出现一道题，那就是，统计nginx日志中，访问量前N个的IP地址。

自问我对Linux还算是比较了解，知道过几个命令，但是组装起来用，确实是一门学问。

以下是我盲写的执行结果

<img class="alignnone size-full wp-image-444" src="/uploads/2019/06/WX20190606-223650@2x.png" alt="" width="1552" height="428" />

执行结果，好像并不进入人意，不可能访问量最高的ip是9次。

上面的命令拆分起来，可以理解为：

打印第一列-&gt;去重，并且统计-&gt;倒叙排列-&gt;取前10条

看起来，好像没什么问题，但是问题出在了uniq上面了

uniq其实只用了去掉相邻的重复记录的，也就是，我们在使用uniq的时候，其实是应该先按照排序，然后再进行去重操作

改正后的命令如下

<img class="alignnone size-full wp-image-445" src="/uploads/2019/06/WX20190606-224835@2x.png" alt="" width="1670" height="438" />

相比起前一个命令，第2个sort还增加了 -n，这是因为，我们使用uniq的时候，进行了计数，我们再根据计数(-n)进行倒叙排列(-r)，最后前10条(head -10)记录.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date><![CDATA[2019-06-06 22:52:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-06 14:52:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e4%b9%8b%e7%bb%9f%e8%ae%a1ip%e6%8e%92%e8%a1%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"69.30.226.234";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL之虚拟列（generated-columns）</title>
		<link>https://feilong.tech/2019/08/14/mysql-generated-columns/</link>
		<pubDate>Wed, 14 Aug 2019 15:50:01 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=458</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>定义</h3>
<p>MySQL虚拟列（generated-columns）是MySQL 5.7加入的新特性。怎么理解虚拟列？从名字来讲，“生成的字段”，并不是主动插入的值。
MySQL的文档，是这么解释虚拟列的：</p>
<blockquote>
<p>There are two kinds of Generated Columns: virtual (default) and stored. Virtual means that the column will be calculated on the fly when a record is read from a table. Stored means that the column will be calculated when a new record is written in the table, and after that it will be treated as a regular field. Both types can have NOT NULL restrictions, but only a stored Generated Column can be be a part of an index.</p>
<p>解释起来，就是虚拟列支持两种方式，virtual和stored。当在表里读取记录的时候，virtual类型的会进行实时的计算。当写入一条记录的时候，stored类型会通过计算，写入表中，和常规的字段的一样的占用磁盘的空间。这两种类型都可以有NOT NULL限制，但是能使用索引的一部分的功能。</p>
</blockquote>
<p>MySQL的官方，提供了一个例子，用来简单的说明虚拟列的作用。</p>
<pre><code class="language-sql">> CREATE TABLE sales(
name VARCHAR(20),
price_eur DOUBLE,
amount INT,
total_eur DOUBLE AS (price_eur * amount),
total_used DOUBLE AS (total_eur * xrate),
xrate DOUBLE);
> INSERT INTO sales(name,price_eur,amount,xrate) VALUES(&#039;尺子&#039;, 1.2, 10, 0.9);
> SELECT * FROM sales;
name|price_eur|amount|total_eur|total_used|xrate
尺子|1.2|10|12|10.8|0.9</code></pre>
<p>这个例子应该算是比较明了了，total_eur和total_used根据计算的公式，自动计算除了结果。</p>
<h3>使用的场景</h3>
<p>虚拟列的使用场景其实还算是挺多的，就想上面的例子，可以计算一些公式。尤其对一致性要求比较高的。如果每次都是通过代码进行计算，可能会由于人为的原因，某个字段的计算结果，没有update，那么就会产生bug。如果使用虚拟列，那么直接更新比较的值就好，没必要更新计算结果，降低的人为误操作的风险。</p>
<h4>实时计算</h4>
<p>举个例子，我们可能会需要记录三角形的三边，即：两个直角边，和一个斜边。</p>
<p>按照一般的逻辑，我们可能会，通过代码直接进行计算</p>
<pre><code class="language-php">$a = 4;
$b = 3;
$c = sqrt(pow($a, 2) + pow($b, 2));
// 插入到数据库</code></pre>
<p>这样做是可以的，但是可能会由于人为原因，导致计算的步骤有问题，比如由于人为疏忽，导致忘记了把斜边的值更新到数据库。</p>
<p>我们可以通过MySQL创建一个斜边的虚拟列，然后自动进行计算。</p>
<pre><code class="language-sql">>  CREATE TABLE `triangle` (
 `sidea` double DEFAULT NULL,
 `sideb` double DEFAULT NULL,
 `sidec` double GENERATED ALWAYS AS (SQRT(sidea * sidea + sideb * sideb))
 ) ;</code></pre>
<h4>数据冗余</h4>
<p>这个场景也是比较常见，比如，我们的某个字段存储的是json结构，但是为了方便查询，可能需要json里面的某个子单当做SQL的查询条件，这个时候，我们可以把这个查询条件，作为虚拟列。</p>
<h3>使用限制</h3>
<p>虚拟列虽然是计算的结果，但是也是有一些限制的。</p>
<h4>恶意的数据</h4>
<pre><code class="language-sql">> create table t( x int, y int, z int generated always as( x / y));
insert into t(x,y) values(1,0); 
1365 - Division by 0, Time: 0.043000s</code></pre>
<p>根据创建的表语句，z是x和y的商，由于要插入的值y=0，导致计算的时候出现了错误。</p>
<h4>删除源数据的列</h4>
<p>还是以第一个表的数据为例</p>
<pre><code class="language-sql">> CREATE TABLE sales(
name VARCHAR(20),
price_eur DOUBLE,
amount INT,
total_eur DOUBLE AS (price_eur * amount),
total_used DOUBLE AS (total_eur * xrate),
xrate DOUBLE);
> alter table sales drop price_eur;
3108 - Column &#039;price_eur&#039; has a generated column dependency.</code></pre>
<h4>索引的限制</h4>
<p>虚拟列是不允许创建主键索引和全文索引的。</p>
<pre><code class="language-sql">> CREATE TABLE sales(
name VARCHAR(20),
price_eur DOUBLE,
amount INT,
total_eur DOUBLE AS (price_eur * amount),
total_used DOUBLE AS (total_eur * xrate),
total_used2 DOUBLE AS (total_eur * xrate) stored,
xrate DOUBLE);</code></pre>
<p>我重新创建了一个表，下面来看看virtual和stored在索引上的区别吧。</p>
<pre><code class="language-sql">> ALTER TABLE sales ADD PRIMARY KEY(total_eur);
3106 - &#039;Defining a virtual generated column as primary key&#039; is not supported for generated columns.
> ALTER TABLE sales ADD PRIMARY KEY(total_used2);
Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0</code></pre>
<p>第一个区别就是，virtual是不允许作为主键的，这大概是因为virtual是实时计算的值，并且并没有写到磁盘上，没办法使用聚集索引。</p>
<pre><code class="language-sql">> ALTER TABLE sales ADD fulltext index (total_eur);
3106 - &#039;Fulltext index on virtual generated column&#039; is not supported for generated columns.
> ALTER TABLE sales ADD fulltext index(total_used2);
1283 - Column &#039;total_used2&#039; cannot be part of FULLTEXT index</code></pre>
<p>很明显，两者都不能创建全文索引。</p>
<h3>总结</h3>
<p>虚拟列是MySQL 5.7版本之后新增的特性，主要是方便我们查询和操作。</p>
<p>我所说的可能只是冰山一角，具体的用法，还需要我们自己根据具体的业务场景使用才行。</p>
<h3>参考文献</h3>
<ul>
<li>
<p><a href="https://www.linuxidc.com/Linux/2016-02/128066.htm">MySQL 5.7新特性之Generated Column</a></p>
</li>
<li>
<p><a href="http://mysqlserverteam.com/generated-columns-in-mysql-5-7-5/">Generated Columns in MySQL 5.7.5</a></p>
</li>
</ul>
<p>本文连接：<a href="http://feilong.tech/2019/08/14/mysql-generated-columns">http://feilong.tech/2019/08/14/mysql-generated-columns</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date><![CDATA[2019-08-14 23:50:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-14 15:50:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-generated-columns]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[MySQL generated-columns 虚拟列 virtual-column]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[%%title%% %%page%% %%sep%% %%title%% %%primary_category%%]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown_enabled]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[mysql%e4%b9%8b%e8%99%9a%e6%8b%9f%e5%88%97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[468]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[sql,php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"193.176.85.112";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>当我们聊技术实力的时候，我们到底在聊什么</title>
		<link>https://feilong.tech/2019/08/16/%e5%bd%93%e6%88%91%e4%bb%ac%e8%81%8a%e6%8a%80%e6%9c%af%e5%ae%9e%e5%8a%9b%e7%9a%84%e6%97%b6%e5%80%99%ef%bc%8c%e6%88%91%e4%bb%ac%e5%88%b0%e5%ba%95%e5%9c%a8%e8%81%8a%e4%bb%80%e4%b9%88/</link>
		<pubDate>Fri, 16 Aug 2019 09:51:51 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=459</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>技术实力的迷思</h3>
<hr />
<p>俗话说“文无第一，武无第二”，技术就是一种“文”的能力，很多时候我们很难直观看出一个技术人员的实力，但不管是公司招聘的面试，还是公司内部的晋升面评，都需要在较短时间内快速判断一个技术人员的实力。正因为技术实力评价本身没有绝对客观的标准，很多时候都会听到类似的吐槽：</p>
<blockquote>
<p>“我们组内的 XX 技术实力不如我，竟然他晋升通过了，我却被刷掉了，评委真的是~！@#￥”……</p>
<p>“面试官问的都是什么鬼问题，我知道的基本没问，我感觉他根本不会考察我的技术实力”……</p>
<p>“听说算法和数据结构最能体现程序员的实力，我要好好啃啃《算法导论》”（然而啃完又忘记了）……</p>
<p>……</p>
</blockquote>
<p>有很多类似的问题和吐槽，背后都可以归纳为一个问题：当我们聊技术实力的时候，我们到底在聊什么？</p>
<blockquote>
<p>有的人认为：技术实力就是指算法和数据结构很厉害……</p>
<p>有的人认为：研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人……</p>
<p>有的人认为：会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法……</p>
<p>有的人认为：技术高手必须对业务很熟悉……</p>
<p>有的人认为：贡献了开源项目代码的才是技术牛人……</p>
<p>有的人认为：只有架构师才是技术大牛……</p>
</blockquote>
<p>……不一一列举，相信一千个人眼中有一千个哈姆雷特，一千个程序员心中有一千个技术大牛</p>
<p><img src="/uploads/2019/08/WX20190816-173728.png" alt="" /></p>
<h3>技术实力的本质</h3>
<hr />
<p>得益于工作岗位的关系，我在考核技术人员的实力时积累了较丰富的经验（包括踩坑的经验）。首先是招聘，前后面试了几百个人吧，技术范围包括服务器、android、iOS、前端，既包括初出茅庐的应届生，也包括腾讯的 T4 大牛；其次是晋升评委，作为职业等级晋升的评委，面评过几十个晋升的技术同学，各种案例都见过，也与其他评委一起互相交流，有时候甚至是针对某个同学通过还是不通过产生争执。通过这种不断的实践、思考、踩坑、交流的过程，逐步形成了一套完整的方法论，接下来就谈谈我的这套方法论，分享一下我是如何判断技术人员的技术实力的。</p>
<p>简单来说，判断技术实力的一个总的原则就是：<strong> 技术实力就是指解决问题的能力！</strong></p>
<p>我们将这个原则细化一下，可以得到几个细则：</p>
<p><strong>1. 不存在放之四海皆准的技术</strong></p>
<p>简单来说，问题是和领域相关的，技术是用来解决问题的，因此技术也是领域相关的，不存在放之四海皆准的技术。</p>
<p>有网友说：高斯林来做 iOS 开发，分分钟秒杀现在所有的 iOS 开发人员，因为目前 iOS 经验最丰富的开发人员，经验也不过 10 年。我认为这是不可能的，iOS 开发领域面临的问题，和开发 Java 编程语言面临的问题差异很大，当然，如果高斯林真的做上几年 iOS 开发，确实可能超过很多 iOS 开发人员，但一开始就秒杀哪些做了 7~8 年的 iOS 程序员，这个是不可能的。</p>
<p><strong>2. 技术要能解决具体问题才有价值</strong></p>
<p>技术只有能够解决某个领域的问题才有价值，否则光知道某个技术没什么用；掌握了某个技术但在当前的领域用不上，这个技术对当前领域来说也没有价值。</p>
<p>当然，确实存在某些技术可能在当前看起来对当前领域没有用，但后面可能会用到，因此技术人员需要自己储备一些当前暂时没有用的技术以拓宽技术视野，例如当前大火的人工智能和区块链技术，但要注意“可能”这个词，这需要技术人员自己进行判断和平衡，不能拿技术储备作为托词一股脑的什么都储备，例如数据库开发工程师至少在这几年是不需要储备 VR 知识的。</p>
<p><strong>3. 问题的复杂度决定技术实力的高度</strong></p>
<p>问题的复杂度不同，复杂度越高，解决起来越困难，相应的技术实力要求也越高。</p>
<p>我们拿这个原则去分析一下前面提到的各种技术实力的理解：</p>
<p><strong>“技术实力就是指算法和数据结构很厉害”</strong></p>
<p>很多面试官喜欢让面试者现场手写冒泡排序、快速排序、链表之类的代码，以此来判断面试者的技术实力，但我们用这个原则去分析一下就可以发现，这样并不能考核技术实力，假如招聘了一个会手写快速排序的面试者，招进来后你会让他用自己写的快速排序解决什么问题？貌似绝大部分场景下都不可能让一个新来的员工自己写个快速排序来解决某个问题吧？</p>
<p>当然，肯定还是有人会说“我考核的是面试者的技术基础和思维能力”，这个说法没错，但如果是这个目的，现场手写快速排序这种面试方法就是错误的，如果是考察技术基础，考核的范围应该是算法的基本逻辑，优缺点、适用场景，因为这些技术点在后续具体应用中选择合适的算法来解决问题的时候很有用；如果是考察思维能力，考核的方式应该是给一个具体的算法应用题，来看看面试者的分析和思考过程，例如我在知乎上给了一道我们业务上曾经用到的“如何快速计算你好友的好友和你的共同好友数”，没想到引起了评论里面的大讨论，有兴趣的朋友也可以尝试一下。</p>
<p><strong>“研究过 Linux 内核源码和看懂《深入浅出 MFC》的才是技术牛逼的人”</strong></p>
<p>国内技术人员（不知道国外是否类似）对于底层技术有一种偏见，认为只有懂底层才是真正的技术高手，否则都只是简单的调用 API 完成功能。我当年也不例外，我曾经说过“程序员的三个大坑：Linux 内核源码、编译原理（龙书）、深入浅出 MFC”，我每个都跳过，而且还花费了大量时间却收效甚微。其实用原则去分析一下就可以发现这个说法也站不住脚，如果我们从事 Linux 内核开发，编程语言开发，MFC 框架开发，这些技术确实能解决问题；但如果做得不是这些领域的开发，这些技术并不能帮我们解决什么问题，我还没见过哪个 Java 编程的问题需要我去用编译原理的技术去解决，也没见过哪个数据库的问题需要我去研究 Linux 内核源码才能解决，当然并不是说这些问题一定不存在，Java 语言本身肯定也有 bug，但这些问题是需要 Java 官方去解决，我们在应用中无需亲自去解决，否则的话，效率会非常低，个人爱好无可厚非，但团队必须考虑效率。</p>
<p><strong>“会写 C++ 的才是真正的技术高手，因为 C++ 的对象初始化有 N 种写法”</strong></p>
<p>这是程序员群体里面永恒的一个话题，哪个语言才是最好的最牛逼的，其中两个著名的梗：PHP 是世界上最好的语言，C++ 是世界上最牛逼的语言。C++ 确实语法复杂，功能强大，真正能完全掌握 C++ 的程序员应该屈指可数，但这是否意味着掌握 C++ 就牛逼了呢？并不尽然，我们拿原则来分析一下，如果用 C++ 做游戏引擎，或者高性能中间件，C++ 确实能解决问题，但如果我们做的是 android 手机资讯 app，C++ 能解决什么问题呢？自己写个加密库可能比系统带的库漏洞还多，自己用 C++ 写个 SQLite 好像没什么意义。</p>
<p><strong>“架构师才是技术大牛”</strong></p>
<p>架构师几乎是每个程序员的技术梦想，能够成为架构师（真正的架构师，不是 PPT 架构师），技术实力肯定很强，这点是没有争议的，但问题是当不上架构师就不是技术大牛么？我们用原则来分析一下就会发现并不是这样的，架构师并不是全能的，他解决的主要问题是系统的结构设计，还有一些问题是架构师不能解决的，例如 MySQL 5.6 版本通过优化一个 false sharing 问题，性能提升 50%，</p>
<p>（<a href="http://www.cis.upenn.edu/~delozier/docs/tmi_micro_2017.pdf">http://www.cis.upenn.edu/~delozier/docs/tmi_micro_2017.pdf</a>）</p>
<p>这种问题点的发现和处理并不比架构设计简单，能发现和解决这个问题的技术人员实力非常高。</p>
<p>以上分析了几个典型的误区，其它的观点，这里只贴一下简单的答案，大家有兴趣也可以套用这个原则去分析一下具体的原因，基本上八九不离十：</p>
<p>“技术高手必须对业务很熟悉” —— 正确</p>
<p>“贡献了开源项目代码的才是技术牛人”—— 错误</p>
<p><img src="/uploads/2019/08/WX20190816-174244.png" alt="" /></p>
<h3>技术实力详解</h3>
<hr />
<p>理解评估技术实力的基本原则后，我们知道了需要解决的问题复杂度越高，技术实力就越高。在这个基础上，我把技术实力分为两大类 6 分类：</p>
<p><strong>硬实力</strong>：真正解决问题的能力，别人可以看出来的能力，技术实力按照“点、线、面、体”的 4 个分类逐层上升；</p>
<p><strong>软实力：</strong>比硬实力更厉害但也更虚的能力，简单来说，要想解决问题首先得发现问题，但很多时候问题并不是一目了然的，需要有一定的技术洞察力。软实力主要包括 2 个核心能力：发现问题、技术创新。</p>
<h4>硬实力</h4>
<p>我把技术硬实力分为四个等级：<strong>点、线、面、体</strong>，技术等级依次提升，解决的问题复杂度也越来越高，下面详细解释一下。</p>
<h5>技术点</h5>
<p>“点”就是某个具体的技术，用来解决某个具体的问题，例如使用 JDBC 从数据库读取数据，目的是解决数据掉电丢失的问题；使用 Java 多线程，目的是为了解决大量用户并发访问的吞吐量和时延问题。掌握了技术点，就可以开始基本的业务功能开发了。</p>
<h5>技术线</h5>
<p>“线”就是一系列相关的技术点组成，每个技术点都是为了解决某个问题。例如：</p>
<p>为了完成一个用户请求，开发框架首先要有路由 router 功能，路由到具体 Controller 后，Controller 进行业务逻辑处理，处理过程中可能会使用 JDBC 来读取数据，访问 Redis 读取缓存等，这一连串的技术每个都解决了一个问题点，串起来就完成了一个业务功能的处理过程。</p>
<p>为了定位一个线上 Java 服务器响应慢的问题，需要用到 tcpdump 抓包，使用 Java 工具查看 jvm 的状态，使用 mysql 命令行或者工具查看数据库状态，使用 explain 分析可疑 SQL 语句。</p>
<p>掌握了技术线，就可以完成某个业务功能的全流程设计和开发了。</p>
<h5>技术面</h5>
<p>“面”就是某一类相关技术线的综合。例如：</p>
<p>Java 开发是一个技术面，包括多线程、JDBC、文件读写、JVM 调优、JVM 工具等多个技术线；</p>
<p>高性能开发是一个技术面，包括：数据库分库分表、缓存、多线程、HTTP 优化等；</p>
<p>数据库维护是一个技术面，包括：数据库调优、数据库问题定位、高性能数据库表设计等；</p>
<p>掌握技术面，已经是某个领域的专家了，简单来说就是这个领域的问题找你都可以搞定。</p>
<h5>技术体</h5>
<p>“体”就是多个技术面的综合。</p>
<p>最常见的“体”就是架构设计，对于一个大型业务或者系统的架构师来说，需要掌握多个技术面，然后进行设计和取舍。例如，一个后台架构师需要掌握 Java 的技术面、数据库的技术面、网络的技术面等，以及业务领域知识。</p>
<p>架构设计是横向技术面的综合，我称之为广度技术体；还有一种纵向技术面的综合，我称之为深度技术体。例如 Java 的开发工程师，当达到技术面的水平时掌握了“多线程、JDBC、文件读写、JVM 调优、JVM 工具等”，如果需要进一步在 Java 这个领域提升技术，就需要向下了解操作系统、硬件（CPU、内存、磁盘等），从而更好的解决某些复杂的问题，例如 Disruptor 高性能并发框架的设计。掌握了技术体，就可以进行架构设计，或者成为某个领域的资深专家了，解决领域级的复杂问题。</p>
<h4>软实力</h4>
<h5>发现问题</h5>
<p>有的问题很明显，例如线上出故障，系统性能不达标，系统性能需要达到 5W QPS；但有的问题并不那么明显，并不能一眼看出是问题在哪里，是技术问题还是管理问题。</p>
<p>例如我们曾遇到团队间协作开发效率很低，每次开发一个业务功能，都需要几个系统的研发人员来讨论接口协议、接口数据格式、接口安全加密、业务逻辑等，大家都不厌其烦，但好像又都必不可少，团队间为了提高效率，项目经理制定了规范、流程、模板等，但作用最终都不大。那后来是怎么解决的呢？通过引入服务中心来完成系统间同步接口调用，通过引入消息队列来完成系统间异步消息通知，系统间协作效率大大提高，以前要开会讨论几个小时的事情，现在只要明确接口传输的数据内容即可，甚至都不用开会，两个研发一讨论就差不多了。</p>
<p>除此以外，问题的根源往往掩盖在很多问题表象之下，如果不解决根源问题，解决一个表象问题，获得一时安宁，一段时间后又发生另外的问题，长此以往反反复复。</p>
<p>例如我们曾有个系统，今天交换机故障导致业务问题，明天系统 bug 导致业务问题，后天机柜断电导致业务问题，还被黑客攻击过，这些问题看起来都很独立，问题的发生也感觉都是偶然的，按照出一个问题解决一个问题的方式也没什么问题，但全年来看，业务就是出了很多问题，怎么解决？我们经过分析，发现根本原因是业务需要异地多活，而架构是双机房单中心的，我们需要做到的不是避免每个问题的发生（事实上也不可能避免），而是应该做到问题发生后能够快速处理，于是通过将架构重构为异地多活，重构完成后还是有各种偶发问题发生，但对业务的影响就很小了。</p>
<p>发现问题的能力主要来源于经验，包括成功的经验、踩坑的经验、参考别人的经验，因此如果要培养自己这方面的能力，多思考、多总结、多学习、多参加行业交流。</p>
<h5>技术创新</h5>
<p>达到这个级别基本都是业界大神一般的级别，说实话我也没什么经验，只能仰慕这些大神。</p>
<p>例如：</p>
<ul>
<li>
<p>当年贝索斯要求亚马逊公司内的系统都服务化，后来是哪位大神想到可以把这个能力开放出来转换为“云计算”？</p>
</li>
<li>
<p>阿里云王坚博士当年在众人都不看好的情况下为何坚持云计算是未来？</p>
</li>
<li>
<p>Google 在解决大数据问题时，如何能够提炼出三篇论文，开启了一个大数据时代？</p>
</li>
</ul>
<p><img src="/uploads/2019/08/WX20190816-174557.png" alt="" /></p>
<h3>技术实力案例点评</h3>
<hr />
<p>一个面试者面试 Java 技术专家岗位，其中有一项项目经验很牛逼：XX 架构重构，性能提升 10 倍。于是，我针对这个项目经验进行了深入的考察，结果……</p>
<p>下面是我们大概的对话过程：</p>
<p>我：请简单介绍一下这个项目重构。</p>
<p>面：我们某个业务和比赛有关，每次关键比赛前业务访问量是平时的 10 倍以上，原来的系统量一大就卡死了，用户体验很不好，需要重构。</p>
<p>我：具体怎么做的呢？</p>
<p>面：我通过引入 mc 缓存，将原来直接访问数据库的操作改为先访问缓存，性能比原来提升了 10 倍。我：为何你想到了引入 mc？</p>
<p>面：（卡了一下，有点惊讶我的问题）……我上网查了一下资料，很多都说 mc 能够大幅提升性能，并且使用后确实效果很好。</p>
<blockquote>
<p>[点评 1] 这是典型的“代码靠抄，方案靠搜，效果靠试”，面试者看到了一个问题，但没有分析和思考，然后上网搜方案，看到了好像很多人都说引入 mc 都能解决问题，于是尝试引入了 mc，最终确实好像解决了，这让面试者自我感觉良好。</p>
<p>为何我在面试的时候问“为何引入”，这是不是一种“面试造航母，入职拧螺丝”的装逼面试呢？其实不然，我们的业务中遇到性能瓶颈的问题是非常常见的，而简单的“性能瓶颈”只是一个表象，我们看看可能的原因有哪些：</p>
<ol>
<li>数据库慢查询，例如不合理的查询、没有索引、表数量太大等；</li>
<li>并发设计不合理，例如多线程锁设计不合理，采用了不合理的 Reactor 模型等；</li>
<li>代码逻辑不合理，例如本来可以异步处理的也采用了同步处理，某个循环里面重复访问数据库，某个接口打印了大量日志等；</li>
<li>外部系统性能低，例如依赖的某个系统性能低，太多无效的外部接口请求等；</li>
<li>数据访问不合理，例如没有用缓存，没有分页等；</li>
<li>非核心业务和核心业务互相影响；</li>
</ol>
<p>以上仅仅是举例，还有更多可能的原因，如果一个技术专家不具备“面”的技术，只知道 mc 可以提升性能这个“点”的技术，是远远不够的，一次运气好能解决问题，但不可能次次都运气好。
当然，如果面试的是“Java 高级开发工程师”，面试重点和面试问题又不一样了。</p>
</blockquote>
<hr />
<p>我：mc 能大幅提升性能的原理是什么？</p>
<p>面：缓存访问快，数据库访问慢。</p>
<p>我：那 mc 性能多高，数据库性能多高？</p>
<p>面：……（想了 10 秒）抱歉，没有研究过。</p>
<blockquote>
<p>[点评 2] 这是典型的知其然不知其所以然，开源方案拿来就用，基本的测试和原理研究都没做过。大部分人对于很多概念的理解都是“性能高”，“可靠性好”，“听说很厉害”，但在具体设计的时候，这个理解是远远不够的，一定要量化，例如：同样是负载均衡，Nginx 的性能量级是万级，LVS 是 10 万级，F5 这类设备是百万级（具体数值和硬件以及数据包大小相关，这里只给量级）。</p>
<p>为何要研究原理呢？以 mc 为例，一致性 hash 和扩容相关，内存分配方式和缓存容量有关，如果这些都不清楚，实际应该部署多少 mc 节点，每个节点应该分配多少内存，这些都没法确定。</p>
</blockquote>
<hr />
<p>我：没关系，那我们换个问题，重构后你们的系统用到的机器数量是多少？相比重构前减少了多少？</p>
<p>面：机器数量是 100 台，相比重构前没有减少。</p>
<p>我：哦，100 台机器，QPS 每台才 300 多，我看你们的业务也不是很复杂，为何这么低？</p>
<p>面：……（卡住 10 秒）这……300 多 QPS 好像也不低吧？</p>
<p>我：那你有没有分析过每次请求全流程每个阶段的性能耗时？瓶颈在哪里？</p>
<p>面：（卡住 5 秒）没有分析过呢？</p>
<p>我：那为何就认定引入 mc 就有效果？</p>
<p>面：……（卡住 10 秒）我看大家都说引入缓存能大幅提升性能，而且最终效果确实很好。</p>
<blockquote>
<p>[点评] 这就是知道技术点，不知道技术线和技术面，按道理对于系统性能问题的分析，至少是技术线级别的，需要分析每个请求每个阶段的耗时和原因；也可以是技术面级别的，例如分析数据库的设计、服务器的负载均衡等，还可以是技术体级别的，例如架构是否合理，是否可以将某个子系统拆分，引入消息队列等。</p>
</blockquote>
<p>我：好吧，换个问题，如果让你再一次优化系统，你觉得可以怎么做？</p>
<p>面：……（思考 20 秒）我觉得目前的系统性能已经足够，应该不需要优化了。</p>
<blockquote>
<p>[点评] 考察的是发现问题的能力，但他发现不了问题，其实前面已经都提到了，100 台机器就是问题，QPS 过低也是问题，但由于他没有经验，是看不出这些问题的。</p>
</blockquote>
<p>很遗憾，最终这个面试者没有通过面试。</p>
<h3>写在最后</h3>
<hr />
<p>对于技术人员实力的判断，并不存在完全客观和可量化的标准，多少都带有评判者的主观判断，这也是最容易产生争议的地方，本文也是我自己的一个思考和总结，一家之言，抛砖引玉，欢迎大家探讨交流。</p>
<p>文章来自 李云华--《当我们聊技术实力的时候，我们到底在聊什么》</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date><![CDATA[2019-08-16 17:51:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-16 09:51:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bd%93%e6%88%91%e4%bb%ac%e8%81%8a%e6%8a%80%e6%9c%af%e5%ae%9e%e5%8a%9b%e7%9a%84%e6%97%b6%e5%80%99%ef%bc%8c%e6%88%91%e4%bb%ac%e5%88%b0%e5%ba%95%e5%9c%a8%e8%81%8a%e4%bb%80%e4%b9%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%88%90%e9%95%bf%e8%bf%9b%e9%98%b6"><![CDATA[成长进阶]]></category>
		<category domain="category" nicename="think"><![CDATA[自我反思]]></category>
		<category domain="post_tag" nicename="%e9%9d%a2%e8%af%95"><![CDATA[面试]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[474]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[面试 成长进阶 技术 技术实力]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[59]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"111.197.235.32";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP float &amp; double 序列化导致的精度问题</title>
		<link>https://feilong.tech/2019/09/06/php-float-double-precision/</link>
		<pubDate>Fri, 06 Sep 2019 07:38:40 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=484</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>问题发现</h3>
<p>Json_encode应该算是PHP函数中，使用次数最多的函数之一了，尤其是在一些api接口定义，我们通常会使用一些json进行返回。但是在一次开发中，我发现在返回浮点型数字的时候，数字出奇的长。在使用var_dump的时候，明明是正常的，怎么接口返回的时候就变异了？？？？</p>
<pre><code class="language-php">// 实例代码

$list = [
 &#039;100&#039;,&#039;200&#039;,&#039;5&#039;,&#039;100.23&#039;,200.222222,&#039;5&#039;,&#039;100&#039;,&#039;200&#039;,&#039;1&#039;
];
echo json_encode($list);

[100,200,5,100.23,200.2222219999999879291863180696964263916015625,5,100,200,1]
</code></pre>
<p>我们可以看到，经过<code>json_encode</code>之后，浮点型的小数，边长了，出现了精度的问题。</p>
<h3>调试源码</h3>
<p>PHP的所有的内置的函数，都是通过拓展的形式安装和运行的。json_encode也不例外，拓展就是 ext/json</p>
<pre><code class="language-c">// ext/json/json.c

static PHP_FUNCTION(json_encode)
{
    zval *parameter;
    smart_str buf = {0};
    zend_long options = 0;
    zend_long depth = PHP_JSON_PARSER_DEFAULT_DEPTH;

    if (zend_parse_parameters(ZEND_NUM_ARGS(), z|ll, &amp;parameter, &amp;options, &amp;depth) == FAILURE) {
        return;
    }

    JSON_G(error_code) = PHP_JSON_ERROR_NONE;

    JSON_G(encode_max_depth) = (int)depth;

    php_json_encode(&amp;buf, parameter, (int)options);

    if (JSON_G(error_code) != PHP_JSON_ERROR_NONE &amp;&amp; !(options &amp; PHP_JSON_PARTIAL_OUTPUT_ON_ERROR)) {
        smart_str_free(&amp;buf);
        ZVAL_FALSE(return_value);
    } else {
        smart_str_0(&amp;buf); /* copy? */
        ZVAL_NEW_STR(return_value, buf.s);
    }
}
....
PHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* {{{ */
{
    php_json_encode_zval(buf, val, options);
}</code></pre>
<p>PHP_FUNCTION 里面是对<code>json_encode</code>的函数的定义，首先就是解析 <code>json_encode</code> 的参数列表，和选项设置，然后，调用了<code>php_json_encode</code>的方法，执行json编码的主要操作，并把一些 <a href="https://www.php.net/manual/zh/json.constants.php">json options</a> 作为参数传进去。 所以，我们的重点，就是调试 <code>php_json_encode</code>的执行过程。</p>
<h3>运行调试</h3>
<pre><code class="language-shell">$ lldb php7
(lldb) target create php7
Current executable set to &#039;php7&#039; (x86_64).
(lldb) b php_json_encode
Breakpoint 1: where = php7`php_json_encode + 19 at json.c:196:23, address = 0x000000010027e963
(lldb) r debug/json.php
Process 31145 launched: &#039;/usr/local/bin/php7&#039; (x86_64)
Process 31145 stopped
* thread #1, queue = &#039;com.apple.main-thread&#039;, stop reason = breakpoint 1.1
    frame #0: 0x000000010027e963 php7`php_json_encode(buf=0x00007ffeefbfe2a0, val=0x0000000101a16110, options=0) at json.c:196:23
   193 
   194  PHP_JSON_API void php_json_encode(smart_str *buf, zval *val, int options) /* {{{ */
   195  {
- 196 php_json_encode_zval(buf, val, options); 
    197 } 
    198 /* }}} */ 
    199 </code></pre>
<p>我们可以打印看看传输的值，是不是和我们填写的参数一致</p>
<pre><code class="language-shell">(lldb) frame variable val-&gt;value.arr-&gt;nNumOfElements (uint32_t) val-&gt;value.arr-&gt;nNumOfElements = 9 </code></pre>
<p>我们输出了数组的元素的个数，正好是9个元素。 </p>
<h3>步步紧逼</h3>
<pre><code class="language-c">// json_encoder.c 
int php_json_encode_zval(smart_str *buf, zval *val, int options, php_json_encoder *encoder) /* {{{ */
{
again:
    switch (Z_TYPE_P(val))
    {
        case IS_NULL:
            smart_str_appendl(buf, &quot;null&quot;, 4);
            break;

        case IS_TRUE:
            smart_str_appendl(buf, &quot;true&quot;, 4);
            break;
        case IS_FALSE:
            smart_str_appendl(buf, &quot;false&quot;, 5);
            break;

        case IS_LONG:
            smart_str_append_long(buf, Z_LVAL_P(val));
            break;

        case IS_DOUBLE:
            if (php_json_is_valid_double(Z_DVAL_P(val))) {
                php_json_encode_double(buf, Z_DVAL_P(val), options);
            } else {
                encoder-&gt;error_code = PHP_JSON_ERROR_INF_OR_NAN;
                smart_str_appendc(buf, &#039;0&#039;);
            }
            break;

        case IS_STRING:
            return php_json_escape_string(buf, Z_STRVAL_P(val), Z_STRLEN_P(val), options, encoder);

        case IS_OBJECT:
            if (instanceof_function(Z_OBJCE_P(val), php_json_serializable_ce)) {
                return php_json_encode_serializable_object(buf, val, options, encoder);
            }
            /* fallthrough -- Non-serializable object */
        case IS_ARRAY: // 如果是数组类型 
            return php_json_encode_array(buf, val, options, encoder);

        case IS_REFERENCE:
            val = Z_REFVAL_P(val);
            goto again;

        default:
            encoder-&gt;error_code = PHP_JSON_ERROR_UNSUPPORTED_TYPE;
            if (options &amp; PHP_JSON_PARTIAL_OUTPUT_ON_ERROR) {
                smart_str_appendl(buf, &quot;null&quot;, 4);
            }
            return FAILURE;
    }

    return SUCCESS;
}
/* }}} */</code></pre>
<p>由于我们的参数类型是数组，所以，在判断val的类型的时候，就会跳到 case IS_ARRAY，然后开始执行 php_json_encode_array </p>
<pre><code class="language-c">// json_encoder.c 

static int php_json_encode_array(smart_str *buf, zval *val, int options, php_json_encoder *encoder) /* {{{ */
{
    int i, r, need_comma = 0;
    HashTable *myht;

    if (Z_TYPE_P(val) == IS_ARRAY) {
        myht = Z_ARRVAL_P(val);
        r = (options &amp; PHP_JSON_FORCE_OBJECT) ? PHP_JSON_OUTPUT_OBJECT : php_json_determine_array_type(val);
    } else { // 判断是否设置强制转换成json对象，即json_encode的option是否为JSON_FORCE_OBJECT 
        myht = Z_OBJPROP_P(val);
        r = PHP_JSON_OUTPUT_OBJECT;
    }
    if (myht &amp;&amp; ZEND_HASH_GET_APPLY_COUNT(myht) &gt; 1) {
        encoder-&gt;error_code = PHP_JSON_ERROR_RECURSION;
        smart_str_appendl(buf, &quot;null&quot;, 4);
        return FAILURE;
    }

    if (r == PHP_JSON_OUTPUT_ARRAY) {
        smart_str_appendc(buf, &#039;[&#039;);  // 如果是json数组，那么就是[开头
    } else {
        smart_str_appendc(buf, &#039;{&#039;); // 如果是json对象，那么就是{开头
    }
    ++encoder-&gt;depth;
    i = myht ? zend_hash_num_elements(myht) : 0; // 统计数组中元素的个数：i=9 
    ... 代码省略
    if (i &gt; 0) {
        zend_string *key;
        zval *data;
        zend_ulong index;
        HashTable *tmp_ht;

        ZEND_HASH_FOREACH_KEY_VAL_IND(myht, index, key, data) { // 对数组的元素进行解析 
        ... 代码省略
        }  ZEND_HASH_FOREACH_END();

    }
    ... 代码省略

    if (r == PHP_JSON_OUTPUT_ARRAY) {
        smart_str_appendc(buf, &#039;]&#039;); // 追加json字符串的结束符
    } else {
        smart_str_appendc(buf, &#039;}&#039;); // 追加json字符串的结束符
    }
}</code></pre>
<p>在对数组的每个元素进行编码的时候会重复的执行<code>php_json_encode_zval</code>的witch的判断。 当循环到 200.222222，那么就是走到<code>case IS_DOUBLE:</code>的分支，然后执行<code>php_json_encode_double</code>的方法 </p>
<pre><code class="language-c">static inline void php_json_encode_double(smart_str *buf, double d, int options) /* {{{ */
{
    size_t len;
    char num[PHP_DOUBLE_MAX_LENGTH];

    php_gcvt(d, (int)PG(serialize_precision), &#039;.&#039;, &#039;e&#039;, num); // 根据数字和配置的precision长度，截取数字，赋值给num
    len = strlen(num);
    if (options &amp; PHP_JSON_PRESERVE_ZERO_FRACTION &amp;&amp; strchr(num, &#039;.&#039;) == NULL &amp;&amp; len &lt; PHP_DOUBLE_MAX_LENGTH - 2) {
        num[len++] = &#039;.&#039;;
        num[len++] = &#039;0&#039;;
        num[len] = &#039;\0&#039;;
    }
    smart_str_appendl(buf, num, len); // 将截取后的num追加到json字符串后面
}</code></pre>
<h3>总结</h3>
<p>json-encode的执行还算是比较容易理解</p>
<ol>
<li>先获取待编码的zval</li>
<li>判断zval的类型，针对不同的类型，进行不同的编码</li>
<li>如果是数组，那么就先按个遍历数组的元素，递归进行编码</li>
<li>当元素是浮点型的时候，根据配置文件里面的 serialize_precision或precision进行截取</li>
<li>截取后的数字追加到json字符串的尾部</li>
</ol>
<p>根据php.ini文档的说明</p>
<blockquote>
<p>; The number of significant digits displayed in floating point numbers.</p>
<p>; When floats &amp; doubles are serialized store serialize_precision significant
; digits after the floating point. The default value ensures that when floats
; are decoded with unserialize, the data will remain the same.
; The value is also used for json_encode when encoding double values.
; If -1 is used, then dtoa mode 0 is used which automatically select the best
; precision.</p>
</blockquote>
<p>设置serialize_precision=-1 将会自动使用最适合的长度，即我们经常使用的浮点型长度。</p>
<p>所以，我们最好设置-1来设置序列化长度</p>
<pre><code class="language-php">ini_set(&#039;precision&#039;, -1);
ini_set(&#039;serialize_precision&#039;, -1);</code></pre>
<p>文章链接: <a href="http://feilong.tech/2019/09/06/php-float-double-precision">http://feilong.tech/2019/09/06/php-float-double-precision</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>484</wp:post_id>
		<wp:post_date><![CDATA[2019-09-06 15:38:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-06 07:38:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-float-double-precision]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="json"><![CDATA[json]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-precision"><![CDATA[PHP精度]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[php-float-double-%e5%ba%8f%e5%88%97%e5%8c%96%e5%af%bc%e8%87%b4%e7%9a%84%e7%b2%be%e5%ba%a6%e9%97%ae%e9%a2%98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[PHP精度 json precision serialize_precision]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[59]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[486]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown_enabled]]></wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.248";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Feilong]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[569914877@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.255.136.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-24 15:24:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-24 07:24:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[精度问题只有浮点型或者双精度会出现，所以确认前一步已经使用doubleval或者floatval转换过了]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569309889.161608;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"Feilong";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>普吉岛之行--出行篇</title>
		<link>https://feilong.tech/2019/09/11/phuket-travel/</link>
		<pubDate>Wed, 11 Sep 2019 03:56:27 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=488</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>伴随着黄金九月的到来，也终于迎来了期盼已久的团建——普吉游。</h4>
<h3>出行前准备</h3>
<p>由于普吉岛的紫外线很强，所以提前在淘宝购买了防晒霜。此外，泰国的电话卡也是必不可少的，比较现在没网的生活实在是有点难熬。</p>
<p>我本身有一些皮肤问题，由于行程安排了出海，所以难免会要穿着泳衣，光着膀子。所以为了防止尴尬，在迪卡侬买了防晒服，一来可以遮挡一下自己的皮肤，还可以防止晒伤。</p>
<h3>出发</h3>
<p>机票是公司统一安排的标准仓，出发时间是凌晨的一点半。从北京的国际机场T3飞到吉隆坡转机，然后再飞普吉岛。在吉隆坡，有几个小时的自由时间，可以在免税店逛一逛。</p>
<img src="/uploads/2019/09/WechatIMG55-576x1024.jpeg" alt="" width="576" height="1024" class="aligncenter size-large wp-image-491" />
<h3>转机</h3>
<p>免税店大多数是化妆品，这也是很多代购化妆品的原因。</p>
<p>在吉隆坡的免税店，帮助朋友代购了一瓶阿玛尼的粉底液，折合人民币是400块，听朋友讲，比国内便宜200多块。</p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120f-1024x576.jpg" alt="" /></p>
<p>除了基本的化妆品以外，另外一个吸引人的就算是香水了，香水要在整个免税店占了一半左右。我也算是一个比较注意个人形象的人，所以对香水，还是比较感兴趣的。</p>
<p>可能是由于区域的问题，吉隆坡的男士香水太刺鼻了，不管是channel还是其他大牌，前调的味道都大同小异。实在是接受不了。还是默默的使用我的止汗香氛好了。</p>
<p>转机的时间虽然比较长，但是伴随着在机场来回闲逛，很快就到了转机的时间，另附几张在吉隆坡机场的照片。</p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1216-768x1024.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1210-1024x768.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_120e-1024x768.jpg" alt="" /></p>
<h3>抵达目的地</h3>
<p>吉隆坡距离普吉岛很近，飞机也就将近飞了一个小时，就抵达了普吉岛的机场。</p>
<p><img src="/uploads/2019/09/WechatIMG56-1024x768.jpeg" alt="" /></p>
<p>刚下飞机的时候，天气下起了蒙蒙雨，不过小雨也无法抵挡我们的热情。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date><![CDATA[2019-09-11 11:56:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-11 03:56:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[phuket-travel]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<category domain="post_tag" nicename="%e5%87%ba%e5%9b%bd%e6%b8%b8"><![CDATA[出国游]]></category>
		<category domain="post_tag" nicename="%e5%9b%a2%e5%bb%ba"><![CDATA[团建]]></category>
		<category domain="post_tag" nicename="%e6%99%ae%e5%90%89%e5%b2%9b"><![CDATA[普吉岛]]></category>
		<category domain="post_tag" nicename="%e6%b3%b0%e5%9b%bd"><![CDATA[泰国]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%87%ba%e6%b8%b8%e6%99%ae%e5%90%89%e5%b2%9b-%e8%ae%b0%e7%ac%ac%e4%b8%80%e6%ac%a1%e5%87%ba%e5%9b%bd%e7%bb%8f%e5%8e%86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.152.56";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>普吉岛之行--游玩篇</title>
		<link>https://feilong.tech/2019/09/15/playing/</link>
		<pubDate>Sun, 15 Sep 2019 12:15:41 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=556</guid>
		<description></description>
		<content:encoded><![CDATA[<p>来到普吉岛的目的只有一个，那就是耍！所以这篇主要是记述下我们这次普吉岛之行的游玩历程。</p>
<h3>闲逛</h3>
<p>落地之后，先坐大巴去了酒店，酒店地理位置挺不错的，距离海边只要步行十多分钟。</p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_121b-1024x576.jpg" alt="" /></p>
<p>放置好行李之后，我们就开始出门觅食，在美团上面找了一家泰国菜，步行距离大概一公里左右。</p>
<p><img src="/uploads/2019/09/IMG_5913-768x1024.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_5919-1024x768.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_5912-1024x768.jpg" alt="" /></p>
<p>泰国的菜基本上量很小，所以很多菜我们都点了双份。</p>
<p>吃完饭后，第一件事肯定就是先到海边逛逛。</p>
<p><img src="/uploads/2019/09/IMG_5922-1024x768.jpg" alt="" /></p>
<p>晚饭后的海边已经没什么人了，吹着海风，看着潮来潮往，自在急了，真希望时间永远停留在这个时刻，逃离北上广。</p>
<h3>夜宵</h3>
<p>在海边吹完海风，就回到了酒店，距离晚睡的时间还早的很，所以这个时候不吃点夜宵，感觉都对不起这次出行。</p>
<p>来到泰国，肯定是榴莲和山竹，榴莲的价格其实和国内的价格差不多，只是山竹的价格会相对便宜一点，也就几块钱一斤。</p>
<h3>出海</h3>
<p>吃过早餐之后，我们先集体去拜佛，毕竟泰国属于佛教盛行的国家，据说整个泰国99%以上都是信奉佛教的。</p>
<p>拜佛之后，我们就前往了普吉岛海边，hiahia，终于来到了心心念的海边了。</p>
<p>我们坐着快艇，大概花了十多分钟来到了目的地。</p>
<p><img src="/uploads/2019/09/IMG_5954-768x1024.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_5953-768x1024.jpg" alt="" /></p>
<p>海边的水很清澈，普吉岛真的是个适合生活的地方。</p>
<p>岛上也有很多娱乐项目，自己报名了《海底漫步》，价格大概1000泰铢左右，头上顶着笨重的氧气罩，下到海底，观察小鱼在身边穿梭。</p>
<h3>泼水节</h3>
<p>在海边玩完之后，就已经是中午饭的时间了，吃完了中午饭时间，我们就触发了下个目的地——泼水节。</p>
<p>我们坐着大巴，来到泼水节的活动场地。导游给我们讲了一些泼水节的由来，然后就是开场仪式。</p>
<p>我们几个人每个人租了一个水枪，用来一会泼水节的时候用。</p>
<p><img src="/uploads/2019/09/IMG_5958-1024x768.jpg" alt="" /></p>
<p>随着开始的号角的吹响，大家开始疯狂战斗，战况非常惨烈，甚至还没等睁开眼，下一盆水就已经招呼上了。</p>
<p><img src="/uploads/2019/09/IMG_5956-768x1024.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_5961-1024x768.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_5960-768x1024.jpg" alt="" /></p>
<h3>骑大象</h3>
<p>泼水节之后，换上了干净的衣服，就开始了下个目的地——骑大象。</p>
<p>基本上每个大象坐两个人，每个人会给20泰铢的消费</p>
<p><img src="/uploads/2019/09/IMG_8407-768x1024.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_6566-768x1024.jpg" alt="" /></p>
<h3>晚餐</h3>
<p>骑完大象，我们统一坐车前往饭店，开始这一趟出行，最丰盛的晚宴。来到泰国，肯定要吃地道的菠萝饭，海鲜自然是不能少的。</p>
<p><img src="/uploads/2019/09/IMG_2070-768x1024.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_5506-768x1024.jpg" alt="" /></p>
<p>这次来泰国也算是吃个够了。</p>
<h3>普吉的夜</h3>
<p>吃完了丰盛的海鲜大咖，我们陆陆续续乘着车，回到了酒店。回到酒店，距离晚上睡觉还有很长的时间，何不出去逛逛，感受一下泰国的夜晚。</p>
<p>普吉岛的夜晚算是比较清净，和之前了解到的泰国不太一样。之前在网上，看到泰国晚上回很乱，街上会有很多的“小姐姐”拉着你“谈心”。</p>
<p><img src="/uploads/2019/09/IMG_4010-1024x768.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_7536-1024x768.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/IMG_8864-1024x768.jpg" alt="" /></p>
<p>普吉的晚上，总给人一种轻松愉悦的心情，虽然只是在这里待几天，但是我真的不想回去了。在这里，和北京相比，空气中都弥漫着放松...</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>556</wp:post_id>
		<wp:post_date><![CDATA[2019-09-15 20:15:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-15 12:15:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[playing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<category domain="post_tag" nicename="%e5%87%ba%e5%9b%bd%e6%b8%b8"><![CDATA[出国游]]></category>
		<category domain="post_tag" nicename="%e5%9b%a2%e5%bb%ba"><![CDATA[团建]]></category>
		<category domain="post_tag" nicename="%e6%99%ae%e5%90%89%e5%b2%9b"><![CDATA[普吉岛]]></category>
		<category domain="post_tag" nicename="%e6%b3%b0%e5%9b%bd"><![CDATA[泰国]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e6%99%ae%e5%90%89%e5%b2%9b%e6%89%a7%e8%a1%8c-%e6%b8%b8%e7%8e%a9%e7%af%87]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.123";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>普吉岛之行--返程篇</title>
		<link>https://feilong.tech/2019/09/20/return/</link>
		<pubDate>Fri, 20 Sep 2019 08:51:39 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=576</guid>
		<description></description>
		<content:encoded><![CDATA[<p>天下没有不散的宴席，同样也没有无终止的假期。</p>
<p>几天的时间飞速而过，我们赶着早上7点的日出，出发去机场，开始返京。</p>
<h3>普吉机场</h3>
<p>和出发一样，我们依旧是需要在吉隆坡转机。我们匆匆来到普吉到的机场，排了很长时间的队伍，办理了行李的托运，然后就进入机场，进行候机。</p>
<p>由于忍受不了饿肚子，就在机场买了一份汉堡王的套餐。妈耶，估计是我这辈子吃过最贵的汉堡王套餐了。一顿花了我150人民币。我在国内吃7层皇堡才80块钱。&#x1f615;&#x1f615;&#x1f615;</p>
<p>我们在机场，拿到之前在泰国免税店买的东西。</p>
<p>在普吉岛的机场，还发生了一个小插曲。</p>
<p>我帮朋友买了几支唇釉，可是由于买了汉堡，所以在吃汉堡的时候，弄丢了一只唇釉。在快要登机的时候，我决定去柜台问问工作人员，结果一个工作人员问了我的名字，把捡到的唇釉还给我了。要不然200块钱就飞了。&#x1f602;&#x1f602;&#x1f602;</p>
<p><img src="/uploads/2019/09/IMG_6229.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1260-1024x768.jpg" alt="" /></p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1255-1024x768.jpg" alt="" /></p>
<p>伴随着前往吉隆坡的飞机的起飞，也标志着这次出行开始结束。</p>
<h3>吉隆坡机场</h3>
<p>到了吉隆坡的机场，依旧是和之前一样，大家说说笑笑，一起逛街，但是内心对这次旅行有点意犹未尽。</p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1262-1024x768.jpg" alt="" /></p>
<h3>回京</h3>
<p>从吉隆坡到北京的飞行时间最长，从下午的五点半，到晚上的一点多，大家到了飞机上，匆匆吃过了飞机餐，就拖着疲惫的身体，进入睡眠。</p>
<p>飞机上，有不少的大爷大妈。不过大爷大妈的嗓门，一点都不显老。&#x1f602;嗷嗷叫唤的没完。搞得我的两个同事，不得不更换了飞机的座位。</p>
<p><img src="/uploads/2019/09/UNADJUSTEDNONRAW_thumb_1266-768x1024.jpg" alt="" /></p>
<p>大概夜里12点多，我们开始在北京国际机场T3航班楼降落，下飞机之后，我们来到行李的传送带，等我们取完行李，已经是晚上一点多了。</p>
<p>我们出了机场，各自也都打车回家了。</p>
<h3>总结</h3>
<p>如果一定要说一个比较遗憾的事情，那就是没有去看 泰国秀吧。我这人有时候比较纠结，但是也就是纠结，容易错失一些机会。回来的路上，同事一直绘声绘色的描述秀场的场景，内心多少还是有些期待。但是最终也没有看成。</p>
<p>不过这次旅行还是很愉快的，泰国的海很蓝，泰国的东西很好吃，泰国的阳光也很棒。如果有机会，期待再一次去泰国！</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date><![CDATA[2019-09-20 16:51:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-20 08:51:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[return]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<category domain="post_tag" nicename="%e5%87%ba%e5%9b%bd%e6%b8%b8"><![CDATA[出国游]]></category>
		<category domain="post_tag" nicename="%e5%9b%a2%e5%bb%ba"><![CDATA[团建]]></category>
		<category domain="post_tag" nicename="%e6%99%ae%e5%90%89%e5%b2%9b"><![CDATA[普吉岛]]></category>
		<category domain="post_tag" nicename="%e6%b3%b0%e5%9b%bd"><![CDATA[泰国]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e6%99%ae%e5%90%89%e5%b2%9b%e4%b9%8b%e8%a1%8c-%e8%bf%94%e7%a8%8b%e7%af%87]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[42]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.152";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[辣辣]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bznsummer@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.255.136.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-20 17:03:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-20 09:03:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[催更]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1568970192.773823;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1568974267.0586281;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"Feilong";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[Feilong]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[569914877@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.255.136.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-24 15:25:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-24 07:25:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[谢谢辣辣关注]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>22</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569309923.768471;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"Feilong";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>阿里大牛：你必须具备的“结构化思维”</title>
		<link>https://feilong.tech/2019/09/26/structured-thinking/</link>
		<pubDate>Thu, 26 Sep 2019 13:53:49 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=595</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
<p>在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。</p>
</blockquote>
<p>这种思维混乱是典型的缺少结构化思维的表现。结构化思维非常重要，不仅仅体现在表达上，也体现在在我们分析问题的过程中。具备结构化思维，才能将问题分析地更全面、更深刻。</p>
<h3>什么是结构化思维？</h3>
<p>那么到底是什么是结构化思维呢？简单来说，结构化思维的定义就是：<font color="red">逻辑+套路</font>。</p>
<h4>表达要有逻辑</h4>
<p>所谓逻辑是指我们的结构之间必须是有逻辑关系的。例如，你说话的时候用“第一、第二、第三”这个逻辑顺序是合理的，但是，用“第一，第二，第四”就会显得很奇怪。</p>
<p>当然，即使你用了”一、二、三”，也不一定就意味着你的内容有逻辑关系。</p>
<p>想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系：</p>
<ul>
<li><strong>演绎（因果）顺序：</strong> “大前提、小前提、结论”的演绎推理方式就是演绎顺序。比如，经典三段论：所有人都要死，苏格拉底是人，苏格拉底要死。</li>
<li><strong>时间（步骤）顺序：</strong> “第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。</li>
<li><strong>空间（结构）顺序：</strong> “前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零（将整体分解为部分）等都是空间顺序。</li>
<li><strong>程度（重要性）顺序：</strong> 比如“最重要、次重要、不重要”等。</li>
</ul>
<p>实际上，所有的逻辑关系都在这四种顺序之内。只要我们的思想和表达在这四种逻辑顺序之内，就是有逻辑的，否则就会显得没有逻辑性。</p>
<h3>做事要有套路</h3>
<p>套路是指我们解决问题的方法论，这个也非常重要。比如，5W2H 分析法就是一个非常好的，可以帮助我们分析问题的一个”套路”。</p>
<p>试想一下，面对任何一个问题，你都能从 <strong> Why、Who、When、Where、What、How</strong> 和 <strong>How much</strong>（如下图所示），七个方面去思考。</p>
<p>是不是比不知道这个方法论的人，用点状的思考，5W2H 分析法就全面得多。</p>
<p><img src="/uploads/2019/09/06691048e53ebb9c969c2a49e73dde5d.jpg" alt="" /></p>
<p>例如，我们在对问题域进行分析和领域知识提炼的时候，就可以用上 5W2H。</p>
<p>5W2H 模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。</p>
<p>这就好比两位侃侃而谈的交谈者，因为有了确定的主题与话题边界，一场本来是漫无目的野鹤闲云似的闲聊就变成了一次深度交流的专题高端对话。</p>
<p><img src="/uploads/2019/09/2ea1c795428ce9ffefb757679d3643ca-1024x839.jpg" alt="" /></p>
<p>逻辑是一种能力，而套路是方法论，是经验。逻辑是道的东西，而方法论是术的东西。二者都很重要，只有熟练的掌握二者我们才能更好的进行结构化思考。</p>
<h3>如何进行结构化思考？</h3>
<p>逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考呢？这也是有方法论的，总的来说是有两个步骤，<font color="green">首先是“建立中心”，然后再进行“分解”</font>。</p>
<h4>建立中心</h4>
<p><strong>建立中心也就是要定义清楚要解决的问题，要明确目标。</strong>这是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚 Why，然后再进行 How。</p>
<p>建立中心有两种方式</p>
<ul>
<li><strong> 自上而下：</strong>  <font color="green"> <em>适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可</em>。</font></li>
<li><strong> 自下而上： </strong>  <font color="green"> <em>对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。</em></font></li>
</ul>
<p>建立中心通常不会是一次成型的，随着对问题理解的变化，对中心的抽象也会进行相应的调整。</p>
<p>不同的抽象层次其面对的问题宽度是不一样的。具体要用哪个层次的抽象作为“中心”，要视具体情况而定。</p>
<p>比如面对“系统 Bug 多”的问题，向上抽象是“提升代码质量”，向下抽象是“加强测试”，都可以作为中心，选择哪个为中心取决于你当前要解决的问题是什么。</p>
<p><img src="/uploads/2019/09/6775a06332398a970ead38fbf686ed1c.jpg" alt="" /></p>
<h4>结构化分解</h4>
<p>确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。</p>
<p>分解的策略就是我们上文提到的四种逻辑顺序，即演绎顺序、时间顺序、空间顺序和程度顺序。</p>
<p>在做空间分解的时候，要注意满足 MECE（Mutually Exclusive Collectively Exhaustive，相互独立，完全穷尽）原则。</p>
<p>比如我们要对衣服进行分类，如果按照季节和风格进行分类，就会出现互相重叠，并且不能穷尽的情况，也就不满足 MECE。这种分类是逻辑混乱的。</p>
<p><img src="/uploads/2019/09/56d42db36fa7bfef3170fa9a35c94942.jpg" alt="" /></p>
<p>我们可以按季节分：春秋装，冬装，夏装。除了这三类之外，没有其他季节了，这个就是「不遗漏」。</p>
<p><img src="/uploads/2019/09/c3404ee1406c86e1a62ec34ca02c6c21.jpg" alt="" /></p>
<h3>结构化思维应用</h3>
<h4>如何落地新团队</h4>
<p>想象这样一个场景，你刚刚入职一家新公司，或者转岗到一个新团队，作为一个技术人，你将如何落地开展你的工作呢？</p>
<p>这里，我们就能用上结构化思维来帮我们理清思路，从而有条不紊的开展工作了。</p>
<p>我们要知道对一个企业来说，核心要素无外乎就是业务、技术和人，也就是说这三个要素是我们要建立的中心。</p>
<p>基于这个中心，我们可以进行进一步拆解，形成子结构。然后对子结构再进行分析找到应对策略。</p>
<p>这样一步步递进，我们就已经在用结构化思维解决如何落地新团队的问题了。</p>
<p><img src="/uploads/2019/09/70f76f02c0b1db1184a24587759ebd55-1024x486.jpg" alt="" /></p>
<p>①熟悉业务</p>
<p>了解产品：任何一个团队都有自己要负责的产品，申请一个测试账号去用一下产品，是熟悉产品比较好的方式。</p>
<p>了解流程：任何业务都有自己的业务流程，而业务流里面最核心的是信息流。我们可以通过人员采访，了解关键节点的信息输入和信息输出；可以画一些泳道活动图，理清楚系统的主要角色，以及他们之间的交互关系。</p>
<p>客户走访：通过走访客户，我们可以更加获得业务的第一手资料，更加贴近业务和客户诉求。</p>
<p>②熟悉技术</p>
<p>了解系统架构：可以让团队的技术人员介绍下他们当初系统设计和架构的思路。</p>
<p>了解领域模型：查看关键的核心表结构和系统 API，这样可以快速了解系统的领域模型。</p>
<p>了解代码结构：下载系统工程，熟悉整个工程结构和模块职责。以一个重要的流程为入手点，阅读代码，看清楚核心的执行逻辑。做一个小需求，掌握相关的流程和权限。</p>
<p>③熟悉人</p>
<p>了解组织结构：查看公司的组织树，知道公司大概是如何运作的，以及哪些是KP（Key Person，关键人）。</p>
<p>比如，一个典型的电商公司会包括产品部、运营部、销售部、技术部、人力资源部、财务部、法务部等。</p>
<p>了解人员角色：了解公司都有哪些岗位，以及各岗位的职责范围。</p>
<p>拜山头：找到和自己工作息息相关的岗位人员，比如产品和运营。积极和他们沟通，向他们请教业务问题，多多交流。</p>
<p>这样一方面可以建立更好的人际关系，另一方面也可以更快地熟悉业务。</p>
<h4>打造极客文化</h4>
<p>我最近刚刚转岗到新部门，新部门的老板抛给我一个命题：如何帮助技术团队打造极客文化？</p>
<p>这个问题的中心很明确，接下来，看看我是如何使用结构化思维来解这个问题的。</p>
<p>首先我们从空间顺序进行分解，也就是打造极客文化，我们可以去做哪些事情。</p>
<p><img src="/uploads/2019/09/9620f5c9626eb14d0f74bfe4f8cd3dfa-1024x223.jpg" alt="" /></p>
<p>确定完要做的事情，我们还可以按照时间顺序对如何落地这些事情进行分解。</p>
<p><img src="/uploads/2019/09/b57a58a76b9064183907a60d8e5cc4c2-1024x113.jpg" alt="" /></p>
<p>这样把按照这两个维度进行结构化拆解的方案给到老板，老板就会很清晰地知道你的规划和落地策略了。</p>
<h4>如何做晋升述职</h4>
<p>在阿里巴巴已经做了好几年的晋升评委，发现很多同学都缺乏结构化思维，冗长的 PPT 里，却不能把价值说清楚，不能把推导过程说清楚。实际上，我们需要有一些方法论来指导我们进行关键述职。</p>
<p>接下来，我主要说一下述职中存在的两个典型问题：“罗列事情”和“价值的背后”。</p>
<p>①罗列事情</p>
<p>对自己做过的事情进行简单罗列，也许你的确做了不少事情。但是不能体现你对问题思考的深度和做这个事情带来的价值。</p>
<p>这样的述职很难打动评委，更结构化的表达应该是：“提出问题，定义问题，分析问题，解决问题，最后是展望未来”。</p>
<p>这是一个经典的表述问题的结构，也是麦肯锡推荐的问题解决的框架。</p>
<p><img src="/uploads/2019/09/c5c697abb46b77ada71f04d57b73e550.jpg" alt="" /></p>
<p>类似的框架还有 Zoom in/Zoom out。 我们说事情时，应该像电影镜头一样，先从远拉近，再由近拉远。</p>
<p>Zoom in 是先从宏观背景开始，首先让大家知道你的事情发生的背景，为什么这事重要？然后讲到具体细节，怎么做成的？解决了什么问题？背后的思考是什么？</p>
<p>最后 Zoom out，再从细节调回到整体，结果是什么，带来的客户价值是什么，你对未来的思考是什么。</p>
<p>②价值的背后</p>
<p>把价值说清楚的确很重要，正所谓：路走对了，就不怕远。如果你连价值都不明确，后面做的再多也是白搭。但是，仅仅阐述价值也是不够的，会让人觉得你有邀功之嫌。</p>
<p>比如你说：“我主导研发的风控系统把公司的坏账率从 5% 降低到 2%”。这样的表述是不够的，你还需要把价值背后的过程和思考说清楚。</p>
<p>对于这个结果，评委可能会问：
之前为什么那么高？
为什么你的方法可以降低？是如何归因的？
具体解决了什么问题？
是否可以总结出一套办法，以后别人也能用这个办法解决这些问题？</p>
<p>如果你在评委提问之前，就能对这些问题进行深入思考和适当呈现。那么你就是既有结果又有过程了。</p>
<p>通过这些案例，我们可以看到具备结构化思维，可以帮助我们快速的理清处理问题的思路，提升工作效率。</p>
<p>经常锻炼结构化思维，可以极大的提升我们职场竞争力，让工作有条不紊，事半功倍。</p>
<h3>出处</h3>
<p>转载自微信公众号：从码农到工匠（ID：craftsman_frank）</p>
<p>本文连接：<a href="http://feilong.tech/2019/09/26/structured-thinking/">http://feilong.tech/2019/09/26/structured-thinking/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>595</wp:post_id>
		<wp:post_date><![CDATA[2019-09-26 21:53:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-26 13:53:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[structured-thinking]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e7%a8%8b%e5%ba%8f%e5%91%98"><![CDATA[程序员]]></category>
		<category domain="category" nicename="think"><![CDATA[自我反思]]></category>
		<category domain="post_tag" nicename="%e8%87%aa%e6%88%91%e8%a1%a8%e8%be%be"><![CDATA[自我表达]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e9%98%bf%e9%87%8c%e5%a4%a7%e7%89%9b%ef%bc%9a%e4%bd%a0%e5%bf%85%e9%a1%bb%e5%85%b7%e5%a4%87%e7%9a%84%e7%bb%93%e6%9e%84%e5%8c%96%e6%80%9d%e7%bb%b4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[599]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>贪心算法</title>
		<link>https://feilong.tech/2019/09/30/greedy/</link>
		<pubDate>Mon, 30 Sep 2019 06:20:34 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=634</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>描述</h3>
<p>所谓的贪心算法，是在对问题求解的时候，总是做出在当前看来是最好的选择。也就是说，<font color="red">不从整体最优上进行考虑，所做的仅仅是在某种意义上的局部最优解。</font></p>
<p>贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。贪心算法不是对所有问题都能得到最优解，选择的贪心策略必须具备无后效性，即其他过程，不会影响以前的状态，完全是局部的。</p>
<h3>基本思路</h3>
<ul>
<li>建立数学模型来描述问题</li>
<li>把求解的问题分成若干个子问题</li>
<li>对每一个子问题求解，得到子问题的局部最优解</li>
<li>把子问题的局部最优解合成原来界问题的一个解</li>
</ul>
<h3>实例</h3>
<h4>两地调度（LeetCode: 1029）</h4>
<p>公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。</p>
<p>返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达</p>
<p>示例：</p>
<p>输入：[[10,20],[30,200],[400,50],[30,20]]
输出：110
解释：
第一个人去 A 市，费用为 10。
第二个人去 A 市，费用为 30。
第三个人去 B 市，费用为 50。
第四个人去 B 市，费用为 20。</p>
<p>最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。</p>
<h4>算法思路</h4>
<p>假设，第一个人去A的成本是a1,去B的成本是b1,那么他去A或者去B的成本差距就是a1-b1，这个成本的差距可证可负，如果成本差距是正数，那么说明这个人去A的价格要比去B的价格贵。</p>
<p>同理，第二个人去A的成本是a2，去B的成本B2，那么他去A和B的成本差距就是a2-b2</p>
<p>...</p>
<p><strong><font color="red">那么所有人去A和B的成本差的总和就是(a1-b1)+(a2-b2)....+(a2n-b2n)，根据题目的要求，如果安排的成本是最小，那么把成本差从小到大进行排序，那么直接让前n个人去A，另外n个人去B，就能得到满足题干的解了。</font></strong></p>
<table>
<thead>
<tr>
<th>员工</th>
<th>A</th>
<th>B</th>
<th>成本差</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
<td>b1</td>
<td>a1-b1</td>
</tr>
<tr>
<td>2</td>
<td>a2</td>
<td>b2</td>
<td>a2-b2</td>
</tr>
<tr>
<td>3</td>
<td>a3</td>
<td>b3</td>
<td>a3-b3</td>
</tr>
<tr>
<td>4</td>
<td>a4</td>
<td>b4</td>
<td>a4-b4</td>
</tr>
<tr>
<td>5</td>
<td>a5</td>
<td>b5</td>
<td>a5-b5</td>
</tr>
<tr>
<td>2n</td>
<td>a2n</td>
<td>b2n</td>
<td>a2n-b2n</td>
</tr>
</tbody>
</table>
<p>将题干引入模型：</p>
<table>
<thead>
<tr>
<th>员工</th>
<th>A</th>
<th>B</th>
<th>成本差</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
<td>20</td>
<td>-10</td>
</tr>
<tr>
<td>2</td>
<td>30</td>
<td>200</td>
<td>-170</td>
</tr>
<tr>
<td>3</td>
<td>400</td>
<td>50</td>
<td>350</td>
</tr>
<tr>
<td>4</td>
<td>30</td>
<td>20</td>
<td>10</td>
</tr>
</tbody>
</table>
<p>成本差分别是
-10，-170，350，10
排序之后的结果：
-170，-10，10，350
那么直接让用户2和用户1去A，让用户4和用户3去B。
最低费用是 30+10+50+20=110 </p>
<h4>算法实现</h4>
<pre><code class="language-php">class Solution {

    /**
     * @param Integer[][] $costs
     * @return Integer
     */
    function twoCitySchedCost($costs) {
        $additional = [];
        $diff = [];
        foreach ($costs as &amp;$cost) {
            $cost[&#039;diff&#039;] = $cost[0]-$cost[1];
            $diff[] = $cost[0]-$cost[1];
            unset ($cost);
        }
        array_multisort($diff, SORT_ASC,$costs );
        $total = 0;
        $n = count($costs) / 2;
        for ($i=0; $i&lt; $n; $i++) {
            $total += $costs[$i][0] + $costs[$i+$n][1];
        }
        return $total;
    }
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>634</wp:post_id>
		<wp:post_date><![CDATA[2019-09-30 14:20:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-30 06:20:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[greedy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="greedy-algorithm"><![CDATA[贪心算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[68]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[637]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:12:"54.36.148.93";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux登录提示&quot;-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作&quot;</title>
		<link>https://feilong.tech/2019/09/30/linux-ulimit-warning/</link>
		<pubDate>Mon, 30 Sep 2019 08:04:31 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=636</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>背景</h3>
<p>自己在每次登录服务器的时候，都会出现 <strong>-bash: ulimit: open files: 无法修改 limit 值: 不允许的操作</strong> 的提示信息，根据猜测，应该是登录的时候，执行了什么特殊的命令。通过百度查询了下，应该是登录的时候，执行了 ulimit 的命令。</p>
<h3>原因猜测</h3>
<p>一般登录的时候，都会调用 .bashrc 或者 .bash_profile做一些初始化的操作。但是我找到对应的home下面的文件，并！没有！所以猜测，应该调用了全局的profile。</p>
<pre><code class="language-bash">$ cat /etc/profile
....
ulimit -SHn 65535</code></pre>
<p>果然最下面有一个ulimit的执行命令，把命令注释掉，重新登录，问题解决了</p>
<h3>关于ulimit</h3>
<p>ulimit的命令主要是用来控制shell程序的资源</p>
<pre><code class="language-bash">$ help ulimit
ulimit: ulimit [-SHacdefilmnpqrstuvx] [限制]
    修改 shell 资源限制。

    在允许此类控制的系统上，提供对于 shell 及其创建的进程所可用的
    资源的控制。

    选项：
      -S    使用 `soft&#039;（软）资源限制
      -H    使用 `hard&#039;（硬）资源限制
      -a    所有当前限制都被报告
      -b    套接字缓存尺寸
      -c    创建的核文件的最大尺寸
      -d    一个进程的数据区的最大尺寸
      -e    最高的调度优先级（`nice&#039;）
      -f    有 shell 及其子进程可以写的最大文件尺寸
      -i    最多的可以挂起的信号数
      -l    一个进程可以锁定的最大内存尺寸
      -m    最大的内存进驻尺寸
      -n    最多的打开的文件描述符个数
      -p    管道缓冲区尺寸
      -q    POSIX 信息队列的最大字节数
      -r    实时调度的最大优先级
      -s    最大栈尺寸
      -t    最大的CPU时间，以秒为单位
      -u    最大用户进程数
      -v    虚拟内存尺寸
      -x    最大的锁数量

    如果提供了 LIMIT 变量，则它为指定资源的新的值；特别的 LIMIT 值为
    `soft&#039;、`hard&#039;和`unlimited&#039;，分别表示当前的软限制，硬限制和无限制。
    否则打印指定资源的当前限制值，不带选项则假定为 -f

    取值都是1024字节为单位，除了 -t 以秒为单位，-p 以512字节为单位，
    -u 以无范围的进程数量。

    退出状态：
    返回成功，除非使用了无效的选项或者错误发生。</code></pre>
<p>通过ulimit，我们可以限制某个用户的使用的资源个数，比如我们限制用户打开文件的个数为2</p>
<pre><code class="language-bash">$ ulimit -n 2
$ touch a.php
$ touch b.php
$ touch b.php</code></pre>
<p>打开3个控制台，分别使用vim命令打开三个文件，当打开打开三个文件的时候，就出现了</p>
<pre><code class="language-bash">$ vim c-bash: /dev/null: Too many open files
-bash: 重定向错误: 无法复制文件描述符: Invalid argument
-bash: 2: Invalid argument
-bash: /dev/null: Too many open files
-bash: 重定向错误: 无法复制文件描述符: Invalid argument
-bash: 2: Invalid argument</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>636</wp:post_id>
		<wp:post_date><![CDATA[2019-09-30 16:04:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-30 08:04:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-ulimit-warning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cli"><![CDATA[cli]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="ulimit"><![CDATA[ulimit]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[644]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[41]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"66.249.71.146";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>程序员应该如何减肥</title>
		<link>https://feilong.tech/2019/10/08/code-to-lose-weight/</link>
		<pubDate>Tue, 08 Oct 2019 14:11:08 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=647</guid>
		<description></description>
		<content:encoded><![CDATA[<p>从开始减肥到现在，已经是2-3个年头了，在大学的时候，基本上每天除了睡就是吃，再加上自己时不时晚上出去通宵，所以体重从大一的160斤，毕业后接近200斤。毕业之后，由于没有注意体重的问题，没过多久就超过了200斤。</p>
<p><img src="/uploads/2019/10/IMG_0825-225x300.jpg" alt="" /></p>
<p><img src="/uploads/2019/10/IMG_1103.png" alt="" /></p>
<p>这两张是大一入学和大学刚毕业的对比照片。不得不说，大学真的算是“养猪场”了。</p>
<h3>减肥的原因</h3>
<p>我最开始是在海淀工作，后来公司搬到了昌平。上班的时候会路过一个天桥，但是有一次我发现，上天桥的时候，自己呼哧呼哧的喘着粗气，我才意识到：我应该开始减肥了，再这样下去我就不行了。</p>
<h3>减肥的过程</h3>
<p>当时刚毕业到北京，手里没什么钱，四个同学挤在了一个10平米的公寓，月租1300块，平均每人每个月300多。每天吃饭都成问题，更没有闲钱办健身卡，所以就买了一个瑜伽垫，在公寓里面使用keep上“减脂课”。</p>
<p><img src="/uploads/2019/10/WechatIMG5-139x300.jpeg" alt="" /></p>
<p>当时练得最多的就是“hiit”的减脂课了。</p>
<p>在北京工作一段时间之后，生活稍微宽裕了一些，自己就在咸鱼买了人生中的第一张健身卡，花了800块钱，开始了自己的健身房锻炼的生涯。</p>
<h3>减肥的结果</h3>
<p>第一次到了健身房，和大家一样，基本上就是跑步，不会使用器械。不过好在keep上面有一些训练的动作，里面会交一些器械使用的注意事项。慢慢的，也开始熟能生巧。也越来越有感觉。</p>
<p>从减肥，到现在已经2年多了，现在体重基本上维持在160斤左右，虽然没有腹肌，但是也基本算是“穿衣显瘦，脱衣有肉”。</p>
<h3>减肥的误区</h3>
<p>减肥的道理其实大家都懂“管住嘴，迈开腿”，也就是说，消耗 &gt; 摄入。但是很多人依然会减肥失败，原因是什么？</p>
<h4>大家都太着急了</h4>
<p>其实我们长胖，并不是几天就一下子变胖的，我们在开始减肥的时候，发现前期没有什么明显的变化，内心就开始动摇了，在加上我们身处一个快节奏的生活，身边再有几个“看热闹不嫌事大”的损友，所以很容易就放弃减肥了。</p>
<h4>不吃主食</h4>
<p>糖分在为我们大脑的供能有很重要的作用，当你不吃主食，大脑的糖分不足，就容易出现头晕、易怒。下午就很容易出现犯困。</p>
<p>晚上不吃主食，到了半夜睡眠的时候，身体的缺少能量，会开始分解肝糖原进行供能，肝糖原不足之后，就会分解肌糖原，进而也会影响肌肉的合成。所以晚上，我们应该适当少吃点主食。或者使用土豆作为代餐主食。因为在我们身体中，<font color="red">胰岛素是维持血糖平衡的重要物质，如果血糖一旦升高，那么胰岛素就会把多余的血糖合成脂肪，这要是为什么奶茶等饮料容易长胖的重要原因！</font></p>
<h4>肌肉重不重要</h4>
<p>很多人会说，“我不想长肌肉，我只想瘦一点”。</p>
<p>我们的身体，在活动的时候，是由肌肉带动骨骼，身体的能量消耗，在于肌肉和骨骼的牵引，所以一般来说，肌肉量相对比较大的，消耗的能量也相对较大。这也就是我们常说的基础代谢。所以肌肉在减值过程中具有很重要的作用。</p>
<p>其实肌肉的生长，是一个复杂的过程。</p>
<p>肌肉的基本单位是肌肉纤维。肌肉想要得到生长，需要先把肌肉纤维产生破损，然后再通过氨基酸，将肌肉纤维进行修复，所以没有足够的蛋白质和氨基酸，肌肉增长会是一个比较慢的过程。除此以外，还需要足够的休息，所以 蛋白质+训练+休息 三者结合肌肉才会得到足够的生长。</p>
<h3>程序员怎么减肥？</h3>
<h4>调整饮食</h4>
<p><img src="/uploads/2019/10/d15ea020bfcc444181bfd16a88f53909-300x184.jpeg" alt="" /></p>
<p>首先，我们应该调整一下自己的饮食结构。上面说了，胰岛素是维持血糖的重要物质所以我们应该在日常生活中，调整饮食结构，将主食的比例降低一点，将蛋白质的比例稍微调高一点。这样可以让我们的血糖变化小一点，减少过多的糖分合成脂肪的可能性。</p>
<h4>增加无氧训练</h4>
<p><img src="/uploads/2019/10/8f3d71c9c5b54eaab2527b13b3531100-300x193.jpeg" alt="" /></p>
<p>肌肉是维持基础代谢的一个重要的因素。除了我们增加蛋白质的摄入比例以外，我们也应该做一些无氧训练。比如健身房做一些器械的训练，但是我们减肥的目的是为了健康，不是为了举重。</p>
<p>在健身房，我<font color="red">不建议请私教。</font> 因为现在很多商业健身房都是盈利为目的，买课之前和买课之后态度差很多，私教素质也是参差不齐。所以如果请私教，还是需要擦亮眼睛。可以和健身房练得不错的请教一下，其实健身爱好者都是非常谦逊的。</p>
<hr />
<p>以上就是我对程序员减肥的相关感触和理解，我自己个人也是这么走过来的。减肥就想红军长征一样，并不是一蹴而就，而是需要时间的一点点积累，一点点看到变化。加油！</p>
<p>本文连接： <a href="http://feilong.tech/2019/10/08/code-to-lose-weight">http://feilong.tech/2019/10/08/code-to-lose-weight</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>647</wp:post_id>
		<wp:post_date><![CDATA[2019-10-08 22:11:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-08 14:11:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[code-to-lose-weight]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<category domain="post_tag" nicename="%e5%81%a5%e5%ba%b7"><![CDATA[健康]]></category>
		<category domain="post_tag" nicename="%e5%81%a5%e8%ba%ab"><![CDATA[健身]]></category>
		<category domain="post_tag" nicename="%e5%87%8f%e8%82%a5"><![CDATA[减肥]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[654]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.139.118";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[Yifans_Z]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[168@yifans.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://zyf.im</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[207.246.108.219]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-16 10:56:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-16 02:56:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[龙哥nb！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1584327381.8550661;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1603626749.578928;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"Feilong";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>nohup后面2&gt;&amp;1的理解</title>
		<link>https://feilong.tech/2019/11/03/nohup/</link>
		<pubDate>Sun, 03 Nov 2019 10:39:50 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=701</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我们在后台运行命令的时候，除了会借助一些后台进程守护工具，也会用到Linux的nohup，比如：<code>nohup command &gt; /dev/null 2&gt;&amp;1 &amp;</code>。对于命令的含义，其实大家都知道，无外乎就是<code>不输出任何的错误信息</code>。但是对于技术，我更希望自己能够知其然而知其所以然</p>
<h3>1和2？</h3>
<p>首先，先说下数字1和2的含义：
<code>Linux shell中有三种输入输出，分别为标准输入，标准输出，错误输出，分别对应0，1，2</code></p>
<h3>分解命令</h3>
<p>其实命令<code>nohup command &gt; /dev/null 2&gt;&amp;1 &amp;</code> 应该进行拆分为多个部分</p>
<ul>
<li>nohup</li>
<li>command &gt; /dev/null 2&gt;&amp;1</li>
<li>&amp;</li>
</ul>
<p>第一部分肯定不用说，就是nohup的用法，第三部分的含义，就是代码后台运行命令，其实也不用说。令人费解的就是第二部分的含义。</p>
<p>开头的时候，我有说过，其实数字是Linux规定的一种输出的信号，在编程语言中，&amp;通常是代表变量的内存地址，所以 2&gt;&amp;1代表了，把<code>错误输出</code>写到<code>标准输出</code>里面。</p>
<h3>举个例子</h3>
<pre><code class="language-bash">$ ll
total 72
-rw-r--r--  1 sf  staff     36 10 30 11:17 1
-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt
drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug
-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp
-rw-------  1 sf  staff      0 10 30 11:11 nohup.out
-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest
-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp
-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</code></pre>
<h4>验证数字1是不是标准输出的意思</h4>
<pre><code class="language-bash"># shell-demo0
$ ll ./ 1&gt;output.txt
$ cat output.txt
total 64
-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt
drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug
-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp
-rw-------  1 sf  staff      0 10 30 11:11 nohup.out
-rw-r--r--  1 sf  staff      0 10 30 11:48 output.txt
-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest
-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp
-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</code></pre>
<pre><code class="language-bash"># shell-demo1
$ ll mmm 1&gt;output1.txt
ls: mmm: No such file or directory
$ cat output1.txt
$</code></pre>
<p>上面的两个例子证明了一个问题</p>
<ul>
<li>shell-demo0在output.txt文件里面的内容，和ll的显示内容一致</li>
<li>shell-demo1中，我查看了一个不存在的文件，但是错误信息没有写入到文件output1.txt，而是输出到了屏幕上</li>
</ul>
<p>结论：数字1确实是标准输出的含义</p>
<h4>验证数字2是不是错误信息的含义</h4>
<pre><code class="language-bash">#shell-demo2
$ ll ./ 2&gt;output2.txt
total 72
-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt
drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug
-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp
-rw-------  1 sf  staff      0 10 30 11:11 nohup.out
-rw-r--r--  1 sf  staff    443 10 30 11:48 output.txt
-rw-r--r--  1 sf  staff      0 10 30 11:51 output1.txt
-rw-r--r--  1 sf  staff      0 10 30 11:56 output2.txt
-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest
-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp
-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt
$ cat output2.txt
$ </code></pre>
<pre><code class="language-bash">#shell-demo3
$ ll mmm 2&gt;output3.txt
$ cat output3.txt
ls: mmm: No such file or directory</code></pre>
<p>上面的两个例子证明了一个问题</p>
<ul>
<li>shell-demo2在使用数字2的时候，当前目录下的文件信息在屏幕输出，没有写入到文件output2.txt</li>
<li>shell-demo3中，错误信息输出到了output3.txt</li>
</ul>
<p>结论：数字2确实是错误输出的含义</p>
<h4>2&gt;1和2&gt;&amp;1</h4>
<p>接下来，我们对比下2&gt;1和2&gt;&amp;1的区别</p>
<pre><code class="language-bash">#shell-demo4
$ ll ./ mm &gt;output4.txt 2&gt;1
$ cat output4.txt
./:
total 72
-rw-r--r--  1 sf  staff     34 10 30 13:33 1
-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt
drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug
-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp
-rw-------  1 sf  staff      0 10 30 11:11 nohup.out
-rw-r--r--  1 sf  staff      0 10 30 13:33 output4.txt
-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest
-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp
-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</code></pre>
<pre><code class="language-bash">#shell-demo5
$ ll ./ mm &gt;output5.txt 2&gt;&amp;1
$ cat output5.txt
ls: mm: No such file or directory
./:
total 88
-rw-r--r--  1 sf  staff     34 10 30 13:33 1
-rw-r--r--  1 sf  staff    111 10 30 10:40 CMakeLists.txt
drwxr-xr-x  7 sf  staff    224 10 30 10:41 cmake-build-debug
-rw-r--r--  1 sf  staff     96 10 30 10:40 main.cpp
-rw-------  1 sf  staff      0 10 30 11:11 nohup.out
-rw-r--r--  1 sf  staff    527 10 30 13:34 output4.txt
-rw-r--r--  1 sf  staff     34 10 30 13:34 output5.txt
-rwxr-xr-x  1 sf  staff  12732 10 30 10:45 sigtest
-rw-r--r--  1 sf  staff    258 10 30 10:45 sigtest.cpp
-rw-r--r--  1 sf  staff     23 10 30 11:02 tt.txt</code></pre>
<p>对比应该比较明显了吧。</p>
<p><code>如果是使用2&gt;1，那么代表错误信息会写入到标准信息里面，但是会被标准信息所覆盖</code></p>
<p><code>如果是使用2&gt;&amp;1，那么代表错误信息会写入到标准信息的内存地址里，然后再和标准信息一起写到输出文件里面</code></p>
<p>本文链接：<a href="https://feilong.tech/2019/11/03/nohup/">https://feilong.tech/2019/11/03/nohup/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>701</wp:post_id>
		<wp:post_date><![CDATA[2019-11-03 18:39:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-03 10:39:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nohup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[704]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.250";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ASCII、Unicode和UTF-8的关系</title>
		<link>https://feilong.tech/2019/11/08/ascii_unicode_utf-8/</link>
		<pubDate>Fri, 08 Nov 2019 06:34:15 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=707</guid>
		<description></description>
		<content:encoded><![CDATA[<p>对于我来说，字符集的相关知识，一直都是噩梦。Unicode、utf-8、ASCII....搞得头都大了。我也特意梳理了下，字符集之间的关系。而且，之前在贝壳面试，面试官也问了我关于unicode编码的事情。</p>
<h3>ASCII</h3>
<h4>由来</h4>
<p>ASCII的字符集算是出来最早的了，最初是来源于美国。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。除了我们常见的英文字母，还包含了各种英文的标点符号等等。在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个符号是不够的。</p>
<h4>存在的问题</h4>
<p>但是这样是有问题的。举个例子，法语的字母上方是有音标的，它就无法使用ASCII的编码表示。于是，一些欧洲的国家决定，利用字节中闲置的最高位编入新的符号，这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。由最开始的 0xxx xxxx (2^7=128) 变成了 1xxx xxxx (2^8=256)</p>
<h3>Unicode</h3>
<p>后来，大家都在考虑，如果有一种字符集，能够包含所有的字符，那就好了。</p>
<p>于是，在 1991 年，国际标准化组织和统一码联盟组织各自开发了 ISO/IEC 10646（USC）和 Unicode 项目。他们俩的野心和当时的秦始皇一样，一统江湖。后来，两个组织开始进行讨论，决定把彼此的工作内容合并，但是项目还是独立存在，各自发布自己的标准，但是要保持兼容。后来由于Unicode的好记，就被广为流传。其实，Unicode的含义可以解释为union code。</p>
<p>在表示一个Unicode的字符时，通常会用U+ 后面跟着十六进制的数字来表示这一个字符。</p>
<p>Unicode的编码，延续了ASCII的编码，0-127位，还是代表了ASCII的编码，从128以后，才是其他的编码。</p>
<p>比如 在unicode的<code>U+ 0041</code>代表了大写的<code>A</code>, 在ascii编码16进制也是<code>\x41</code></p>
<p>再比如，<code>肥</code>的unicode编码表示为<code>U+ 80a5</code></p>
<h3>UTF-8</h3>
<p>utf-8的的全拼是<code>Universal Character Set/Unicode Transformation Format</code>,翻译过来就是<code>Unicode格式化</code>，很明显是一个动词，表示把字符转换成8位的Unicode。</p>
<p>举个例子:</p>
<pre><code class="language-bash">I’m 肥龙</code></pre>
<p>使用unicode的表示为</p>
<pre><code class="language-bash">I U+49
&#039; U+20
m U+6D
肥 U+80A5
龙 U+9F99</code></pre>
<p>但是，在计算机里，统一都是2进制的存储的，所以转换成2进制表示为</p>
<pre><code class="language-bash">I  00000000 01001001
&#039;  00000000 00100000
m  00000000 01101101
   00000000 00000000
肥  10000000 10100101
龙  10011111 10011001</code></pre>
<p>UTF-8规定：</p>
<p>1、单字节的字符，字节的第一位设为0，对于英文文本，utf-8只占用一个字符，所以第一位都是0</p>
<p>2、n个字节，第一个字节的前n个设为1，第n+1设为0，后面的字节前两位都设为10，这n个字节的其余空位填充该字符unicode码，高位用0补足。</p>
<p>所以，转换成UTF-8过程</p>
<pre><code class="language-bash">肥
---------------------------
10000000 10100101   二进制
1110 10 10         初始化模板
11101000 10000010 10100101 补全
e8 82 a5            16进制
</code></pre>
<pre><code class="language-bash">龙
---------------------------
10011111 10011001 二进制
1110 10 10          初始化模板
11101001 10111110 10011001 补全
e9 be 99            16进制</code></pre>
<p>所以最后的转换成utf-8的编码</p>
<pre><code class="language-bash">I  01001001
&#039;  00100000
m  01101101
   00000000
肥  11101000 10000010 10100101
龙  11101001 10111110 10011001
</code></pre>
<p>使用Python验证一下结果</p>
<pre><code class="language-pyhton">>&gt;&gt; a=u&#039;肥龙&#039;
>&gt;&gt; a
u&#039;\u80a5\u9f99&#039;
>&gt;&gt; b=a.encode(&#039;utf8&#039;)
>&gt;&gt; b
&#039;\xe8\x82\xa5\xe9\xbe\x99&#039;
>&gt;&gt;</code></pre>
<p>可以看到，省略了一部分空间。汉子的编码多了一个字节，英文的编码少了一个字节，总共节省了2个字节的空间！</p>
<p>本文连接： <a href="https://feilong.tech/2019/11/08/ascii_unicode_utf-8">https://feilong.tech/2019/11/08/ascii_unicode_utf-8</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>707</wp:post_id>
		<wp:post_date><![CDATA[2019-11-08 14:34:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-08 06:34:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ascii_unicode_utf-8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ascii"><![CDATA[ascii]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="unicode"><![CDATA[unicode]]></category>
		<category domain="post_tag" nicename="utf-8"><![CDATA[utf-8]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a0%81"><![CDATA[编码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[ascii%e3%80%81unicode%e5%92%8cutf-8%e7%9a%84%e5%85%b3%e7%b3%bb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[708]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"54.36.148.250";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mac 由于libiconv导致编译PHP7 ld: symbol(s) not found for architecture x86_64错误</title>
		<link>https://feilong.tech/2019/11/11/make-php-error/</link>
		<pubDate>Mon, 11 Nov 2019 08:04:13 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=709</guid>
		<description></description>
		<content:encoded><![CDATA[<p>从源码手动编译 PHP 时出现如下错误：</p>
<pre><code class="language-bash">Undefined symbols for architecture x86_64:
  &quot;_libiconv&quot;, referenced from:
      _php_iconv_string in iconv.o
      __php_iconv_strlen in iconv.o
      __php_iconv_substr in iconv.o
      __php_iconv_strpos in iconv.o
      __php_iconv_mime_encode in iconv.o
      __php_iconv_appendl in iconv.o
      _php_iconv_stream_filter_append_bucket in iconv.o
      ...
  &quot;_libiconv_close&quot;, referenced from:
      _php_iconv_string in iconv.o
      __php_iconv_strlen in iconv.o
      __php_iconv_substr in iconv.o
      __php_iconv_strpos in iconv.o
      __php_iconv_mime_encode in iconv.o
      __php_iconv_mime_decode in iconv.o
      _php_iconv_stream_filter_dtor in iconv.o
      ...
  &quot;_libiconv_open&quot;, referenced from:
      _php_iconv_string in iconv.o
      __php_iconv_strlen in iconv.o
      __php_iconv_substr in iconv.o
      __php_iconv_strpos in iconv.o
      __php_iconv_mime_encode in iconv.o
      __php_iconv_mime_decode in iconv.o
      _php_iconv_stream_filter_ctor in iconv.o
      ...
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make: *** [sapi/cli/php] Error 1
</code></pre>
<p>这个是因为我在编译的时候设置--with-iconv的路径，猜测应该是iconv的问题。
参照文章 compile php with openssl on mac osx error找到了一些灵感
MakeFile 里面找到类似下面这一行：</p>
<pre><code class="language-Makefile">EXTRA_LIBS = -lresolv -liconv -liconv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm</code></pre>
<p>删除所有 -liconv 在后面填写 libiconv.dylib和libcharset.dylib的路径
如果你是用homebrew安卓的libiconv那么路径就是 /usr/local/opt/libiconv/lib
附上我修改后的 MakeFile EXTRA_LIBS 那一行：</p>
<pre><code class="language-Makefile">EXTRA_LIBS = -lresolv -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm -lxml2 -lz -licucore -lm /usr/local/opt/libiconv/lib/libiconv.dylib /usr/local/opt/libiconv/lib/libcharset.dylib</code></pre>
<p>然后重新运行make命令</p>
<p>本文连接：<a href="https://feilong.tech/2019/11/11/make-php-error">https://feilong.tech/2019/11/11/make-php-error</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>709</wp:post_id>
		<wp:post_date><![CDATA[2019-11-11 16:04:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-11 08:04:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[make-php-error]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[mac-%e7%94%b1%e4%ba%8elibiconv%e5%af%bc%e8%87%b4%e7%bc%96%e8%af%91php7-ld-symbols-not-found-for-architecture-x86_64%e9%94%99%e8%af%af]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[731]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.128";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Redis数据类型之HyperLogLog</title>
		<link>https://feilong.tech/2019/11/21/redis-hyperloglog/</link>
		<pubDate>Thu, 21 Nov 2019 14:59:54 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=720</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Redis相对于memcache的优势之一就是支持丰富的数据结构，比如Hash、List、Set、Zset等。除了这些以外，redis还支持HyperLogLog</p>
<h3>HyperLogLog</h3>
<p>假如有个需求，需要统计UV情况，我们的思路是什么？</p>
<ul>
<li>Hash: 我们可以使用Hash的结构，使用用户的ip当做元素的key，最后使用<code>HLEN</code>统计下个数</li>
<li>Set: Set是无序唯一的，同样可以使用用户的IP作为key，最后使用<code>SCARD</code>统计个数</li>
</ul>
<p>没错，这两种都可以实现需求，但是对内存的占用是惊人的，如果是上千万的UV，那么会占用大量的内存。那么有没有<code>物美价廉</code>的方式呢？那就是HyperLogLog。</p>
<h3>HyperLogLog的优势和劣势</h3>
<p>HyperLogLog只会占用<code>12KB</code>左右的存储空间，这个既是优势，优势劣势，因为如果数量比较小，这个<code>12KB</code>左右的空间是非常不划算的。</p>
<p>但是redis也对HyperLogLog进行了优化，在计数比较小的时候，采用稀疏矩阵存储，占用的空间比较小，只有当超过了某个阈值，才会一次性变得稠密，才会占用<code>12KB</code>.</p>
<p>HyperLogLog的劣势就是会出现统计的误差，并不能精确的进行个数统计.</p>
<h3>对比情况</h3>
<pre><code class="language-php">##伪代码
&lt;?php
$redisObj = new Redis();

add2HyperLogLog();
add2Hash();
add2Set();

function add2HyperLogLog()
{
    global $redisObj;
    $connect = $redisObj::getConn();
    for ($i = 0; $i &lt; 100000; $i++) {
        $user[&quot;user_name_&quot;.$i] = &quot;user_&quot; . $i;
    }
    $connect-&gt;pfAdd(&quot;user_by_hyper_log_log&quot;, $user);
}

function add2Hash()
{
    global $redisObj;
    $redisObj = new \Lta\Redis();
    $connect = $redisObj::getConn();
    for ($i = 0; $i &lt; 100000; $i++) {
        $connect-&gt;sAdd(&quot;user_by_set&quot;, &quot;user_&quot; . $i);
    }
}

function add2Set()
{
    global $redisObj;
    $redisObj = new \Lta\Redis();
    $connect = $redisObj::getConn();
    for ($i = 0; $i &lt; 100000; $i++) {
        $connect-&gt;hSet(&quot;user_by_hash&quot;, &quot;user_name_&quot;.$i,&quot;user_&quot; . $i);
    }
}
</code></pre>
<pre><code class="language-bash">10.188.40.78:6379&gt; DEBUG OBJECT user_by_hash
Value at:0x7fc170333f10 refcount:1 encoding:hashtable serializedlength:2677785 lru:14064726 lru_seconds_idle:147
10.188.40.78:6379&gt; DEBUG OBJECT user_by_hyper_log_log
Value at:0x7fc1700a6000 refcount:1 encoding:raw serializedlength:10592 lru:14064728 lru_seconds_idle:150
10.188.40.78:6379&gt; DEBUG OBJECT user_by_set
Value at:0x7fc1700a6010 refcount:1 encoding:hashtable serializedlength:1088895 lru:14064734 lru_seconds_idle:150

10.188.40.78:6379&gt; PFCOUNT user_by_hyper_log_log
(integer) 99839
10.188.40.78:6379&gt; SCARD user_by_set
(integer) 100000
10.188.40.78:6379&gt; HLEN user_by_hash
(integer) 100000
</code></pre>
<table>
<thead>
<tr>
<th>键名</th>
<th>长度</th>
<th>元素个数</th>
</tr>
</thead>
<tbody>
<tr>
<td>user_by_hash</td>
<td>2677785</td>
<td>100000</td>
</tr>
<tr>
<td>user_by_hyper_log_log</td>
<td>10592</td>
<td>99839</td>
</tr>
<tr>
<td>user_by_set</td>
<td>1088895</td>
<td>100000</td>
</tr>
</tbody>
</table>
<p>可以看到，使用user_by_hyper_log_log的存储，长度要小很多，但是统计的元素格式是不完整的，误差率是<code>0.161%</code>，对于统计UV来说，是可以接受的。</p>
<h3>使用rdbtools</h3>
<p>但是serializedlength并不是真实的占用空间，并且在存储的时候，可能会进行序列化，要想查看真实的空间，需要使用另外的工具</p>
<pre><code class="language-bash">$ pip install rdbtools
Successfully built rdbtools
Installing collected packages: rdbtools
Successfully installed rdbtools-0.1.14

$ redis-memory-for-key -s 10.188.40.78 user_by_hyper_log_log
Key             user_by_hyper_log_log
Bytes               14400
Type                string
$ redis-memory-for-key -s 10.188.40.78 user_by_hash
Key             user_by_hash
Bytes               7892932.0
Type                hash
Encoding            hashtable
Number of Elements      100000
Length of Largest Element   15
$ redis-memory-for-key -s 10.188.40.78 user_by_set
Key             user_by_set
Bytes               5572932.0
Type                set
Encoding            hashtable
Number of Elements      100000
Length of Largest Element   10</code></pre>
<p>这个对比结果就很明显了，Hash占用的空间是HyperLogLog的548倍，Set占用的空间是HyperLogLog的387倍！ </p>
<p>换算下占用的HyperLogLog的占用空间，大概是<code>14KB</code></p>
<h3>使用场景</h3>
<p>前面有说道，HyperLogLog是存在误差的，一般是一些对可接受小误差的统计，比如：</p>
<ul>
<li>统计注册 IP 数</li>
<li>统计每日访问 IP 数</li>
<li>统计页面实时 UV 数</li>
<li>统计在线用户数</li>
<li>统计用户每天搜索不同词条的个数</li>
</ul>
<h3>参考文献：</h3>
<ul>
<li>《Redis深度历险》--钱文品</li>
<li><a href="https://blog.csdn.net/maoyuanming0806/article/details/81814610">Redis：HyperLogLog使用与应用场景</a></li>
</ul>
<p>本文链接： <a href="https://feilong.tech/2019/11/21/redis-hyperloglog">https://feilong.tech/2019/11/21/redis-hyperloglog</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>720</wp:post_id>
		<wp:post_date><![CDATA[2019-11-21 22:59:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-21 14:59:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redis-hyperloglog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="hyperloglog"><![CDATA[HyperLogLog]]></category>
		<category domain="post_tag" nicename="redis"><![CDATA[Redis]]></category>
		<category domain="post_tag" nicename="%e7%bb%9f%e8%ae%a1"><![CDATA[统计]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[redis%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e4%b9%8bhyperloglog]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[721]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating,bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.119.136.128";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>empty和count哪个性能会更好？</title>
		<link>https://feilong.tech/2020/10/25/empty_and_count/</link>
		<pubDate>Sun, 25 Oct 2020 12:44:59 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">http://feilong.tech/?p=694</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>疑问</h3>
<p>有些事情其实是比较让我感到疑惑的，就是关于使用empty和count函数，对数组判空，哪个性能会更好？</p>
<p>一般来说，我们对数组判空，常用的就是empty和count。即：</p>
<pre><code class="language-php">if (empty($arr)) {

}

if (count($arr) == 0) {

}</code></pre>
<h3>论证</h3>
<p>是的，这两种都能实现，但是哪种性能会更好呢？所以，我做了简单对比：</p>
<pre><code class="language-php">&lt;?php

$arr = array_fill(0, 100, 1);
$startTime = markTime();
for ($i = 0; $i &lt; 10000000; $i++) {
    if (empty($arr)) {

    }
}
$endTime = markTime();
echo &quot;使用empty判空花了: &quot; . (floatval($endTime) - floatval($startTime)) . &quot;\n&quot;;

$startTime = markTime();
for ($i = 0; $i &lt; 10000000; $i++) {
    if (count($arr) == 0) {

    }
}
$endTime = markTime();
echo &quot;使用count判空花了: &quot; . (floatval($endTime) - floatval($startTime)) . &quot;\n&quot;;

function markTime()
{
    list($mic, $sec) = explode(&quot; &quot;, microtime());
    return $mic + $sec;
}</code></pre>
<p>上面的例子，我通过循环1kw次，计算前后执行的时间情况，得到了一下数据：</p>
<pre><code class="language-shell">使用empty判空花了: 0.15395402908325
使用count判空花了: 0.2148220539093</code></pre>
<p>我担心某次的试验结果不准确，所以进行了多次了试验，试验结果都是一样的，那就是<code>empty</code>比<code>count</code>性能更好。</p>
<h3>分析</h3>
<p>对比下opcode:</p>
<pre><code class="language-shell">php7 -dvld.active=1 test1.php
Finding entry points
Branch analysis from position: 0
1 jumps found. (Code = 62) Position 1 = -2
filename:       /Users/feilong/data/service/i.api-big.crep.ke.com/test1.php
function name:  (null)
number of ops:  4
compiled vars:  none
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
   3     0  E &gt;   INIT_FCALL                                               &#039;count&#039;
         1        SEND_VAL                                                 &lt;array&gt;
         2        DO_ICALL                                                 
         3      &gt; RETURN                                                   1

branch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2
path #1: 0,</code></pre>
<pre><code class="language-shell">php7 -dvld.active=1 count.php
Finding entry points
Branch analysis from position: 0
1 jumps found. (Code = 62) Position 1 = -2
filename:       /Users/feilong/data/service/test/count.php
function name:  (null)
number of ops:  4
compiled vars:  none
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
   3     0  E &gt;   INIT_FCALL                                               &#039;count&#039;
         1        SEND_VAL                                                 &lt;array&gt;
         2        DO_ICALL                                                 
         3      &gt; RETURN                                                   1

branch: #  0; line:     3-    3; sop:     0; eop:     3; out0:  -2
path #1: 0,

php7 -dvld.active=1 empty.php
Finding entry points
Branch analysis from position: 0
1 jumps found. (Code = 62) Position 1 = -2
filename:       /Users/feilong/data/service/test/empty.php
function name:  (null)
number of ops:  1
compiled vars:  none
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
   3     0  E &gt; &gt; RETURN                                                   1

branch: #  0; line:     3-    3; sop:     0; eop:     0; out0:  -2
path #1: 0, </code></pre>
<p>通过opcode，可以清晰看出，count的函数，生成的opcode总共是4行<code>INIT_FCALL</code>，<code>SEND_VAL</code>,<code>DO_ICALL</code>, <code>RETURN</code>；而empty的opcode只有<code>RETURN</code>。这是因为count是使用拓展方式，将函数加载到PHP内核，所以在执行的时候，会进行一些模块的初始化操作，而empty是在代码扫描的阶段，就已经进行了加载。所以执行效率会更高。</p>
<p>本文链接： <a href="https://feilong.tech/2020/10/25/empty_and_count/">https://feilong.tech/2020/10/25/empty_and_count/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>694</wp:post_id>
		<wp:post_date><![CDATA[2020-10-25 20:44:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-10-25 12:44:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[empty_and_count]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[empty%e5%92%8ccount%e5%93%aa%e4%b8%aa%e6%80%a7%e8%83%bd%e4%bc%9a%e6%9b%b4%e5%a5%bd%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[744]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"72.14.199.114";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>465</wp:comment_id>
			<wp:comment_author><![CDATA[yifans]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zhaoyifans@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[207.246.108.219]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-05-28 18:45:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-05-28 10:45:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[vld 第一次用，还有啥学习源码的工具呢？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1622198756.866447;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1622282762.4096429;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"Feilong";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>PHP $_POST接收大量form表单数据缺失探究</title>
		<link>https://feilong.tech/2019/12/20/php-parse-post/</link>
		<pubDate>Fri, 20 Dec 2019 13:39:55 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=730</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>背景</h3>
<p>最近遇到一个线上问题，服务A，调用服务B的接口，发现服务B报“xxx参数不存在”，但是通过服务A的请求日志发现，是有参数&quot;xxx&quot;。然后翻了一下服务B的日志，发现没有参数&quot;xxx&quot;，而且以外发现，接收的数据，比传输的数据少一部分！</p>
<h3>黑人问号？？</h3>
<p>最初怀疑是A传输写数据的原因，随后在请求前，打印了内容，<code>发现是完整的！！！好玄幻！！！</code></p>
<p>然后在B打印了 file_get_contents(&quot;php://input&quot;)，$_POST，发前者的内容是完整的，后者的内容要偏少，所以A传输的数据应该没有问题！！</p>
<p>那问题到底出现在了哪里？？？</p>
<h3>探究原因</h3>
<p>为了查明下原因，我怀疑是和代码有关系，所以索性，把数据搞到postman，通过postman再尝试下</p>
<pre><code class="language-php">#接收端代码
&lt;?php
file_put_contents(&quot;txt&quot;, json_encode($_POST));</code></pre>
<pre><code class="language-bash"># 启动phpserver服务
$ php7 -S 127.0.0.1:9090
PHP 7.1.2RC1 Development Server started at Fri Dec 20 13:40:31 2019
Listening on http://127.0.0.1:9090
Document root is /Users/sf
Press Ctrl-C to quit.
[Fri Dec 20 13:40:38 2019] PHP Warning:  Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0
[Fri Dec 20 13:40:38 2019] 127.0.0.1:59719 [200]: /index.php</code></pre>
<p>意外发现，控制台输出了一条warning信息</p>
<p><code>[Fri Dec 20 13:40:38 2019] PHP Warning:  Unknown: Input variables exceeded 1000. To increase the limit change max_input_vars in php.ini. in Unknown on line 0</code></p>
<p>这条信息，仿佛是一棵救命稻草一样，我根据提示信息，查询了一下官方文档</p>
<blockquote>
<p>max_input_vars integer
接受多少 输入的变量（限制分别应用于 $_GET、$_POST 和 $_COOKIE 超全局变量） 指令的使用减轻了以哈希碰撞来进行拒绝服务攻击的可能性。 如有超过指令指定数量的输入变量，将会导致 E_WARNING 的产生， 更多的输入变量将会从请求中截断。</p>
</blockquote>
<p>原来，PHP处于安全考虑，会在form表单提交的时候，会限制参数解析的个数，如果超过规定的个数，就会出现截断的问题，默认限制是1000个。而我提交的数据，早就超过1000个了。这应该就是$_POST要比php://input里面数据少的原因了。</p>
<h3>截取的策略</h3>
<p>原因找到了，这就萌生了另外一个问题，$_POST虽然被截断了，但是为什么打印出来的信息，还是一个完整的数组的结构？截断的策略是什么样的？这恐怕需要分析一下PHP的源码了！</p>
<pre><code class="language-bash">#php_variables.c

static inline int add_post_vars(zval *arr, post_var_data_t *vars, zend_bool eof)
{
    uint64_t max_vars = PG(max_input_vars);

    vars-&gt;ptr = ZSTR_VAL(vars-&gt;str.s);
    vars-&gt;end = ZSTR_VAL(vars-&gt;str.s) + ZSTR_LEN(vars-&gt;str.s);
    while (add_post_var(arr, vars, eof)) {
        if (++vars-&gt;cnt &gt; max_vars) {
            php_error_docref(NULL, E_WARNING,
                    &quot;Input variables exceeded %&quot; PRIu64 &quot;. &quot;
                    &quot;To increase the limit change max_input_vars in php.ini.&quot;,
                    max_vars);
            return FAILURE;
        }
    }

    if (!eof) {
        memmove(ZSTR_VAL(vars-&gt;str.s), vars-&gt;ptr, ZSTR_LEN(vars-&gt;str.s) = vars-&gt;end - vars-&gt;ptr);
    }
    return SUCCESS;
}
</code></pre>
<p>PHP会首先初始化解析数据的指针，然后通过while的循环，逐次对post的数据进行解析，然后设置vars-&gt;ptr的值，用来记录当前解析的位置，并对解析变量的个数进行统计，当<code>++vars-&gt;cnt &gt; max_vars</code> 的时候，会终止解析，但是解析的时候，是按照key value结对解析，所以截断后，$_POST里面也是标准的数组结构。</p>
<p><code>add_post_var</code>是具体的解析策略，
以<code>name=feilong&amp;sex=man</code>为例</p>
<pre><code class="language-bash">static zend_bool add_post_var(zval *arr, post_var_data_t *var, zend_bool eof)
{
    char *ksep, *vsep, *val;
    size_t klen, vlen;
    size_t new_vlen;

    if (var-&gt;ptr &gt;= var-&gt;end) {
        return 0;
    }

    vsep = memchr(var-&gt;ptr, &#039;&amp;&#039;, var-&gt;end - var-&gt;ptr);
    if (!vsep) {
        if (!eof) {
            return 0;
        } else {
            vsep = var-&gt;end;
        }
    }

    ksep = memchr(var-&gt;ptr, &#039;=&#039;, vsep - var-&gt;ptr);
    if (ksep) {
        *ksep = &#039;\0&#039;;
        /* &quot;foo=bar&amp;&quot; or &quot;foo=&amp;&quot; */
        klen = ksep - var-&gt;ptr;
        vlen = vsep - ++ksep;
    } else {
        ksep = &quot;&quot;;
        /* &quot;foo&amp;&quot; */
        klen = vsep - var-&gt;ptr;
        vlen = 0;
    }

    php_url_decode(var-&gt;ptr, klen);

    val = estrndup(ksep, vlen);
    if (vlen) {
        vlen = php_url_decode(val, vlen);
    }

    if (sapi_module.input_filter(PARSE_POST, var-&gt;ptr, &amp;val, vlen, &amp;new_vlen)) {
        php_register_variable_safe(var-&gt;ptr, val, new_vlen, arr);
    }
    efree(val);

    var-&gt;ptr = vsep + (vsep != var-&gt;end);
    return 1;
}
</code></pre>
<p>首先，定位到<code>name=feilong</code>，然后进行拆解，将name赋值var-&gt;ptr，将feilong赋值给val变量，然后通过<code>php_register_variable_safe</code>函数，进行变量的注册。</p>
<p>不过在注册之前，会先进行一次过滤的操作。</p>
<blockquote>
<p>filter_input
filter_input — 通过名称获取特定的外部变量，并且可以通过过滤器处理它
filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] ) : mixed
type
INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER或 INPUT_ENV之一。
.....</p>
</blockquote>
<p>从源码上来看，这里过滤的类型是<code>INPUT_POST</code>。</p>
<p>PHP就是通过这样一层层的循环解析，直到解析的变量个数超过限制或者解析结束，把原有的form表单的数据，解析成$_POST数组。</p>
<h3>总结</h3>
<p>回到文章的标题，其实这次问题出现的原因，并不是在于&quot;传输&quot;，而在于解析数据，处于安全考虑，PHP做了一层限制，防止黑客传输过多的数据，导致用户被DDoS攻击。</p>
<p>本文链接: <a href="https://feilong.tech/2019/12/20/php-parse-post">https://feilong.tech/2019/12/20/php-parse-post</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>730</wp:post_id>
		<wp:post_date><![CDATA[2019-12-20 21:39:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-20 13:39:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-parse-post]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="http"><![CDATA[http]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[731]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[php,clike,markup-templating,bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:12:"54.36.148.89";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP数组的存储</title>
		<link>https://feilong.tech/2020/10/25/php-array/</link>
		<pubDate>Sun, 25 Oct 2020 11:54:17 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=737</guid>
		<description></description>
		<content:encoded><![CDATA[<p>PHP数组是PHP最复杂的数据结构，没有之一，如果能把数据彻底搞透，那么其他的数据结构也能理解的差不多了。</p>
<h4>数据结构</h4>
<pre><code class="language-c">
typedef struct _Bucket {
    zval              val;
    zend_ulong        h;                /* hash value (or numeric index)   */
    zend_string      *key;              /* string key or NULL for numerics */
} Bucket;

typedef struct _zend_array HashTable;

struct _zend_array {
    zend_refcounted_h gc;
    union {
        struct {
            ZEND_ENDIAN_LOHI_4(
                zend_uchar    flags,
                zend_uchar    nApplyCount,
                zend_uchar    nIteratorsCount,
                zend_uchar    consistency)
        } v;
        uint32_t flags;
    } u;
    uint32_t          nTableMask; // 中间映射表，用来映射在arData的存储位置
    Bucket           *arData; // 元素的存储数据结构，默认指向第一个元素
    uint32_t          nNumUsed; // arData使用的个数
    uint32_t          nNumOfElements; // 数组的个数
    uint32_t          nTableSize; // 数组的大小
    uint32_t          nInternalPointer;
    zend_long         nNextFreeElement;
    dtor_func_t       pDestructor;
};</code></pre>
<h4>数组的初始化</h4>
<pre><code class="language-c">ZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)
{
    GC_REFCOUNT(ht) = 1;
    GC_TYPE_INFO(ht) = IS_ARRAY;
    ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;
    ht-&gt;nTableMask = HT_MIN_MASK;
    HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);
    ht-&gt;nNumUsed = 0;
    ht-&gt;nNumOfElements = 0;
    ht-&gt;nInternalPointer = HT_INVALID_IDX;
    ht-&gt;nNextFreeElement = 0;
    ht-&gt;pDestructor = pDestructor;
    ht-&gt;nTableSize = zend_hash_check_size(nSize);
}

static zend_always_inline void zend_hash_real_init_ex(HashTable *ht, int packed)
{
    HT_ASSERT(GC_REFCOUNT(ht) == 1);
    ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));
    if (packed) {
        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));
        (ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;
        HT_HASH_RESET_PACKED(ht);
    } else {
        (ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;
        HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));
        (ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;
        if (EXPECTED(ht-&gt;nTableMask == (uint32_t)-8)) {
            Bucket *arData = ht-&gt;arData;

            HT_HASH_EX(arData, -8) = -1;
            HT_HASH_EX(arData, -7) = -1;
            HT_HASH_EX(arData, -6) = -1;
            HT_HASH_EX(arData, -5) = -1;
            HT_HASH_EX(arData, -4) = -1;
            HT_HASH_EX(arData, -3) = -1;
            HT_HASH_EX(arData, -2) = -1;
            HT_HASH_EX(arData, -1) = -1;
        } else {
            HT_HASH_RESET(ht);
        }
    }
}
</code></pre>
<p>在初始化之前，会先调用_zend_hash_init进行一些简单的初始化操作，但是这部分做的事情比较少，只是初始化了nTableSize=8，arData的内存大小是根据这个值确定的，它的大小是8的幂次方，最小为8；</p>
<p>其他的初始化操作，是通过zend_hash_real_init_ex函数进行的：</p>
<ul>
<li>首先，将u.flags设置为<code>初始化</code>的状态</li>
<li>将映射关系nTableMask设置为nTableSize大小的相反数</li>
<li>申请地址空间，设备的地址空间大小是nTableMask和nTableSize的两个地址空间大小</li>
<li>设置arData的每个元素的值为-1</li>
</ul>
<h4>数组的赋值_zend_hash_add_or_update_i</h4>
<pre><code class="language-c">static zend_always_inline zval *_zend_hash_add_or_update_i(HashTable *ht, zend_string *key, zval *pData, uint32_t flag ZEND_FILE_LINE_DC)
{
    zend_ulong h;
    uint32_t nIndex;
    uint32_t idx;
    Bucket *p;

    IS_CONSISTENT(ht);
    HT_ASSERT(GC_REFCOUNT(ht) == 1);

    if (UNEXPECTED(!(ht-&gt;u.flags &amp; HASH_FLAG_INITIALIZED))) {
        CHECK_INIT(ht, 0);
        goto add_to_hash;
    } else if (ht-&gt;u.flags &amp; HASH_FLAG_PACKED) {
        zend_hash_packed_to_hash(ht);
    } else if ((flag &amp; HASH_ADD_NEW) == 0) {
        p = zend_hash_find_bucket(ht, key);

        if (p) {
            zval *data;

            if (flag &amp; HASH_ADD) {
                if (!(flag &amp; HASH_UPDATE_INDIRECT)) {
                    return NULL;
                }
                ZEND_ASSERT(&amp;p-&gt;val != pData);
                data = &amp;p-&gt;val;
                if (Z_TYPE_P(data) == IS_INDIRECT) {
                    data = Z_INDIRECT_P(data);
                    if (Z_TYPE_P(data) != IS_UNDEF) {
                        return NULL;
                    }
                } else {
                    return NULL;
                }
            } else {
                ZEND_ASSERT(&amp;p-&gt;val != pData);
                data = &amp;p-&gt;val;
                if ((flag &amp; HASH_UPDATE_INDIRECT) &amp;&amp; Z_TYPE_P(data) == IS_INDIRECT) {
                    data = Z_INDIRECT_P(data);
                }
            }
            if (ht-&gt;pDestructor) {
                ht-&gt;pDestructor(data);
            }
            ZVAL_COPY_VALUE(data, pData);
            return data;
        }
    }

    ZEND_HASH_IF_FULL_DO_RESIZE(ht);        /* If the Hash table is full, resize it */

add_to_hash:
    idx = ht-&gt;nNumUsed++;
    ht-&gt;nNumOfElements++;
    if (ht-&gt;nInternalPointer == HT_INVALID_IDX) {
        ht-&gt;nInternalPointer = idx;
    }
    zend_hash_iterators_update(ht, HT_INVALID_IDX, idx);
    p = ht-&gt;arData + idx;
    p-&gt;key = key;
    if (!ZSTR_IS_INTERNED(key)) {
        zend_string_addref(key);
        ht-&gt;u.flags &amp;= ~HASH_FLAG_STATIC_KEYS;
        zend_string_hash_val(key);
    }
    p-&gt;h = h = ZSTR_H(key);
    ZVAL_COPY_VALUE(&amp;p-&gt;val, pData);
    nIndex = h | ht-&gt;nTableMask;
    Z_NEXT(p-&gt;val) = HT_HASH(ht, nIndex);
    HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(idx);

    return &amp;p-&gt;val;
}</code></pre>
<ul>
<li>首先，在赋值之前，会先判断数组是否已经被初始化过，如果初始化那么就进行赋值的操作</li>
<li>赋值的时候，会把nNumUsed进行累加，然后得到arData的位置</li>
<li>将赋值的bucket设置hash code和key等成员变量</li>
<li>根据hash code，计算出在nTableMask对应的位置为nIndex</li>
<li>将arData的位置，存储到nTableMask对应的nIndex的值上面</li>
</ul>
<p><img src="/uploads/2020/01/绘图1.png" alt="" /></p>
<p>本文链接: <a href="https://feilong.tech/2020/10/25/php-array">https://feilong.tech/2020/10/25/php-array</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>737</wp:post_id>
		<wp:post_date><![CDATA[2020-10-25 19:54:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-10-25 11:54:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-array]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php7"><![CDATA[PHP7]]></category>
		<category domain="category" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<category domain="post_tag" nicename="php-source-code"><![CDATA[PHP源码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[c,clike]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[742]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.132.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mac快捷安装PHP多版本</title>
		<link>https://feilong.tech/2020/12/13/mac-phpbrew/</link>
		<pubDate>Sun, 13 Dec 2020 11:30:41 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=745</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>程序员的苦恼</h2>
<p>作为程序员，我们经常会面临一个比较痛苦的事情，那就是环境版本的问题。以PHP为例，有些框架或者工具，会对PHP版本有不同的要求。举个例子，我在公司开发使用的是PHP-7.3版本。但是周末在家，想做些其他有意思的事情，这个时候，发现有些框架或者工具的语言要求是&gt;=PHP-7.0和&lt;PHP-7.3。</p>
<p>有些同学会说，用docker啊！</p>
<p>没错，docker可以解决，但是有没有更加方便的工具来解决PHP版本切换的问题呢？当然有，那就是<strong>phpbrew</strong>!</p>
<h2>phpbrew</h2>
<p>项目地址，可以异步：<a href="https://github.com/phpbrew/phpbrew/blob/master/README.cn.md" title="phpbrew">phpbrew</a></p>
<p>phpbrew 主要解决了什么问题呢？</p>
<p>就像上面说的，它能更快和更加方便的让我们的Mac安装多个版本的PHP，以及PHP扩展，这样可以很快的提高我们的效率，作为Mac的PHP coder，也不用发愁找相应的PHP版本的解决方案。</p>
<h2>使用方法</h2>
<h3>安装</h3>
<pre><code class="language-bash">$ curl -L -O https://github.com/phpbrew/phpbrew/releases/latest/download/phpbrew.phar
$ chmod +x phpbrew.phar

# Move the file to some directory within your $PATH
$ sudo mv phpbrew.phar /usr/local/bin/phpbrew</code></pre>
<h3>使用</h3>
<p>初始化</p>
<pre><code class="language-bash">phpbrew init</code></pre>
<p>接着在 .bashrc 或 .zshrc 文件增加如下行：</p>
<pre><code class="language-bash">[[ -e ~/.phpbrew/bashrc ]] &amp;&amp; source ~/.phpbrew/bashrc
</code></pre>
<h3>基本用法</h3>
<p>列出已知的PHP版本</p>
<pre><code class="language-bash">$ phpbrew known
Read local release list (last update: 2020-11-23 12:49:58 UTC).
You can run `phpbrew update` or `phpbrew known --update` to get a newer release list.
7.4: 7.4.12, 7.4.11, 7.4.10, 7.4.9, 7.4.8, 7.4.7, 7.4.6, 7.4.5 ...
7.3: 7.3.24, 7.3.23, 7.3.22, 7.3.21, 7.3.20, 7.3.19, 7.3.18, 7.3.17 ...
7.2: 7.2.34, 7.2.33, 7.2.32, 7.2.31, 7.2.30, 7.2.29, 7.2.28, 7.2.27 ...
7.1: 7.1.33, 7.1.32, 7.1.31, 7.1.30, 7.1.29, 7.1.28, 7.1.27, 7.1.26 ...
7.0: 7.0.33, 7.0.32, 7.0.31, 7.0.30, 7.0.29, 7.0.28, 7.0.27 ...
5.6: 5.6.40, 5.6.39, 5.6.38, 5.6.37, 5.6.36, 5.6.35, 5.6.34, 5.6.33 ...
5.5: 5.5.38, 5.5.37, 5.5.36, 5.5.35, 5.5.34, 5.5.33, 5.5.32, 5.5.31 ...
5.4: 5.4.45, 5.4.44, 5.4.43, 5.4.42, 5.4.41, 5.4.40, 5.4.39, 5.4.38 ...</code></pre>
<h3>安装拓展</h3>
<pre><code class="language-bash">$ phpbrew install 5.3.10 +mysql+sqlite+cgi

$ phpbrew install 5.3.10 +mysql+debug+pgsql +apxs2

$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2</code></pre>
<h3>查看安装的版本</h3>
<pre><code class="language-bash">$ phpbrew list
  php-7.2.34
* php-5.6.40</code></pre>
<h3>切换版本</h3>
<pre><code class="language-bash">$ phpbrew switch php-5.6.40</code></pre>
<h3>启动fpm</h3>
<pre><code class="language-bash">$ phpbrew fpm start
$ phpbrew fpm test
[13-Dec-2020 19:29:42] NOTICE: configuration file /Users/feilong/.phpbrew/php/php-5.6.40/etc/php-fpm.conf test is successful</code></pre>
<h3>查看版本</h3>
<pre><code class="language-bash">PHP 5.6.40 (cli) (built: Dec 13 2020 19:11:35)
Copyright (c) 1997-2016 The PHP Group
Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</code></pre>
<h2>遇到的问题</h2>
<p>当我在安装php-7.2的时候，发生了一个问题，<code>checking for the location of zlib... configure: error: zip support requires ZLIB. Use --with-zlib-dir=&lt;DIR&gt; to specify prefix where ZLIB include and library are located</code></p>
<p>这个是zlib的扩展没有找到对应的类库</p>
<p>如果没有安装，则先进行安装</p>
<pre><code class="language-bash">$ brew reinstall zlib
==&gt; Downloading https://homebrew.bintray.com/bottles/zlib-1.2.11.mojave.bottle.tar.gz
######################################################################## 100.0%
==&gt; Reinstalling zlib
==&gt; Pouring zlib-1.2.11.mojave.bottle.tar.gz</code></pre>
<p>重新安装php</p>
<pre><code class="language-bash">$  phpbrew install 7.2 -- \--with-zlib-dir=`brew --prefix zlib`</code></pre>
<p>本文链接： <a href="https://feilong.tech/2020/12/13/mac-phpbrew/">https://feilong.tech/2020/12/13/mac-phpbrew/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>745</wp:post_id>
		<wp:post_date><![CDATA[2020-12-13 19:30:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-13 11:30:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mac-phpbrew]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brew"><![CDATA[brew]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[Mac]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[746]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:15:"220.181.108.102";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>brew update的时候提示：fatal: It seems that there is already a rebase-apply directory, and....</title>
		<link>https://feilong.tech/2021/05/16/brew-update-error1/</link>
		<pubDate>Sun, 16 May 2021 08:39:28 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=757</guid>
		<description></description>
		<content:encoded><![CDATA[<p>今天在更新brew update的时候，提示了报错信息：</p>
<pre><code class="language-bash">$ brew update
fatal: It seems that there is already a rebase-apply directory, and
I wonder if you are in the middle of another rebase.  If that is the
case, please try
    git rebase (--continue | --abort | --skip)
If that is not the case, please
    rm -fr &quot;.git/rebase-apply&quot;
and run me again.  I am stopping in case you still have something
valuable there.

Already up-to-date.</code></pre>
<p>解决这个的办法就是，重新将brew的update reset下，就OK了。</p>
<pre><code class="language-bash">$ brew update-reset</code></pre>
<p>本文链接： <a href="https://feilong.tech/2021/05/16/brew-update-error1">https://feilong.tech/2021/05/16/brew-update-error1</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>757</wp:post_id>
		<wp:post_date><![CDATA[2021-05-16 16:39:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-16 08:39:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[brew-update-error1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[758]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[brew-update%e7%9a%84%e6%97%b6%e5%80%99%e6%8f%90%e7%a4%ba%ef%bc%9afatal-it-seems-that-there-is-already-a-rebase-apply-directory-and]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"114.119.142.73";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【以太坊】Mac安装abigen遇到的坑</title>
		<link>https://feilong.tech/2021/05/19/install-abigen/</link>
		<pubDate>Wed, 19 May 2021 00:30:41 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=760</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>安装devtools报错</h3>
<p>想要开发以太坊，就需要开发智能合约，需要安装aligen，Mac版本需要通过安装devtools的方式安装abigen</p>
<pre><code class="language-bash">$ make devtools
env GOBIN= go install golang.org/x/tools/cmd/stringer@latest
env GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest
go: downloading github.com/kevinburke/go-bindata v3.11.0

go install github.com/kevinburke/go-bindata/go-bindata@latest: zip for github.com/kevinburke/go-bindata@v3.11.0 has unexpected file github.com/kevinburke/go-bindata@v0.0.0-20180804232615-06af60a4461b/.gitignore</code></pre>
<p>这个原因是和镜像云有关系，导致不能安装go-bindata，我之前使用的是阿里云的镜像库，切换成官方的镜像，重新安装一下</p>
<pre><code class="language-bash">$ go env -w  GOPROXY=https://goproxy.io,direct
$ make devtools
env GOBIN= go install golang.org/x/tools/cmd/stringer@latest
env GOBIN= go install github.com/kevinburke/go-bindata/go-bindata@latest
go: downloading github.com/kevinburke/go-bindata v3.22.0+incompatible
env GOBIN= go install github.com/fjl/gencodec@latest
go: downloading github.com/fjl/gencodec v0.0.0-20191126094850-e283372f291f
go: downloading github.com/garslo/gogen v0.0.0-20170306192744-1d203ffc1f61
go: downloading golang.org/x/tools v0.0.0-20191126055441-b0650ceb63d9
env GOBIN= go install github.com/golang/protobuf/protoc-gen-go@latest
go: downloading github.com/golang/protobuf v1.5.2
go: downloading google.golang.org/protobuf v1.26.0
env GOBIN= go install ./cmd/abigen
# gopkg.in/olebedev/go-duktape.v3
In file included from _cgo_export.c:4:
debugger.go:23:13: warning: unused function &#039;_duk_debugger_attach&#039; [-Wunused-function]
Please install solc
Please install protoc</code></pre>
<p>看到最后两句意思应该是缺少了<code>solc</code>和<code>protoc</code></p>
<pre><code class="language-bash">$ npm install -g solc-cli solc protoc</code></pre>
<pre><code class="language-bash">$ brew install protoc-gen-go</code></pre>
<p>重试下</p>
<pre><code class="language-bash">$ make devtools
In file included from _cgo_export.c:4:
debugger.go:23:13: warning: unused function &#039;_duk_debugger_attach&#039; [-Wunused-function]</code></pre>
<p>还是有报错，</p>
<p>没办法，只能换个思路，</p>
<p>后来通过官网发现，有现成的build工具 <a href="https://geth.ethereum.org/downloads/">https://geth.ethereum.org/downloads/</a></p>
<p><img src="/uploads/2021/05/WX20210519-082736.png" alt="" /></p>
<p>所以又重新下载解压了一次</p>
<pre><code class="language-bash">$ wget -c https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz
--2021-05-19 08:18:56--  https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz
Resolving gethstore.blob.core.windows.net... 40.113.27.176
Connecting to gethstore.blob.core.windows.net|40.113.27.176|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 45363864 (43M) [application/octet-stream]
Saving to: ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’

geth-alltools-darwin-amd64-1.10.4-unsta 100%[=============================================================================&gt;]  43.26M   324KB/s    in 3m 19s

2021-05-19 08:22:16 (223 KB/s) - ‘geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz’ saved [45363864/45363864]

$ tar zxvf geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6.tar.gz
$ cd geth-alltools-darwin-amd64-1.10.4-unstable-b3a1fda6
$ ./abigen --help
abigen [global options] command [command options] [arguments...]

VERSION:
   1.10.4-unstable-b3a1fda6-20210518

COMMANDS:
   help                               Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --abi value                        Path to the Ethereum contract ABI json to bind, - for STDIN
   --bin value                        Path to the Ethereum contract bytecode (generate deploy method)
   --type value                       Struct name for the binding (default = package name)
   --combined-json value              Path to the combined-json file generated by compiler
   --sol value                        Path to the Ethereum contract Solidity source to build and bind
   --solc value                       Solidity compiler to use if source builds are requested (default: &quot;solc&quot;)
   --vy value                         Path to the Ethereum contract Vyper source to build and bind
   --vyper value                      Vyper compiler to use if source builds are requested (default: &quot;vyper&quot;)
   --exc value                        Comma separated types to exclude from binding
   --pkg value                        Package name to generate the binding into
   --out value                        Output file for the generated binding (default = stdout)
   --lang value                       Destination language for the bindings (go, java, objc) (default: &quot;go&quot;)
   --alias value                      Comma separated aliases for function and event renaming, e.g. original1=alias1, original2=alias2
   --help, -h                         show help
   --version, -v                      print the version</code></pre>
<p>安装成功了</p>
<p>本文链接： <a href="https://feilong.tech/2021/05/19/install-abigen">https://feilong.tech/2021/05/19/install-abigen</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>760</wp:post_id>
		<wp:post_date><![CDATA[2021-05-19 08:30:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-19 00:30:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[install-abigen]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="go"><![CDATA[Go]]></category>
		<category domain="category" nicename="etc"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"116.179.32.42";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>464</wp:comment_id>
			<wp:comment_author><![CDATA[yifans]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zhaoyifans@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[207.246.108.219]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-05-28 18:32:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-05-28 10:32:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[龙龙开始写go了？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1622197935.5537601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1622282764.7170179;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"Feilong";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【以太坊】编译智能合约</title>
		<link>https://feilong.tech/2021/05/24/eth-contract-demo/</link>
		<pubDate>Mon, 24 May 2021 14:22:19 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=764</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>智能合约</h4>
<p>说到以太坊开发，就肯定绕不开智能合约。</p>
<p>智能合约，其实是一种协议，就相当于是一种规则，他规定了交易、转账等。智能合约也可以理解成是“一段代码”，开发在通过执行“这段代码”，获得一个结果，这个结果可能是转账结果，或者其他等等。</p>
<p>在开发以太坊的时候，开发者需要先编写智能合约，然后将智能合约部署到对应的以太坊节点，以太坊被部署到不同的服务器上，节点共同维护以太坊公链，调用者通过调用以太坊接口，访问智能合约，获得对应的结果。</p>
<p><img src="/uploads/2021/05/企业微信20210524-220210.png" alt="" /></p>
<h4>remix</h4>
<p>以太坊也给开发者准备了响应的开发工具————remix，线上地址：<a href="https://remix.ethereum.org/#optimize=false&amp;runs=200&amp;evmVersion=null" title="remix-online">remix-online</a>，同时也提供了IDE开发工具，<a href="https://github.com/ethereum/remix-desktop" title="remix-desktop">remix-desktop</a></p>
<p><img src="/uploads/2021/05/企业微信20210524-221218.png" alt="" /></p>
<h5>使用方式</h5>
<p>和普通的IDE工具一样，remix也支持语法高亮和代码提示，以及报错信息</p>
<p><img src="/uploads/2021/05/企业微信20210524-222130.png" alt="" /></p>
<p>开启自动编译之后，就能实时的预览编辑结果，方便我们及时更正语法错误。</p>
<h5>简单的智能合约</h5>
<p>我们编写一个简单的加法智能合约</p>
<pre><code class="language-solidity">contract Test {
    function add(uint8 arg1, uint8 arg2) public pure returns (uint8) {
        return arg1 + arg2;
    }
}</code></pre>
<p><img src="/uploads/2021/05/企业微信20210524-221218.png" alt="" /></p>
<p>一个简单的智能合约就实现了。</p>
<p>本文地址： <a href="https://feilong.tech/2021/05/24/eth-contract-demo/">https://feilong.tech/2021/05/24/eth-contract-demo/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>764</wp:post_id>
		<wp:post_date><![CDATA[2021-05-24 22:22:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-24 14:22:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[eth-contract-demo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="go"><![CDATA[Go]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="etc"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:14:"220.181.108.78";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_advads_ad_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:11:"disable_ads";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[789]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【以太坊】实现ERC20代币智能合约</title>
		<link>https://feilong.tech/2021/05/30/solidity-keyword/</link>
		<pubDate>Sun, 30 May 2021 14:01:11 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=787</guid>
		<description></description>
		<content:encoded><![CDATA[<p>以太坊发布的大多数代币的智能合约，都是参照了“ERC20”的标准协议，本节也主要是根据“ERC20”开发一份代币的智能合约，根据上一节的步骤，提前创建一个FeilongToken.sol的文件</p>
<h4>创建智能合约</h4>
<p>solidity 其实和普通的编程语言有异曲同工之妙，一下的我定义的一些成员变量，我们定义了一些基本的信息，比如代币的名称、代币单位精确的小数点、代币的符号以及发行量。</p>
<pre><code class="language-bash">contract FeilongToken {
    string public name=&quot;Feilong token coin&quot;; // 代币的名称
    uint8 public decimals = 18;// 精确小数点位数
    string public symbol = &quot;FLTC&quot;;//代币符号
    uint public totalPublic = 100;//代币发行量
}</code></pre>
<h4>构造函数</h4>
<p>solidity也支持构造函数的使用</p>
<pre><code class="language-bash">contract FeilongToken {
    string public name=&quot;Feilong token coin&quot;; // 代币的名称
    uint8 public decimals = 18;// 精确小数点位数
    string public symbol = &quot;FLTC&quot;;//代币符号
    uint public totalPublic;//代币发行量

    constructor() public {
        totalPublic = 100;
    }
}</code></pre>
<h4>solidity 关键字</h4>
<p>下面给大家介绍一些常用的关键字</p>
<blockquote>
<h6>public 可以修饰变量和函数，表示合约内部和合约外部都能够进行调用和访问。和其他编程语言功能相同，如果不设置关键字，默认是public类型</h6>
<h6>private 可以修饰变量和函数，表示只能当前合约内部能够进行调用和访问，不能被合约外部和子类进行调用和访问。</h6>
<h6>external 只能用来修饰函数，只能被合约外部的代码进行调用和访问，不能被当前合约内部的代码和子类进行调用和访问。</h6>
<h6>internal 可以修饰变量和函数，但是只能被当前的合约或者子类进行调用和访问，不能被外部进行调用和访问</h6>
<h6>view 只能用来修饰函数，函数内部可以对外部变量进行读取操作，但是不能修改</h6>
<h6>pure 只能用来修饰函数，函数内部不能对外部变量进行读取和修改惭怍，只能对传参进行读写操作</h6>
</blockquote>
<p>这几个关键字，不光是约束了外部对自己的调用，view和pure也约束了自己对外部变量的操作限制。</p>
<pre><code class="language-bash">contract FeilongToken {
    string public name=&quot;Feilong token coin&quot;; // 代币的名称
    uint8 public decimals = 18;// 精确小数点位数
    string public symbol = &quot;FLTC&quot;;//代币符号
    uint public totalPublic;//代币发行量

    constructor() public{
        totalPublic = 100;
    }

    function getHalfPublic() external view returns (uint half) {
        return totalPublic/2;
    }
    function internalFunc() internal view returns (uint half) {
        return totalPublic/2;
    }
}

contract Parent {
    uint64 age = 30;
    address public addr = 0x753B5C00b357b1536aE206C3319582A5A00b9c02;

    function func() public view {
        FeilongToken m = FeilongToken(addr);
        m.getHalfPublic(); // 可以访问
        m.internalFunc(); // 报错，因为internal类型，外部不能进行访问
    }

        function publicFunc() public {
        age += 16;
    }

    function privateFunc() private returns (uint64 ret) {
        uint64 t = internalFunc();
        age = t / 2;
        return age;
    }

    function internalFunc() internal returns (uint64 ret) {
        age *= 2;
        return ret;
    }

    function viewFunc(uint64 arg1) public view returns (uint64 ret) {
        arg1 = arg1 + age + 9; // 这里不会报错，因为view是允许访问函数外部变量的
        age += 7; // 这里会报错，因为是view类型，不能修改外部的变量
        uint64 d = age + arg1;  // 这里不会报错，因为view是允许访问函数外部变量的
        uint64 c = d/2;
        return c;
    }

    function pureFunc(uint64 arg1) public pure returns (uint64 ret) {
        arg1 += 9;
        uint64 d = age + arg1; // 这里会报错，因为pure不允许读取函数外部的变量
        return arg1;
    }
}

contract child is Parent {
    function usePrivateFunc() public returns (uint64 ret) {
        uint64 v = privateFunc(); // 这里进行报错，因为private的函数不能被继承
    }

    function useInternalFunc() public returns (uint64 ret) {
        uint64 v = internalFunc();// 这里不会报错，因为internal的函数可以被继承
        return v;
    }
}
</code></pre>
<h4>总结</h4>
<p>solidity的语法其实和其他编程语言类似，但是有所不同。我们一般的语言，大多数都是限制了外部对自己的调用权限控制，solidity也限定了函数本身对外部的操作。比如view和pure，限制了自己对外部变量的读取和修改的权限控制。这个是其中一个不同点。</p>
<p>本文链接： <a href="https://feilong.tech/solidity-keyword">https://feilong.tech/solidity-keyword</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>787</wp:post_id>
		<wp:post_date><![CDATA[2021-05-30 22:01:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-30 14:01:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[solidity-keyword]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="go"><![CDATA[Go]]></category>
		<category domain="category" nicename="etc"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<category domain="post_tag" nicename="%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6"><![CDATA[智能合约]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_advads_ad_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:11:"disable_ads";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:13:"72.14.199.114";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[788]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【以太坊】实现智能合约授权与余额转账</title>
		<link>https://feilong.tech/2021/06/07/approve_transfer/</link>
		<pubDate>Mon, 07 Jun 2021 14:06:30 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=794</guid>
		<description></description>
		<content:encoded><![CDATA[<p>上一节实现了智能合约的基本编写以及solidity的基本的函数修饰关键字。这一节开始进行合约的授权和余额的转账。</p>
<h3>代币授权</h3>
<p>首先，代币的授权与余额是一个map，对应key是以太坊钱包的地址，value是对应的授权额度，查询的时间复杂度是O(1)，查询效率会比较高。现在需要实现的是代币余额查询（balanceOf），代币的额度申请（approve）和授权额度查询（allowance）这三个函数。</p>
<pre><code class="language-bash">
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    // 根据地址获取获取代币金额 
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    // 授权额度申请 
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }</code></pre>
<p>在approve函数中，emit的关键字含义是触发一个事件授权事件<code>Approval</code>。</p>
<p>我们在发布智能合约的第一件事，就是设置代币总金额：</p>
<pre><code class="language-bash">    constructor() public{
        totalPublic = 1000000000;
        balances[msg.sender] = totalPublic;
    }</code></pre>
<p>其中<code>msg.sender</code>代表智能合约发布者的以太坊地址，我们把发行量<code>totalPublic</code>给予了这个地址。当然这个是可以控制的，只给予一小部分也是允许的。</p>
<h3>转账函数</h3>
<p>一下是智能合约的转账函数：</p>
<pre><code class="language-bash">   // 转账 
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] &gt;= _value);
        require(balances[_to] + _value &gt;= balances[_to]);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
</code></pre>
<p>转账函数的一些参数校验，一般使用solidity语法中的require函数，首先，验真剩余的额度不能小于转账额度；转账的额度不能是赋值；依次在对收款方和付款方进行额度的增加和减少；然后触发转账事件<code>Transfer</code>,把对应的数据写到区块里面。
以上的这个函数，只是合约发布方转账给其他地址。还会有地址之间的代币转账：</p>
<pre><code class="language-bash">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 allowanceValue = allowed[_from][msg.sender];
        require(balances[_from] &gt;= _value &amp;&amp; allowanceValue &gt;= _value);
        require(balances[_to] + _value &gt; balances[_to]);
        allowed[_from][msg.sender] -= _value;
        balances[_to] += _value;
        balances[_from] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }</code></pre>
<p>至此，一份标准的ERC20代币的智能合约就编写完成了，完整代码如下：</p>
<pre><code class="language-bash">contract FeilongToken {
    string public name=&quot;Feilong token coin&quot;; // 代币的名称
    uint8 public decimals = 18;// 精确小数点位数
    string public symbol = &quot;FLTC&quot;;//代币符号
    uint public totalPublic;//代币发行量

    mapping (address =&gt; uint256) public balances;// 余额map 
    mapping (address =&gt; mapping(address =&gt;uint256)) public allowed;// 授权map

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    constructor() public{
        totalPublic = 1000000000;
        balances[msg.sender] = totalPublic;
    }

    // 根据地址获取获取代币金额 
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    // 授权额度申请 
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    // 根据 _owner和 _spender查询 _owner给 _spender授权了多少额度 
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    // 转账 
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] &gt;= _value);
        require(balances[_to] + _value &gt;= balances[_to]);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 allowanceValue = allowed[_from][msg.sender];
        require(balances[_from] &gt;= _value &amp;&amp; allowanceValue &gt;= _value);
        require(balances[_to] + _value &gt; balances[_to]);
        allowed[_from][msg.sender] -= _value;
        balances[_to] += _value;
        balances[_from] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

}</code></pre>
<h3>合约的代码安全</h3>
<p>由于智能合约是代码编写的，所以就可能存在代码的漏洞。最著名的合约的漏洞是2018年的“美链BEC合约漏洞事件”。该事件的后果就是“BEC”代币价值归零，以下是漏洞代码：</p>
<pre><code class="language-bash">    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
        uint cnt = _receivers.length;
        uint256 amount = uint256(cnt) * _value;
        require(cnt &gt; 0 &amp;&amp; cnt &lt;= 20);
        require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);

        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i &lt; cnt; i++) {
            balances[_receivers[i]] = balances[_receivers[i]].add(_value);
            Transfer(msg,sender, _receivers[i], _value);
        }
        return true;
    }</code></pre>
<p>batchTransfer是一个批量函数，可以实现批量转账，但是代码<code>uint256 amount = uint256(cnt) * _value</code>存在风险，加入<code>_value</code>是一个在uint256范围内，但是乘以cnt得到的<code>amount</code>超过了uint256而造成溢出，就会变成一个比较小的数字，当执行代码<code>require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);</code>也校验通过了，在循环执行转账操作的时候就会出现扣除很少的<code>amount</code>，而收款方获得了很大的<code>_value</code>，造成了资产的被盗。</p>
<p>解决这种溢出，可以通过除法进行验证，比如：</p>
<pre><code class="language-bash">    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
        uint cnt = _receivers.length;
        uint256 amount = uint256(cnt) * _value;
        require(_value &gt; 0 &amp;&amp; amount / _value == cnt);
        require(cnt &gt; 0 &amp;&amp; cnt &lt;= 20);
        require(_value &gt; 0 &amp;&amp; balances[msg.sender] &gt;= amount);

        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i &lt; cnt; i++) {
            balances[_receivers[i]] = balances[_receivers[i]].add(_value);
            Transfer(msg,sender, _receivers[i], _value);
        }
        return true;
    }</code></pre>
<p>以上只是合约安全的一个简单的例子。在实际开发中，涉及到复杂的运算，一定要谨慎编写代码，以免出现代码漏洞。</p>
<p>本文链接：<a href="https://feilong.tech/approve_transfer/">https://feilong.tech/approve_transfer/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>794</wp:post_id>
		<wp:post_date><![CDATA[2021-06-07 22:06:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-07 14:06:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[approve_transfer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="token"><![CDATA[token]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<category domain="post_tag" nicename="%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6"><![CDATA[智能合约]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_advads_ad_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:11:"disable_ads";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[is_post_view]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:12:"66.249.72.80";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[bash]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【以太坊】公链上的合约</title>
		<link>https://feilong.tech/2021/06/16/contract-eth/</link>
		<pubDate>Wed, 16 Jun 2021 14:38:37 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=797</guid>
		<description></description>
		<content:encoded><![CDATA[<p>发布智能合约指的就是把智能合约发布到以太坊公链上。但是如果一旦发布到了公链上，那么智能合约就不能再更改了，这里值的更改，含义是修改已经发布的智能合约的代码。所以，这是一个不可逆的过程。</p>
<p>一般来说，编写完智能合约，会先发布到<a href="https://rinkeby.etherscan.io/" title="以太坊测试网络的公链">以太坊测试网络的公链</a>上，经过反复的测试，然后再发布到<a href="https://cn.etherscan.com/" title="以太坊公链">以太坊公链</a>上。</p>
<p>在公链上，我们可以搜索到已经发布的代币</p>
<p><img src="/uploads/2021/06/iShot2021-06-16-22.41.21.png" alt="" /></p>
<p>也可以在代币的详情页面，查看持有者和合约的信息，发布的代币数量，等等</p>
<p><img src="/uploads/2021/06/iShot2021-06-16-22.41.53.png" alt="" /></p>
<p><img src="/uploads/2021/06/iShot2021-06-16-22.46.47.png" alt="" /></p>
<p>上面说到，发布智能合约后，不能进行修改，如果真的公链上的合约出现问题怎么办呢？</p>
<p>这种情况下只能重新发布一份智能合约了，把之前的智能合约废弃掉。</p>
<p>但是如果之前的发布的代币已经开始交易了，这里有一个思路，可以选择一个固定的区块高度，然后把这个区块高度的持有者的代币映射到新的合约上，宣布旧合约作废。这种操作其实对于持有者是有损失的，因为在这个高度之后的交易，其实是无效的。所以为了杜绝这种情况的发生，在测试阶段，一定要充分的进行测试才能发布到公链上。</p>
<p>本文链接： <a href="https://feilong.tech/2021/06/16/contract-eth">https://feilong.tech/2021/06/16/contract-eth</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>797</wp:post_id>
		<wp:post_date><![CDATA[2021-06-16 22:38:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-16 14:38:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[contract-eth]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="etc"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e4%bb%a5%e5%a4%aa%e5%9d%8a"><![CDATA[以太坊]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9d%97%e9%93%be"><![CDATA[区块链]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_advads_ad_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:11:"disable_ads";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[807]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Docker版本Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错的解决方法</title>
		<link>https://feilong.tech/2021/10/04/docker%e7%89%88%e6%9c%acmysql5-7%e5%8f%8a%e4%bb%a5%e4%b8%8a%e7%89%88%e6%9c%ac-only_full_group_by%e6%8a%a5%e9%94%99%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/</link>
		<pubDate>Mon, 04 Oct 2021 08:26:24 +0000</pubDate>
		<dc:creator><![CDATA[Feilong]]></dc:creator>
		<guid isPermaLink="false">https://feilong.tech/?p=812</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>背景</h2>
<p>最近开发的时候，需要使用MySQL的数据库，在使用group by的时候，生产环境使用的是5.6版本，但是开发机上面装的docker版本是5.7，在调用接口的时候，发现报错了，通过查询对应的资料，是因为mysql 5.7版本，默认开启了<code>ONLY_FULL_GROUP_BY</code>，所以在使用group by的时候，不能存在多余的字段信息。</p>
<h2>现象回顾</h2>
<h3>表结构准备</h3>
<pre><code class="language-mysql">CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `sex` varchar(255) DEFAULT NULL,
  `age` int DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</code></pre>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>sex</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>张三</td>
<td>男</td>
<td>21</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>男</td>
<td>20</td>
</tr>
<tr>
<td>3</td>
<td>小花</td>
<td>女</td>
<td>21</td>
</tr>
</tbody>
</table>
<p>执行SQL</p>
<pre><code class="language-mysql">SELECT * FROM `user` GROUP BY age</code></pre>
<p>出现报错<code>1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#039;test.user.id&#039; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by, Time: 0.064000s</code></p>
<h3>原因分析</h3>
<p>MySQL的官方文档，给出如下的解释:</p>
<blockquote>
<p>MySQL 5.7.5 and later implements detection of functional dependence. If the <a href="https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY</code></a> SQL mode is enabled (which it is by default), MySQL rejects queries for which the select list, <code>HAVING</code> condition, or <code>ORDER BY</code> list refer to nonaggregated columns that are neither named in the <code>GROUP BY</code> clause nor are functionally dependent on them. (Before 5.7.5, MySQL does not detect functional dependency and <a href="https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY</code></a> is not enabled by default. For a description of pre-5.7.5 behavior, see the <a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html">MySQL 5.6 Reference Manual</a>.)</p>
</blockquote>
<p>官方大致的意思是说，在5.7.5版本之后，将会开启<code>ONLY_FULL_GROUP_BY</code>，开启此配置之后，在select、having或者order by的时候，将拒绝使用非聚合列的查询。</p>
<p>针对上述的SQL，也就是在select+group by的时候，只能查询与group by相关列的查询。</p>
<h2>解决办法</h2>
<h3>方法一：优化SQL</h3>
<p>其实个人觉得，最好的办法，就是优化SQL，剔除掉无关的查询操作，将与group by相关的查询去掉:</p>
<p><code>SELECT count(1), age FROM user GROUP BY age</code></p>
<h3>方法二：更改配置文件</h3>
<p>将容器的内的配置文件，拷贝到宿主机，挂接映射关系，然后在mysqld下增加sql_mode的配置
<code>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</code></p>
<p>docker-compose.yml</p>
<pre><code class="language-yaml">version: &#039;3.1&#039;

services:

  db:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - /root/docker-mysql/conf/mysql:/etc/mysql
      - /root/docker-mysql/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
    container_name: test-mysql
    ports:
      - 3307:3306</code></pre>
<p>my.cnf</p>
<pre><code>[mysqld]
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
datadir         = /var/lib/mysql
sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
secure-file-priv= NULL
# Custom config should go here
!includedir /etc/mysql/conf.d/</code></pre>
<p>重启容器，查看效果</p>
<pre><code class="language-mysql">mysql&gt; SELECT @@sql_mode;
+----------------------------------------------------------------------------------------------------+
| @@sql_mode                                                                                         |
+----------------------------------------------------------------------------------------------------+
| STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |
+----------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT * FROM user GROUP BY age;
+----+--------+------+------+
| id | name   | sex  | age  |
+----+--------+------+------+
|  1 | 张三 | 男  |   21 |
|  2 | 李四 | 男  |   20 |
+----+--------+------+------+
2 rows in set (0.00 sec)</code></pre>
<h3>方法三：更改启动命令</h3>
<p>docker-compose.yml</p>
<pre><code class="language-yaml">version: &#039;3.1&#039;

services:

  db:
    image: mysql
    command: mysqld --sql_mode=&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&quot; --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - /root/docker-mysql/conf/mysql:/etc/mysql
      - /root/docker-mysql/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
    container_name: test-mysql
    ports:
      - 3307:3306</code></pre>
<p>销毁容器：<code>docker-compose down</code>
重启容器：<code>docker-compose up -d</code></p>
<p>查看效果：</p>
<pre><code class="language-mysql">mysql&gt; SELECT @@sql_mode;
+----------------------------------------------------------------------------------------------------+
| @@sql_mode                                                                                         |
+----------------------------------------------------------------------------------------------------+
| STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |
+----------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; set names utf8;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; SELECT * FROM user GROUP BY age;
+----+--------+------+------+
| id | name   | sex  | age  |
+----+--------+------+------+
|  1 | 张三 | 男  |   21 |
|  2 | 李四 | 男  |   20 |
+----+--------+------+------+
2 rows in set (0.00 sec)</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>812</wp:post_id>
		<wp:post_date><![CDATA[2021-10-04 16:26:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-04 08:26:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[docker%e7%89%88%e6%9c%acmysql5-7%e5%8f%8a%e4%bb%a5%e4%b8%8a%e7%89%88%e6%9c%ac-only_full_group_by%e6%8a%a5%e9%94%99%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[MySQL]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_advads_ad_settings]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:11:"disable_ads";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[yaml]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
